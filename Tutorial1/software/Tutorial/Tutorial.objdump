
Tutorial.elf:     file format elf32-littlenios2
Tutorial.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0008019c

Program Header:
    LOAD off    0x00001020 vaddr 0x00104020 paddr 0x00080000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0008019c paddr 0x0008019c align 2**12
         filesz 0x00015858 memsz 0x00015858 flags r-x
    LOAD off    0x000179f4 vaddr 0x000959f4 paddr 0x000974d8 align 2**12
         filesz 0x00001ae4 memsz 0x00001ae4 flags rw-
    LOAD off    0x00019fbc vaddr 0x00098fbc paddr 0x00098fbc align 2**12
         filesz 0x00000000 memsz 0x00005574 flags rw-
    LOAD off    0x0001a000 vaddr 0x00104000 paddr 0x00104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00104000  00104000  0001a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00104020  00080000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000153a4  0008019c  0008019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b4  00095540  00095540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae4  000959f4  000974d8  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005574  00098fbc  00098fbc  00019fbc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  0001a048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001ff1  00000000  00000000  0001ae20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f34e  00000000  00000000  0001ce11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009187  00000000  00000000  0004c15f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001ab32  00000000  00000000  000552e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002460  00000000  00000000  0006fe18  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002454  00000000  00000000  00072278  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cf20  00000000  00000000  000746cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000815ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  00081600  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00086709  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008670f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008671b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008671c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008671d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00086721  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00086725  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00086729  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00086734  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0008673f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0008674a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003a  00000000  00000000  00086757  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  00086791  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003689d  00000000  00000000  0008b9fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00104000 l    d  .entry	00000000 .entry
00104020 l    d  .exceptions	00000000 .exceptions
0008019c l    d  .text	00000000 .text
00095540 l    d  .rodata	00000000 .rodata
000959f4 l    d  .rwdata	00000000 .rwdata
00098fbc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080470 l     F .text	00000058 __sprint_r
000955fe l     O .rodata	00000010 blanks.3452
000955ee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000824ec l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00083f14 l     F .text	00000058 std
00084020 l     F .text	00000008 __fp_lock
00084028 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000959f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00097428 l     O .rwdata	00000004 charset
00095634 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0009577c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000883d4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00089500 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00089e3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00089e9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00089fa0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008a0c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008a1a4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008a304 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0008a550 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0009744c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008a808 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00097450 l     O .rwdata	00000004 lockid
00098fe8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00097454 l     O .rwdata	00000004 lockid
00098ff0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0008c240 l     F .text	00000044 OS_InitMisc
0008c284 l     F .text	0000006c OS_InitRdyList
0008c3e8 l     F .text	000000e0 OS_InitTCBList
0008c164 l     F .text	000000dc OS_InitEventList
0008c2f0 l     F .text	0000007c OS_InitTaskIdle
0008c36c l     F .text	0000007c OS_InitTaskStat
0008c65c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0008e57c l     F .text	00000110 OS_FlagTaskRdy
0008e2d4 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000963b0 l     O .rwdata	0000106c jtag_uart_0
00092ec4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0009317c l     F .text	000002c4 altera_avalon_jtag_uart_irq
00093440 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00093c58 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00093f7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0009438c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000944dc l     F .text	000000f8 alt_file_locked
00094760 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0009531c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000954d0 l     F .text	00000040 alt_sim_halt
00085d04 g     F .text	00000094 _mprec_log10
000974a2 g     O .rwdata	00000002 OSTaskNameSize
00085df0 g     F .text	00000088 __any_on
000875a8 g     F .text	00000070 _isatty_r
00095754 g     O .rodata	00000028 __mprec_tinytens
0008a364 g     F .text	000000c8 alt_main
00080348 g     F .text	000000a0 _puts_r
0009e2a0 g     O .bss	00000100 alt_irq
00087618 g     F .text	00000078 _lseek_r
0008ee70 g     F .text	000000d4 OS_MemInit
000974d8 g       *ABS*	00000000 __flash_rwdata_start
00092dd0 g     F .text	00000064 OSTimeSet
00088ef4 g     F .text	00000088 __eqdf2
0008adbc g     F .text	000006b4 OSEventPendMulti
0009e530 g       *ABS*	00000000 __alt_heap_start
00094d68 g     F .text	00000020 OSTaskCreateHook
0009907c g     O .bss	00002000 task1_stk
000802d0 g     F .text	00000044 printf
0009747a g     O .rwdata	00000002 OSMboxEn
0008b4c4 g     F .text	0000007c OSIntEnter
00087060 g     F .text	00000068 __sseek
00083f7c g     F .text	000000a4 __sinit
0009748a g     O .rwdata	00000002 OSQEn
00084c88 g     F .text	00000084 _setlocale_r
0008407c g     F .text	0000009c __sfmoreglue
0008aa78 g     F .text	000000d0 __malloc_unlock
00094dc4 g     F .text	0000001c OSTaskStatHook
00098ff8 g     O .bss	00000001 OSLockNesting
000974c8 g     O .rwdata	00000002 OSDataSize
00098ff9 g     O .bss	00000001 OSRunning
00085780 g     F .text	000000e0 memmove
00094dfc g     F .text	0000001c OSInitHookBegin
000974c0 g     O .rwdata	00000002 OSTmrSize
0008406c g     F .text	00000010 _cleanup
00085e78 g     F .text	000000bc _Balloc
00098ffc g     O .bss	00000004 OSIdleCtr
00089004 g     F .text	00000088 __gtdf2
00094a34 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0008c990 g     F .text	000002e0 OS_TCBInit
00104000 g     F .entry	0000000c __reset
000974c6 g     O .rwdata	00000002 OSTmrWheelTblSize
00080000 g       *ABS*	00000000 __flash_exceptions_start
00097466 g     O .rwdata	00000002 OSEventSize
00099000 g     O .bss	00000001 OSPrioHighRdy
00087534 g     F .text	00000074 _fstat_r
00094d88 g     F .text	00000020 OSTaskDelHook
00098fd4 g     O .bss	00000004 errno
00094a14 g       .text	00000000 OSStartHighRdy
00091588 g     F .text	00000200 OSTaskCreateExt
0008ddf0 g     F .text	00000068 OSFlagPendGetFlagsRdy
000974a6 g     O .rwdata	00000002 OSTaskStatStkSize
0008cdfc g     F .text	00000334 OSFlagAccept
0008f5ac g     F .text	000000c8 OSQFlush
0008ef44 g     F .text	00000154 OSQAccept
00098fe0 g     O .bss	00000004 alt_argv
0009f41c g       *ABS*	00000000 _gp
000913b4 g     F .text	000001d4 OSTaskCreate
00090e40 g     F .text	00000574 OSTaskChangePrio
00098ff4 g     O .bss	00000004 alt_heapsem
0008cc70 g     F .text	0000018c OSDebugInit
00091788 g     F .text	0000040c OSTaskDel
00096230 g     O .rwdata	00000180 alt_fd_list
0009b07c g     O .bss	00000370 OSFlagTbl
0008bf40 g     F .text	000000b8 OS_EventTaskRemove
00094e70 g     F .text	00000094 alt_find_dev
000856e0 g     F .text	000000a0 memcpy
00097490 g     O .rwdata	00000002 OSRdyTblSize
00084060 g     F .text	0000000c _cleanup_r
0008919c g     F .text	000000f8 __floatsidf
00094464 g     F .text	00000078 alt_io_redirect
00089114 g     F .text	00000088 __ltdf2
00095540 g       *ABS*	00000000 __DTOR_END__
000803e8 g     F .text	00000014 puts
0008ab48 g     F .text	00000130 OSEventNameGet
00097474 g     O .rwdata	00000002 OSFlagMax
00085c54 g     F .text	000000b0 __ratio
0008b540 g     F .text	00000100 OSIntExit
000974ae g     O .rwdata	00000002 OSTCBSize
00099001 g     O .bss	00000001 OSPrioCur
000936bc g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080314 g     F .text	00000034 _printf_r
00104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008963c g     F .text	00000008 __udivsi3
0008a000 g     F .text	000000c4 isatty
00097494 g     O .rwdata	00000002 OSStkWidth
00095664 g     O .rodata	000000c8 __mprec_tens
00097488 g     O .rwdata	00000002 OSPtrSize
00084c64 g     F .text	00000008 __locale_charset
00097468 g     O .rwdata	00000002 OSEventTblSize
00094988 g       .text	00000000 OSCtxSw
00098fc8 g     O .bss	00000004 __malloc_top_pad
00099004 g     O .bss	00000004 OSTCBList
00098fd8 g     O .bss	00000004 alt_fd_list_lock
00097424 g     O .rwdata	00000004 __mb_cur_max
00084c6c g     F .text	0000000c _localeconv_r
000865dc g     F .text	0000003c __i2b
00084648 g     F .text	0000049c __sfvwrite_r
0009b3ec g     O .bss	00000c30 OSMemTbl
00099008 g     O .bss	00000001 OSTickStepState
00086fe8 g     F .text	00000070 _sbrk_r
0009748c g     O .rwdata	00000002 OSQMax
0009c01c g     O .bss	00000800 OSTaskStatStk
0008ea58 g     F .text	0000010c OSMemNameGet
0009746c g     O .rwdata	00000002 OSFlagEn
00087690 g     F .text	00000078 _read_r
000974b2 g     O .rwdata	00000002 OSTimeTickHookEn
0008fb10 g     F .text	00000180 OSQPost
0008e68c g     F .text	000000ac OS_FlagUnlink
00095df4 g     O .rwdata	0000000c __lc_ctype
00097444 g     O .rwdata	00000004 alt_max_fd
0008c51c g     F .text	0000006c OS_MemCopy
0008c588 g     F .text	000000d4 OS_Sched
00089b3c g     F .text	00000138 __unpack_d
00087410 g     F .text	00000110 _fclose_r
0008e954 g     F .text	00000104 OSMemGet
00091ebc g     F .text	000001c4 OSTaskNameSet
00083ee0 g     F .text	00000034 fflush
00098fcc g     O .bss	00000004 __malloc_max_sbrked_mem
0009900c g     O .bss	00000004 OSCtxSwCtr
00094de0 g     F .text	0000001c OSTimeTickHook
00097476 g     O .rwdata	00000002 OSFlagNameSize
0008bff8 g     F .text	00000104 OS_EventTaskRemoveMulti
00088864 g     F .text	00000074 __adddf3
0008bdec g     F .text	00000154 OS_EventTaskWaitMulti
00085b34 g     F .text	00000120 __b2d
0009748e g     O .rwdata	00000002 OSQSize
00087d74 g     F .text	00000660 __umoddi3
0008a210 g     F .text	000000f4 lseek
000906ec g     F .text	0000027c OSSemPend
00097420 g     O .rwdata	00000004 _global_impure_ptr
00086984 g     F .text	000005f4 _realloc_r
00097478 g     O .rwdata	00000002 OSLowestPrio
0009e530 g       *ABS*	00000000 __bss_end
00094294 g     F .text	000000f8 alt_iic_isr_register
00094e50 g     F .text	00000020 OSTCBInitHook
000974be g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00094858 g     F .text	00000110 alt_tick
00087708 g     F .text	0000066c __udivdi3
00097460 g     O .rwdata	00000002 OSEventEn
0009572c g     O .rodata	00000028 __mprec_bigtens
00086864 g     F .text	00000120 __s2b
000974ba g     O .rwdata	00000002 OSTmrCfgNameSize
0008936c g     F .text	00000194 __floatunsidf
00085a54 g     F .text	00000060 __mcmp
00084048 g     F .text	00000018 __fp_lock_all
0009424c g     F .text	00000048 alt_ic_irq_enabled
0008e498 g     F .text	000000e4 OS_FlagInit
000947c0 g     F .text	00000098 alt_alarm_stop
0009749c g     O .rwdata	00000002 OSTaskIdleStkSize
00099048 g     O .bss	00000004 alt_irq_active
00090278 g     F .text	000000c0 OSSemAccept
0008ec84 g     F .text	000000f0 OSMemPut
0008e738 g     F .text	0000021c OSMemCreate
00099010 g     O .bss	00000004 OSIdleCtrMax
001040ec g     F .exceptions	000000d0 alt_irq_handler
00096208 g     O .rwdata	00000028 alt_dev_null
000974b0 g     O .rwdata	00000002 OSTicksPerSec
00094988 g       .text	00000000 OSIntCtxSw
00093eac g     F .text	0000001c alt_dcache_flush_all
00085920 g     F .text	00000070 __hi0bits
00089294 g     F .text	000000d8 __fixdfsi
00099014 g     O .bss	00000004 OSTCBFreeList
000974d8 g       *ABS*	00000000 __ram_rwdata_end
00090968 g     F .text	0000017c OSSemPendAbort
0009743c g     O .rwdata	00000008 alt_dev_list
0008a6e4 g     F .text	00000124 write
000974b4 g     O .rwdata	00000002 OSVersionNbr
000959f4 g       *ABS*	00000000 __ram_rodata_end
00089ec8 g     F .text	000000d8 fstat
0009745c g     O .rwdata	00000004 OSEndiannessTest
00086744 g     F .text	00000120 __pow5mult
00098fbc g     O .bss	00000004 __nlocale_changed
00089644 g     F .text	00000008 __umodsi3
0009746e g     O .rwdata	00000002 OSFlagGrpSize
0009e530 g       *ABS*	00000000 end
00093044 g     F .text	00000138 altera_avalon_jtag_uart_init
0008c800 g     F .text	000000c8 OS_TaskStat
0009553c g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
00093cc8 g     F .text	00000090 alt_avalon_timer_sc_init
000897a8 g     F .text	00000080 __clzsi2
0009397c g     F .text	000002dc altera_avalon_jtag_uart_write
00083f6c g     F .text	00000004 __sfp_lock_acquire
000855fc g     F .text	000000e4 memchr
0008c4c8 g     F .text	00000054 OS_MemClr
000804c8 g     F .text	00001ec4 ___vfprintf_internal_r
00094a58 g     F .text	00000310 OSTaskStkInit
000801d8 g     F .text	00000068 task1
00084334 g     F .text	00000314 _free_r
0008bb48 g     F .text	00000194 OS_EventTaskRdy
00095320 g     F .text	000001b0 __call_exitprocs
00099018 g     O .bss	00000001 OSCPUUsage
00098fc0 g     O .bss	00000004 __mlocale_changed
00097430 g     O .rwdata	00000004 __malloc_sbrk_base
0008019c g     F .text	0000003c _start
0009904c g     O .bss	00000004 _alt_tick_rate
0008f674 g     F .text	00000320 OSQPend
00092880 g     F .text	0000014c OSTimeDly
0008623c g     F .text	0000014c __lshift
00099050 g     O .bss	00000004 _alt_nticks
0008a42c g     F .text	00000124 read
00092e68 g     F .text	0000005c alt_sys_init
000951e8 g     F .text	00000134 __register_exitproc
00099019 g     O .bss	00000001 OSTaskCtr
000929cc g     F .text	00000190 OSTimeDlyHMSM
00086388 g     F .text	00000254 __multiply
00093554 g     F .text	00000074 altera_avalon_jtag_uart_close
0008964c g     F .text	00000038 __mulsi3
000959f4 g       *ABS*	00000000 __ram_rwdata_start
00095540 g       *ABS*	00000000 __ram_rodata_start
00099054 g     O .bss	00000028 __malloc_current_mallinfo
00097462 g     O .rwdata	00000002 OSEventMax
00085f34 g     F .text	0000017c __d2b
00090ae4 g     F .text	00000128 OSSemPost
0008b6cc g     F .text	000000e4 OSSchedUnlock
00092efc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00095024 g     F .text	00000104 alt_get_fd
0009901c g     O .bss	00000004 OSMemFreeList
0008b820 g     F .text	000000ac OSStatInit
0008e200 g     F .text	000000d4 OSFlagQuery
00089c74 g     F .text	000000c8 __fpcmp_parts_d
00097498 g     O .rwdata	00000002 OSTaskCreateExtEn
000873a0 g     F .text	00000070 _close_r
00095174 g     F .text	00000074 memcmp
0008bb2c g     F .text	0000001c OS_Dummy
00092fac g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0009e530 g       *ABS*	00000000 __alt_stack_base
00092ff4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000823b0 g     F .text	0000013c __swsetup_r
0009c81c g     O .bss	000001e0 OSQTbl
00088c9c g     F .text	00000258 __divdf3
00084118 g     F .text	000000f0 __sfp
00085d98 g     F .text	00000058 __copybits
00095e00 g     O .rwdata	00000408 __malloc_av_
00083f78 g     F .text	00000004 __sinit_lock_release
00099020 g     O .bss	00000004 OSTCBHighRdy
000888d8 g     F .text	000003c4 __muldf3
00087144 g     F .text	00000060 __sread
00099024 g     O .bss	00000004 OSQFreeList
00094f04 g     F .text	00000120 alt_find_file
00093ec8 g     F .text	000000b4 alt_dev_llist_insert
0008a970 g     F .text	00000108 __malloc_lock
0008a628 g     F .text	000000bc sbrk
0008ac78 g     F .text	00000144 OSEventNameSet
00083ce4 g     F .text	000001fc _fflush_r
000872d8 g     F .text	000000c8 _calloc_r
00099028 g     O .bss	00000001 OSRdyGrp
00098fbc g       *ABS*	00000000 __bss_start
00085860 g     F .text	00000098 memset
00080240 g     F .text	00000090 main
00098fe4 g     O .bss	00000004 alt_envp
00098fd0 g     O .bss	00000004 __malloc_max_total_mem
00092f54 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000958bc g     O .rodata	00000100 OSUnMapTbl
00097492 g     O .rwdata	00000002 OSSemEn
0008de58 g     F .text	000003a8 OSFlagPost
00087058 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00087520 g     F .text	00000014 fclose
0008bcdc g     F .text	00000110 OS_EventTaskWait
0008c8c8 g     F .text	000000c8 OS_TaskStatStkChk
0009e3a0 g     O .bss	00000190 _atexit0
00091b94 g     F .text	00000170 OSTaskDelReq
00082730 g     F .text	000015b4 _dtoa_r
00084ebc g     F .text	00000740 _malloc_r
00097448 g     O .rwdata	00000004 alt_errno
0008b7b0 g     F .text	00000070 OSStart
0008a914 g     F .text	0000005c __env_unlock
00084bac g     F .text	000000b8 _fwalk
00092080 g     F .text	00000218 OSTaskResume
0008ed74 g     F .text	000000fc OSMemQuery
000974a4 g     O .rwdata	00000002 OSTaskStatEn
0009747e g     O .rwdata	00000002 OSMemMax
0008fc90 g     F .text	00000188 OSQPostFront
0008957c g     F .text	00000060 __divsi3
00099029 g     O .bss	00000003 OSRdyTbl
00097458 g     O .rwdata	00000002 OSDebugEn
00095788 g     O .rodata	00000014 __thenan_df
00084208 g     F .text	0000012c _malloc_trim_r
00095540 g       *ABS*	00000000 __CTOR_END__
00097470 g     O .rwdata	00000002 OSFlagNodeSize
000974b8 g     O .rwdata	00000002 OSTmrCfgMax
000871a4 g     F .text	000000bc strcmp
0008f098 g     F .text	00000214 OSQCreate
00091d04 g     F .text	000001b8 OSTaskNameGet
00095540 g       *ABS*	00000000 __flash_rodata_start
0008fe18 g     F .text	00000234 OSQPostOpt
0008b8cc g     F .text	00000240 OSTimeTick
000974a0 g     O .rwdata	00000002 OSTaskMax
00095540 g       *ABS*	00000000 __DTOR_LIST__
00090338 g     F .text	00000114 OSSemCreate
000974c4 g     O .rwdata	00000002 OSTmrWheelSize
00088f7c g     F .text	00000088 __nedf2
0009749a g     O .rwdata	00000002 OSTaskDelEn
00080000 g       *ABS*	00000000 __alt_mem_sram_0
00090c0c g     F .text	00000130 OSSemQuery
0008f2ac g     F .text	00000300 OSQDel
0008f994 g     F .text	0000017c OSQPendAbort
00092e34 g     F .text	00000034 alt_irq_init
0008a5b0 g     F .text	00000078 alt_release_fd
0009579c g     O .rodata	00000100 __clz_tab
00098fc4 g     O .bss	00000004 _PathLocale
00095128 g     F .text	00000014 atexit
00087260 g     F .text	00000078 _write_r
0008b640 g     F .text	0000008c OSSchedLock
00084d0c g     F .text	0000001c setlocale
0008d130 g     F .text	0000013c OSFlagCreate
0009741c g     O .rwdata	00000004 _impure_ptr
00098fdc g     O .bss	00000004 alt_argc
00094040 g     F .text	00000064 _do_dtors
0009746a g     O .rwdata	00000002 OSEventMultiEn
0008d26c g     F .text	000002a8 OSFlagDel
0009902c g     O .bss	00000004 OSEventFreeList
00104020 g       .exceptions	00000000 alt_irq_entry
00085ab4 g     F .text	00000080 __ulp
00086f78 g     F .text	00000040 __isinfd
0008d7ac g     F .text	00000644 OSFlagPend
000974b6 g     O .rwdata	00000002 OSTmrEn
00084030 g     F .text	00000018 __fp_unlock_all
00097434 g     O .rwdata	00000008 alt_fs_list
0008c6cc g     F .text	00000080 OS_StrCopy
00097480 g     O .rwdata	00000002 OSMemNameSize
00094e18 g     F .text	0000001c OSInitHookEnd
00104020 g       *ABS*	00000000 __ram_exceptions_start
000974ac g     O .rwdata	00000002 OSTCBPrioTblMax
00084c78 g     F .text	00000010 localeconv
000974a8 g     O .rwdata	00000002 OSTaskStatStkChkEn
000940c0 g     F .text	00000050 alt_ic_isr_register
0009747c g     O .rwdata	00000002 OSMemEn
00097486 g     O .rwdata	00000002 OSMutexEn
000974d8 g       *ABS*	00000000 _edata
0009e530 g       *ABS*	00000000 _end
00099030 g     O .bss	00000001 OSIntNesting
001041bc g       *ABS*	00000000 __ram_exceptions_end
000935c8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00092b5c g     F .text	00000210 OSTimeDlyResume
0008d658 g     F .text	00000154 OSFlagNameSet
00092298 g     F .text	000001fc OSTaskStkChk
000941ac g     F .text	000000a0 alt_ic_irq_disable
00097482 g     O .rwdata	00000002 OSMemSize
000870c8 g     F .text	0000007c __swrite
0009742c g     O .rwdata	00000004 __malloc_trim_threshold
00094968 g     F .text	00000020 altera_nios2_qsys_irq_init
00099034 g     O .bss	00000004 OSTCBCur
0009513c g     F .text	00000038 exit
00097484 g     O .rwdata	00000002 OSMemTblSize
00084ae4 g     F .text	000000c8 _fwalk_reent
000860b0 g     F .text	0000018c __mdiff
000895dc g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00104020 g     F .exceptions	00000000 alt_exception
00083f70 g     F .text	00000004 __sfp_lock_release
0008b470 g     F .text	00000054 OSInit
000926c0 g     F .text	00000144 OSTaskQuery
000901cc g     F .text	000000ac OS_QInit
0008c74c g     F .text	00000058 OS_StrLen
0008eb64 g     F .text	00000120 OSMemNameSet
0009749e g     O .rwdata	00000002 OSTaskProfileEn
00099038 g     O .bss	00000004 OSTime
0009c9fc g     O .bss	00000800 OSTaskIdleStk
00095510 g     F .text	0000002c _exit
00086fb8 g     F .text	00000030 __isnand
00093d58 g     F .text	00000154 alt_alarm_start
0008d514 g     F .text	00000144 OSFlagNameGet
00092d6c g     F .text	00000064 OSTimeGet
00089684 g     F .text	00000124 __muldi3
00084d28 g     F .text	00000194 __smakebuf_r
000803fc g     F .text	00000074 strlen
00094da8 g     F .text	0000001c OSTaskSwHook
000945d4 g     F .text	0000018c open
0009d1fc g     O .bss	00000b40 OSEventTbl
0008908c g     F .text	00000088 __gedf2
0009dd3c g     O .bss	00000510 OSTCBTbl
00090d3c g     F .text	00000104 OSSemSet
000940a4 g     F .text	0000001c alt_icache_flush_all
000974cc g     O .rwdata	00000004 alt_priority_mask
0009044c g     F .text	000002a0 OSSemDel
0009903c g     O .bss	00000004 OSFlagFreeList
00094110 g     F .text	0000009c alt_ic_irq_enable
00097464 g     O .rwdata	00000002 OSEventNameSize
0008238c g     F .text	00000024 __vfprintf_internal
00099040 g     O .bss	00000001 OSStatRdy
0009e24c g     O .bss	00000054 OSTCBPrioTbl
0008a868 g     F .text	000000ac __env_lock
000974aa g     O .rwdata	00000002 OSTaskSwHookEn
000887e4 g     F .text	00000080 __subdf3
00085990 g     F .text	000000c4 __lo0bits
000974d0 g     O .rwdata	00000008 alt_alarm_list
00097472 g     O .rwdata	00000002 OSFlagWidth
00093fdc g     F .text	00000064 _do_ctors
00089d3c g     F .text	00000100 close
00098fec g     O .bss	00000004 alt_envsem
00099044 g     O .bss	00000004 OSIdleCtrRun
0008bb0c g     F .text	00000020 OSVersion
000974bc g     O .rwdata	00000002 OSTmrCfgWheelSize
0008a124 g     F .text	00000080 alt_load
00092804 g     F .text	0000007c OS_TaskStkClr
00089828 g     F .text	00000314 __pack_d
00097496 g     O .rwdata	00000002 OSTaskCreateEn
0008c0fc g     F .text	00000068 OS_EventWaitListInit
00094e34 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00083f74 g     F .text	00000004 __sinit_lock_acquire
00086618 g     F .text	0000012c __multadd
00092494 g     F .text	0000022c OSTaskSuspend
000858f8 g     F .text	00000028 _Bfree
0008c7a4 g     F .text	0000005c OS_TaskIdle
000974c2 g     O .rwdata	00000002 OSTmrTblSize
0009004c g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  104000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
  104004:	08406714 	ori	at,at,412
    jmp r1
  104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  10402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  10403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  10404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  10405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  10406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  10407c:	10000326 	beq	r2,zero,10408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  104080:	20000226 	beq	r4,zero,10408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  104084:	01040ec0 	call	1040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  104088:	00000306 	br	104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  10408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  10409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  1040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  1040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1040e8:	ef80083a 	eret

001040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1040ec:	defff904 	addi	sp,sp,-28
  1040f0:	dfc00615 	stw	ra,24(sp)
  1040f4:	df000515 	stw	fp,20(sp)
  1040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1040fc:	008b4c40 	call	8b4c4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  104100:	0005313a 	rdctl	r2,ipending
  104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
  104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  10410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  104114:	00800044 	movi	r2,1
  104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  10411c:	e0ffff17 	ldw	r3,-4(fp)
  104120:	e0bffe17 	ldw	r2,-8(fp)
  104124:	1884703a 	and	r2,r3,r2
  104128:	1005003a 	cmpeq	r2,r2,zero
  10412c:	1000161e 	bne	r2,zero,104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  104130:	e0bffd17 	ldw	r2,-12(fp)
  104134:	00c002b4 	movhi	r3,10
  104138:	18f8a804 	addi	r3,r3,-7520
  10413c:	100490fa 	slli	r2,r2,3
  104140:	10c5883a 	add	r2,r2,r3
  104144:	11400017 	ldw	r5,0(r2)
  104148:	e0bffd17 	ldw	r2,-12(fp)
  10414c:	00c002b4 	movhi	r3,10
  104150:	18f8a804 	addi	r3,r3,-7520
  104154:	100490fa 	slli	r2,r2,3
  104158:	10c5883a 	add	r2,r2,r3
  10415c:	10800104 	addi	r2,r2,4
  104160:	11000017 	ldw	r4,0(r2)
  104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  104168:	0005313a 	rdctl	r2,ipending
  10416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  104178:	e0bfff17 	ldw	r2,-4(fp)
  10417c:	1004c03a 	cmpne	r2,r2,zero
  104180:	103fe31e 	bne	r2,zero,104110 <alt_irq_handler+0x24>
  104184:	00000706 	br	1041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  104188:	e0bffe17 	ldw	r2,-8(fp)
  10418c:	1085883a 	add	r2,r2,r2
  104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  104194:	e0bffd17 	ldw	r2,-12(fp)
  104198:	10800044 	addi	r2,r2,1
  10419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1041a0:	003fde06 	br	10411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1041a4:	008b5400 	call	8b540 <OSIntExit>
}
  1041a8:	e037883a 	mov	sp,fp
  1041ac:	dfc00117 	ldw	ra,4(sp)
  1041b0:	df000017 	ldw	fp,0(sp)
  1041b4:	dec00204 	addi	sp,sp,8
  1041b8:	f800283a 	ret

Disassembly of section .text:

0008019c <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   8019c:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801a0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801a4:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801a8:	d6bd0714 	ori	gp,gp,62492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801ac:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801b0:	10a3ef14 	ori	r2,r2,36796

    movhi r3, %hi(__bss_end)
   801b4:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801b8:	18f94c14 	ori	r3,r3,58672

    beq r2, r3, 1f
   801bc:	10c00326 	beq	r2,r3,801cc <_start+0x30>

0:
    stw zero, (r2)
   801c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801c8:	10fffd36 	bltu	r2,r3,801c0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801cc:	008a1240 	call	8a124 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801d0:	008a3640 	call	8a364 <alt_main>

000801d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801d4:	003fff06 	br	801d4 <alt_after_alt_main>

000801d8 <task1>:
 * It will display the least significant nibble to HEX0 (fixed in hardware)
 * The component has a 32 bit wide data bus to accommodate expansion
 * This is left as an optional exercise for the students.
 */
void task1(void* pdata)
{
   801d8:	defffc04 	addi	sp,sp,-16
   801dc:	dfc00315 	stw	ra,12(sp)
   801e0:	df000215 	stw	fp,8(sp)
   801e4:	df000204 	addi	fp,sp,8
   801e8:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
	while (1)
	{
		printf("Testing New Component\n");
   801f0:	01000274 	movhi	r4,9
   801f4:	21155004 	addi	r4,r4,21824
   801f8:	00803e80 	call	803e8 <puts>
		*SEVEN_SEG = i;
   801fc:	0007883a 	mov	r3,zero
   80200:	e0bffe17 	ldw	r2,-8(fp)
   80204:	18800015 	stw	r2,0(r3)
		i++;
   80208:	e0bffe17 	ldw	r2,-8(fp)
   8020c:	10800044 	addi	r2,r2,1
   80210:	e0bffe15 	stw	r2,-8(fp)
		// I only want to display the least significant nibble
		printf("SEVEN_SEG: %x\n", i & 0x0000000f);
   80214:	e0bffe17 	ldw	r2,-8(fp)
   80218:	114003cc 	andi	r5,r2,15
   8021c:	01000274 	movhi	r4,9
   80220:	21155604 	addi	r4,r4,21848
   80224:	00802d00 	call	802d0 <printf>
		OSTimeDlyHMSM(0, 0, 1, 0);
   80228:	0009883a 	mov	r4,zero
   8022c:	000b883a 	mov	r5,zero
   80230:	01800044 	movi	r6,1
   80234:	000f883a 	mov	r7,zero
   80238:	00929cc0 	call	929cc <OSTimeDlyHMSM>
	}
   8023c:	003fec06 	br	801f0 <task1+0x18>

00080240 <main>:
}

/* The main function creates one task and starts multi-tasking */
int main(void)
{
   80240:	defff804 	addi	sp,sp,-32
   80244:	dfc00715 	stw	ra,28(sp)
   80248:	df000615 	stw	fp,24(sp)
   8024c:	df000604 	addi	fp,sp,24
  INT8U err = OS_NO_ERR;
   80250:	e03fff05 	stb	zero,-4(fp)
  
  err = OSTaskCreateExt(task1,
   80254:	018002b4 	movhi	r6,10
   80258:	31ac1e04 	addi	r6,r6,-20360
   8025c:	00800044 	movi	r2,1
   80260:	d8800015 	stw	r2,0(sp)
   80264:	008002b4 	movhi	r2,10
   80268:	10a41f04 	addi	r2,r2,-28548
   8026c:	d8800115 	stw	r2,4(sp)
   80270:	00820004 	movi	r2,2048
   80274:	d8800215 	stw	r2,8(sp)
   80278:	d8000315 	stw	zero,12(sp)
   8027c:	d8000415 	stw	zero,16(sp)
   80280:	01000234 	movhi	r4,8
   80284:	21007604 	addi	r4,r4,472
   80288:	000b883a 	mov	r5,zero
   8028c:	01c00044 	movi	r7,1
   80290:	00915880 	call	91588 <OSTaskCreateExt>
   80294:	e0bfff05 	stb	r2,-4(fp)
                  TASK1_PRIORITY,
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  if (err) {
   80298:	e0bfff03 	ldbu	r2,-4(fp)
   8029c:	1005003a 	cmpeq	r2,r2,zero
   802a0:	1000041e 	bne	r2,zero,802b4 <main+0x74>
	  printf("Task 1 startup failed -> bail now\n");
   802a4:	01000274 	movhi	r4,9
   802a8:	21155a04 	addi	r4,r4,21864
   802ac:	00803e80 	call	803e8 <puts>
   802b0:	00000106 	br	802b8 <main+0x78>
  } else {
	  OSStart();
   802b4:	008b7b00 	call	8b7b0 <OSStart>
  }
  return 0;
   802b8:	0005883a 	mov	r2,zero
}
   802bc:	e037883a 	mov	sp,fp
   802c0:	dfc00117 	ldw	ra,4(sp)
   802c4:	df000017 	ldw	fp,0(sp)
   802c8:	dec00204 	addi	sp,sp,8
   802cc:	f800283a 	ret

000802d0 <printf>:
   802d0:	defffb04 	addi	sp,sp,-20
   802d4:	dfc00115 	stw	ra,4(sp)
   802d8:	d9400215 	stw	r5,8(sp)
   802dc:	d9800315 	stw	r6,12(sp)
   802e0:	d9c00415 	stw	r7,16(sp)
   802e4:	00800274 	movhi	r2,9
   802e8:	109d0704 	addi	r2,r2,29724
   802ec:	10c00017 	ldw	r3,0(r2)
   802f0:	200b883a 	mov	r5,r4
   802f4:	d8800204 	addi	r2,sp,8
   802f8:	19000217 	ldw	r4,8(r3)
   802fc:	100d883a 	mov	r6,r2
   80300:	d8800015 	stw	r2,0(sp)
   80304:	008238c0 	call	8238c <__vfprintf_internal>
   80308:	dfc00117 	ldw	ra,4(sp)
   8030c:	dec00504 	addi	sp,sp,20
   80310:	f800283a 	ret

00080314 <_printf_r>:
   80314:	defffc04 	addi	sp,sp,-16
   80318:	dfc00115 	stw	ra,4(sp)
   8031c:	d9800215 	stw	r6,8(sp)
   80320:	d9c00315 	stw	r7,12(sp)
   80324:	280d883a 	mov	r6,r5
   80328:	21400217 	ldw	r5,8(r4)
   8032c:	d8c00204 	addi	r3,sp,8
   80330:	180f883a 	mov	r7,r3
   80334:	d8c00015 	stw	r3,0(sp)
   80338:	00804c80 	call	804c8 <___vfprintf_internal_r>
   8033c:	dfc00117 	ldw	ra,4(sp)
   80340:	dec00404 	addi	sp,sp,16
   80344:	f800283a 	ret

00080348 <_puts_r>:
   80348:	defff604 	addi	sp,sp,-40
   8034c:	dc400715 	stw	r17,28(sp)
   80350:	2023883a 	mov	r17,r4
   80354:	2809883a 	mov	r4,r5
   80358:	dfc00915 	stw	ra,36(sp)
   8035c:	dcc00815 	stw	r19,32(sp)
   80360:	2827883a 	mov	r19,r5
   80364:	00803fc0 	call	803fc <strlen>
   80368:	89400217 	ldw	r5,8(r17)
   8036c:	00c00274 	movhi	r3,9
   80370:	18d56304 	addi	r3,r3,21900
   80374:	01c00044 	movi	r7,1
   80378:	12000044 	addi	r8,r2,1
   8037c:	d8c00515 	stw	r3,20(sp)
   80380:	d9c00615 	stw	r7,24(sp)
   80384:	d8c00304 	addi	r3,sp,12
   80388:	01c00084 	movi	r7,2
   8038c:	8809883a 	mov	r4,r17
   80390:	d80d883a 	mov	r6,sp
   80394:	d8c00015 	stw	r3,0(sp)
   80398:	dcc00315 	stw	r19,12(sp)
   8039c:	da000215 	stw	r8,8(sp)
   803a0:	d9c00115 	stw	r7,4(sp)
   803a4:	d8800415 	stw	r2,16(sp)
   803a8:	00846480 	call	84648 <__sfvwrite_r>
   803ac:	00ffffc4 	movi	r3,-1
   803b0:	10000626 	beq	r2,zero,803cc <_puts_r+0x84>
   803b4:	1805883a 	mov	r2,r3
   803b8:	dfc00917 	ldw	ra,36(sp)
   803bc:	dcc00817 	ldw	r19,32(sp)
   803c0:	dc400717 	ldw	r17,28(sp)
   803c4:	dec00a04 	addi	sp,sp,40
   803c8:	f800283a 	ret
   803cc:	00c00284 	movi	r3,10
   803d0:	1805883a 	mov	r2,r3
   803d4:	dfc00917 	ldw	ra,36(sp)
   803d8:	dcc00817 	ldw	r19,32(sp)
   803dc:	dc400717 	ldw	r17,28(sp)
   803e0:	dec00a04 	addi	sp,sp,40
   803e4:	f800283a 	ret

000803e8 <puts>:
   803e8:	00800274 	movhi	r2,9
   803ec:	109d0704 	addi	r2,r2,29724
   803f0:	200b883a 	mov	r5,r4
   803f4:	11000017 	ldw	r4,0(r2)
   803f8:	00803481 	jmpi	80348 <_puts_r>

000803fc <strlen>:
   803fc:	208000cc 	andi	r2,r4,3
   80400:	2011883a 	mov	r8,r4
   80404:	1000161e 	bne	r2,zero,80460 <strlen+0x64>
   80408:	20c00017 	ldw	r3,0(r4)
   8040c:	017fbff4 	movhi	r5,65279
   80410:	297fbfc4 	addi	r5,r5,-257
   80414:	01e02074 	movhi	r7,32897
   80418:	39e02004 	addi	r7,r7,-32640
   8041c:	1945883a 	add	r2,r3,r5
   80420:	11c4703a 	and	r2,r2,r7
   80424:	00c6303a 	nor	r3,zero,r3
   80428:	1886703a 	and	r3,r3,r2
   8042c:	18000c1e 	bne	r3,zero,80460 <strlen+0x64>
   80430:	280d883a 	mov	r6,r5
   80434:	380b883a 	mov	r5,r7
   80438:	21000104 	addi	r4,r4,4
   8043c:	20800017 	ldw	r2,0(r4)
   80440:	1187883a 	add	r3,r2,r6
   80444:	1946703a 	and	r3,r3,r5
   80448:	0084303a 	nor	r2,zero,r2
   8044c:	10c4703a 	and	r2,r2,r3
   80450:	103ff926 	beq	r2,zero,80438 <strlen+0x3c>
   80454:	20800007 	ldb	r2,0(r4)
   80458:	10000326 	beq	r2,zero,80468 <strlen+0x6c>
   8045c:	21000044 	addi	r4,r4,1
   80460:	20800007 	ldb	r2,0(r4)
   80464:	103ffd1e 	bne	r2,zero,8045c <strlen+0x60>
   80468:	2205c83a 	sub	r2,r4,r8
   8046c:	f800283a 	ret

00080470 <__sprint_r>:
   80470:	30800217 	ldw	r2,8(r6)
   80474:	defffe04 	addi	sp,sp,-8
   80478:	dc000015 	stw	r16,0(sp)
   8047c:	dfc00115 	stw	ra,4(sp)
   80480:	3021883a 	mov	r16,r6
   80484:	0007883a 	mov	r3,zero
   80488:	1000061e 	bne	r2,zero,804a4 <__sprint_r+0x34>
   8048c:	1805883a 	mov	r2,r3
   80490:	30000115 	stw	zero,4(r6)
   80494:	dfc00117 	ldw	ra,4(sp)
   80498:	dc000017 	ldw	r16,0(sp)
   8049c:	dec00204 	addi	sp,sp,8
   804a0:	f800283a 	ret
   804a4:	00846480 	call	84648 <__sfvwrite_r>
   804a8:	1007883a 	mov	r3,r2
   804ac:	1805883a 	mov	r2,r3
   804b0:	80000115 	stw	zero,4(r16)
   804b4:	80000215 	stw	zero,8(r16)
   804b8:	dfc00117 	ldw	ra,4(sp)
   804bc:	dc000017 	ldw	r16,0(sp)
   804c0:	dec00204 	addi	sp,sp,8
   804c4:	f800283a 	ret

000804c8 <___vfprintf_internal_r>:
   804c8:	defea404 	addi	sp,sp,-1392
   804cc:	dd815815 	stw	r22,1376(sp)
   804d0:	dc015215 	stw	r16,1352(sp)
   804d4:	d9c15115 	stw	r7,1348(sp)
   804d8:	dfc15b15 	stw	ra,1388(sp)
   804dc:	df015a15 	stw	fp,1384(sp)
   804e0:	ddc15915 	stw	r23,1380(sp)
   804e4:	dd415715 	stw	r21,1372(sp)
   804e8:	dd015615 	stw	r20,1368(sp)
   804ec:	dcc15515 	stw	r19,1364(sp)
   804f0:	dc815415 	stw	r18,1360(sp)
   804f4:	dc415315 	stw	r17,1356(sp)
   804f8:	282d883a 	mov	r22,r5
   804fc:	3021883a 	mov	r16,r6
   80500:	d9014f15 	stw	r4,1340(sp)
   80504:	0084c6c0 	call	84c6c <_localeconv_r>
   80508:	10800017 	ldw	r2,0(r2)
   8050c:	d9c15117 	ldw	r7,1348(sp)
   80510:	d8814915 	stw	r2,1316(sp)
   80514:	d8814f17 	ldw	r2,1340(sp)
   80518:	10000226 	beq	r2,zero,80524 <___vfprintf_internal_r+0x5c>
   8051c:	10800e17 	ldw	r2,56(r2)
   80520:	10020d26 	beq	r2,zero,80d58 <___vfprintf_internal_r+0x890>
   80524:	b080030b 	ldhu	r2,12(r22)
   80528:	1080020c 	andi	r2,r2,8
   8052c:	10020e26 	beq	r2,zero,80d68 <___vfprintf_internal_r+0x8a0>
   80530:	b0800417 	ldw	r2,16(r22)
   80534:	10020c26 	beq	r2,zero,80d68 <___vfprintf_internal_r+0x8a0>
   80538:	b200030b 	ldhu	r8,12(r22)
   8053c:	00800284 	movi	r2,10
   80540:	40c0068c 	andi	r3,r8,26
   80544:	18802f1e 	bne	r3,r2,80604 <___vfprintf_internal_r+0x13c>
   80548:	b080038f 	ldh	r2,14(r22)
   8054c:	10002d16 	blt	r2,zero,80604 <___vfprintf_internal_r+0x13c>
   80550:	b240038b 	ldhu	r9,14(r22)
   80554:	b2800717 	ldw	r10,28(r22)
   80558:	b2c00917 	ldw	r11,36(r22)
   8055c:	d9014f17 	ldw	r4,1340(sp)
   80560:	dc402904 	addi	r17,sp,164
   80564:	d8804004 	addi	r2,sp,256
   80568:	00c10004 	movi	r3,1024
   8056c:	423fff4c 	andi	r8,r8,65533
   80570:	800d883a 	mov	r6,r16
   80574:	880b883a 	mov	r5,r17
   80578:	da002c0d 	sth	r8,176(sp)
   8057c:	da402c8d 	sth	r9,178(sp)
   80580:	da803015 	stw	r10,192(sp)
   80584:	dac03215 	stw	r11,200(sp)
   80588:	d8802d15 	stw	r2,180(sp)
   8058c:	d8c02e15 	stw	r3,184(sp)
   80590:	d8802915 	stw	r2,164(sp)
   80594:	d8c02b15 	stw	r3,172(sp)
   80598:	d8002f15 	stw	zero,188(sp)
   8059c:	00804c80 	call	804c8 <___vfprintf_internal_r>
   805a0:	d8814b15 	stw	r2,1324(sp)
   805a4:	10000416 	blt	r2,zero,805b8 <___vfprintf_internal_r+0xf0>
   805a8:	d9014f17 	ldw	r4,1340(sp)
   805ac:	880b883a 	mov	r5,r17
   805b0:	0083ce40 	call	83ce4 <_fflush_r>
   805b4:	1002321e 	bne	r2,zero,80e80 <___vfprintf_internal_r+0x9b8>
   805b8:	d8802c0b 	ldhu	r2,176(sp)
   805bc:	1080100c 	andi	r2,r2,64
   805c0:	10000326 	beq	r2,zero,805d0 <___vfprintf_internal_r+0x108>
   805c4:	b080030b 	ldhu	r2,12(r22)
   805c8:	10801014 	ori	r2,r2,64
   805cc:	b080030d 	sth	r2,12(r22)
   805d0:	d8814b17 	ldw	r2,1324(sp)
   805d4:	dfc15b17 	ldw	ra,1388(sp)
   805d8:	df015a17 	ldw	fp,1384(sp)
   805dc:	ddc15917 	ldw	r23,1380(sp)
   805e0:	dd815817 	ldw	r22,1376(sp)
   805e4:	dd415717 	ldw	r21,1372(sp)
   805e8:	dd015617 	ldw	r20,1368(sp)
   805ec:	dcc15517 	ldw	r19,1364(sp)
   805f0:	dc815417 	ldw	r18,1360(sp)
   805f4:	dc415317 	ldw	r17,1356(sp)
   805f8:	dc015217 	ldw	r16,1352(sp)
   805fc:	dec15c04 	addi	sp,sp,1392
   80600:	f800283a 	ret
   80604:	0005883a 	mov	r2,zero
   80608:	0007883a 	mov	r3,zero
   8060c:	dd401904 	addi	r21,sp,100
   80610:	d8814215 	stw	r2,1288(sp)
   80614:	802f883a 	mov	r23,r16
   80618:	d8c14315 	stw	r3,1292(sp)
   8061c:	d8014b15 	stw	zero,1324(sp)
   80620:	d8014815 	stw	zero,1312(sp)
   80624:	d8014415 	stw	zero,1296(sp)
   80628:	d8014715 	stw	zero,1308(sp)
   8062c:	dd400c15 	stw	r21,48(sp)
   80630:	d8000e15 	stw	zero,56(sp)
   80634:	d8000d15 	stw	zero,52(sp)
   80638:	b8800007 	ldb	r2,0(r23)
   8063c:	10001926 	beq	r2,zero,806a4 <___vfprintf_internal_r+0x1dc>
   80640:	00c00944 	movi	r3,37
   80644:	10c01726 	beq	r2,r3,806a4 <___vfprintf_internal_r+0x1dc>
   80648:	b821883a 	mov	r16,r23
   8064c:	00000106 	br	80654 <___vfprintf_internal_r+0x18c>
   80650:	10c00326 	beq	r2,r3,80660 <___vfprintf_internal_r+0x198>
   80654:	84000044 	addi	r16,r16,1
   80658:	80800007 	ldb	r2,0(r16)
   8065c:	103ffc1e 	bne	r2,zero,80650 <___vfprintf_internal_r+0x188>
   80660:	85e7c83a 	sub	r19,r16,r23
   80664:	98000e26 	beq	r19,zero,806a0 <___vfprintf_internal_r+0x1d8>
   80668:	dc800e17 	ldw	r18,56(sp)
   8066c:	dc400d17 	ldw	r17,52(sp)
   80670:	008001c4 	movi	r2,7
   80674:	94e5883a 	add	r18,r18,r19
   80678:	8c400044 	addi	r17,r17,1
   8067c:	adc00015 	stw	r23,0(r21)
   80680:	dc800e15 	stw	r18,56(sp)
   80684:	acc00115 	stw	r19,4(r21)
   80688:	dc400d15 	stw	r17,52(sp)
   8068c:	14428b16 	blt	r2,r17,810bc <___vfprintf_internal_r+0xbf4>
   80690:	ad400204 	addi	r21,r21,8
   80694:	d9014b17 	ldw	r4,1324(sp)
   80698:	24c9883a 	add	r4,r4,r19
   8069c:	d9014b15 	stw	r4,1324(sp)
   806a0:	802f883a 	mov	r23,r16
   806a4:	b8800007 	ldb	r2,0(r23)
   806a8:	10013c26 	beq	r2,zero,80b9c <___vfprintf_internal_r+0x6d4>
   806ac:	bdc00044 	addi	r23,r23,1
   806b0:	d8000405 	stb	zero,16(sp)
   806b4:	b8c00007 	ldb	r3,0(r23)
   806b8:	04ffffc4 	movi	r19,-1
   806bc:	d8014c15 	stw	zero,1328(sp)
   806c0:	d8014a15 	stw	zero,1320(sp)
   806c4:	d8c14d15 	stw	r3,1332(sp)
   806c8:	bdc00044 	addi	r23,r23,1
   806cc:	d9414d17 	ldw	r5,1332(sp)
   806d0:	00801604 	movi	r2,88
   806d4:	28fff804 	addi	r3,r5,-32
   806d8:	10c06036 	bltu	r2,r3,8085c <___vfprintf_internal_r+0x394>
   806dc:	18c5883a 	add	r2,r3,r3
   806e0:	1085883a 	add	r2,r2,r2
   806e4:	00c00234 	movhi	r3,8
   806e8:	18c1be04 	addi	r3,r3,1784
   806ec:	10c5883a 	add	r2,r2,r3
   806f0:	11000017 	ldw	r4,0(r2)
   806f4:	2000683a 	jmp	r4
   806f8:	0008166c 	andhi	zero,zero,8281
   806fc:	0008085c 	xori	zero,zero,8225
   80700:	0008085c 	xori	zero,zero,8225
   80704:	00081658 	cmpnei	zero,zero,8281
   80708:	0008085c 	xori	zero,zero,8225
   8070c:	0008085c 	xori	zero,zero,8225
   80710:	0008085c 	xori	zero,zero,8225
   80714:	0008085c 	xori	zero,zero,8225
   80718:	0008085c 	xori	zero,zero,8225
   8071c:	0008085c 	xori	zero,zero,8225
   80720:	00081438 	rdprs	zero,zero,8272
   80724:	00081648 	cmpgei	zero,zero,8281
   80728:	0008085c 	xori	zero,zero,8225
   8072c:	00081450 	cmplti	zero,zero,8273
   80730:	000816f0 	cmpltui	zero,zero,8283
   80734:	0008085c 	xori	zero,zero,8225
   80738:	000816dc 	xori	zero,zero,8283
   8073c:	00081698 	cmpnei	zero,zero,8282
   80740:	00081698 	cmpnei	zero,zero,8282
   80744:	00081698 	cmpnei	zero,zero,8282
   80748:	00081698 	cmpnei	zero,zero,8282
   8074c:	00081698 	cmpnei	zero,zero,8282
   80750:	00081698 	cmpnei	zero,zero,8282
   80754:	00081698 	cmpnei	zero,zero,8282
   80758:	00081698 	cmpnei	zero,zero,8282
   8075c:	00081698 	cmpnei	zero,zero,8282
   80760:	0008085c 	xori	zero,zero,8225
   80764:	0008085c 	xori	zero,zero,8225
   80768:	0008085c 	xori	zero,zero,8225
   8076c:	0008085c 	xori	zero,zero,8225
   80770:	0008085c 	xori	zero,zero,8225
   80774:	0008085c 	xori	zero,zero,8225
   80778:	0008085c 	xori	zero,zero,8225
   8077c:	0008085c 	xori	zero,zero,8225
   80780:	0008085c 	xori	zero,zero,8225
   80784:	0008085c 	xori	zero,zero,8225
   80788:	00080eb4 	movhi	zero,8250
   8078c:	00081520 	cmpeqi	zero,zero,8276
   80790:	0008085c 	xori	zero,zero,8225
   80794:	00081520 	cmpeqi	zero,zero,8276
   80798:	0008085c 	xori	zero,zero,8225
   8079c:	0008085c 	xori	zero,zero,8225
   807a0:	0008085c 	xori	zero,zero,8225
   807a4:	0008085c 	xori	zero,zero,8225
   807a8:	00081684 	movi	zero,8282
   807ac:	0008085c 	xori	zero,zero,8225
   807b0:	0008085c 	xori	zero,zero,8225
   807b4:	00080f68 	cmpgeui	zero,zero,8253
   807b8:	0008085c 	xori	zero,zero,8225
   807bc:	0008085c 	xori	zero,zero,8225
   807c0:	0008085c 	xori	zero,zero,8225
   807c4:	0008085c 	xori	zero,zero,8225
   807c8:	0008085c 	xori	zero,zero,8225
   807cc:	00080fb4 	movhi	zero,8254
   807d0:	0008085c 	xori	zero,zero,8225
   807d4:	0008085c 	xori	zero,zero,8225
   807d8:	000815d4 	movui	zero,8279
   807dc:	0008085c 	xori	zero,zero,8225
   807e0:	0008085c 	xori	zero,zero,8225
   807e4:	0008085c 	xori	zero,zero,8225
   807e8:	0008085c 	xori	zero,zero,8225
   807ec:	0008085c 	xori	zero,zero,8225
   807f0:	0008085c 	xori	zero,zero,8225
   807f4:	0008085c 	xori	zero,zero,8225
   807f8:	0008085c 	xori	zero,zero,8225
   807fc:	0008085c 	xori	zero,zero,8225
   80800:	0008085c 	xori	zero,zero,8225
   80804:	000815a8 	cmpgeui	zero,zero,8278
   80808:	00080ec0 	call	80ec <OSCtxSw_SWITCH_PC+0x80ac>
   8080c:	00081520 	cmpeqi	zero,zero,8276
   80810:	00081520 	cmpeqi	zero,zero,8276
   80814:	00081520 	cmpeqi	zero,zero,8276
   80818:	0008150c 	andi	zero,zero,8276
   8081c:	00080ec0 	call	80ec <OSCtxSw_SWITCH_PC+0x80ac>
   80820:	0008085c 	xori	zero,zero,8225
   80824:	0008085c 	xori	zero,zero,8225
   80828:	00081494 	movui	zero,8274
   8082c:	0008085c 	xori	zero,zero,8225
   80830:	00081464 	muli	zero,zero,8273
   80834:	00080f74 	movhi	zero,8253
   80838:	000814c4 	movi	zero,8275
   8083c:	000814b0 	cmpltui	zero,zero,8274
   80840:	0008085c 	xori	zero,zero,8225
   80844:	00081758 	cmpnei	zero,zero,8285
   80848:	0008085c 	xori	zero,zero,8225
   8084c:	00080fc0 	call	80fc <OSCtxSw_SWITCH_PC+0x80bc>
   80850:	0008085c 	xori	zero,zero,8225
   80854:	0008085c 	xori	zero,zero,8225
   80858:	00081638 	rdprs	zero,zero,8280
   8085c:	d9014d17 	ldw	r4,1332(sp)
   80860:	2000ce26 	beq	r4,zero,80b9c <___vfprintf_internal_r+0x6d4>
   80864:	01400044 	movi	r5,1
   80868:	d9800f04 	addi	r6,sp,60
   8086c:	d9c14015 	stw	r7,1280(sp)
   80870:	d9414515 	stw	r5,1300(sp)
   80874:	d9814115 	stw	r6,1284(sp)
   80878:	280f883a 	mov	r7,r5
   8087c:	d9000f05 	stb	r4,60(sp)
   80880:	d8000405 	stb	zero,16(sp)
   80884:	d8014615 	stw	zero,1304(sp)
   80888:	d8c14c17 	ldw	r3,1328(sp)
   8088c:	1880008c 	andi	r2,r3,2
   80890:	1005003a 	cmpeq	r2,r2,zero
   80894:	d8815015 	stw	r2,1344(sp)
   80898:	1000031e 	bne	r2,zero,808a8 <___vfprintf_internal_r+0x3e0>
   8089c:	d9014517 	ldw	r4,1300(sp)
   808a0:	21000084 	addi	r4,r4,2
   808a4:	d9014515 	stw	r4,1300(sp)
   808a8:	d9414c17 	ldw	r5,1328(sp)
   808ac:	2940210c 	andi	r5,r5,132
   808b0:	d9414e15 	stw	r5,1336(sp)
   808b4:	28002d1e 	bne	r5,zero,8096c <___vfprintf_internal_r+0x4a4>
   808b8:	d9814a17 	ldw	r6,1320(sp)
   808bc:	d8814517 	ldw	r2,1300(sp)
   808c0:	30a1c83a 	sub	r16,r6,r2
   808c4:	0400290e 	bge	zero,r16,8096c <___vfprintf_internal_r+0x4a4>
   808c8:	00800404 	movi	r2,16
   808cc:	14045e0e 	bge	r2,r16,81a48 <___vfprintf_internal_r+0x1580>
   808d0:	dc800e17 	ldw	r18,56(sp)
   808d4:	dc400d17 	ldw	r17,52(sp)
   808d8:	1027883a 	mov	r19,r2
   808dc:	07000274 	movhi	fp,9
   808e0:	e7157f84 	addi	fp,fp,22014
   808e4:	050001c4 	movi	r20,7
   808e8:	00000306 	br	808f8 <___vfprintf_internal_r+0x430>
   808ec:	843ffc04 	addi	r16,r16,-16
   808f0:	ad400204 	addi	r21,r21,8
   808f4:	9c00130e 	bge	r19,r16,80944 <___vfprintf_internal_r+0x47c>
   808f8:	94800404 	addi	r18,r18,16
   808fc:	8c400044 	addi	r17,r17,1
   80900:	af000015 	stw	fp,0(r21)
   80904:	acc00115 	stw	r19,4(r21)
   80908:	dc800e15 	stw	r18,56(sp)
   8090c:	dc400d15 	stw	r17,52(sp)
   80910:	a47ff60e 	bge	r20,r17,808ec <___vfprintf_internal_r+0x424>
   80914:	d9014f17 	ldw	r4,1340(sp)
   80918:	b00b883a 	mov	r5,r22
   8091c:	d9800c04 	addi	r6,sp,48
   80920:	d9c15115 	stw	r7,1348(sp)
   80924:	00804700 	call	80470 <__sprint_r>
   80928:	d9c15117 	ldw	r7,1348(sp)
   8092c:	10009e1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   80930:	843ffc04 	addi	r16,r16,-16
   80934:	dc800e17 	ldw	r18,56(sp)
   80938:	dc400d17 	ldw	r17,52(sp)
   8093c:	dd401904 	addi	r21,sp,100
   80940:	9c3fed16 	blt	r19,r16,808f8 <___vfprintf_internal_r+0x430>
   80944:	9425883a 	add	r18,r18,r16
   80948:	8c400044 	addi	r17,r17,1
   8094c:	008001c4 	movi	r2,7
   80950:	af000015 	stw	fp,0(r21)
   80954:	ac000115 	stw	r16,4(r21)
   80958:	dc800e15 	stw	r18,56(sp)
   8095c:	dc400d15 	stw	r17,52(sp)
   80960:	1441f516 	blt	r2,r17,81138 <___vfprintf_internal_r+0xc70>
   80964:	ad400204 	addi	r21,r21,8
   80968:	00000206 	br	80974 <___vfprintf_internal_r+0x4ac>
   8096c:	dc800e17 	ldw	r18,56(sp)
   80970:	dc400d17 	ldw	r17,52(sp)
   80974:	d8800407 	ldb	r2,16(sp)
   80978:	10000b26 	beq	r2,zero,809a8 <___vfprintf_internal_r+0x4e0>
   8097c:	00800044 	movi	r2,1
   80980:	94800044 	addi	r18,r18,1
   80984:	8c400044 	addi	r17,r17,1
   80988:	a8800115 	stw	r2,4(r21)
   8098c:	d8c00404 	addi	r3,sp,16
   80990:	008001c4 	movi	r2,7
   80994:	a8c00015 	stw	r3,0(r21)
   80998:	dc800e15 	stw	r18,56(sp)
   8099c:	dc400d15 	stw	r17,52(sp)
   809a0:	1441da16 	blt	r2,r17,8110c <___vfprintf_internal_r+0xc44>
   809a4:	ad400204 	addi	r21,r21,8
   809a8:	d9015017 	ldw	r4,1344(sp)
   809ac:	20000b1e 	bne	r4,zero,809dc <___vfprintf_internal_r+0x514>
   809b0:	d8800444 	addi	r2,sp,17
   809b4:	94800084 	addi	r18,r18,2
   809b8:	8c400044 	addi	r17,r17,1
   809bc:	a8800015 	stw	r2,0(r21)
   809c0:	00c00084 	movi	r3,2
   809c4:	008001c4 	movi	r2,7
   809c8:	a8c00115 	stw	r3,4(r21)
   809cc:	dc800e15 	stw	r18,56(sp)
   809d0:	dc400d15 	stw	r17,52(sp)
   809d4:	1441c216 	blt	r2,r17,810e0 <___vfprintf_internal_r+0xc18>
   809d8:	ad400204 	addi	r21,r21,8
   809dc:	d9414e17 	ldw	r5,1336(sp)
   809e0:	00802004 	movi	r2,128
   809e4:	2880b126 	beq	r5,r2,80cac <___vfprintf_internal_r+0x7e4>
   809e8:	d8c14617 	ldw	r3,1304(sp)
   809ec:	19e1c83a 	sub	r16,r3,r7
   809f0:	0400260e 	bge	zero,r16,80a8c <___vfprintf_internal_r+0x5c4>
   809f4:	00800404 	movi	r2,16
   809f8:	1403cf0e 	bge	r2,r16,81938 <___vfprintf_internal_r+0x1470>
   809fc:	1027883a 	mov	r19,r2
   80a00:	07000274 	movhi	fp,9
   80a04:	e7157b84 	addi	fp,fp,21998
   80a08:	050001c4 	movi	r20,7
   80a0c:	00000306 	br	80a1c <___vfprintf_internal_r+0x554>
   80a10:	843ffc04 	addi	r16,r16,-16
   80a14:	ad400204 	addi	r21,r21,8
   80a18:	9c00130e 	bge	r19,r16,80a68 <___vfprintf_internal_r+0x5a0>
   80a1c:	94800404 	addi	r18,r18,16
   80a20:	8c400044 	addi	r17,r17,1
   80a24:	af000015 	stw	fp,0(r21)
   80a28:	acc00115 	stw	r19,4(r21)
   80a2c:	dc800e15 	stw	r18,56(sp)
   80a30:	dc400d15 	stw	r17,52(sp)
   80a34:	a47ff60e 	bge	r20,r17,80a10 <___vfprintf_internal_r+0x548>
   80a38:	d9014f17 	ldw	r4,1340(sp)
   80a3c:	b00b883a 	mov	r5,r22
   80a40:	d9800c04 	addi	r6,sp,48
   80a44:	d9c15115 	stw	r7,1348(sp)
   80a48:	00804700 	call	80470 <__sprint_r>
   80a4c:	d9c15117 	ldw	r7,1348(sp)
   80a50:	1000551e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   80a54:	843ffc04 	addi	r16,r16,-16
   80a58:	dc800e17 	ldw	r18,56(sp)
   80a5c:	dc400d17 	ldw	r17,52(sp)
   80a60:	dd401904 	addi	r21,sp,100
   80a64:	9c3fed16 	blt	r19,r16,80a1c <___vfprintf_internal_r+0x554>
   80a68:	9425883a 	add	r18,r18,r16
   80a6c:	8c400044 	addi	r17,r17,1
   80a70:	008001c4 	movi	r2,7
   80a74:	af000015 	stw	fp,0(r21)
   80a78:	ac000115 	stw	r16,4(r21)
   80a7c:	dc800e15 	stw	r18,56(sp)
   80a80:	dc400d15 	stw	r17,52(sp)
   80a84:	14418216 	blt	r2,r17,81090 <___vfprintf_internal_r+0xbc8>
   80a88:	ad400204 	addi	r21,r21,8
   80a8c:	d9014c17 	ldw	r4,1328(sp)
   80a90:	2080400c 	andi	r2,r4,256
   80a94:	10004a1e 	bne	r2,zero,80bc0 <___vfprintf_internal_r+0x6f8>
   80a98:	d9414117 	ldw	r5,1284(sp)
   80a9c:	91e5883a 	add	r18,r18,r7
   80aa0:	8c400044 	addi	r17,r17,1
   80aa4:	008001c4 	movi	r2,7
   80aa8:	a9400015 	stw	r5,0(r21)
   80aac:	a9c00115 	stw	r7,4(r21)
   80ab0:	dc800e15 	stw	r18,56(sp)
   80ab4:	dc400d15 	stw	r17,52(sp)
   80ab8:	14416716 	blt	r2,r17,81058 <___vfprintf_internal_r+0xb90>
   80abc:	a8c00204 	addi	r3,r21,8
   80ac0:	d9814c17 	ldw	r6,1328(sp)
   80ac4:	3080010c 	andi	r2,r6,4
   80ac8:	10002826 	beq	r2,zero,80b6c <___vfprintf_internal_r+0x6a4>
   80acc:	d8814a17 	ldw	r2,1320(sp)
   80ad0:	d9014517 	ldw	r4,1300(sp)
   80ad4:	1121c83a 	sub	r16,r2,r4
   80ad8:	0400240e 	bge	zero,r16,80b6c <___vfprintf_internal_r+0x6a4>
   80adc:	00800404 	movi	r2,16
   80ae0:	1404550e 	bge	r2,r16,81c38 <___vfprintf_internal_r+0x1770>
   80ae4:	dc400d17 	ldw	r17,52(sp)
   80ae8:	1027883a 	mov	r19,r2
   80aec:	07000274 	movhi	fp,9
   80af0:	e7157f84 	addi	fp,fp,22014
   80af4:	050001c4 	movi	r20,7
   80af8:	00000306 	br	80b08 <___vfprintf_internal_r+0x640>
   80afc:	843ffc04 	addi	r16,r16,-16
   80b00:	18c00204 	addi	r3,r3,8
   80b04:	9c00110e 	bge	r19,r16,80b4c <___vfprintf_internal_r+0x684>
   80b08:	94800404 	addi	r18,r18,16
   80b0c:	8c400044 	addi	r17,r17,1
   80b10:	1f000015 	stw	fp,0(r3)
   80b14:	1cc00115 	stw	r19,4(r3)
   80b18:	dc800e15 	stw	r18,56(sp)
   80b1c:	dc400d15 	stw	r17,52(sp)
   80b20:	a47ff60e 	bge	r20,r17,80afc <___vfprintf_internal_r+0x634>
   80b24:	d9014f17 	ldw	r4,1340(sp)
   80b28:	b00b883a 	mov	r5,r22
   80b2c:	d9800c04 	addi	r6,sp,48
   80b30:	00804700 	call	80470 <__sprint_r>
   80b34:	10001c1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   80b38:	843ffc04 	addi	r16,r16,-16
   80b3c:	dc800e17 	ldw	r18,56(sp)
   80b40:	dc400d17 	ldw	r17,52(sp)
   80b44:	d8c01904 	addi	r3,sp,100
   80b48:	9c3fef16 	blt	r19,r16,80b08 <___vfprintf_internal_r+0x640>
   80b4c:	9425883a 	add	r18,r18,r16
   80b50:	8c400044 	addi	r17,r17,1
   80b54:	008001c4 	movi	r2,7
   80b58:	1f000015 	stw	fp,0(r3)
   80b5c:	1c000115 	stw	r16,4(r3)
   80b60:	dc800e15 	stw	r18,56(sp)
   80b64:	dc400d15 	stw	r17,52(sp)
   80b68:	1440cb16 	blt	r2,r17,80e98 <___vfprintf_internal_r+0x9d0>
   80b6c:	d8814a17 	ldw	r2,1320(sp)
   80b70:	d9414517 	ldw	r5,1300(sp)
   80b74:	1140010e 	bge	r2,r5,80b7c <___vfprintf_internal_r+0x6b4>
   80b78:	2805883a 	mov	r2,r5
   80b7c:	d9814b17 	ldw	r6,1324(sp)
   80b80:	308d883a 	add	r6,r6,r2
   80b84:	d9814b15 	stw	r6,1324(sp)
   80b88:	90013b1e 	bne	r18,zero,81078 <___vfprintf_internal_r+0xbb0>
   80b8c:	d9c14017 	ldw	r7,1280(sp)
   80b90:	dd401904 	addi	r21,sp,100
   80b94:	d8000d15 	stw	zero,52(sp)
   80b98:	003ea706 	br	80638 <___vfprintf_internal_r+0x170>
   80b9c:	d8800e17 	ldw	r2,56(sp)
   80ba0:	1005451e 	bne	r2,zero,820b8 <___vfprintf_internal_r+0x1bf0>
   80ba4:	d8000d15 	stw	zero,52(sp)
   80ba8:	b080030b 	ldhu	r2,12(r22)
   80bac:	1080100c 	andi	r2,r2,64
   80bb0:	103e8726 	beq	r2,zero,805d0 <___vfprintf_internal_r+0x108>
   80bb4:	00bfffc4 	movi	r2,-1
   80bb8:	d8814b15 	stw	r2,1324(sp)
   80bbc:	003e8406 	br	805d0 <___vfprintf_internal_r+0x108>
   80bc0:	d9814d17 	ldw	r6,1332(sp)
   80bc4:	00801944 	movi	r2,101
   80bc8:	11806e16 	blt	r2,r6,80d84 <___vfprintf_internal_r+0x8bc>
   80bcc:	d9414717 	ldw	r5,1308(sp)
   80bd0:	00c00044 	movi	r3,1
   80bd4:	1943490e 	bge	r3,r5,818fc <___vfprintf_internal_r+0x1434>
   80bd8:	d8814117 	ldw	r2,1284(sp)
   80bdc:	94800044 	addi	r18,r18,1
   80be0:	8c400044 	addi	r17,r17,1
   80be4:	a8800015 	stw	r2,0(r21)
   80be8:	008001c4 	movi	r2,7
   80bec:	a8c00115 	stw	r3,4(r21)
   80bf0:	dc800e15 	stw	r18,56(sp)
   80bf4:	dc400d15 	stw	r17,52(sp)
   80bf8:	1441ca16 	blt	r2,r17,81324 <___vfprintf_internal_r+0xe5c>
   80bfc:	a8c00204 	addi	r3,r21,8
   80c00:	d9014917 	ldw	r4,1316(sp)
   80c04:	00800044 	movi	r2,1
   80c08:	94800044 	addi	r18,r18,1
   80c0c:	8c400044 	addi	r17,r17,1
   80c10:	18800115 	stw	r2,4(r3)
   80c14:	008001c4 	movi	r2,7
   80c18:	19000015 	stw	r4,0(r3)
   80c1c:	dc800e15 	stw	r18,56(sp)
   80c20:	dc400d15 	stw	r17,52(sp)
   80c24:	1441b616 	blt	r2,r17,81300 <___vfprintf_internal_r+0xe38>
   80c28:	1cc00204 	addi	r19,r3,8
   80c2c:	d9014217 	ldw	r4,1288(sp)
   80c30:	d9414317 	ldw	r5,1292(sp)
   80c34:	000d883a 	mov	r6,zero
   80c38:	000f883a 	mov	r7,zero
   80c3c:	0088f7c0 	call	88f7c <__nedf2>
   80c40:	10017426 	beq	r2,zero,81214 <___vfprintf_internal_r+0xd4c>
   80c44:	d9414717 	ldw	r5,1308(sp)
   80c48:	d9814117 	ldw	r6,1284(sp)
   80c4c:	8c400044 	addi	r17,r17,1
   80c50:	2c85883a 	add	r2,r5,r18
   80c54:	14bfffc4 	addi	r18,r2,-1
   80c58:	28bfffc4 	addi	r2,r5,-1
   80c5c:	30c00044 	addi	r3,r6,1
   80c60:	98800115 	stw	r2,4(r19)
   80c64:	008001c4 	movi	r2,7
   80c68:	98c00015 	stw	r3,0(r19)
   80c6c:	dc800e15 	stw	r18,56(sp)
   80c70:	dc400d15 	stw	r17,52(sp)
   80c74:	14418e16 	blt	r2,r17,812b0 <___vfprintf_internal_r+0xde8>
   80c78:	9cc00204 	addi	r19,r19,8
   80c7c:	d9414817 	ldw	r5,1312(sp)
   80c80:	d8800804 	addi	r2,sp,32
   80c84:	8c400044 	addi	r17,r17,1
   80c88:	9165883a 	add	r18,r18,r5
   80c8c:	98800015 	stw	r2,0(r19)
   80c90:	008001c4 	movi	r2,7
   80c94:	99400115 	stw	r5,4(r19)
   80c98:	dc800e15 	stw	r18,56(sp)
   80c9c:	dc400d15 	stw	r17,52(sp)
   80ca0:	1440ed16 	blt	r2,r17,81058 <___vfprintf_internal_r+0xb90>
   80ca4:	98c00204 	addi	r3,r19,8
   80ca8:	003f8506 	br	80ac0 <___vfprintf_internal_r+0x5f8>
   80cac:	d9814a17 	ldw	r6,1320(sp)
   80cb0:	d8814517 	ldw	r2,1300(sp)
   80cb4:	30a1c83a 	sub	r16,r6,r2
   80cb8:	043f4b0e 	bge	zero,r16,809e8 <___vfprintf_internal_r+0x520>
   80cbc:	00800404 	movi	r2,16
   80cc0:	14043a0e 	bge	r2,r16,81dac <___vfprintf_internal_r+0x18e4>
   80cc4:	1027883a 	mov	r19,r2
   80cc8:	07000274 	movhi	fp,9
   80ccc:	e7157b84 	addi	fp,fp,21998
   80cd0:	050001c4 	movi	r20,7
   80cd4:	00000306 	br	80ce4 <___vfprintf_internal_r+0x81c>
   80cd8:	843ffc04 	addi	r16,r16,-16
   80cdc:	ad400204 	addi	r21,r21,8
   80ce0:	9c00130e 	bge	r19,r16,80d30 <___vfprintf_internal_r+0x868>
   80ce4:	94800404 	addi	r18,r18,16
   80ce8:	8c400044 	addi	r17,r17,1
   80cec:	af000015 	stw	fp,0(r21)
   80cf0:	acc00115 	stw	r19,4(r21)
   80cf4:	dc800e15 	stw	r18,56(sp)
   80cf8:	dc400d15 	stw	r17,52(sp)
   80cfc:	a47ff60e 	bge	r20,r17,80cd8 <___vfprintf_internal_r+0x810>
   80d00:	d9014f17 	ldw	r4,1340(sp)
   80d04:	b00b883a 	mov	r5,r22
   80d08:	d9800c04 	addi	r6,sp,48
   80d0c:	d9c15115 	stw	r7,1348(sp)
   80d10:	00804700 	call	80470 <__sprint_r>
   80d14:	d9c15117 	ldw	r7,1348(sp)
   80d18:	103fa31e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   80d1c:	843ffc04 	addi	r16,r16,-16
   80d20:	dc800e17 	ldw	r18,56(sp)
   80d24:	dc400d17 	ldw	r17,52(sp)
   80d28:	dd401904 	addi	r21,sp,100
   80d2c:	9c3fed16 	blt	r19,r16,80ce4 <___vfprintf_internal_r+0x81c>
   80d30:	9425883a 	add	r18,r18,r16
   80d34:	8c400044 	addi	r17,r17,1
   80d38:	008001c4 	movi	r2,7
   80d3c:	af000015 	stw	fp,0(r21)
   80d40:	ac000115 	stw	r16,4(r21)
   80d44:	dc800e15 	stw	r18,56(sp)
   80d48:	dc400d15 	stw	r17,52(sp)
   80d4c:	14416116 	blt	r2,r17,812d4 <___vfprintf_internal_r+0xe0c>
   80d50:	ad400204 	addi	r21,r21,8
   80d54:	003f2406 	br	809e8 <___vfprintf_internal_r+0x520>
   80d58:	d9014f17 	ldw	r4,1340(sp)
   80d5c:	0083f7c0 	call	83f7c <__sinit>
   80d60:	d9c15117 	ldw	r7,1348(sp)
   80d64:	003def06 	br	80524 <___vfprintf_internal_r+0x5c>
   80d68:	d9014f17 	ldw	r4,1340(sp)
   80d6c:	b00b883a 	mov	r5,r22
   80d70:	d9c15115 	stw	r7,1348(sp)
   80d74:	00823b00 	call	823b0 <__swsetup_r>
   80d78:	d9c15117 	ldw	r7,1348(sp)
   80d7c:	103dee26 	beq	r2,zero,80538 <___vfprintf_internal_r+0x70>
   80d80:	003f8c06 	br	80bb4 <___vfprintf_internal_r+0x6ec>
   80d84:	d9014217 	ldw	r4,1288(sp)
   80d88:	d9414317 	ldw	r5,1292(sp)
   80d8c:	000d883a 	mov	r6,zero
   80d90:	000f883a 	mov	r7,zero
   80d94:	0088ef40 	call	88ef4 <__eqdf2>
   80d98:	1000f21e 	bne	r2,zero,81164 <___vfprintf_internal_r+0xc9c>
   80d9c:	00800274 	movhi	r2,9
   80da0:	10957b04 	addi	r2,r2,21996
   80da4:	94800044 	addi	r18,r18,1
   80da8:	8c400044 	addi	r17,r17,1
   80dac:	a8800015 	stw	r2,0(r21)
   80db0:	00c00044 	movi	r3,1
   80db4:	008001c4 	movi	r2,7
   80db8:	a8c00115 	stw	r3,4(r21)
   80dbc:	dc800e15 	stw	r18,56(sp)
   80dc0:	dc400d15 	stw	r17,52(sp)
   80dc4:	14430016 	blt	r2,r17,819c8 <___vfprintf_internal_r+0x1500>
   80dc8:	a8c00204 	addi	r3,r21,8
   80dcc:	d8800517 	ldw	r2,20(sp)
   80dd0:	d9014717 	ldw	r4,1308(sp)
   80dd4:	11015c0e 	bge	r2,r4,81348 <___vfprintf_internal_r+0xe80>
   80dd8:	dc400d17 	ldw	r17,52(sp)
   80ddc:	d9814917 	ldw	r6,1316(sp)
   80de0:	00800044 	movi	r2,1
   80de4:	94800044 	addi	r18,r18,1
   80de8:	8c400044 	addi	r17,r17,1
   80dec:	18800115 	stw	r2,4(r3)
   80df0:	008001c4 	movi	r2,7
   80df4:	19800015 	stw	r6,0(r3)
   80df8:	dc800e15 	stw	r18,56(sp)
   80dfc:	dc400d15 	stw	r17,52(sp)
   80e00:	14431616 	blt	r2,r17,81a5c <___vfprintf_internal_r+0x1594>
   80e04:	18c00204 	addi	r3,r3,8
   80e08:	d8814717 	ldw	r2,1308(sp)
   80e0c:	143fffc4 	addi	r16,r2,-1
   80e10:	043f2b0e 	bge	zero,r16,80ac0 <___vfprintf_internal_r+0x5f8>
   80e14:	00800404 	movi	r2,16
   80e18:	1402a80e 	bge	r2,r16,818bc <___vfprintf_internal_r+0x13f4>
   80e1c:	dc400d17 	ldw	r17,52(sp)
   80e20:	1027883a 	mov	r19,r2
   80e24:	07000274 	movhi	fp,9
   80e28:	e7157b84 	addi	fp,fp,21998
   80e2c:	050001c4 	movi	r20,7
   80e30:	00000306 	br	80e40 <___vfprintf_internal_r+0x978>
   80e34:	18c00204 	addi	r3,r3,8
   80e38:	843ffc04 	addi	r16,r16,-16
   80e3c:	9c02a20e 	bge	r19,r16,818c8 <___vfprintf_internal_r+0x1400>
   80e40:	94800404 	addi	r18,r18,16
   80e44:	8c400044 	addi	r17,r17,1
   80e48:	1f000015 	stw	fp,0(r3)
   80e4c:	1cc00115 	stw	r19,4(r3)
   80e50:	dc800e15 	stw	r18,56(sp)
   80e54:	dc400d15 	stw	r17,52(sp)
   80e58:	a47ff60e 	bge	r20,r17,80e34 <___vfprintf_internal_r+0x96c>
   80e5c:	d9014f17 	ldw	r4,1340(sp)
   80e60:	b00b883a 	mov	r5,r22
   80e64:	d9800c04 	addi	r6,sp,48
   80e68:	00804700 	call	80470 <__sprint_r>
   80e6c:	103f4e1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   80e70:	dc800e17 	ldw	r18,56(sp)
   80e74:	dc400d17 	ldw	r17,52(sp)
   80e78:	d8c01904 	addi	r3,sp,100
   80e7c:	003fee06 	br	80e38 <___vfprintf_internal_r+0x970>
   80e80:	d8802c0b 	ldhu	r2,176(sp)
   80e84:	00ffffc4 	movi	r3,-1
   80e88:	d8c14b15 	stw	r3,1324(sp)
   80e8c:	1080100c 	andi	r2,r2,64
   80e90:	103dcc1e 	bne	r2,zero,805c4 <___vfprintf_internal_r+0xfc>
   80e94:	003dce06 	br	805d0 <___vfprintf_internal_r+0x108>
   80e98:	d9014f17 	ldw	r4,1340(sp)
   80e9c:	b00b883a 	mov	r5,r22
   80ea0:	d9800c04 	addi	r6,sp,48
   80ea4:	00804700 	call	80470 <__sprint_r>
   80ea8:	103f3f1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   80eac:	dc800e17 	ldw	r18,56(sp)
   80eb0:	003f2e06 	br	80b6c <___vfprintf_internal_r+0x6a4>
   80eb4:	d9414c17 	ldw	r5,1328(sp)
   80eb8:	29400414 	ori	r5,r5,16
   80ebc:	d9414c15 	stw	r5,1328(sp)
   80ec0:	d9814c17 	ldw	r6,1328(sp)
   80ec4:	3080080c 	andi	r2,r6,32
   80ec8:	10014f1e 	bne	r2,zero,81408 <___vfprintf_internal_r+0xf40>
   80ecc:	d8c14c17 	ldw	r3,1328(sp)
   80ed0:	1880040c 	andi	r2,r3,16
   80ed4:	1002f01e 	bne	r2,zero,81a98 <___vfprintf_internal_r+0x15d0>
   80ed8:	d9014c17 	ldw	r4,1328(sp)
   80edc:	2080100c 	andi	r2,r4,64
   80ee0:	1002ed26 	beq	r2,zero,81a98 <___vfprintf_internal_r+0x15d0>
   80ee4:	3880000f 	ldh	r2,0(r7)
   80ee8:	39c00104 	addi	r7,r7,4
   80eec:	d9c14015 	stw	r7,1280(sp)
   80ef0:	1023d7fa 	srai	r17,r2,31
   80ef4:	1021883a 	mov	r16,r2
   80ef8:	88037816 	blt	r17,zero,81cdc <___vfprintf_internal_r+0x1814>
   80efc:	01000044 	movi	r4,1
   80f00:	98000416 	blt	r19,zero,80f14 <___vfprintf_internal_r+0xa4c>
   80f04:	d8c14c17 	ldw	r3,1328(sp)
   80f08:	00bfdfc4 	movi	r2,-129
   80f0c:	1886703a 	and	r3,r3,r2
   80f10:	d8c14c15 	stw	r3,1328(sp)
   80f14:	8444b03a 	or	r2,r16,r17
   80f18:	10022c1e 	bne	r2,zero,817cc <___vfprintf_internal_r+0x1304>
   80f1c:	98022b1e 	bne	r19,zero,817cc <___vfprintf_internal_r+0x1304>
   80f20:	20803fcc 	andi	r2,r4,255
   80f24:	1002a126 	beq	r2,zero,819ac <___vfprintf_internal_r+0x14e4>
   80f28:	d8c01904 	addi	r3,sp,100
   80f2c:	dd000f04 	addi	r20,sp,60
   80f30:	d8c14115 	stw	r3,1284(sp)
   80f34:	d8c14117 	ldw	r3,1284(sp)
   80f38:	dcc14515 	stw	r19,1300(sp)
   80f3c:	a0c5c83a 	sub	r2,r20,r3
   80f40:	11c00a04 	addi	r7,r2,40
   80f44:	99c0010e 	bge	r19,r7,80f4c <___vfprintf_internal_r+0xa84>
   80f48:	d9c14515 	stw	r7,1300(sp)
   80f4c:	dcc14615 	stw	r19,1304(sp)
   80f50:	d8800407 	ldb	r2,16(sp)
   80f54:	103e4c26 	beq	r2,zero,80888 <___vfprintf_internal_r+0x3c0>
   80f58:	d8814517 	ldw	r2,1300(sp)
   80f5c:	10800044 	addi	r2,r2,1
   80f60:	d8814515 	stw	r2,1300(sp)
   80f64:	003e4806 	br	80888 <___vfprintf_internal_r+0x3c0>
   80f68:	d9814c17 	ldw	r6,1328(sp)
   80f6c:	31800414 	ori	r6,r6,16
   80f70:	d9814c15 	stw	r6,1328(sp)
   80f74:	d8c14c17 	ldw	r3,1328(sp)
   80f78:	1880080c 	andi	r2,r3,32
   80f7c:	1001271e 	bne	r2,zero,8141c <___vfprintf_internal_r+0xf54>
   80f80:	d9414c17 	ldw	r5,1328(sp)
   80f84:	2880040c 	andi	r2,r5,16
   80f88:	1002bc1e 	bne	r2,zero,81a7c <___vfprintf_internal_r+0x15b4>
   80f8c:	d9814c17 	ldw	r6,1328(sp)
   80f90:	3080100c 	andi	r2,r6,64
   80f94:	1002b926 	beq	r2,zero,81a7c <___vfprintf_internal_r+0x15b4>
   80f98:	3c00000b 	ldhu	r16,0(r7)
   80f9c:	0009883a 	mov	r4,zero
   80fa0:	39c00104 	addi	r7,r7,4
   80fa4:	0023883a 	mov	r17,zero
   80fa8:	d9c14015 	stw	r7,1280(sp)
   80fac:	d8000405 	stb	zero,16(sp)
   80fb0:	003fd306 	br	80f00 <___vfprintf_internal_r+0xa38>
   80fb4:	d9014c17 	ldw	r4,1328(sp)
   80fb8:	21000414 	ori	r4,r4,16
   80fbc:	d9014c15 	stw	r4,1328(sp)
   80fc0:	d9414c17 	ldw	r5,1328(sp)
   80fc4:	2880080c 	andi	r2,r5,32
   80fc8:	1001081e 	bne	r2,zero,813ec <___vfprintf_internal_r+0xf24>
   80fcc:	d8c14c17 	ldw	r3,1328(sp)
   80fd0:	1880040c 	andi	r2,r3,16
   80fd4:	1002b61e 	bne	r2,zero,81ab0 <___vfprintf_internal_r+0x15e8>
   80fd8:	d9014c17 	ldw	r4,1328(sp)
   80fdc:	2080100c 	andi	r2,r4,64
   80fe0:	1002b326 	beq	r2,zero,81ab0 <___vfprintf_internal_r+0x15e8>
   80fe4:	3c00000b 	ldhu	r16,0(r7)
   80fe8:	01000044 	movi	r4,1
   80fec:	39c00104 	addi	r7,r7,4
   80ff0:	0023883a 	mov	r17,zero
   80ff4:	d9c14015 	stw	r7,1280(sp)
   80ff8:	d8000405 	stb	zero,16(sp)
   80ffc:	003fc006 	br	80f00 <___vfprintf_internal_r+0xa38>
   81000:	d9014f17 	ldw	r4,1340(sp)
   81004:	b00b883a 	mov	r5,r22
   81008:	d9800c04 	addi	r6,sp,48
   8100c:	00804700 	call	80470 <__sprint_r>
   81010:	103ee51e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81014:	dc800e17 	ldw	r18,56(sp)
   81018:	d8c01904 	addi	r3,sp,100
   8101c:	d9814c17 	ldw	r6,1328(sp)
   81020:	3080004c 	andi	r2,r6,1
   81024:	1005003a 	cmpeq	r2,r2,zero
   81028:	103ea51e 	bne	r2,zero,80ac0 <___vfprintf_internal_r+0x5f8>
   8102c:	00800044 	movi	r2,1
   81030:	dc400d17 	ldw	r17,52(sp)
   81034:	18800115 	stw	r2,4(r3)
   81038:	d8814917 	ldw	r2,1316(sp)
   8103c:	94800044 	addi	r18,r18,1
   81040:	8c400044 	addi	r17,r17,1
   81044:	18800015 	stw	r2,0(r3)
   81048:	008001c4 	movi	r2,7
   8104c:	dc800e15 	stw	r18,56(sp)
   81050:	dc400d15 	stw	r17,52(sp)
   81054:	1442240e 	bge	r2,r17,818e8 <___vfprintf_internal_r+0x1420>
   81058:	d9014f17 	ldw	r4,1340(sp)
   8105c:	b00b883a 	mov	r5,r22
   81060:	d9800c04 	addi	r6,sp,48
   81064:	00804700 	call	80470 <__sprint_r>
   81068:	103ecf1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   8106c:	dc800e17 	ldw	r18,56(sp)
   81070:	d8c01904 	addi	r3,sp,100
   81074:	003e9206 	br	80ac0 <___vfprintf_internal_r+0x5f8>
   81078:	d9014f17 	ldw	r4,1340(sp)
   8107c:	b00b883a 	mov	r5,r22
   81080:	d9800c04 	addi	r6,sp,48
   81084:	00804700 	call	80470 <__sprint_r>
   81088:	103ec026 	beq	r2,zero,80b8c <___vfprintf_internal_r+0x6c4>
   8108c:	003ec606 	br	80ba8 <___vfprintf_internal_r+0x6e0>
   81090:	d9014f17 	ldw	r4,1340(sp)
   81094:	b00b883a 	mov	r5,r22
   81098:	d9800c04 	addi	r6,sp,48
   8109c:	d9c15115 	stw	r7,1348(sp)
   810a0:	00804700 	call	80470 <__sprint_r>
   810a4:	d9c15117 	ldw	r7,1348(sp)
   810a8:	103ebf1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   810ac:	dc800e17 	ldw	r18,56(sp)
   810b0:	dc400d17 	ldw	r17,52(sp)
   810b4:	dd401904 	addi	r21,sp,100
   810b8:	003e7406 	br	80a8c <___vfprintf_internal_r+0x5c4>
   810bc:	d9014f17 	ldw	r4,1340(sp)
   810c0:	b00b883a 	mov	r5,r22
   810c4:	d9800c04 	addi	r6,sp,48
   810c8:	d9c15115 	stw	r7,1348(sp)
   810cc:	00804700 	call	80470 <__sprint_r>
   810d0:	d9c15117 	ldw	r7,1348(sp)
   810d4:	103eb41e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   810d8:	dd401904 	addi	r21,sp,100
   810dc:	003d6d06 	br	80694 <___vfprintf_internal_r+0x1cc>
   810e0:	d9014f17 	ldw	r4,1340(sp)
   810e4:	b00b883a 	mov	r5,r22
   810e8:	d9800c04 	addi	r6,sp,48
   810ec:	d9c15115 	stw	r7,1348(sp)
   810f0:	00804700 	call	80470 <__sprint_r>
   810f4:	d9c15117 	ldw	r7,1348(sp)
   810f8:	103eab1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   810fc:	dc800e17 	ldw	r18,56(sp)
   81100:	dc400d17 	ldw	r17,52(sp)
   81104:	dd401904 	addi	r21,sp,100
   81108:	003e3406 	br	809dc <___vfprintf_internal_r+0x514>
   8110c:	d9014f17 	ldw	r4,1340(sp)
   81110:	b00b883a 	mov	r5,r22
   81114:	d9800c04 	addi	r6,sp,48
   81118:	d9c15115 	stw	r7,1348(sp)
   8111c:	00804700 	call	80470 <__sprint_r>
   81120:	d9c15117 	ldw	r7,1348(sp)
   81124:	103ea01e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81128:	dc800e17 	ldw	r18,56(sp)
   8112c:	dc400d17 	ldw	r17,52(sp)
   81130:	dd401904 	addi	r21,sp,100
   81134:	003e1c06 	br	809a8 <___vfprintf_internal_r+0x4e0>
   81138:	d9014f17 	ldw	r4,1340(sp)
   8113c:	b00b883a 	mov	r5,r22
   81140:	d9800c04 	addi	r6,sp,48
   81144:	d9c15115 	stw	r7,1348(sp)
   81148:	00804700 	call	80470 <__sprint_r>
   8114c:	d9c15117 	ldw	r7,1348(sp)
   81150:	103e951e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81154:	dc800e17 	ldw	r18,56(sp)
   81158:	dc400d17 	ldw	r17,52(sp)
   8115c:	dd401904 	addi	r21,sp,100
   81160:	003e0406 	br	80974 <___vfprintf_internal_r+0x4ac>
   81164:	d9000517 	ldw	r4,20(sp)
   81168:	0102580e 	bge	zero,r4,81acc <___vfprintf_internal_r+0x1604>
   8116c:	d9814717 	ldw	r6,1308(sp)
   81170:	21807a16 	blt	r4,r6,8135c <___vfprintf_internal_r+0xe94>
   81174:	d8814117 	ldw	r2,1284(sp)
   81178:	91a5883a 	add	r18,r18,r6
   8117c:	8c400044 	addi	r17,r17,1
   81180:	a8800015 	stw	r2,0(r21)
   81184:	008001c4 	movi	r2,7
   81188:	a9800115 	stw	r6,4(r21)
   8118c:	dc800e15 	stw	r18,56(sp)
   81190:	dc400d15 	stw	r17,52(sp)
   81194:	1442fc16 	blt	r2,r17,81d88 <___vfprintf_internal_r+0x18c0>
   81198:	a8c00204 	addi	r3,r21,8
   8119c:	d9414717 	ldw	r5,1308(sp)
   811a0:	2161c83a 	sub	r16,r4,r5
   811a4:	043f9d0e 	bge	zero,r16,8101c <___vfprintf_internal_r+0xb54>
   811a8:	00800404 	movi	r2,16
   811ac:	1402190e 	bge	r2,r16,81a14 <___vfprintf_internal_r+0x154c>
   811b0:	dc400d17 	ldw	r17,52(sp)
   811b4:	1027883a 	mov	r19,r2
   811b8:	07000274 	movhi	fp,9
   811bc:	e7157b84 	addi	fp,fp,21998
   811c0:	050001c4 	movi	r20,7
   811c4:	00000306 	br	811d4 <___vfprintf_internal_r+0xd0c>
   811c8:	18c00204 	addi	r3,r3,8
   811cc:	843ffc04 	addi	r16,r16,-16
   811d0:	9c02130e 	bge	r19,r16,81a20 <___vfprintf_internal_r+0x1558>
   811d4:	94800404 	addi	r18,r18,16
   811d8:	8c400044 	addi	r17,r17,1
   811dc:	1f000015 	stw	fp,0(r3)
   811e0:	1cc00115 	stw	r19,4(r3)
   811e4:	dc800e15 	stw	r18,56(sp)
   811e8:	dc400d15 	stw	r17,52(sp)
   811ec:	a47ff60e 	bge	r20,r17,811c8 <___vfprintf_internal_r+0xd00>
   811f0:	d9014f17 	ldw	r4,1340(sp)
   811f4:	b00b883a 	mov	r5,r22
   811f8:	d9800c04 	addi	r6,sp,48
   811fc:	00804700 	call	80470 <__sprint_r>
   81200:	103e691e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81204:	dc800e17 	ldw	r18,56(sp)
   81208:	dc400d17 	ldw	r17,52(sp)
   8120c:	d8c01904 	addi	r3,sp,100
   81210:	003fee06 	br	811cc <___vfprintf_internal_r+0xd04>
   81214:	d8814717 	ldw	r2,1308(sp)
   81218:	143fffc4 	addi	r16,r2,-1
   8121c:	043e970e 	bge	zero,r16,80c7c <___vfprintf_internal_r+0x7b4>
   81220:	00800404 	movi	r2,16
   81224:	1400180e 	bge	r2,r16,81288 <___vfprintf_internal_r+0xdc0>
   81228:	1029883a 	mov	r20,r2
   8122c:	07000274 	movhi	fp,9
   81230:	e7157b84 	addi	fp,fp,21998
   81234:	054001c4 	movi	r21,7
   81238:	00000306 	br	81248 <___vfprintf_internal_r+0xd80>
   8123c:	9cc00204 	addi	r19,r19,8
   81240:	843ffc04 	addi	r16,r16,-16
   81244:	a400120e 	bge	r20,r16,81290 <___vfprintf_internal_r+0xdc8>
   81248:	94800404 	addi	r18,r18,16
   8124c:	8c400044 	addi	r17,r17,1
   81250:	9f000015 	stw	fp,0(r19)
   81254:	9d000115 	stw	r20,4(r19)
   81258:	dc800e15 	stw	r18,56(sp)
   8125c:	dc400d15 	stw	r17,52(sp)
   81260:	ac7ff60e 	bge	r21,r17,8123c <___vfprintf_internal_r+0xd74>
   81264:	d9014f17 	ldw	r4,1340(sp)
   81268:	b00b883a 	mov	r5,r22
   8126c:	d9800c04 	addi	r6,sp,48
   81270:	00804700 	call	80470 <__sprint_r>
   81274:	103e4c1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81278:	dc800e17 	ldw	r18,56(sp)
   8127c:	dc400d17 	ldw	r17,52(sp)
   81280:	dcc01904 	addi	r19,sp,100
   81284:	003fee06 	br	81240 <___vfprintf_internal_r+0xd78>
   81288:	07000274 	movhi	fp,9
   8128c:	e7157b84 	addi	fp,fp,21998
   81290:	9425883a 	add	r18,r18,r16
   81294:	8c400044 	addi	r17,r17,1
   81298:	008001c4 	movi	r2,7
   8129c:	9f000015 	stw	fp,0(r19)
   812a0:	9c000115 	stw	r16,4(r19)
   812a4:	dc800e15 	stw	r18,56(sp)
   812a8:	dc400d15 	stw	r17,52(sp)
   812ac:	147e720e 	bge	r2,r17,80c78 <___vfprintf_internal_r+0x7b0>
   812b0:	d9014f17 	ldw	r4,1340(sp)
   812b4:	b00b883a 	mov	r5,r22
   812b8:	d9800c04 	addi	r6,sp,48
   812bc:	00804700 	call	80470 <__sprint_r>
   812c0:	103e391e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   812c4:	dc800e17 	ldw	r18,56(sp)
   812c8:	dc400d17 	ldw	r17,52(sp)
   812cc:	dcc01904 	addi	r19,sp,100
   812d0:	003e6a06 	br	80c7c <___vfprintf_internal_r+0x7b4>
   812d4:	d9014f17 	ldw	r4,1340(sp)
   812d8:	b00b883a 	mov	r5,r22
   812dc:	d9800c04 	addi	r6,sp,48
   812e0:	d9c15115 	stw	r7,1348(sp)
   812e4:	00804700 	call	80470 <__sprint_r>
   812e8:	d9c15117 	ldw	r7,1348(sp)
   812ec:	103e2e1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   812f0:	dc800e17 	ldw	r18,56(sp)
   812f4:	dc400d17 	ldw	r17,52(sp)
   812f8:	dd401904 	addi	r21,sp,100
   812fc:	003dba06 	br	809e8 <___vfprintf_internal_r+0x520>
   81300:	d9014f17 	ldw	r4,1340(sp)
   81304:	b00b883a 	mov	r5,r22
   81308:	d9800c04 	addi	r6,sp,48
   8130c:	00804700 	call	80470 <__sprint_r>
   81310:	103e251e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81314:	dc800e17 	ldw	r18,56(sp)
   81318:	dc400d17 	ldw	r17,52(sp)
   8131c:	dcc01904 	addi	r19,sp,100
   81320:	003e4206 	br	80c2c <___vfprintf_internal_r+0x764>
   81324:	d9014f17 	ldw	r4,1340(sp)
   81328:	b00b883a 	mov	r5,r22
   8132c:	d9800c04 	addi	r6,sp,48
   81330:	00804700 	call	80470 <__sprint_r>
   81334:	103e1c1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81338:	dc800e17 	ldw	r18,56(sp)
   8133c:	dc400d17 	ldw	r17,52(sp)
   81340:	d8c01904 	addi	r3,sp,100
   81344:	003e2e06 	br	80c00 <___vfprintf_internal_r+0x738>
   81348:	d9414c17 	ldw	r5,1328(sp)
   8134c:	2880004c 	andi	r2,r5,1
   81350:	1005003a 	cmpeq	r2,r2,zero
   81354:	103dda1e 	bne	r2,zero,80ac0 <___vfprintf_internal_r+0x5f8>
   81358:	003e9f06 	br	80dd8 <___vfprintf_internal_r+0x910>
   8135c:	d8c14117 	ldw	r3,1284(sp)
   81360:	9125883a 	add	r18,r18,r4
   81364:	8c400044 	addi	r17,r17,1
   81368:	008001c4 	movi	r2,7
   8136c:	a8c00015 	stw	r3,0(r21)
   81370:	a9000115 	stw	r4,4(r21)
   81374:	dc800e15 	stw	r18,56(sp)
   81378:	dc400d15 	stw	r17,52(sp)
   8137c:	14426c16 	blt	r2,r17,81d30 <___vfprintf_internal_r+0x1868>
   81380:	a8c00204 	addi	r3,r21,8
   81384:	d9414917 	ldw	r5,1316(sp)
   81388:	00800044 	movi	r2,1
   8138c:	94800044 	addi	r18,r18,1
   81390:	8c400044 	addi	r17,r17,1
   81394:	18800115 	stw	r2,4(r3)
   81398:	008001c4 	movi	r2,7
   8139c:	19400015 	stw	r5,0(r3)
   813a0:	dc800e15 	stw	r18,56(sp)
   813a4:	dc400d15 	stw	r17,52(sp)
   813a8:	2021883a 	mov	r16,r4
   813ac:	14425616 	blt	r2,r17,81d08 <___vfprintf_internal_r+0x1840>
   813b0:	19400204 	addi	r5,r3,8
   813b4:	d9814717 	ldw	r6,1308(sp)
   813b8:	8c400044 	addi	r17,r17,1
   813bc:	dc400d15 	stw	r17,52(sp)
   813c0:	3107c83a 	sub	r3,r6,r4
   813c4:	d9014117 	ldw	r4,1284(sp)
   813c8:	90e5883a 	add	r18,r18,r3
   813cc:	28c00115 	stw	r3,4(r5)
   813d0:	8105883a 	add	r2,r16,r4
   813d4:	28800015 	stw	r2,0(r5)
   813d8:	008001c4 	movi	r2,7
   813dc:	dc800e15 	stw	r18,56(sp)
   813e0:	147f1d16 	blt	r2,r17,81058 <___vfprintf_internal_r+0xb90>
   813e4:	28c00204 	addi	r3,r5,8
   813e8:	003db506 	br	80ac0 <___vfprintf_internal_r+0x5f8>
   813ec:	3c000017 	ldw	r16,0(r7)
   813f0:	3c400117 	ldw	r17,4(r7)
   813f4:	39800204 	addi	r6,r7,8
   813f8:	01000044 	movi	r4,1
   813fc:	d9814015 	stw	r6,1280(sp)
   81400:	d8000405 	stb	zero,16(sp)
   81404:	003ebe06 	br	80f00 <___vfprintf_internal_r+0xa38>
   81408:	3c000017 	ldw	r16,0(r7)
   8140c:	3c400117 	ldw	r17,4(r7)
   81410:	38800204 	addi	r2,r7,8
   81414:	d8814015 	stw	r2,1280(sp)
   81418:	003eb706 	br	80ef8 <___vfprintf_internal_r+0xa30>
   8141c:	3c000017 	ldw	r16,0(r7)
   81420:	3c400117 	ldw	r17,4(r7)
   81424:	39000204 	addi	r4,r7,8
   81428:	d9014015 	stw	r4,1280(sp)
   8142c:	0009883a 	mov	r4,zero
   81430:	d8000405 	stb	zero,16(sp)
   81434:	003eb206 	br	80f00 <___vfprintf_internal_r+0xa38>
   81438:	38c00017 	ldw	r3,0(r7)
   8143c:	39c00104 	addi	r7,r7,4
   81440:	d8c14a15 	stw	r3,1320(sp)
   81444:	1800d70e 	bge	r3,zero,817a4 <___vfprintf_internal_r+0x12dc>
   81448:	00c7c83a 	sub	r3,zero,r3
   8144c:	d8c14a15 	stw	r3,1320(sp)
   81450:	d9014c17 	ldw	r4,1328(sp)
   81454:	b8c00007 	ldb	r3,0(r23)
   81458:	21000114 	ori	r4,r4,4
   8145c:	d9014c15 	stw	r4,1328(sp)
   81460:	003c9806 	br	806c4 <___vfprintf_internal_r+0x1fc>
   81464:	d9814c17 	ldw	r6,1328(sp)
   81468:	3080080c 	andi	r2,r6,32
   8146c:	1001f626 	beq	r2,zero,81c48 <___vfprintf_internal_r+0x1780>
   81470:	d9014b17 	ldw	r4,1324(sp)
   81474:	38800017 	ldw	r2,0(r7)
   81478:	39c00104 	addi	r7,r7,4
   8147c:	d9c14015 	stw	r7,1280(sp)
   81480:	2007d7fa 	srai	r3,r4,31
   81484:	d9c14017 	ldw	r7,1280(sp)
   81488:	11000015 	stw	r4,0(r2)
   8148c:	10c00115 	stw	r3,4(r2)
   81490:	003c6906 	br	80638 <___vfprintf_internal_r+0x170>
   81494:	b8c00007 	ldb	r3,0(r23)
   81498:	00801b04 	movi	r2,108
   8149c:	18825526 	beq	r3,r2,81df4 <___vfprintf_internal_r+0x192c>
   814a0:	d9414c17 	ldw	r5,1328(sp)
   814a4:	29400414 	ori	r5,r5,16
   814a8:	d9414c15 	stw	r5,1328(sp)
   814ac:	003c8506 	br	806c4 <___vfprintf_internal_r+0x1fc>
   814b0:	d9814c17 	ldw	r6,1328(sp)
   814b4:	b8c00007 	ldb	r3,0(r23)
   814b8:	31800814 	ori	r6,r6,32
   814bc:	d9814c15 	stw	r6,1328(sp)
   814c0:	003c8006 	br	806c4 <___vfprintf_internal_r+0x1fc>
   814c4:	d8814c17 	ldw	r2,1328(sp)
   814c8:	3c000017 	ldw	r16,0(r7)
   814cc:	00c01e04 	movi	r3,120
   814d0:	10800094 	ori	r2,r2,2
   814d4:	d8814c15 	stw	r2,1328(sp)
   814d8:	39c00104 	addi	r7,r7,4
   814dc:	01400274 	movhi	r5,9
   814e0:	29556404 	addi	r5,r5,21904
   814e4:	00800c04 	movi	r2,48
   814e8:	0023883a 	mov	r17,zero
   814ec:	01000084 	movi	r4,2
   814f0:	d9c14015 	stw	r7,1280(sp)
   814f4:	d8c14d15 	stw	r3,1332(sp)
   814f8:	d9414415 	stw	r5,1296(sp)
   814fc:	d8800445 	stb	r2,17(sp)
   81500:	d8c00485 	stb	r3,18(sp)
   81504:	d8000405 	stb	zero,16(sp)
   81508:	003e7d06 	br	80f00 <___vfprintf_internal_r+0xa38>
   8150c:	d8814c17 	ldw	r2,1328(sp)
   81510:	b8c00007 	ldb	r3,0(r23)
   81514:	10801014 	ori	r2,r2,64
   81518:	d8814c15 	stw	r2,1328(sp)
   8151c:	003c6906 	br	806c4 <___vfprintf_internal_r+0x1fc>
   81520:	d9414c17 	ldw	r5,1328(sp)
   81524:	2880020c 	andi	r2,r5,8
   81528:	1001e526 	beq	r2,zero,81cc0 <___vfprintf_internal_r+0x17f8>
   8152c:	39800017 	ldw	r6,0(r7)
   81530:	38800204 	addi	r2,r7,8
   81534:	d8814015 	stw	r2,1280(sp)
   81538:	d9814215 	stw	r6,1288(sp)
   8153c:	39c00117 	ldw	r7,4(r7)
   81540:	d9c14315 	stw	r7,1292(sp)
   81544:	d9014217 	ldw	r4,1288(sp)
   81548:	d9414317 	ldw	r5,1292(sp)
   8154c:	0086f780 	call	86f78 <__isinfd>
   81550:	10021d26 	beq	r2,zero,81dc8 <___vfprintf_internal_r+0x1900>
   81554:	d9014217 	ldw	r4,1288(sp)
   81558:	d9414317 	ldw	r5,1292(sp)
   8155c:	000d883a 	mov	r6,zero
   81560:	000f883a 	mov	r7,zero
   81564:	00891140 	call	89114 <__ltdf2>
   81568:	1002d016 	blt	r2,zero,820ac <___vfprintf_internal_r+0x1be4>
   8156c:	d9414d17 	ldw	r5,1332(sp)
   81570:	008011c4 	movi	r2,71
   81574:	11421016 	blt	r2,r5,81db8 <___vfprintf_internal_r+0x18f0>
   81578:	01800274 	movhi	r6,9
   8157c:	31956904 	addi	r6,r6,21924
   81580:	d9814115 	stw	r6,1284(sp)
   81584:	d9014c17 	ldw	r4,1328(sp)
   81588:	00c000c4 	movi	r3,3
   8158c:	00bfdfc4 	movi	r2,-129
   81590:	2088703a 	and	r4,r4,r2
   81594:	180f883a 	mov	r7,r3
   81598:	d8c14515 	stw	r3,1300(sp)
   8159c:	d9014c15 	stw	r4,1328(sp)
   815a0:	d8014615 	stw	zero,1304(sp)
   815a4:	003e6a06 	br	80f50 <___vfprintf_internal_r+0xa88>
   815a8:	38800017 	ldw	r2,0(r7)
   815ac:	00c00044 	movi	r3,1
   815b0:	39c00104 	addi	r7,r7,4
   815b4:	d9c14015 	stw	r7,1280(sp)
   815b8:	d9000f04 	addi	r4,sp,60
   815bc:	180f883a 	mov	r7,r3
   815c0:	d8c14515 	stw	r3,1300(sp)
   815c4:	d9014115 	stw	r4,1284(sp)
   815c8:	d8800f05 	stb	r2,60(sp)
   815cc:	d8000405 	stb	zero,16(sp)
   815d0:	003cac06 	br	80884 <___vfprintf_internal_r+0x3bc>
   815d4:	01400274 	movhi	r5,9
   815d8:	29556f04 	addi	r5,r5,21948
   815dc:	d9414415 	stw	r5,1296(sp)
   815e0:	d9814c17 	ldw	r6,1328(sp)
   815e4:	3080080c 	andi	r2,r6,32
   815e8:	1000ff26 	beq	r2,zero,819e8 <___vfprintf_internal_r+0x1520>
   815ec:	3c000017 	ldw	r16,0(r7)
   815f0:	3c400117 	ldw	r17,4(r7)
   815f4:	38800204 	addi	r2,r7,8
   815f8:	d8814015 	stw	r2,1280(sp)
   815fc:	d9414c17 	ldw	r5,1328(sp)
   81600:	2880004c 	andi	r2,r5,1
   81604:	1005003a 	cmpeq	r2,r2,zero
   81608:	1000b91e 	bne	r2,zero,818f0 <___vfprintf_internal_r+0x1428>
   8160c:	8444b03a 	or	r2,r16,r17
   81610:	1000b726 	beq	r2,zero,818f0 <___vfprintf_internal_r+0x1428>
   81614:	d9814d17 	ldw	r6,1332(sp)
   81618:	29400094 	ori	r5,r5,2
   8161c:	00800c04 	movi	r2,48
   81620:	01000084 	movi	r4,2
   81624:	d9414c15 	stw	r5,1328(sp)
   81628:	d8800445 	stb	r2,17(sp)
   8162c:	d9800485 	stb	r6,18(sp)
   81630:	d8000405 	stb	zero,16(sp)
   81634:	003e3206 	br	80f00 <___vfprintf_internal_r+0xa38>
   81638:	01800274 	movhi	r6,9
   8163c:	31956404 	addi	r6,r6,21904
   81640:	d9814415 	stw	r6,1296(sp)
   81644:	003fe606 	br	815e0 <___vfprintf_internal_r+0x1118>
   81648:	00800ac4 	movi	r2,43
   8164c:	d8800405 	stb	r2,16(sp)
   81650:	b8c00007 	ldb	r3,0(r23)
   81654:	003c1b06 	br	806c4 <___vfprintf_internal_r+0x1fc>
   81658:	d8814c17 	ldw	r2,1328(sp)
   8165c:	b8c00007 	ldb	r3,0(r23)
   81660:	10800054 	ori	r2,r2,1
   81664:	d8814c15 	stw	r2,1328(sp)
   81668:	003c1606 	br	806c4 <___vfprintf_internal_r+0x1fc>
   8166c:	d8800407 	ldb	r2,16(sp)
   81670:	10004c1e 	bne	r2,zero,817a4 <___vfprintf_internal_r+0x12dc>
   81674:	00800804 	movi	r2,32
   81678:	d8800405 	stb	r2,16(sp)
   8167c:	b8c00007 	ldb	r3,0(r23)
   81680:	003c1006 	br	806c4 <___vfprintf_internal_r+0x1fc>
   81684:	d9814c17 	ldw	r6,1328(sp)
   81688:	b8c00007 	ldb	r3,0(r23)
   8168c:	31800214 	ori	r6,r6,8
   81690:	d9814c15 	stw	r6,1328(sp)
   81694:	003c0b06 	br	806c4 <___vfprintf_internal_r+0x1fc>
   81698:	0009883a 	mov	r4,zero
   8169c:	04000244 	movi	r16,9
   816a0:	01400284 	movi	r5,10
   816a4:	d9c15115 	stw	r7,1348(sp)
   816a8:	008964c0 	call	8964c <__mulsi3>
   816ac:	b9000007 	ldb	r4,0(r23)
   816b0:	d8c14d17 	ldw	r3,1332(sp)
   816b4:	bdc00044 	addi	r23,r23,1
   816b8:	d9014d15 	stw	r4,1332(sp)
   816bc:	d9414d17 	ldw	r5,1332(sp)
   816c0:	1885883a 	add	r2,r3,r2
   816c4:	113ff404 	addi	r4,r2,-48
   816c8:	28bff404 	addi	r2,r5,-48
   816cc:	d9c15117 	ldw	r7,1348(sp)
   816d0:	80bff32e 	bgeu	r16,r2,816a0 <___vfprintf_internal_r+0x11d8>
   816d4:	d9014a15 	stw	r4,1320(sp)
   816d8:	003bfc06 	br	806cc <___vfprintf_internal_r+0x204>
   816dc:	d8814c17 	ldw	r2,1328(sp)
   816e0:	b8c00007 	ldb	r3,0(r23)
   816e4:	10802014 	ori	r2,r2,128
   816e8:	d8814c15 	stw	r2,1328(sp)
   816ec:	003bf506 	br	806c4 <___vfprintf_internal_r+0x1fc>
   816f0:	b8c00007 	ldb	r3,0(r23)
   816f4:	00800a84 	movi	r2,42
   816f8:	bdc00044 	addi	r23,r23,1
   816fc:	18831826 	beq	r3,r2,82360 <___vfprintf_internal_r+0x1e98>
   81700:	d8c14d15 	stw	r3,1332(sp)
   81704:	18bff404 	addi	r2,r3,-48
   81708:	00c00244 	movi	r3,9
   8170c:	18827b36 	bltu	r3,r2,820fc <___vfprintf_internal_r+0x1c34>
   81710:	1821883a 	mov	r16,r3
   81714:	0009883a 	mov	r4,zero
   81718:	01400284 	movi	r5,10
   8171c:	d9c15115 	stw	r7,1348(sp)
   81720:	008964c0 	call	8964c <__mulsi3>
   81724:	d9414d17 	ldw	r5,1332(sp)
   81728:	b9800007 	ldb	r6,0(r23)
   8172c:	d9c15117 	ldw	r7,1348(sp)
   81730:	1145883a 	add	r2,r2,r5
   81734:	113ff404 	addi	r4,r2,-48
   81738:	30bff404 	addi	r2,r6,-48
   8173c:	d9814d15 	stw	r6,1332(sp)
   81740:	bdc00044 	addi	r23,r23,1
   81744:	80bff42e 	bgeu	r16,r2,81718 <___vfprintf_internal_r+0x1250>
   81748:	2027883a 	mov	r19,r4
   8174c:	203bdf0e 	bge	r4,zero,806cc <___vfprintf_internal_r+0x204>
   81750:	04ffffc4 	movi	r19,-1
   81754:	003bdd06 	br	806cc <___vfprintf_internal_r+0x204>
   81758:	d8000405 	stb	zero,16(sp)
   8175c:	39800017 	ldw	r6,0(r7)
   81760:	39c00104 	addi	r7,r7,4
   81764:	d9c14015 	stw	r7,1280(sp)
   81768:	d9814115 	stw	r6,1284(sp)
   8176c:	3001c926 	beq	r6,zero,81e94 <___vfprintf_internal_r+0x19cc>
   81770:	98000e16 	blt	r19,zero,817ac <___vfprintf_internal_r+0x12e4>
   81774:	d9014117 	ldw	r4,1284(sp)
   81778:	000b883a 	mov	r5,zero
   8177c:	980d883a 	mov	r6,r19
   81780:	00855fc0 	call	855fc <memchr>
   81784:	10025926 	beq	r2,zero,820ec <___vfprintf_internal_r+0x1c24>
   81788:	d8c14117 	ldw	r3,1284(sp)
   8178c:	10cfc83a 	sub	r7,r2,r3
   81790:	99c19e16 	blt	r19,r7,81e0c <___vfprintf_internal_r+0x1944>
   81794:	d9c14515 	stw	r7,1300(sp)
   81798:	38000916 	blt	r7,zero,817c0 <___vfprintf_internal_r+0x12f8>
   8179c:	d8014615 	stw	zero,1304(sp)
   817a0:	003deb06 	br	80f50 <___vfprintf_internal_r+0xa88>
   817a4:	b8c00007 	ldb	r3,0(r23)
   817a8:	003bc606 	br	806c4 <___vfprintf_internal_r+0x1fc>
   817ac:	d9014117 	ldw	r4,1284(sp)
   817b0:	00803fc0 	call	803fc <strlen>
   817b4:	d8814515 	stw	r2,1300(sp)
   817b8:	100f883a 	mov	r7,r2
   817bc:	103ff70e 	bge	r2,zero,8179c <___vfprintf_internal_r+0x12d4>
   817c0:	d8014515 	stw	zero,1300(sp)
   817c4:	d8014615 	stw	zero,1304(sp)
   817c8:	003de106 	br	80f50 <___vfprintf_internal_r+0xa88>
   817cc:	20c03fcc 	andi	r3,r4,255
   817d0:	00800044 	movi	r2,1
   817d4:	18802d26 	beq	r3,r2,8188c <___vfprintf_internal_r+0x13c4>
   817d8:	18800e36 	bltu	r3,r2,81814 <___vfprintf_internal_r+0x134c>
   817dc:	00800084 	movi	r2,2
   817e0:	1880fa26 	beq	r3,r2,81bcc <___vfprintf_internal_r+0x1704>
   817e4:	01000274 	movhi	r4,9
   817e8:	21157404 	addi	r4,r4,21968
   817ec:	00803fc0 	call	803fc <strlen>
   817f0:	100f883a 	mov	r7,r2
   817f4:	dcc14515 	stw	r19,1300(sp)
   817f8:	9880010e 	bge	r19,r2,81800 <___vfprintf_internal_r+0x1338>
   817fc:	d8814515 	stw	r2,1300(sp)
   81800:	00800274 	movhi	r2,9
   81804:	10957404 	addi	r2,r2,21968
   81808:	dcc14615 	stw	r19,1304(sp)
   8180c:	d8814115 	stw	r2,1284(sp)
   81810:	003dcf06 	br	80f50 <___vfprintf_internal_r+0xa88>
   81814:	d9401904 	addi	r5,sp,100
   81818:	dd000f04 	addi	r20,sp,60
   8181c:	d9414115 	stw	r5,1284(sp)
   81820:	880a977a 	slli	r5,r17,29
   81824:	d9814117 	ldw	r6,1284(sp)
   81828:	8004d0fa 	srli	r2,r16,3
   8182c:	8806d0fa 	srli	r3,r17,3
   81830:	810001cc 	andi	r4,r16,7
   81834:	2884b03a 	or	r2,r5,r2
   81838:	31bfffc4 	addi	r6,r6,-1
   8183c:	21000c04 	addi	r4,r4,48
   81840:	d9814115 	stw	r6,1284(sp)
   81844:	10cab03a 	or	r5,r2,r3
   81848:	31000005 	stb	r4,0(r6)
   8184c:	1021883a 	mov	r16,r2
   81850:	1823883a 	mov	r17,r3
   81854:	283ff21e 	bne	r5,zero,81820 <___vfprintf_internal_r+0x1358>
   81858:	d8c14c17 	ldw	r3,1328(sp)
   8185c:	1880004c 	andi	r2,r3,1
   81860:	1005003a 	cmpeq	r2,r2,zero
   81864:	103db31e 	bne	r2,zero,80f34 <___vfprintf_internal_r+0xa6c>
   81868:	20803fcc 	andi	r2,r4,255
   8186c:	1080201c 	xori	r2,r2,128
   81870:	10bfe004 	addi	r2,r2,-128
   81874:	00c00c04 	movi	r3,48
   81878:	10fdae26 	beq	r2,r3,80f34 <___vfprintf_internal_r+0xa6c>
   8187c:	31bfffc4 	addi	r6,r6,-1
   81880:	d9814115 	stw	r6,1284(sp)
   81884:	30c00005 	stb	r3,0(r6)
   81888:	003daa06 	br	80f34 <___vfprintf_internal_r+0xa6c>
   8188c:	88800068 	cmpgeui	r2,r17,1
   81890:	10002c1e 	bne	r2,zero,81944 <___vfprintf_internal_r+0x147c>
   81894:	8800021e 	bne	r17,zero,818a0 <___vfprintf_internal_r+0x13d8>
   81898:	00800244 	movi	r2,9
   8189c:	14002936 	bltu	r2,r16,81944 <___vfprintf_internal_r+0x147c>
   818a0:	d90018c4 	addi	r4,sp,99
   818a4:	dd000f04 	addi	r20,sp,60
   818a8:	d9014115 	stw	r4,1284(sp)
   818ac:	d9014117 	ldw	r4,1284(sp)
   818b0:	80800c04 	addi	r2,r16,48
   818b4:	20800005 	stb	r2,0(r4)
   818b8:	003d9e06 	br	80f34 <___vfprintf_internal_r+0xa6c>
   818bc:	dc400d17 	ldw	r17,52(sp)
   818c0:	07000274 	movhi	fp,9
   818c4:	e7157b84 	addi	fp,fp,21998
   818c8:	9425883a 	add	r18,r18,r16
   818cc:	8c400044 	addi	r17,r17,1
   818d0:	008001c4 	movi	r2,7
   818d4:	1f000015 	stw	fp,0(r3)
   818d8:	1c000115 	stw	r16,4(r3)
   818dc:	dc800e15 	stw	r18,56(sp)
   818e0:	dc400d15 	stw	r17,52(sp)
   818e4:	147ddc16 	blt	r2,r17,81058 <___vfprintf_internal_r+0xb90>
   818e8:	18c00204 	addi	r3,r3,8
   818ec:	003c7406 	br	80ac0 <___vfprintf_internal_r+0x5f8>
   818f0:	01000084 	movi	r4,2
   818f4:	d8000405 	stb	zero,16(sp)
   818f8:	003d8106 	br	80f00 <___vfprintf_internal_r+0xa38>
   818fc:	d9814c17 	ldw	r6,1328(sp)
   81900:	30c4703a 	and	r2,r6,r3
   81904:	1005003a 	cmpeq	r2,r2,zero
   81908:	103cb326 	beq	r2,zero,80bd8 <___vfprintf_internal_r+0x710>
   8190c:	d9014117 	ldw	r4,1284(sp)
   81910:	94800044 	addi	r18,r18,1
   81914:	8c400044 	addi	r17,r17,1
   81918:	008001c4 	movi	r2,7
   8191c:	a9000015 	stw	r4,0(r21)
   81920:	a8c00115 	stw	r3,4(r21)
   81924:	dc800e15 	stw	r18,56(sp)
   81928:	dc400d15 	stw	r17,52(sp)
   8192c:	147e6016 	blt	r2,r17,812b0 <___vfprintf_internal_r+0xde8>
   81930:	acc00204 	addi	r19,r21,8
   81934:	003cd106 	br	80c7c <___vfprintf_internal_r+0x7b4>
   81938:	07000274 	movhi	fp,9
   8193c:	e7157b84 	addi	fp,fp,21998
   81940:	003c4906 	br	80a68 <___vfprintf_internal_r+0x5a0>
   81944:	dd000f04 	addi	r20,sp,60
   81948:	dc801904 	addi	r18,sp,100
   8194c:	8009883a 	mov	r4,r16
   81950:	880b883a 	mov	r5,r17
   81954:	01800284 	movi	r6,10
   81958:	000f883a 	mov	r7,zero
   8195c:	0087d740 	call	87d74 <__umoddi3>
   81960:	12000c04 	addi	r8,r2,48
   81964:	94bfffc4 	addi	r18,r18,-1
   81968:	8009883a 	mov	r4,r16
   8196c:	880b883a 	mov	r5,r17
   81970:	01800284 	movi	r6,10
   81974:	000f883a 	mov	r7,zero
   81978:	92000005 	stb	r8,0(r18)
   8197c:	00877080 	call	87708 <__udivdi3>
   81980:	1009883a 	mov	r4,r2
   81984:	1021883a 	mov	r16,r2
   81988:	18800068 	cmpgeui	r2,r3,1
   8198c:	1823883a 	mov	r17,r3
   81990:	103fee1e 	bne	r2,zero,8194c <___vfprintf_internal_r+0x1484>
   81994:	1800021e 	bne	r3,zero,819a0 <___vfprintf_internal_r+0x14d8>
   81998:	00800244 	movi	r2,9
   8199c:	113feb36 	bltu	r2,r4,8194c <___vfprintf_internal_r+0x1484>
   819a0:	94bfffc4 	addi	r18,r18,-1
   819a4:	dc814115 	stw	r18,1284(sp)
   819a8:	003fc006 	br	818ac <___vfprintf_internal_r+0x13e4>
   819ac:	d9014c17 	ldw	r4,1328(sp)
   819b0:	2080004c 	andi	r2,r4,1
   819b4:	10009a1e 	bne	r2,zero,81c20 <___vfprintf_internal_r+0x1758>
   819b8:	d9401904 	addi	r5,sp,100
   819bc:	dd000f04 	addi	r20,sp,60
   819c0:	d9414115 	stw	r5,1284(sp)
   819c4:	003d5b06 	br	80f34 <___vfprintf_internal_r+0xa6c>
   819c8:	d9014f17 	ldw	r4,1340(sp)
   819cc:	b00b883a 	mov	r5,r22
   819d0:	d9800c04 	addi	r6,sp,48
   819d4:	00804700 	call	80470 <__sprint_r>
   819d8:	103c731e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   819dc:	dc800e17 	ldw	r18,56(sp)
   819e0:	d8c01904 	addi	r3,sp,100
   819e4:	003cf906 	br	80dcc <___vfprintf_internal_r+0x904>
   819e8:	d8c14c17 	ldw	r3,1328(sp)
   819ec:	1880040c 	andi	r2,r3,16
   819f0:	1000711e 	bne	r2,zero,81bb8 <___vfprintf_internal_r+0x16f0>
   819f4:	d9014c17 	ldw	r4,1328(sp)
   819f8:	2080100c 	andi	r2,r4,64
   819fc:	10006e26 	beq	r2,zero,81bb8 <___vfprintf_internal_r+0x16f0>
   81a00:	3c00000b 	ldhu	r16,0(r7)
   81a04:	0023883a 	mov	r17,zero
   81a08:	39c00104 	addi	r7,r7,4
   81a0c:	d9c14015 	stw	r7,1280(sp)
   81a10:	003efa06 	br	815fc <___vfprintf_internal_r+0x1134>
   81a14:	dc400d17 	ldw	r17,52(sp)
   81a18:	07000274 	movhi	fp,9
   81a1c:	e7157b84 	addi	fp,fp,21998
   81a20:	9425883a 	add	r18,r18,r16
   81a24:	8c400044 	addi	r17,r17,1
   81a28:	008001c4 	movi	r2,7
   81a2c:	1f000015 	stw	fp,0(r3)
   81a30:	1c000115 	stw	r16,4(r3)
   81a34:	dc800e15 	stw	r18,56(sp)
   81a38:	dc400d15 	stw	r17,52(sp)
   81a3c:	147d7016 	blt	r2,r17,81000 <___vfprintf_internal_r+0xb38>
   81a40:	18c00204 	addi	r3,r3,8
   81a44:	003d7506 	br	8101c <___vfprintf_internal_r+0xb54>
   81a48:	dc800e17 	ldw	r18,56(sp)
   81a4c:	dc400d17 	ldw	r17,52(sp)
   81a50:	07000274 	movhi	fp,9
   81a54:	e7157f84 	addi	fp,fp,22014
   81a58:	003bba06 	br	80944 <___vfprintf_internal_r+0x47c>
   81a5c:	d9014f17 	ldw	r4,1340(sp)
   81a60:	b00b883a 	mov	r5,r22
   81a64:	d9800c04 	addi	r6,sp,48
   81a68:	00804700 	call	80470 <__sprint_r>
   81a6c:	103c4e1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81a70:	dc800e17 	ldw	r18,56(sp)
   81a74:	d8c01904 	addi	r3,sp,100
   81a78:	003ce306 	br	80e08 <___vfprintf_internal_r+0x940>
   81a7c:	3c000017 	ldw	r16,0(r7)
   81a80:	0009883a 	mov	r4,zero
   81a84:	39c00104 	addi	r7,r7,4
   81a88:	0023883a 	mov	r17,zero
   81a8c:	d9c14015 	stw	r7,1280(sp)
   81a90:	d8000405 	stb	zero,16(sp)
   81a94:	003d1a06 	br	80f00 <___vfprintf_internal_r+0xa38>
   81a98:	38800017 	ldw	r2,0(r7)
   81a9c:	39c00104 	addi	r7,r7,4
   81aa0:	d9c14015 	stw	r7,1280(sp)
   81aa4:	1023d7fa 	srai	r17,r2,31
   81aa8:	1021883a 	mov	r16,r2
   81aac:	003d1206 	br	80ef8 <___vfprintf_internal_r+0xa30>
   81ab0:	3c000017 	ldw	r16,0(r7)
   81ab4:	01000044 	movi	r4,1
   81ab8:	39c00104 	addi	r7,r7,4
   81abc:	0023883a 	mov	r17,zero
   81ac0:	d9c14015 	stw	r7,1280(sp)
   81ac4:	d8000405 	stb	zero,16(sp)
   81ac8:	003d0d06 	br	80f00 <___vfprintf_internal_r+0xa38>
   81acc:	00800274 	movhi	r2,9
   81ad0:	10957b04 	addi	r2,r2,21996
   81ad4:	94800044 	addi	r18,r18,1
   81ad8:	8c400044 	addi	r17,r17,1
   81adc:	a8800015 	stw	r2,0(r21)
   81ae0:	00c00044 	movi	r3,1
   81ae4:	008001c4 	movi	r2,7
   81ae8:	a8c00115 	stw	r3,4(r21)
   81aec:	dc800e15 	stw	r18,56(sp)
   81af0:	dc400d15 	stw	r17,52(sp)
   81af4:	1440ca16 	blt	r2,r17,81e20 <___vfprintf_internal_r+0x1958>
   81af8:	a8c00204 	addi	r3,r21,8
   81afc:	2000061e 	bne	r4,zero,81b18 <___vfprintf_internal_r+0x1650>
   81b00:	d9414717 	ldw	r5,1308(sp)
   81b04:	2800041e 	bne	r5,zero,81b18 <___vfprintf_internal_r+0x1650>
   81b08:	d9814c17 	ldw	r6,1328(sp)
   81b0c:	3080004c 	andi	r2,r6,1
   81b10:	1005003a 	cmpeq	r2,r2,zero
   81b14:	103bea1e 	bne	r2,zero,80ac0 <___vfprintf_internal_r+0x5f8>
   81b18:	00800044 	movi	r2,1
   81b1c:	dc400d17 	ldw	r17,52(sp)
   81b20:	18800115 	stw	r2,4(r3)
   81b24:	d8814917 	ldw	r2,1316(sp)
   81b28:	94800044 	addi	r18,r18,1
   81b2c:	8c400044 	addi	r17,r17,1
   81b30:	18800015 	stw	r2,0(r3)
   81b34:	008001c4 	movi	r2,7
   81b38:	dc800e15 	stw	r18,56(sp)
   81b3c:	dc400d15 	stw	r17,52(sp)
   81b40:	1440ca16 	blt	r2,r17,81e6c <___vfprintf_internal_r+0x19a4>
   81b44:	18c00204 	addi	r3,r3,8
   81b48:	0121c83a 	sub	r16,zero,r4
   81b4c:	0400500e 	bge	zero,r16,81c90 <___vfprintf_internal_r+0x17c8>
   81b50:	00800404 	movi	r2,16
   81b54:	1400800e 	bge	r2,r16,81d58 <___vfprintf_internal_r+0x1890>
   81b58:	1027883a 	mov	r19,r2
   81b5c:	07000274 	movhi	fp,9
   81b60:	e7157b84 	addi	fp,fp,21998
   81b64:	050001c4 	movi	r20,7
   81b68:	00000306 	br	81b78 <___vfprintf_internal_r+0x16b0>
   81b6c:	18c00204 	addi	r3,r3,8
   81b70:	843ffc04 	addi	r16,r16,-16
   81b74:	9c007a0e 	bge	r19,r16,81d60 <___vfprintf_internal_r+0x1898>
   81b78:	94800404 	addi	r18,r18,16
   81b7c:	8c400044 	addi	r17,r17,1
   81b80:	1f000015 	stw	fp,0(r3)
   81b84:	1cc00115 	stw	r19,4(r3)
   81b88:	dc800e15 	stw	r18,56(sp)
   81b8c:	dc400d15 	stw	r17,52(sp)
   81b90:	a47ff60e 	bge	r20,r17,81b6c <___vfprintf_internal_r+0x16a4>
   81b94:	d9014f17 	ldw	r4,1340(sp)
   81b98:	b00b883a 	mov	r5,r22
   81b9c:	d9800c04 	addi	r6,sp,48
   81ba0:	00804700 	call	80470 <__sprint_r>
   81ba4:	103c001e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81ba8:	dc800e17 	ldw	r18,56(sp)
   81bac:	dc400d17 	ldw	r17,52(sp)
   81bb0:	d8c01904 	addi	r3,sp,100
   81bb4:	003fee06 	br	81b70 <___vfprintf_internal_r+0x16a8>
   81bb8:	3c000017 	ldw	r16,0(r7)
   81bbc:	0023883a 	mov	r17,zero
   81bc0:	39c00104 	addi	r7,r7,4
   81bc4:	d9c14015 	stw	r7,1280(sp)
   81bc8:	003e8c06 	br	815fc <___vfprintf_internal_r+0x1134>
   81bcc:	d9401904 	addi	r5,sp,100
   81bd0:	dd000f04 	addi	r20,sp,60
   81bd4:	d9414115 	stw	r5,1284(sp)
   81bd8:	d9814417 	ldw	r6,1296(sp)
   81bdc:	880a973a 	slli	r5,r17,28
   81be0:	8004d13a 	srli	r2,r16,4
   81be4:	810003cc 	andi	r4,r16,15
   81be8:	3109883a 	add	r4,r6,r4
   81bec:	2884b03a 	or	r2,r5,r2
   81bf0:	21400003 	ldbu	r5,0(r4)
   81bf4:	d9014117 	ldw	r4,1284(sp)
   81bf8:	8806d13a 	srli	r3,r17,4
   81bfc:	1021883a 	mov	r16,r2
   81c00:	213fffc4 	addi	r4,r4,-1
   81c04:	d9014115 	stw	r4,1284(sp)
   81c08:	d9814117 	ldw	r6,1284(sp)
   81c0c:	10c8b03a 	or	r4,r2,r3
   81c10:	1823883a 	mov	r17,r3
   81c14:	31400005 	stb	r5,0(r6)
   81c18:	203fef1e 	bne	r4,zero,81bd8 <___vfprintf_internal_r+0x1710>
   81c1c:	003cc506 	br	80f34 <___vfprintf_internal_r+0xa6c>
   81c20:	00800c04 	movi	r2,48
   81c24:	d98018c4 	addi	r6,sp,99
   81c28:	dd000f04 	addi	r20,sp,60
   81c2c:	d88018c5 	stb	r2,99(sp)
   81c30:	d9814115 	stw	r6,1284(sp)
   81c34:	003cbf06 	br	80f34 <___vfprintf_internal_r+0xa6c>
   81c38:	dc400d17 	ldw	r17,52(sp)
   81c3c:	07000274 	movhi	fp,9
   81c40:	e7157f84 	addi	fp,fp,22014
   81c44:	003bc106 	br	80b4c <___vfprintf_internal_r+0x684>
   81c48:	d9414c17 	ldw	r5,1328(sp)
   81c4c:	2880040c 	andi	r2,r5,16
   81c50:	10007c26 	beq	r2,zero,81e44 <___vfprintf_internal_r+0x197c>
   81c54:	38800017 	ldw	r2,0(r7)
   81c58:	39c00104 	addi	r7,r7,4
   81c5c:	d9c14015 	stw	r7,1280(sp)
   81c60:	d9814b17 	ldw	r6,1324(sp)
   81c64:	d9c14017 	ldw	r7,1280(sp)
   81c68:	11800015 	stw	r6,0(r2)
   81c6c:	003a7206 	br	80638 <___vfprintf_internal_r+0x170>
   81c70:	d9014f17 	ldw	r4,1340(sp)
   81c74:	b00b883a 	mov	r5,r22
   81c78:	d9800c04 	addi	r6,sp,48
   81c7c:	00804700 	call	80470 <__sprint_r>
   81c80:	103bc91e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81c84:	dc800e17 	ldw	r18,56(sp)
   81c88:	dc400d17 	ldw	r17,52(sp)
   81c8c:	d8c01904 	addi	r3,sp,100
   81c90:	d9014717 	ldw	r4,1308(sp)
   81c94:	d9414117 	ldw	r5,1284(sp)
   81c98:	8c400044 	addi	r17,r17,1
   81c9c:	9125883a 	add	r18,r18,r4
   81ca0:	008001c4 	movi	r2,7
   81ca4:	19400015 	stw	r5,0(r3)
   81ca8:	19000115 	stw	r4,4(r3)
   81cac:	dc800e15 	stw	r18,56(sp)
   81cb0:	dc400d15 	stw	r17,52(sp)
   81cb4:	147ce816 	blt	r2,r17,81058 <___vfprintf_internal_r+0xb90>
   81cb8:	18c00204 	addi	r3,r3,8
   81cbc:	003b8006 	br	80ac0 <___vfprintf_internal_r+0x5f8>
   81cc0:	38c00017 	ldw	r3,0(r7)
   81cc4:	39000204 	addi	r4,r7,8
   81cc8:	d9014015 	stw	r4,1280(sp)
   81ccc:	d8c14215 	stw	r3,1288(sp)
   81cd0:	39c00117 	ldw	r7,4(r7)
   81cd4:	d9c14315 	stw	r7,1292(sp)
   81cd8:	003e1a06 	br	81544 <___vfprintf_internal_r+0x107c>
   81cdc:	0005883a 	mov	r2,zero
   81ce0:	1409c83a 	sub	r4,r2,r16
   81ce4:	1105803a 	cmpltu	r2,r2,r4
   81ce8:	044bc83a 	sub	r5,zero,r17
   81cec:	2885c83a 	sub	r2,r5,r2
   81cf0:	2021883a 	mov	r16,r4
   81cf4:	1023883a 	mov	r17,r2
   81cf8:	01000044 	movi	r4,1
   81cfc:	00800b44 	movi	r2,45
   81d00:	d8800405 	stb	r2,16(sp)
   81d04:	003c7e06 	br	80f00 <___vfprintf_internal_r+0xa38>
   81d08:	d9014f17 	ldw	r4,1340(sp)
   81d0c:	b00b883a 	mov	r5,r22
   81d10:	d9800c04 	addi	r6,sp,48
   81d14:	00804700 	call	80470 <__sprint_r>
   81d18:	103ba31e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81d1c:	dc800e17 	ldw	r18,56(sp)
   81d20:	dc400d17 	ldw	r17,52(sp)
   81d24:	d9000517 	ldw	r4,20(sp)
   81d28:	d9401904 	addi	r5,sp,100
   81d2c:	003da106 	br	813b4 <___vfprintf_internal_r+0xeec>
   81d30:	d9014f17 	ldw	r4,1340(sp)
   81d34:	b00b883a 	mov	r5,r22
   81d38:	d9800c04 	addi	r6,sp,48
   81d3c:	00804700 	call	80470 <__sprint_r>
   81d40:	103b991e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81d44:	dc800e17 	ldw	r18,56(sp)
   81d48:	dc400d17 	ldw	r17,52(sp)
   81d4c:	d9000517 	ldw	r4,20(sp)
   81d50:	d8c01904 	addi	r3,sp,100
   81d54:	003d8b06 	br	81384 <___vfprintf_internal_r+0xebc>
   81d58:	07000274 	movhi	fp,9
   81d5c:	e7157b84 	addi	fp,fp,21998
   81d60:	9425883a 	add	r18,r18,r16
   81d64:	8c400044 	addi	r17,r17,1
   81d68:	008001c4 	movi	r2,7
   81d6c:	1f000015 	stw	fp,0(r3)
   81d70:	1c000115 	stw	r16,4(r3)
   81d74:	dc800e15 	stw	r18,56(sp)
   81d78:	dc400d15 	stw	r17,52(sp)
   81d7c:	147fbc16 	blt	r2,r17,81c70 <___vfprintf_internal_r+0x17a8>
   81d80:	18c00204 	addi	r3,r3,8
   81d84:	003fc206 	br	81c90 <___vfprintf_internal_r+0x17c8>
   81d88:	d9014f17 	ldw	r4,1340(sp)
   81d8c:	b00b883a 	mov	r5,r22
   81d90:	d9800c04 	addi	r6,sp,48
   81d94:	00804700 	call	80470 <__sprint_r>
   81d98:	103b831e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81d9c:	dc800e17 	ldw	r18,56(sp)
   81da0:	d9000517 	ldw	r4,20(sp)
   81da4:	d8c01904 	addi	r3,sp,100
   81da8:	003cfc06 	br	8119c <___vfprintf_internal_r+0xcd4>
   81dac:	07000274 	movhi	fp,9
   81db0:	e7157b84 	addi	fp,fp,21998
   81db4:	003bde06 	br	80d30 <___vfprintf_internal_r+0x868>
   81db8:	00800274 	movhi	r2,9
   81dbc:	10956a04 	addi	r2,r2,21928
   81dc0:	d8814115 	stw	r2,1284(sp)
   81dc4:	003def06 	br	81584 <___vfprintf_internal_r+0x10bc>
   81dc8:	d9014217 	ldw	r4,1288(sp)
   81dcc:	d9414317 	ldw	r5,1292(sp)
   81dd0:	0086fb80 	call	86fb8 <__isnand>
   81dd4:	10003926 	beq	r2,zero,81ebc <___vfprintf_internal_r+0x19f4>
   81dd8:	d9414d17 	ldw	r5,1332(sp)
   81ddc:	008011c4 	movi	r2,71
   81de0:	1140ce16 	blt	r2,r5,8211c <___vfprintf_internal_r+0x1c54>
   81de4:	01800274 	movhi	r6,9
   81de8:	31956b04 	addi	r6,r6,21932
   81dec:	d9814115 	stw	r6,1284(sp)
   81df0:	003de406 	br	81584 <___vfprintf_internal_r+0x10bc>
   81df4:	d9014c17 	ldw	r4,1328(sp)
   81df8:	bdc00044 	addi	r23,r23,1
   81dfc:	b8c00007 	ldb	r3,0(r23)
   81e00:	21000814 	ori	r4,r4,32
   81e04:	d9014c15 	stw	r4,1328(sp)
   81e08:	003a2e06 	br	806c4 <___vfprintf_internal_r+0x1fc>
   81e0c:	dcc14515 	stw	r19,1300(sp)
   81e10:	98011016 	blt	r19,zero,82254 <___vfprintf_internal_r+0x1d8c>
   81e14:	980f883a 	mov	r7,r19
   81e18:	d8014615 	stw	zero,1304(sp)
   81e1c:	003c4c06 	br	80f50 <___vfprintf_internal_r+0xa88>
   81e20:	d9014f17 	ldw	r4,1340(sp)
   81e24:	b00b883a 	mov	r5,r22
   81e28:	d9800c04 	addi	r6,sp,48
   81e2c:	00804700 	call	80470 <__sprint_r>
   81e30:	103b5d1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81e34:	dc800e17 	ldw	r18,56(sp)
   81e38:	d9000517 	ldw	r4,20(sp)
   81e3c:	d8c01904 	addi	r3,sp,100
   81e40:	003f2e06 	br	81afc <___vfprintf_internal_r+0x1634>
   81e44:	d8c14c17 	ldw	r3,1328(sp)
   81e48:	1880100c 	andi	r2,r3,64
   81e4c:	1000a026 	beq	r2,zero,820d0 <___vfprintf_internal_r+0x1c08>
   81e50:	38800017 	ldw	r2,0(r7)
   81e54:	39c00104 	addi	r7,r7,4
   81e58:	d9c14015 	stw	r7,1280(sp)
   81e5c:	d9014b17 	ldw	r4,1324(sp)
   81e60:	d9c14017 	ldw	r7,1280(sp)
   81e64:	1100000d 	sth	r4,0(r2)
   81e68:	0039f306 	br	80638 <___vfprintf_internal_r+0x170>
   81e6c:	d9014f17 	ldw	r4,1340(sp)
   81e70:	b00b883a 	mov	r5,r22
   81e74:	d9800c04 	addi	r6,sp,48
   81e78:	00804700 	call	80470 <__sprint_r>
   81e7c:	103b4a1e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   81e80:	dc800e17 	ldw	r18,56(sp)
   81e84:	dc400d17 	ldw	r17,52(sp)
   81e88:	d9000517 	ldw	r4,20(sp)
   81e8c:	d8c01904 	addi	r3,sp,100
   81e90:	003f2d06 	br	81b48 <___vfprintf_internal_r+0x1680>
   81e94:	00800184 	movi	r2,6
   81e98:	14c09a36 	bltu	r2,r19,82104 <___vfprintf_internal_r+0x1c3c>
   81e9c:	dcc14515 	stw	r19,1300(sp)
   81ea0:	9800010e 	bge	r19,zero,81ea8 <___vfprintf_internal_r+0x19e0>
   81ea4:	d8014515 	stw	zero,1300(sp)
   81ea8:	00800274 	movhi	r2,9
   81eac:	10956d04 	addi	r2,r2,21940
   81eb0:	980f883a 	mov	r7,r19
   81eb4:	d8814115 	stw	r2,1284(sp)
   81eb8:	003a7206 	br	80884 <___vfprintf_internal_r+0x3bc>
   81ebc:	00bfffc4 	movi	r2,-1
   81ec0:	9880e226 	beq	r19,r2,8224c <___vfprintf_internal_r+0x1d84>
   81ec4:	d9414d17 	ldw	r5,1332(sp)
   81ec8:	008019c4 	movi	r2,103
   81ecc:	2880dc26 	beq	r5,r2,82240 <___vfprintf_internal_r+0x1d78>
   81ed0:	008011c4 	movi	r2,71
   81ed4:	2880da26 	beq	r5,r2,82240 <___vfprintf_internal_r+0x1d78>
   81ed8:	d9414c17 	ldw	r5,1328(sp)
   81edc:	d9014317 	ldw	r4,1292(sp)
   81ee0:	d9814217 	ldw	r6,1288(sp)
   81ee4:	29404014 	ori	r5,r5,256
   81ee8:	d9414c15 	stw	r5,1328(sp)
   81eec:	2000cc16 	blt	r4,zero,82220 <___vfprintf_internal_r+0x1d58>
   81ef0:	3021883a 	mov	r16,r6
   81ef4:	2023883a 	mov	r17,r4
   81ef8:	0039883a 	mov	fp,zero
   81efc:	d9414d17 	ldw	r5,1332(sp)
   81f00:	00801984 	movi	r2,102
   81f04:	2880b726 	beq	r5,r2,821e4 <___vfprintf_internal_r+0x1d1c>
   81f08:	00801184 	movi	r2,70
   81f0c:	2880b526 	beq	r5,r2,821e4 <___vfprintf_internal_r+0x1d1c>
   81f10:	00801944 	movi	r2,101
   81f14:	2880c826 	beq	r5,r2,82238 <___vfprintf_internal_r+0x1d70>
   81f18:	00801144 	movi	r2,69
   81f1c:	2880c626 	beq	r5,r2,82238 <___vfprintf_internal_r+0x1d70>
   81f20:	9829883a 	mov	r20,r19
   81f24:	d9014f17 	ldw	r4,1340(sp)
   81f28:	d8800504 	addi	r2,sp,20
   81f2c:	880d883a 	mov	r6,r17
   81f30:	d8800115 	stw	r2,4(sp)
   81f34:	d8c00604 	addi	r3,sp,24
   81f38:	d8800704 	addi	r2,sp,28
   81f3c:	800b883a 	mov	r5,r16
   81f40:	01c00084 	movi	r7,2
   81f44:	d8c00215 	stw	r3,8(sp)
   81f48:	d8800315 	stw	r2,12(sp)
   81f4c:	dd000015 	stw	r20,0(sp)
   81f50:	00827300 	call	82730 <_dtoa_r>
   81f54:	d9814d17 	ldw	r6,1332(sp)
   81f58:	d8814115 	stw	r2,1284(sp)
   81f5c:	008019c4 	movi	r2,103
   81f60:	30809526 	beq	r6,r2,821b8 <___vfprintf_internal_r+0x1cf0>
   81f64:	d8c14d17 	ldw	r3,1332(sp)
   81f68:	008011c4 	movi	r2,71
   81f6c:	18809226 	beq	r3,r2,821b8 <___vfprintf_internal_r+0x1cf0>
   81f70:	d9414117 	ldw	r5,1284(sp)
   81f74:	d9814d17 	ldw	r6,1332(sp)
   81f78:	00801984 	movi	r2,102
   81f7c:	2d25883a 	add	r18,r5,r20
   81f80:	30808626 	beq	r6,r2,8219c <___vfprintf_internal_r+0x1cd4>
   81f84:	00801184 	movi	r2,70
   81f88:	30808426 	beq	r6,r2,8219c <___vfprintf_internal_r+0x1cd4>
   81f8c:	000d883a 	mov	r6,zero
   81f90:	000f883a 	mov	r7,zero
   81f94:	880b883a 	mov	r5,r17
   81f98:	8009883a 	mov	r4,r16
   81f9c:	0088ef40 	call	88ef4 <__eqdf2>
   81fa0:	1000751e 	bne	r2,zero,82178 <___vfprintf_internal_r+0x1cb0>
   81fa4:	9005883a 	mov	r2,r18
   81fa8:	dc800715 	stw	r18,28(sp)
   81fac:	d9014117 	ldw	r4,1284(sp)
   81fb0:	d9414d17 	ldw	r5,1332(sp)
   81fb4:	00c019c4 	movi	r3,103
   81fb8:	1125c83a 	sub	r18,r2,r4
   81fbc:	28c06826 	beq	r5,r3,82160 <___vfprintf_internal_r+0x1c98>
   81fc0:	008011c4 	movi	r2,71
   81fc4:	28806626 	beq	r5,r2,82160 <___vfprintf_internal_r+0x1c98>
   81fc8:	d9000517 	ldw	r4,20(sp)
   81fcc:	d8c14d17 	ldw	r3,1332(sp)
   81fd0:	00801944 	movi	r2,101
   81fd4:	10c05516 	blt	r2,r3,8212c <___vfprintf_internal_r+0x1c64>
   81fd8:	213fffc4 	addi	r4,r4,-1
   81fdc:	d9000515 	stw	r4,20(sp)
   81fe0:	d8c00805 	stb	r3,32(sp)
   81fe4:	2021883a 	mov	r16,r4
   81fe8:	2000c116 	blt	r4,zero,822f0 <___vfprintf_internal_r+0x1e28>
   81fec:	00800ac4 	movi	r2,43
   81ff0:	d8800845 	stb	r2,33(sp)
   81ff4:	00800244 	movi	r2,9
   81ff8:	1400af0e 	bge	r2,r16,822b8 <___vfprintf_internal_r+0x1df0>
   81ffc:	1027883a 	mov	r19,r2
   82000:	dc400b84 	addi	r17,sp,46
   82004:	8009883a 	mov	r4,r16
   82008:	01400284 	movi	r5,10
   8200c:	00895dc0 	call	895dc <__modsi3>
   82010:	10800c04 	addi	r2,r2,48
   82014:	8c7fffc4 	addi	r17,r17,-1
   82018:	8009883a 	mov	r4,r16
   8201c:	01400284 	movi	r5,10
   82020:	88800005 	stb	r2,0(r17)
   82024:	008957c0 	call	8957c <__divsi3>
   82028:	1021883a 	mov	r16,r2
   8202c:	98bff516 	blt	r19,r2,82004 <___vfprintf_internal_r+0x1b3c>
   82030:	10c00c04 	addi	r3,r2,48
   82034:	d88009c4 	addi	r2,sp,39
   82038:	108001c4 	addi	r2,r2,7
   8203c:	897fffc4 	addi	r5,r17,-1
   82040:	88ffffc5 	stb	r3,-1(r17)
   82044:	2880a72e 	bgeu	r5,r2,822e4 <___vfprintf_internal_r+0x1e1c>
   82048:	1009883a 	mov	r4,r2
   8204c:	d9800804 	addi	r6,sp,32
   82050:	d8c00884 	addi	r3,sp,34
   82054:	28800003 	ldbu	r2,0(r5)
   82058:	29400044 	addi	r5,r5,1
   8205c:	18800005 	stb	r2,0(r3)
   82060:	18c00044 	addi	r3,r3,1
   82064:	293ffb36 	bltu	r5,r4,82054 <___vfprintf_internal_r+0x1b8c>
   82068:	1987c83a 	sub	r3,r3,r6
   8206c:	00800044 	movi	r2,1
   82070:	d8c14815 	stw	r3,1312(sp)
   82074:	90cf883a 	add	r7,r18,r3
   82078:	1480960e 	bge	r2,r18,822d4 <___vfprintf_internal_r+0x1e0c>
   8207c:	39c00044 	addi	r7,r7,1
   82080:	d9c14515 	stw	r7,1300(sp)
   82084:	38003416 	blt	r7,zero,82158 <___vfprintf_internal_r+0x1c90>
   82088:	e0803fcc 	andi	r2,fp,255
   8208c:	1080201c 	xori	r2,r2,128
   82090:	10bfe004 	addi	r2,r2,-128
   82094:	10004e26 	beq	r2,zero,821d0 <___vfprintf_internal_r+0x1d08>
   82098:	00800b44 	movi	r2,45
   8209c:	dc814715 	stw	r18,1308(sp)
   820a0:	d8014615 	stw	zero,1304(sp)
   820a4:	d8800405 	stb	r2,16(sp)
   820a8:	003bab06 	br	80f58 <___vfprintf_internal_r+0xa90>
   820ac:	00800b44 	movi	r2,45
   820b0:	d8800405 	stb	r2,16(sp)
   820b4:	003d2d06 	br	8156c <___vfprintf_internal_r+0x10a4>
   820b8:	d9014f17 	ldw	r4,1340(sp)
   820bc:	b00b883a 	mov	r5,r22
   820c0:	d9800c04 	addi	r6,sp,48
   820c4:	00804700 	call	80470 <__sprint_r>
   820c8:	103ab71e 	bne	r2,zero,80ba8 <___vfprintf_internal_r+0x6e0>
   820cc:	003ab506 	br	80ba4 <___vfprintf_internal_r+0x6dc>
   820d0:	38800017 	ldw	r2,0(r7)
   820d4:	39c00104 	addi	r7,r7,4
   820d8:	d9c14015 	stw	r7,1280(sp)
   820dc:	d9414b17 	ldw	r5,1324(sp)
   820e0:	d9c14017 	ldw	r7,1280(sp)
   820e4:	11400015 	stw	r5,0(r2)
   820e8:	00395306 	br	80638 <___vfprintf_internal_r+0x170>
   820ec:	980f883a 	mov	r7,r19
   820f0:	dcc14515 	stw	r19,1300(sp)
   820f4:	d8014615 	stw	zero,1304(sp)
   820f8:	003b9506 	br	80f50 <___vfprintf_internal_r+0xa88>
   820fc:	0027883a 	mov	r19,zero
   82100:	00397206 	br	806cc <___vfprintf_internal_r+0x204>
   82104:	00c00274 	movhi	r3,9
   82108:	18d56d04 	addi	r3,r3,21940
   8210c:	100f883a 	mov	r7,r2
   82110:	d8814515 	stw	r2,1300(sp)
   82114:	d8c14115 	stw	r3,1284(sp)
   82118:	0039da06 	br	80884 <___vfprintf_internal_r+0x3bc>
   8211c:	00800274 	movhi	r2,9
   82120:	10956c04 	addi	r2,r2,21936
   82124:	d8814115 	stw	r2,1284(sp)
   82128:	003d1606 	br	81584 <___vfprintf_internal_r+0x10bc>
   8212c:	d9414d17 	ldw	r5,1332(sp)
   82130:	00801984 	movi	r2,102
   82134:	28804926 	beq	r5,r2,8225c <___vfprintf_internal_r+0x1d94>
   82138:	200f883a 	mov	r7,r4
   8213c:	24805716 	blt	r4,r18,8229c <___vfprintf_internal_r+0x1dd4>
   82140:	d9414c17 	ldw	r5,1328(sp)
   82144:	2880004c 	andi	r2,r5,1
   82148:	10000126 	beq	r2,zero,82150 <___vfprintf_internal_r+0x1c88>
   8214c:	21c00044 	addi	r7,r4,1
   82150:	d9c14515 	stw	r7,1300(sp)
   82154:	383fcc0e 	bge	r7,zero,82088 <___vfprintf_internal_r+0x1bc0>
   82158:	d8014515 	stw	zero,1300(sp)
   8215c:	003fca06 	br	82088 <___vfprintf_internal_r+0x1bc0>
   82160:	d9000517 	ldw	r4,20(sp)
   82164:	00bfff04 	movi	r2,-4
   82168:	1100480e 	bge	r2,r4,8228c <___vfprintf_internal_r+0x1dc4>
   8216c:	99004716 	blt	r19,r4,8228c <___vfprintf_internal_r+0x1dc4>
   82170:	d8c14d15 	stw	r3,1332(sp)
   82174:	003ff006 	br	82138 <___vfprintf_internal_r+0x1c70>
   82178:	d8800717 	ldw	r2,28(sp)
   8217c:	14bf8b2e 	bgeu	r2,r18,81fac <___vfprintf_internal_r+0x1ae4>
   82180:	9007883a 	mov	r3,r18
   82184:	01000c04 	movi	r4,48
   82188:	11000005 	stb	r4,0(r2)
   8218c:	10800044 	addi	r2,r2,1
   82190:	d8800715 	stw	r2,28(sp)
   82194:	18bffc1e 	bne	r3,r2,82188 <___vfprintf_internal_r+0x1cc0>
   82198:	003f8406 	br	81fac <___vfprintf_internal_r+0x1ae4>
   8219c:	d8814117 	ldw	r2,1284(sp)
   821a0:	10c00007 	ldb	r3,0(r2)
   821a4:	00800c04 	movi	r2,48
   821a8:	18805b26 	beq	r3,r2,82318 <___vfprintf_internal_r+0x1e50>
   821ac:	d9000517 	ldw	r4,20(sp)
   821b0:	9125883a 	add	r18,r18,r4
   821b4:	003f7506 	br	81f8c <___vfprintf_internal_r+0x1ac4>
   821b8:	d9014c17 	ldw	r4,1328(sp)
   821bc:	2080004c 	andi	r2,r4,1
   821c0:	1005003a 	cmpeq	r2,r2,zero
   821c4:	103f6a26 	beq	r2,zero,81f70 <___vfprintf_internal_r+0x1aa8>
   821c8:	d8800717 	ldw	r2,28(sp)
   821cc:	003f7706 	br	81fac <___vfprintf_internal_r+0x1ae4>
   821d0:	d9c14515 	stw	r7,1300(sp)
   821d4:	38004d16 	blt	r7,zero,8230c <___vfprintf_internal_r+0x1e44>
   821d8:	dc814715 	stw	r18,1308(sp)
   821dc:	d8014615 	stw	zero,1304(sp)
   821e0:	003b5b06 	br	80f50 <___vfprintf_internal_r+0xa88>
   821e4:	d9014f17 	ldw	r4,1340(sp)
   821e8:	d8800504 	addi	r2,sp,20
   821ec:	d8800115 	stw	r2,4(sp)
   821f0:	d8c00604 	addi	r3,sp,24
   821f4:	d8800704 	addi	r2,sp,28
   821f8:	800b883a 	mov	r5,r16
   821fc:	880d883a 	mov	r6,r17
   82200:	01c000c4 	movi	r7,3
   82204:	d8c00215 	stw	r3,8(sp)
   82208:	d8800315 	stw	r2,12(sp)
   8220c:	dcc00015 	stw	r19,0(sp)
   82210:	9829883a 	mov	r20,r19
   82214:	00827300 	call	82730 <_dtoa_r>
   82218:	d8814115 	stw	r2,1284(sp)
   8221c:	003f5106 	br	81f64 <___vfprintf_internal_r+0x1a9c>
   82220:	d8c14217 	ldw	r3,1288(sp)
   82224:	d9014317 	ldw	r4,1292(sp)
   82228:	07000b44 	movi	fp,45
   8222c:	1821883a 	mov	r16,r3
   82230:	2460003c 	xorhi	r17,r4,32768
   82234:	003f3106 	br	81efc <___vfprintf_internal_r+0x1a34>
   82238:	9d000044 	addi	r20,r19,1
   8223c:	003f3906 	br	81f24 <___vfprintf_internal_r+0x1a5c>
   82240:	983f251e 	bne	r19,zero,81ed8 <___vfprintf_internal_r+0x1a10>
   82244:	04c00044 	movi	r19,1
   82248:	003f2306 	br	81ed8 <___vfprintf_internal_r+0x1a10>
   8224c:	04c00184 	movi	r19,6
   82250:	003f2106 	br	81ed8 <___vfprintf_internal_r+0x1a10>
   82254:	d8014515 	stw	zero,1300(sp)
   82258:	003eee06 	br	81e14 <___vfprintf_internal_r+0x194c>
   8225c:	200f883a 	mov	r7,r4
   82260:	0100370e 	bge	zero,r4,82340 <___vfprintf_internal_r+0x1e78>
   82264:	9800031e 	bne	r19,zero,82274 <___vfprintf_internal_r+0x1dac>
   82268:	d9814c17 	ldw	r6,1328(sp)
   8226c:	3080004c 	andi	r2,r6,1
   82270:	103fb726 	beq	r2,zero,82150 <___vfprintf_internal_r+0x1c88>
   82274:	20800044 	addi	r2,r4,1
   82278:	98a7883a 	add	r19,r19,r2
   8227c:	dcc14515 	stw	r19,1300(sp)
   82280:	980f883a 	mov	r7,r19
   82284:	983f800e 	bge	r19,zero,82088 <___vfprintf_internal_r+0x1bc0>
   82288:	003fb306 	br	82158 <___vfprintf_internal_r+0x1c90>
   8228c:	d9814d17 	ldw	r6,1332(sp)
   82290:	31bfff84 	addi	r6,r6,-2
   82294:	d9814d15 	stw	r6,1332(sp)
   82298:	003f4c06 	br	81fcc <___vfprintf_internal_r+0x1b04>
   8229c:	0100180e 	bge	zero,r4,82300 <___vfprintf_internal_r+0x1e38>
   822a0:	00800044 	movi	r2,1
   822a4:	1485883a 	add	r2,r2,r18
   822a8:	d8814515 	stw	r2,1300(sp)
   822ac:	100f883a 	mov	r7,r2
   822b0:	103f750e 	bge	r2,zero,82088 <___vfprintf_internal_r+0x1bc0>
   822b4:	003fa806 	br	82158 <___vfprintf_internal_r+0x1c90>
   822b8:	80c00c04 	addi	r3,r16,48
   822bc:	00800c04 	movi	r2,48
   822c0:	d8c008c5 	stb	r3,35(sp)
   822c4:	d9800804 	addi	r6,sp,32
   822c8:	d8c00904 	addi	r3,sp,36
   822cc:	d8800885 	stb	r2,34(sp)
   822d0:	003f6506 	br	82068 <___vfprintf_internal_r+0x1ba0>
   822d4:	d9014c17 	ldw	r4,1328(sp)
   822d8:	2084703a 	and	r2,r4,r2
   822dc:	103f9c26 	beq	r2,zero,82150 <___vfprintf_internal_r+0x1c88>
   822e0:	003f6606 	br	8207c <___vfprintf_internal_r+0x1bb4>
   822e4:	d9800804 	addi	r6,sp,32
   822e8:	d8c00884 	addi	r3,sp,34
   822ec:	003f5e06 	br	82068 <___vfprintf_internal_r+0x1ba0>
   822f0:	00800b44 	movi	r2,45
   822f4:	0121c83a 	sub	r16,zero,r4
   822f8:	d8800845 	stb	r2,33(sp)
   822fc:	003f3d06 	br	81ff4 <___vfprintf_internal_r+0x1b2c>
   82300:	00800084 	movi	r2,2
   82304:	1105c83a 	sub	r2,r2,r4
   82308:	003fe606 	br	822a4 <___vfprintf_internal_r+0x1ddc>
   8230c:	d8014515 	stw	zero,1300(sp)
   82310:	dc814715 	stw	r18,1308(sp)
   82314:	003fb106 	br	821dc <___vfprintf_internal_r+0x1d14>
   82318:	000d883a 	mov	r6,zero
   8231c:	000f883a 	mov	r7,zero
   82320:	8009883a 	mov	r4,r16
   82324:	880b883a 	mov	r5,r17
   82328:	0088f7c0 	call	88f7c <__nedf2>
   8232c:	103f9f26 	beq	r2,zero,821ac <___vfprintf_internal_r+0x1ce4>
   82330:	00800044 	movi	r2,1
   82334:	1509c83a 	sub	r4,r2,r20
   82338:	d9000515 	stw	r4,20(sp)
   8233c:	003f9b06 	br	821ac <___vfprintf_internal_r+0x1ce4>
   82340:	98000d1e 	bne	r19,zero,82378 <___vfprintf_internal_r+0x1eb0>
   82344:	d8c14c17 	ldw	r3,1328(sp)
   82348:	1880004c 	andi	r2,r3,1
   8234c:	10000a1e 	bne	r2,zero,82378 <___vfprintf_internal_r+0x1eb0>
   82350:	01000044 	movi	r4,1
   82354:	200f883a 	mov	r7,r4
   82358:	d9014515 	stw	r4,1300(sp)
   8235c:	003f4a06 	br	82088 <___vfprintf_internal_r+0x1bc0>
   82360:	3cc00017 	ldw	r19,0(r7)
   82364:	39c00104 	addi	r7,r7,4
   82368:	983d0e0e 	bge	r19,zero,817a4 <___vfprintf_internal_r+0x12dc>
   8236c:	b8c00007 	ldb	r3,0(r23)
   82370:	04ffffc4 	movi	r19,-1
   82374:	0038d306 	br	806c4 <___vfprintf_internal_r+0x1fc>
   82378:	9cc00084 	addi	r19,r19,2
   8237c:	dcc14515 	stw	r19,1300(sp)
   82380:	980f883a 	mov	r7,r19
   82384:	983f400e 	bge	r19,zero,82088 <___vfprintf_internal_r+0x1bc0>
   82388:	003f7306 	br	82158 <___vfprintf_internal_r+0x1c90>

0008238c <__vfprintf_internal>:
   8238c:	00800274 	movhi	r2,9
   82390:	109d0704 	addi	r2,r2,29724
   82394:	2013883a 	mov	r9,r4
   82398:	11000017 	ldw	r4,0(r2)
   8239c:	2805883a 	mov	r2,r5
   823a0:	300f883a 	mov	r7,r6
   823a4:	480b883a 	mov	r5,r9
   823a8:	100d883a 	mov	r6,r2
   823ac:	00804c81 	jmpi	804c8 <___vfprintf_internal_r>

000823b0 <__swsetup_r>:
   823b0:	00800274 	movhi	r2,9
   823b4:	109d0704 	addi	r2,r2,29724
   823b8:	10c00017 	ldw	r3,0(r2)
   823bc:	defffd04 	addi	sp,sp,-12
   823c0:	dc400115 	stw	r17,4(sp)
   823c4:	dc000015 	stw	r16,0(sp)
   823c8:	dfc00215 	stw	ra,8(sp)
   823cc:	2023883a 	mov	r17,r4
   823d0:	2821883a 	mov	r16,r5
   823d4:	18000226 	beq	r3,zero,823e0 <__swsetup_r+0x30>
   823d8:	18800e17 	ldw	r2,56(r3)
   823dc:	10001f26 	beq	r2,zero,8245c <__swsetup_r+0xac>
   823e0:	8100030b 	ldhu	r4,12(r16)
   823e4:	2080020c 	andi	r2,r4,8
   823e8:	10002826 	beq	r2,zero,8248c <__swsetup_r+0xdc>
   823ec:	81400417 	ldw	r5,16(r16)
   823f0:	28001d26 	beq	r5,zero,82468 <__swsetup_r+0xb8>
   823f4:	2080004c 	andi	r2,r4,1
   823f8:	1005003a 	cmpeq	r2,r2,zero
   823fc:	10000b26 	beq	r2,zero,8242c <__swsetup_r+0x7c>
   82400:	2080008c 	andi	r2,r4,2
   82404:	10001226 	beq	r2,zero,82450 <__swsetup_r+0xa0>
   82408:	0005883a 	mov	r2,zero
   8240c:	80800215 	stw	r2,8(r16)
   82410:	28000b26 	beq	r5,zero,82440 <__swsetup_r+0x90>
   82414:	0005883a 	mov	r2,zero
   82418:	dfc00217 	ldw	ra,8(sp)
   8241c:	dc400117 	ldw	r17,4(sp)
   82420:	dc000017 	ldw	r16,0(sp)
   82424:	dec00304 	addi	sp,sp,12
   82428:	f800283a 	ret
   8242c:	80800517 	ldw	r2,20(r16)
   82430:	80000215 	stw	zero,8(r16)
   82434:	0085c83a 	sub	r2,zero,r2
   82438:	80800615 	stw	r2,24(r16)
   8243c:	283ff51e 	bne	r5,zero,82414 <__swsetup_r+0x64>
   82440:	2080200c 	andi	r2,r4,128
   82444:	103ff326 	beq	r2,zero,82414 <__swsetup_r+0x64>
   82448:	00bfffc4 	movi	r2,-1
   8244c:	003ff206 	br	82418 <__swsetup_r+0x68>
   82450:	80800517 	ldw	r2,20(r16)
   82454:	80800215 	stw	r2,8(r16)
   82458:	003fed06 	br	82410 <__swsetup_r+0x60>
   8245c:	1809883a 	mov	r4,r3
   82460:	0083f7c0 	call	83f7c <__sinit>
   82464:	003fde06 	br	823e0 <__swsetup_r+0x30>
   82468:	20c0a00c 	andi	r3,r4,640
   8246c:	00808004 	movi	r2,512
   82470:	18bfe026 	beq	r3,r2,823f4 <__swsetup_r+0x44>
   82474:	8809883a 	mov	r4,r17
   82478:	800b883a 	mov	r5,r16
   8247c:	0084d280 	call	84d28 <__smakebuf_r>
   82480:	8100030b 	ldhu	r4,12(r16)
   82484:	81400417 	ldw	r5,16(r16)
   82488:	003fda06 	br	823f4 <__swsetup_r+0x44>
   8248c:	2080040c 	andi	r2,r4,16
   82490:	103fed26 	beq	r2,zero,82448 <__swsetup_r+0x98>
   82494:	2080010c 	andi	r2,r4,4
   82498:	10001226 	beq	r2,zero,824e4 <__swsetup_r+0x134>
   8249c:	81400c17 	ldw	r5,48(r16)
   824a0:	28000526 	beq	r5,zero,824b8 <__swsetup_r+0x108>
   824a4:	80801004 	addi	r2,r16,64
   824a8:	28800226 	beq	r5,r2,824b4 <__swsetup_r+0x104>
   824ac:	8809883a 	mov	r4,r17
   824b0:	00843340 	call	84334 <_free_r>
   824b4:	80000c15 	stw	zero,48(r16)
   824b8:	8080030b 	ldhu	r2,12(r16)
   824bc:	81400417 	ldw	r5,16(r16)
   824c0:	80000115 	stw	zero,4(r16)
   824c4:	10bff6cc 	andi	r2,r2,65499
   824c8:	8080030d 	sth	r2,12(r16)
   824cc:	81400015 	stw	r5,0(r16)
   824d0:	8080030b 	ldhu	r2,12(r16)
   824d4:	10800214 	ori	r2,r2,8
   824d8:	113fffcc 	andi	r4,r2,65535
   824dc:	8080030d 	sth	r2,12(r16)
   824e0:	003fc306 	br	823f0 <__swsetup_r+0x40>
   824e4:	81400417 	ldw	r5,16(r16)
   824e8:	003ff906 	br	824d0 <__swsetup_r+0x120>

000824ec <quorem>:
   824ec:	28c00417 	ldw	r3,16(r5)
   824f0:	20800417 	ldw	r2,16(r4)
   824f4:	defff104 	addi	sp,sp,-60
   824f8:	dfc00e15 	stw	ra,56(sp)
   824fc:	df000d15 	stw	fp,52(sp)
   82500:	ddc00c15 	stw	r23,48(sp)
   82504:	dd800b15 	stw	r22,44(sp)
   82508:	dd400a15 	stw	r21,40(sp)
   8250c:	dd000915 	stw	r20,36(sp)
   82510:	dcc00815 	stw	r19,32(sp)
   82514:	dc800715 	stw	r18,28(sp)
   82518:	dc400615 	stw	r17,24(sp)
   8251c:	dc000515 	stw	r16,20(sp)
   82520:	d9000315 	stw	r4,12(sp)
   82524:	d9400415 	stw	r5,16(sp)
   82528:	10c07f16 	blt	r2,r3,82728 <quorem+0x23c>
   8252c:	1d3fffc4 	addi	r20,r3,-1
   82530:	d8c00417 	ldw	r3,16(sp)
   82534:	d9000317 	ldw	r4,12(sp)
   82538:	a505883a 	add	r2,r20,r20
   8253c:	1085883a 	add	r2,r2,r2
   82540:	1cc00504 	addi	r19,r3,20
   82544:	25c00504 	addi	r23,r4,20
   82548:	98ad883a 	add	r22,r19,r2
   8254c:	15c7883a 	add	r3,r2,r23
   82550:	b1400017 	ldw	r5,0(r22)
   82554:	19000017 	ldw	r4,0(r3)
   82558:	d8c00015 	stw	r3,0(sp)
   8255c:	29400044 	addi	r5,r5,1
   82560:	d9000215 	stw	r4,8(sp)
   82564:	008963c0 	call	8963c <__udivsi3>
   82568:	1039883a 	mov	fp,r2
   8256c:	10003d1e 	bne	r2,zero,82664 <quorem+0x178>
   82570:	d9400417 	ldw	r5,16(sp)
   82574:	d9000317 	ldw	r4,12(sp)
   82578:	0085a540 	call	85a54 <__mcmp>
   8257c:	10002c16 	blt	r2,zero,82630 <quorem+0x144>
   82580:	e7000044 	addi	fp,fp,1
   82584:	b80f883a 	mov	r7,r23
   82588:	0011883a 	mov	r8,zero
   8258c:	0009883a 	mov	r4,zero
   82590:	99400017 	ldw	r5,0(r19)
   82594:	38c00017 	ldw	r3,0(r7)
   82598:	9cc00104 	addi	r19,r19,4
   8259c:	28bfffcc 	andi	r2,r5,65535
   825a0:	2085883a 	add	r2,r4,r2
   825a4:	11bfffcc 	andi	r6,r2,65535
   825a8:	193fffcc 	andi	r4,r3,65535
   825ac:	1004d43a 	srli	r2,r2,16
   825b0:	280ad43a 	srli	r5,r5,16
   825b4:	2189c83a 	sub	r4,r4,r6
   825b8:	2209883a 	add	r4,r4,r8
   825bc:	1806d43a 	srli	r3,r3,16
   825c0:	288b883a 	add	r5,r5,r2
   825c4:	200dd43a 	srai	r6,r4,16
   825c8:	28bfffcc 	andi	r2,r5,65535
   825cc:	1887c83a 	sub	r3,r3,r2
   825d0:	1987883a 	add	r3,r3,r6
   825d4:	3900000d 	sth	r4,0(r7)
   825d8:	38c0008d 	sth	r3,2(r7)
   825dc:	2808d43a 	srli	r4,r5,16
   825e0:	39c00104 	addi	r7,r7,4
   825e4:	1811d43a 	srai	r8,r3,16
   825e8:	b4ffe92e 	bgeu	r22,r19,82590 <quorem+0xa4>
   825ec:	a505883a 	add	r2,r20,r20
   825f0:	1085883a 	add	r2,r2,r2
   825f4:	b885883a 	add	r2,r23,r2
   825f8:	10c00017 	ldw	r3,0(r2)
   825fc:	18000c1e 	bne	r3,zero,82630 <quorem+0x144>
   82600:	113fff04 	addi	r4,r2,-4
   82604:	b900082e 	bgeu	r23,r4,82628 <quorem+0x13c>
   82608:	10bfff17 	ldw	r2,-4(r2)
   8260c:	10000326 	beq	r2,zero,8261c <quorem+0x130>
   82610:	00000506 	br	82628 <quorem+0x13c>
   82614:	20800017 	ldw	r2,0(r4)
   82618:	1000031e 	bne	r2,zero,82628 <quorem+0x13c>
   8261c:	213fff04 	addi	r4,r4,-4
   82620:	a53fffc4 	addi	r20,r20,-1
   82624:	b93ffb36 	bltu	r23,r4,82614 <quorem+0x128>
   82628:	d9000317 	ldw	r4,12(sp)
   8262c:	25000415 	stw	r20,16(r4)
   82630:	e005883a 	mov	r2,fp
   82634:	dfc00e17 	ldw	ra,56(sp)
   82638:	df000d17 	ldw	fp,52(sp)
   8263c:	ddc00c17 	ldw	r23,48(sp)
   82640:	dd800b17 	ldw	r22,44(sp)
   82644:	dd400a17 	ldw	r21,40(sp)
   82648:	dd000917 	ldw	r20,36(sp)
   8264c:	dcc00817 	ldw	r19,32(sp)
   82650:	dc800717 	ldw	r18,28(sp)
   82654:	dc400617 	ldw	r17,24(sp)
   82658:	dc000517 	ldw	r16,20(sp)
   8265c:	dec00f04 	addi	sp,sp,60
   82660:	f800283a 	ret
   82664:	b823883a 	mov	r17,r23
   82668:	9825883a 	mov	r18,r19
   8266c:	d8000115 	stw	zero,4(sp)
   82670:	002b883a 	mov	r21,zero
   82674:	94000017 	ldw	r16,0(r18)
   82678:	e009883a 	mov	r4,fp
   8267c:	94800104 	addi	r18,r18,4
   82680:	817fffcc 	andi	r5,r16,65535
   82684:	008964c0 	call	8964c <__mulsi3>
   82688:	800ad43a 	srli	r5,r16,16
   8268c:	e009883a 	mov	r4,fp
   82690:	a8a1883a 	add	r16,r21,r2
   82694:	008964c0 	call	8964c <__mulsi3>
   82698:	89000017 	ldw	r4,0(r17)
   8269c:	80ffffcc 	andi	r3,r16,65535
   826a0:	8020d43a 	srli	r16,r16,16
   826a4:	217fffcc 	andi	r5,r4,65535
   826a8:	28cbc83a 	sub	r5,r5,r3
   826ac:	d8c00117 	ldw	r3,4(sp)
   826b0:	2008d43a 	srli	r4,r4,16
   826b4:	1405883a 	add	r2,r2,r16
   826b8:	28cb883a 	add	r5,r5,r3
   826bc:	280dd43a 	srai	r6,r5,16
   826c0:	10ffffcc 	andi	r3,r2,65535
   826c4:	20c9c83a 	sub	r4,r4,r3
   826c8:	2189883a 	add	r4,r4,r6
   826cc:	8900008d 	sth	r4,2(r17)
   826d0:	2009d43a 	srai	r4,r4,16
   826d4:	8940000d 	sth	r5,0(r17)
   826d8:	102ad43a 	srli	r21,r2,16
   826dc:	8c400104 	addi	r17,r17,4
   826e0:	d9000115 	stw	r4,4(sp)
   826e4:	b4bfe32e 	bgeu	r22,r18,82674 <quorem+0x188>
   826e8:	d9000217 	ldw	r4,8(sp)
   826ec:	203fa01e 	bne	r4,zero,82570 <quorem+0x84>
   826f0:	d8800017 	ldw	r2,0(sp)
   826f4:	10ffff04 	addi	r3,r2,-4
   826f8:	b8c0082e 	bgeu	r23,r3,8271c <quorem+0x230>
   826fc:	10bfff17 	ldw	r2,-4(r2)
   82700:	10000326 	beq	r2,zero,82710 <quorem+0x224>
   82704:	00000506 	br	8271c <quorem+0x230>
   82708:	18800017 	ldw	r2,0(r3)
   8270c:	1000031e 	bne	r2,zero,8271c <quorem+0x230>
   82710:	18ffff04 	addi	r3,r3,-4
   82714:	a53fffc4 	addi	r20,r20,-1
   82718:	b8fffb36 	bltu	r23,r3,82708 <quorem+0x21c>
   8271c:	d8c00317 	ldw	r3,12(sp)
   82720:	1d000415 	stw	r20,16(r3)
   82724:	003f9206 	br	82570 <quorem+0x84>
   82728:	0005883a 	mov	r2,zero
   8272c:	003fc106 	br	82634 <quorem+0x148>

00082730 <_dtoa_r>:
   82730:	22001017 	ldw	r8,64(r4)
   82734:	deffda04 	addi	sp,sp,-152
   82738:	dd402115 	stw	r21,132(sp)
   8273c:	dd002015 	stw	r20,128(sp)
   82740:	dc801e15 	stw	r18,120(sp)
   82744:	dc401d15 	stw	r17,116(sp)
   82748:	dfc02515 	stw	ra,148(sp)
   8274c:	df002415 	stw	fp,144(sp)
   82750:	ddc02315 	stw	r23,140(sp)
   82754:	dd802215 	stw	r22,136(sp)
   82758:	dcc01f15 	stw	r19,124(sp)
   8275c:	dc001c15 	stw	r16,112(sp)
   82760:	d9001615 	stw	r4,88(sp)
   82764:	3023883a 	mov	r17,r6
   82768:	2829883a 	mov	r20,r5
   8276c:	d9c01715 	stw	r7,92(sp)
   82770:	dc802817 	ldw	r18,160(sp)
   82774:	302b883a 	mov	r21,r6
   82778:	40000a26 	beq	r8,zero,827a4 <_dtoa_r+0x74>
   8277c:	20801117 	ldw	r2,68(r4)
   82780:	400b883a 	mov	r5,r8
   82784:	40800115 	stw	r2,4(r8)
   82788:	20c01117 	ldw	r3,68(r4)
   8278c:	00800044 	movi	r2,1
   82790:	10c4983a 	sll	r2,r2,r3
   82794:	40800215 	stw	r2,8(r8)
   82798:	00858f80 	call	858f8 <_Bfree>
   8279c:	d8c01617 	ldw	r3,88(sp)
   827a0:	18001015 	stw	zero,64(r3)
   827a4:	8800a316 	blt	r17,zero,82a34 <_dtoa_r+0x304>
   827a8:	90000015 	stw	zero,0(r18)
   827ac:	a8dffc2c 	andhi	r3,r21,32752
   827b0:	009ffc34 	movhi	r2,32752
   827b4:	18809126 	beq	r3,r2,829fc <_dtoa_r+0x2cc>
   827b8:	000d883a 	mov	r6,zero
   827bc:	000f883a 	mov	r7,zero
   827c0:	a009883a 	mov	r4,r20
   827c4:	a80b883a 	mov	r5,r21
   827c8:	dd001215 	stw	r20,72(sp)
   827cc:	dd401315 	stw	r21,76(sp)
   827d0:	0088f7c0 	call	88f7c <__nedf2>
   827d4:	1000171e 	bne	r2,zero,82834 <_dtoa_r+0x104>
   827d8:	d9802717 	ldw	r6,156(sp)
   827dc:	00800044 	movi	r2,1
   827e0:	30800015 	stw	r2,0(r6)
   827e4:	d8802917 	ldw	r2,164(sp)
   827e8:	10029b26 	beq	r2,zero,83258 <_dtoa_r+0xb28>
   827ec:	d9002917 	ldw	r4,164(sp)
   827f0:	00800274 	movhi	r2,9
   827f4:	10957b44 	addi	r2,r2,21997
   827f8:	10ffffc4 	addi	r3,r2,-1
   827fc:	20800015 	stw	r2,0(r4)
   82800:	1805883a 	mov	r2,r3
   82804:	dfc02517 	ldw	ra,148(sp)
   82808:	df002417 	ldw	fp,144(sp)
   8280c:	ddc02317 	ldw	r23,140(sp)
   82810:	dd802217 	ldw	r22,136(sp)
   82814:	dd402117 	ldw	r21,132(sp)
   82818:	dd002017 	ldw	r20,128(sp)
   8281c:	dcc01f17 	ldw	r19,124(sp)
   82820:	dc801e17 	ldw	r18,120(sp)
   82824:	dc401d17 	ldw	r17,116(sp)
   82828:	dc001c17 	ldw	r16,112(sp)
   8282c:	dec02604 	addi	sp,sp,152
   82830:	f800283a 	ret
   82834:	d9001617 	ldw	r4,88(sp)
   82838:	d9401217 	ldw	r5,72(sp)
   8283c:	d8800104 	addi	r2,sp,4
   82840:	a80d883a 	mov	r6,r21
   82844:	d9c00204 	addi	r7,sp,8
   82848:	d8800015 	stw	r2,0(sp)
   8284c:	0085f340 	call	85f34 <__d2b>
   82850:	d8800715 	stw	r2,28(sp)
   82854:	a804d53a 	srli	r2,r21,20
   82858:	1101ffcc 	andi	r4,r2,2047
   8285c:	20008626 	beq	r4,zero,82a78 <_dtoa_r+0x348>
   82860:	d8c01217 	ldw	r3,72(sp)
   82864:	00800434 	movhi	r2,16
   82868:	10bfffc4 	addi	r2,r2,-1
   8286c:	ddc00117 	ldw	r23,4(sp)
   82870:	a884703a 	and	r2,r21,r2
   82874:	1811883a 	mov	r8,r3
   82878:	124ffc34 	orhi	r9,r2,16368
   8287c:	25bf0044 	addi	r22,r4,-1023
   82880:	d8000815 	stw	zero,32(sp)
   82884:	0005883a 	mov	r2,zero
   82888:	00cffe34 	movhi	r3,16376
   8288c:	480b883a 	mov	r5,r9
   82890:	4009883a 	mov	r4,r8
   82894:	180f883a 	mov	r7,r3
   82898:	100d883a 	mov	r6,r2
   8289c:	00887e40 	call	887e4 <__subdf3>
   828a0:	0218dbf4 	movhi	r8,25455
   828a4:	4210d844 	addi	r8,r8,17249
   828a8:	024ff4f4 	movhi	r9,16339
   828ac:	4a61e9c4 	addi	r9,r9,-30809
   828b0:	480f883a 	mov	r7,r9
   828b4:	400d883a 	mov	r6,r8
   828b8:	180b883a 	mov	r5,r3
   828bc:	1009883a 	mov	r4,r2
   828c0:	00888d80 	call	888d8 <__muldf3>
   828c4:	0222d874 	movhi	r8,35681
   828c8:	42322cc4 	addi	r8,r8,-14157
   828cc:	024ff1f4 	movhi	r9,16327
   828d0:	4a628a04 	addi	r9,r9,-30168
   828d4:	480f883a 	mov	r7,r9
   828d8:	400d883a 	mov	r6,r8
   828dc:	180b883a 	mov	r5,r3
   828e0:	1009883a 	mov	r4,r2
   828e4:	00888640 	call	88864 <__adddf3>
   828e8:	b009883a 	mov	r4,r22
   828ec:	1021883a 	mov	r16,r2
   828f0:	1823883a 	mov	r17,r3
   828f4:	008919c0 	call	8919c <__floatsidf>
   828f8:	021427f4 	movhi	r8,20639
   828fc:	421e7ec4 	addi	r8,r8,31227
   82900:	024ff4f4 	movhi	r9,16339
   82904:	4a5104c4 	addi	r9,r9,17427
   82908:	480f883a 	mov	r7,r9
   8290c:	400d883a 	mov	r6,r8
   82910:	180b883a 	mov	r5,r3
   82914:	1009883a 	mov	r4,r2
   82918:	00888d80 	call	888d8 <__muldf3>
   8291c:	180f883a 	mov	r7,r3
   82920:	880b883a 	mov	r5,r17
   82924:	100d883a 	mov	r6,r2
   82928:	8009883a 	mov	r4,r16
   8292c:	00888640 	call	88864 <__adddf3>
   82930:	1009883a 	mov	r4,r2
   82934:	180b883a 	mov	r5,r3
   82938:	1021883a 	mov	r16,r2
   8293c:	1823883a 	mov	r17,r3
   82940:	00892940 	call	89294 <__fixdfsi>
   82944:	000d883a 	mov	r6,zero
   82948:	000f883a 	mov	r7,zero
   8294c:	8009883a 	mov	r4,r16
   82950:	880b883a 	mov	r5,r17
   82954:	d8800d15 	stw	r2,52(sp)
   82958:	00891140 	call	89114 <__ltdf2>
   8295c:	10031716 	blt	r2,zero,835bc <_dtoa_r+0xe8c>
   82960:	d8c00d17 	ldw	r3,52(sp)
   82964:	00800584 	movi	r2,22
   82968:	10c1482e 	bgeu	r2,r3,82e8c <_dtoa_r+0x75c>
   8296c:	01000044 	movi	r4,1
   82970:	d9000c15 	stw	r4,48(sp)
   82974:	bd85c83a 	sub	r2,r23,r22
   82978:	11bfffc4 	addi	r6,r2,-1
   8297c:	30030b16 	blt	r6,zero,835ac <_dtoa_r+0xe7c>
   82980:	d9800a15 	stw	r6,40(sp)
   82984:	d8001115 	stw	zero,68(sp)
   82988:	d8c00d17 	ldw	r3,52(sp)
   8298c:	1802ff16 	blt	r3,zero,8358c <_dtoa_r+0xe5c>
   82990:	d9000a17 	ldw	r4,40(sp)
   82994:	d8c00915 	stw	r3,36(sp)
   82998:	d8001015 	stw	zero,64(sp)
   8299c:	20c9883a 	add	r4,r4,r3
   829a0:	d9000a15 	stw	r4,40(sp)
   829a4:	d9001717 	ldw	r4,92(sp)
   829a8:	00800244 	movi	r2,9
   829ac:	11004636 	bltu	r2,r4,82ac8 <_dtoa_r+0x398>
   829b0:	00800144 	movi	r2,5
   829b4:	11020416 	blt	r2,r4,831c8 <_dtoa_r+0xa98>
   829b8:	04400044 	movi	r17,1
   829bc:	d8c01717 	ldw	r3,92(sp)
   829c0:	00800144 	movi	r2,5
   829c4:	10c1ed36 	bltu	r2,r3,8317c <_dtoa_r+0xa4c>
   829c8:	18c5883a 	add	r2,r3,r3
   829cc:	1085883a 	add	r2,r2,r2
   829d0:	00c00234 	movhi	r3,8
   829d4:	18ca7904 	addi	r3,r3,10724
   829d8:	10c5883a 	add	r2,r2,r3
   829dc:	11000017 	ldw	r4,0(r2)
   829e0:	2000683a 	jmp	r4
   829e4:	00082ad0 	cmplti	zero,zero,8363
   829e8:	00082ad0 	cmplti	zero,zero,8363
   829ec:	000834d0 	cmplti	zero,zero,8403
   829f0:	000834a8 	cmpgeui	zero,zero,8402
   829f4:	000834ec 	andhi	zero,zero,8403
   829f8:	000834f8 	rdprs	zero,zero,8403
   829fc:	d9002717 	ldw	r4,156(sp)
   82a00:	0089c3c4 	movi	r2,9999
   82a04:	20800015 	stw	r2,0(r4)
   82a08:	a0001026 	beq	r20,zero,82a4c <_dtoa_r+0x31c>
   82a0c:	00c00274 	movhi	r3,9
   82a10:	18d58704 	addi	r3,r3,22044
   82a14:	d9802917 	ldw	r6,164(sp)
   82a18:	303f7926 	beq	r6,zero,82800 <_dtoa_r+0xd0>
   82a1c:	188000c7 	ldb	r2,3(r3)
   82a20:	190000c4 	addi	r4,r3,3
   82a24:	1000101e 	bne	r2,zero,82a68 <_dtoa_r+0x338>
   82a28:	d8802917 	ldw	r2,164(sp)
   82a2c:	11000015 	stw	r4,0(r2)
   82a30:	003f7306 	br	82800 <_dtoa_r+0xd0>
   82a34:	00a00034 	movhi	r2,32768
   82a38:	10bfffc4 	addi	r2,r2,-1
   82a3c:	00c00044 	movi	r3,1
   82a40:	88aa703a 	and	r21,r17,r2
   82a44:	90c00015 	stw	r3,0(r18)
   82a48:	003f5806 	br	827ac <_dtoa_r+0x7c>
   82a4c:	00800434 	movhi	r2,16
   82a50:	10bfffc4 	addi	r2,r2,-1
   82a54:	a884703a 	and	r2,r21,r2
   82a58:	103fec1e 	bne	r2,zero,82a0c <_dtoa_r+0x2dc>
   82a5c:	00c00274 	movhi	r3,9
   82a60:	18d58404 	addi	r3,r3,22032
   82a64:	003feb06 	br	82a14 <_dtoa_r+0x2e4>
   82a68:	d8802917 	ldw	r2,164(sp)
   82a6c:	19000204 	addi	r4,r3,8
   82a70:	11000015 	stw	r4,0(r2)
   82a74:	003f6206 	br	82800 <_dtoa_r+0xd0>
   82a78:	ddc00117 	ldw	r23,4(sp)
   82a7c:	d8800217 	ldw	r2,8(sp)
   82a80:	01000804 	movi	r4,32
   82a84:	b8c10c84 	addi	r3,r23,1074
   82a88:	18a3883a 	add	r17,r3,r2
   82a8c:	2441b80e 	bge	r4,r17,83170 <_dtoa_r+0xa40>
   82a90:	00c01004 	movi	r3,64
   82a94:	1c47c83a 	sub	r3,r3,r17
   82a98:	88bff804 	addi	r2,r17,-32
   82a9c:	a8c6983a 	sll	r3,r21,r3
   82aa0:	a084d83a 	srl	r2,r20,r2
   82aa4:	1888b03a 	or	r4,r3,r2
   82aa8:	008936c0 	call	8936c <__floatunsidf>
   82aac:	1011883a 	mov	r8,r2
   82ab0:	00bf8434 	movhi	r2,65040
   82ab4:	01000044 	movi	r4,1
   82ab8:	10d3883a 	add	r9,r2,r3
   82abc:	8dbef344 	addi	r22,r17,-1075
   82ac0:	d9000815 	stw	r4,32(sp)
   82ac4:	003f6f06 	br	82884 <_dtoa_r+0x154>
   82ac8:	d8001715 	stw	zero,92(sp)
   82acc:	04400044 	movi	r17,1
   82ad0:	00bfffc4 	movi	r2,-1
   82ad4:	00c00044 	movi	r3,1
   82ad8:	d8800e15 	stw	r2,56(sp)
   82adc:	d8002615 	stw	zero,152(sp)
   82ae0:	d8800f15 	stw	r2,60(sp)
   82ae4:	d8c00b15 	stw	r3,44(sp)
   82ae8:	1021883a 	mov	r16,r2
   82aec:	d8801617 	ldw	r2,88(sp)
   82af0:	10001115 	stw	zero,68(r2)
   82af4:	d8801617 	ldw	r2,88(sp)
   82af8:	11401117 	ldw	r5,68(r2)
   82afc:	1009883a 	mov	r4,r2
   82b00:	0085e780 	call	85e78 <_Balloc>
   82b04:	d8c01617 	ldw	r3,88(sp)
   82b08:	d8800515 	stw	r2,20(sp)
   82b0c:	18801015 	stw	r2,64(r3)
   82b10:	00800384 	movi	r2,14
   82b14:	14006836 	bltu	r2,r16,82cb8 <_dtoa_r+0x588>
   82b18:	8805003a 	cmpeq	r2,r17,zero
   82b1c:	1000661e 	bne	r2,zero,82cb8 <_dtoa_r+0x588>
   82b20:	d9000d17 	ldw	r4,52(sp)
   82b24:	0102300e 	bge	zero,r4,833e8 <_dtoa_r+0xcb8>
   82b28:	208003cc 	andi	r2,r4,15
   82b2c:	100490fa 	slli	r2,r2,3
   82b30:	2025d13a 	srai	r18,r4,4
   82b34:	00c00274 	movhi	r3,9
   82b38:	18d59904 	addi	r3,r3,22116
   82b3c:	10c5883a 	add	r2,r2,r3
   82b40:	90c0040c 	andi	r3,r18,16
   82b44:	14000017 	ldw	r16,0(r2)
   82b48:	14400117 	ldw	r17,4(r2)
   82b4c:	18036a1e 	bne	r3,zero,838f8 <_dtoa_r+0x11c8>
   82b50:	05800084 	movi	r22,2
   82b54:	90001026 	beq	r18,zero,82b98 <_dtoa_r+0x468>
   82b58:	04c00274 	movhi	r19,9
   82b5c:	9cd5cb04 	addi	r19,r19,22316
   82b60:	9080004c 	andi	r2,r18,1
   82b64:	1005003a 	cmpeq	r2,r2,zero
   82b68:	1000081e 	bne	r2,zero,82b8c <_dtoa_r+0x45c>
   82b6c:	99800017 	ldw	r6,0(r19)
   82b70:	99c00117 	ldw	r7,4(r19)
   82b74:	880b883a 	mov	r5,r17
   82b78:	8009883a 	mov	r4,r16
   82b7c:	00888d80 	call	888d8 <__muldf3>
   82b80:	1021883a 	mov	r16,r2
   82b84:	b5800044 	addi	r22,r22,1
   82b88:	1823883a 	mov	r17,r3
   82b8c:	9025d07a 	srai	r18,r18,1
   82b90:	9cc00204 	addi	r19,r19,8
   82b94:	903ff21e 	bne	r18,zero,82b60 <_dtoa_r+0x430>
   82b98:	a80b883a 	mov	r5,r21
   82b9c:	a009883a 	mov	r4,r20
   82ba0:	880f883a 	mov	r7,r17
   82ba4:	800d883a 	mov	r6,r16
   82ba8:	0088c9c0 	call	88c9c <__divdf3>
   82bac:	1029883a 	mov	r20,r2
   82bb0:	182b883a 	mov	r21,r3
   82bb4:	d8c00c17 	ldw	r3,48(sp)
   82bb8:	1805003a 	cmpeq	r2,r3,zero
   82bbc:	1000081e 	bne	r2,zero,82be0 <_dtoa_r+0x4b0>
   82bc0:	0005883a 	mov	r2,zero
   82bc4:	00cffc34 	movhi	r3,16368
   82bc8:	180f883a 	mov	r7,r3
   82bcc:	a009883a 	mov	r4,r20
   82bd0:	a80b883a 	mov	r5,r21
   82bd4:	100d883a 	mov	r6,r2
   82bd8:	00891140 	call	89114 <__ltdf2>
   82bdc:	1003fe16 	blt	r2,zero,83bd8 <_dtoa_r+0x14a8>
   82be0:	b009883a 	mov	r4,r22
   82be4:	008919c0 	call	8919c <__floatsidf>
   82be8:	180b883a 	mov	r5,r3
   82bec:	1009883a 	mov	r4,r2
   82bf0:	a00d883a 	mov	r6,r20
   82bf4:	a80f883a 	mov	r7,r21
   82bf8:	00888d80 	call	888d8 <__muldf3>
   82bfc:	0011883a 	mov	r8,zero
   82c00:	02500734 	movhi	r9,16412
   82c04:	1009883a 	mov	r4,r2
   82c08:	180b883a 	mov	r5,r3
   82c0c:	480f883a 	mov	r7,r9
   82c10:	400d883a 	mov	r6,r8
   82c14:	00888640 	call	88864 <__adddf3>
   82c18:	d9000f17 	ldw	r4,60(sp)
   82c1c:	102d883a 	mov	r22,r2
   82c20:	00bf3034 	movhi	r2,64704
   82c24:	18b9883a 	add	fp,r3,r2
   82c28:	e02f883a 	mov	r23,fp
   82c2c:	20028f1e 	bne	r4,zero,8366c <_dtoa_r+0xf3c>
   82c30:	0005883a 	mov	r2,zero
   82c34:	00d00534 	movhi	r3,16404
   82c38:	a009883a 	mov	r4,r20
   82c3c:	a80b883a 	mov	r5,r21
   82c40:	180f883a 	mov	r7,r3
   82c44:	100d883a 	mov	r6,r2
   82c48:	00887e40 	call	887e4 <__subdf3>
   82c4c:	1009883a 	mov	r4,r2
   82c50:	e00f883a 	mov	r7,fp
   82c54:	180b883a 	mov	r5,r3
   82c58:	b00d883a 	mov	r6,r22
   82c5c:	1025883a 	mov	r18,r2
   82c60:	1827883a 	mov	r19,r3
   82c64:	00890040 	call	89004 <__gtdf2>
   82c68:	00834f16 	blt	zero,r2,839a8 <_dtoa_r+0x1278>
   82c6c:	e0e0003c 	xorhi	r3,fp,32768
   82c70:	9009883a 	mov	r4,r18
   82c74:	980b883a 	mov	r5,r19
   82c78:	180f883a 	mov	r7,r3
   82c7c:	b00d883a 	mov	r6,r22
   82c80:	00891140 	call	89114 <__ltdf2>
   82c84:	1000080e 	bge	r2,zero,82ca8 <_dtoa_r+0x578>
   82c88:	0027883a 	mov	r19,zero
   82c8c:	0025883a 	mov	r18,zero
   82c90:	d8802617 	ldw	r2,152(sp)
   82c94:	df000517 	ldw	fp,20(sp)
   82c98:	d8000615 	stw	zero,24(sp)
   82c9c:	0084303a 	nor	r2,zero,r2
   82ca0:	d8800d15 	stw	r2,52(sp)
   82ca4:	00019b06 	br	83314 <_dtoa_r+0xbe4>
   82ca8:	d9801217 	ldw	r6,72(sp)
   82cac:	d8801317 	ldw	r2,76(sp)
   82cb0:	3029883a 	mov	r20,r6
   82cb4:	102b883a 	mov	r21,r2
   82cb8:	d8c00217 	ldw	r3,8(sp)
   82cbc:	18008516 	blt	r3,zero,82ed4 <_dtoa_r+0x7a4>
   82cc0:	d9000d17 	ldw	r4,52(sp)
   82cc4:	00800384 	movi	r2,14
   82cc8:	11008216 	blt	r2,r4,82ed4 <_dtoa_r+0x7a4>
   82ccc:	200490fa 	slli	r2,r4,3
   82cd0:	d9802617 	ldw	r6,152(sp)
   82cd4:	00c00274 	movhi	r3,9
   82cd8:	18d59904 	addi	r3,r3,22116
   82cdc:	10c5883a 	add	r2,r2,r3
   82ce0:	14800017 	ldw	r18,0(r2)
   82ce4:	14c00117 	ldw	r19,4(r2)
   82ce8:	30031e16 	blt	r6,zero,83964 <_dtoa_r+0x1234>
   82cec:	d9000517 	ldw	r4,20(sp)
   82cf0:	d8c00f17 	ldw	r3,60(sp)
   82cf4:	a823883a 	mov	r17,r21
   82cf8:	a021883a 	mov	r16,r20
   82cfc:	192b883a 	add	r21,r3,r4
   82d00:	2039883a 	mov	fp,r4
   82d04:	00000f06 	br	82d44 <_dtoa_r+0x614>
   82d08:	0005883a 	mov	r2,zero
   82d0c:	00d00934 	movhi	r3,16420
   82d10:	5009883a 	mov	r4,r10
   82d14:	580b883a 	mov	r5,r11
   82d18:	180f883a 	mov	r7,r3
   82d1c:	100d883a 	mov	r6,r2
   82d20:	00888d80 	call	888d8 <__muldf3>
   82d24:	180b883a 	mov	r5,r3
   82d28:	000d883a 	mov	r6,zero
   82d2c:	000f883a 	mov	r7,zero
   82d30:	1009883a 	mov	r4,r2
   82d34:	1021883a 	mov	r16,r2
   82d38:	1823883a 	mov	r17,r3
   82d3c:	0088f7c0 	call	88f7c <__nedf2>
   82d40:	10004526 	beq	r2,zero,82e58 <_dtoa_r+0x728>
   82d44:	900d883a 	mov	r6,r18
   82d48:	980f883a 	mov	r7,r19
   82d4c:	8009883a 	mov	r4,r16
   82d50:	880b883a 	mov	r5,r17
   82d54:	0088c9c0 	call	88c9c <__divdf3>
   82d58:	180b883a 	mov	r5,r3
   82d5c:	1009883a 	mov	r4,r2
   82d60:	00892940 	call	89294 <__fixdfsi>
   82d64:	1009883a 	mov	r4,r2
   82d68:	1029883a 	mov	r20,r2
   82d6c:	008919c0 	call	8919c <__floatsidf>
   82d70:	180f883a 	mov	r7,r3
   82d74:	9009883a 	mov	r4,r18
   82d78:	980b883a 	mov	r5,r19
   82d7c:	100d883a 	mov	r6,r2
   82d80:	00888d80 	call	888d8 <__muldf3>
   82d84:	180f883a 	mov	r7,r3
   82d88:	880b883a 	mov	r5,r17
   82d8c:	8009883a 	mov	r4,r16
   82d90:	100d883a 	mov	r6,r2
   82d94:	00887e40 	call	887e4 <__subdf3>
   82d98:	1015883a 	mov	r10,r2
   82d9c:	a0800c04 	addi	r2,r20,48
   82da0:	e0800005 	stb	r2,0(fp)
   82da4:	e7000044 	addi	fp,fp,1
   82da8:	1817883a 	mov	r11,r3
   82dac:	e57fd61e 	bne	fp,r21,82d08 <_dtoa_r+0x5d8>
   82db0:	500d883a 	mov	r6,r10
   82db4:	180f883a 	mov	r7,r3
   82db8:	5009883a 	mov	r4,r10
   82dbc:	180b883a 	mov	r5,r3
   82dc0:	00888640 	call	88864 <__adddf3>
   82dc4:	100d883a 	mov	r6,r2
   82dc8:	9009883a 	mov	r4,r18
   82dcc:	980b883a 	mov	r5,r19
   82dd0:	180f883a 	mov	r7,r3
   82dd4:	1021883a 	mov	r16,r2
   82dd8:	1823883a 	mov	r17,r3
   82ddc:	00891140 	call	89114 <__ltdf2>
   82de0:	10000816 	blt	r2,zero,82e04 <_dtoa_r+0x6d4>
   82de4:	980b883a 	mov	r5,r19
   82de8:	800d883a 	mov	r6,r16
   82dec:	880f883a 	mov	r7,r17
   82df0:	9009883a 	mov	r4,r18
   82df4:	0088ef40 	call	88ef4 <__eqdf2>
   82df8:	1000171e 	bne	r2,zero,82e58 <_dtoa_r+0x728>
   82dfc:	a080004c 	andi	r2,r20,1
   82e00:	10001526 	beq	r2,zero,82e58 <_dtoa_r+0x728>
   82e04:	d8800d17 	ldw	r2,52(sp)
   82e08:	d8800415 	stw	r2,16(sp)
   82e0c:	e009883a 	mov	r4,fp
   82e10:	213fffc4 	addi	r4,r4,-1
   82e14:	20c00007 	ldb	r3,0(r4)
   82e18:	00800e44 	movi	r2,57
   82e1c:	1880081e 	bne	r3,r2,82e40 <_dtoa_r+0x710>
   82e20:	d8800517 	ldw	r2,20(sp)
   82e24:	113ffa1e 	bne	r2,r4,82e10 <_dtoa_r+0x6e0>
   82e28:	d8c00417 	ldw	r3,16(sp)
   82e2c:	d9800517 	ldw	r6,20(sp)
   82e30:	00800c04 	movi	r2,48
   82e34:	18c00044 	addi	r3,r3,1
   82e38:	d8c00415 	stw	r3,16(sp)
   82e3c:	30800005 	stb	r2,0(r6)
   82e40:	20800003 	ldbu	r2,0(r4)
   82e44:	d8c00417 	ldw	r3,16(sp)
   82e48:	27000044 	addi	fp,r4,1
   82e4c:	10800044 	addi	r2,r2,1
   82e50:	d8c00d15 	stw	r3,52(sp)
   82e54:	20800005 	stb	r2,0(r4)
   82e58:	d9001617 	ldw	r4,88(sp)
   82e5c:	d9400717 	ldw	r5,28(sp)
   82e60:	00858f80 	call	858f8 <_Bfree>
   82e64:	e0000005 	stb	zero,0(fp)
   82e68:	d9800d17 	ldw	r6,52(sp)
   82e6c:	d8c02717 	ldw	r3,156(sp)
   82e70:	d9002917 	ldw	r4,164(sp)
   82e74:	30800044 	addi	r2,r6,1
   82e78:	18800015 	stw	r2,0(r3)
   82e7c:	20029c26 	beq	r4,zero,838f0 <_dtoa_r+0x11c0>
   82e80:	d8c00517 	ldw	r3,20(sp)
   82e84:	27000015 	stw	fp,0(r4)
   82e88:	003e5d06 	br	82800 <_dtoa_r+0xd0>
   82e8c:	d9800d17 	ldw	r6,52(sp)
   82e90:	00c00274 	movhi	r3,9
   82e94:	18d59904 	addi	r3,r3,22116
   82e98:	d9001217 	ldw	r4,72(sp)
   82e9c:	300490fa 	slli	r2,r6,3
   82ea0:	d9401317 	ldw	r5,76(sp)
   82ea4:	10c5883a 	add	r2,r2,r3
   82ea8:	12000017 	ldw	r8,0(r2)
   82eac:	12400117 	ldw	r9,4(r2)
   82eb0:	400d883a 	mov	r6,r8
   82eb4:	480f883a 	mov	r7,r9
   82eb8:	00891140 	call	89114 <__ltdf2>
   82ebc:	1000030e 	bge	r2,zero,82ecc <_dtoa_r+0x79c>
   82ec0:	d8800d17 	ldw	r2,52(sp)
   82ec4:	10bfffc4 	addi	r2,r2,-1
   82ec8:	d8800d15 	stw	r2,52(sp)
   82ecc:	d8000c15 	stw	zero,48(sp)
   82ed0:	003ea806 	br	82974 <_dtoa_r+0x244>
   82ed4:	d9000b17 	ldw	r4,44(sp)
   82ed8:	202cc03a 	cmpne	r22,r4,zero
   82edc:	b000c71e 	bne	r22,zero,831fc <_dtoa_r+0xacc>
   82ee0:	dc001117 	ldw	r16,68(sp)
   82ee4:	dc801017 	ldw	r18,64(sp)
   82ee8:	0027883a 	mov	r19,zero
   82eec:	04000b0e 	bge	zero,r16,82f1c <_dtoa_r+0x7ec>
   82ef0:	d8c00a17 	ldw	r3,40(sp)
   82ef4:	00c0090e 	bge	zero,r3,82f1c <_dtoa_r+0x7ec>
   82ef8:	8005883a 	mov	r2,r16
   82efc:	1c011316 	blt	r3,r16,8334c <_dtoa_r+0xc1c>
   82f00:	d9000a17 	ldw	r4,40(sp)
   82f04:	d9801117 	ldw	r6,68(sp)
   82f08:	80a1c83a 	sub	r16,r16,r2
   82f0c:	2089c83a 	sub	r4,r4,r2
   82f10:	308dc83a 	sub	r6,r6,r2
   82f14:	d9000a15 	stw	r4,40(sp)
   82f18:	d9801115 	stw	r6,68(sp)
   82f1c:	d8801017 	ldw	r2,64(sp)
   82f20:	0080150e 	bge	zero,r2,82f78 <_dtoa_r+0x848>
   82f24:	d8c00b17 	ldw	r3,44(sp)
   82f28:	1805003a 	cmpeq	r2,r3,zero
   82f2c:	1001c91e 	bne	r2,zero,83654 <_dtoa_r+0xf24>
   82f30:	04800e0e 	bge	zero,r18,82f6c <_dtoa_r+0x83c>
   82f34:	d9001617 	ldw	r4,88(sp)
   82f38:	980b883a 	mov	r5,r19
   82f3c:	900d883a 	mov	r6,r18
   82f40:	00867440 	call	86744 <__pow5mult>
   82f44:	d9001617 	ldw	r4,88(sp)
   82f48:	d9800717 	ldw	r6,28(sp)
   82f4c:	100b883a 	mov	r5,r2
   82f50:	1027883a 	mov	r19,r2
   82f54:	00863880 	call	86388 <__multiply>
   82f58:	d9001617 	ldw	r4,88(sp)
   82f5c:	d9400717 	ldw	r5,28(sp)
   82f60:	1023883a 	mov	r17,r2
   82f64:	00858f80 	call	858f8 <_Bfree>
   82f68:	dc400715 	stw	r17,28(sp)
   82f6c:	d9001017 	ldw	r4,64(sp)
   82f70:	248dc83a 	sub	r6,r4,r18
   82f74:	30010e1e 	bne	r6,zero,833b0 <_dtoa_r+0xc80>
   82f78:	d9001617 	ldw	r4,88(sp)
   82f7c:	04400044 	movi	r17,1
   82f80:	880b883a 	mov	r5,r17
   82f84:	00865dc0 	call	865dc <__i2b>
   82f88:	d9800917 	ldw	r6,36(sp)
   82f8c:	1025883a 	mov	r18,r2
   82f90:	0180040e 	bge	zero,r6,82fa4 <_dtoa_r+0x874>
   82f94:	d9001617 	ldw	r4,88(sp)
   82f98:	100b883a 	mov	r5,r2
   82f9c:	00867440 	call	86744 <__pow5mult>
   82fa0:	1025883a 	mov	r18,r2
   82fa4:	d8801717 	ldw	r2,92(sp)
   82fa8:	8880f30e 	bge	r17,r2,83378 <_dtoa_r+0xc48>
   82fac:	0023883a 	mov	r17,zero
   82fb0:	d9800917 	ldw	r6,36(sp)
   82fb4:	30019e1e 	bne	r6,zero,83630 <_dtoa_r+0xf00>
   82fb8:	00c00044 	movi	r3,1
   82fbc:	d9000a17 	ldw	r4,40(sp)
   82fc0:	20c5883a 	add	r2,r4,r3
   82fc4:	10c007cc 	andi	r3,r2,31
   82fc8:	1800841e 	bne	r3,zero,831dc <_dtoa_r+0xaac>
   82fcc:	00800704 	movi	r2,28
   82fd0:	d9000a17 	ldw	r4,40(sp)
   82fd4:	d9801117 	ldw	r6,68(sp)
   82fd8:	80a1883a 	add	r16,r16,r2
   82fdc:	2089883a 	add	r4,r4,r2
   82fe0:	308d883a 	add	r6,r6,r2
   82fe4:	d9000a15 	stw	r4,40(sp)
   82fe8:	d9801115 	stw	r6,68(sp)
   82fec:	d8801117 	ldw	r2,68(sp)
   82ff0:	0080050e 	bge	zero,r2,83008 <_dtoa_r+0x8d8>
   82ff4:	d9400717 	ldw	r5,28(sp)
   82ff8:	d9001617 	ldw	r4,88(sp)
   82ffc:	100d883a 	mov	r6,r2
   83000:	008623c0 	call	8623c <__lshift>
   83004:	d8800715 	stw	r2,28(sp)
   83008:	d8c00a17 	ldw	r3,40(sp)
   8300c:	00c0050e 	bge	zero,r3,83024 <_dtoa_r+0x8f4>
   83010:	d9001617 	ldw	r4,88(sp)
   83014:	900b883a 	mov	r5,r18
   83018:	180d883a 	mov	r6,r3
   8301c:	008623c0 	call	8623c <__lshift>
   83020:	1025883a 	mov	r18,r2
   83024:	d9000c17 	ldw	r4,48(sp)
   83028:	2005003a 	cmpeq	r2,r4,zero
   8302c:	10016f26 	beq	r2,zero,835ec <_dtoa_r+0xebc>
   83030:	d9000f17 	ldw	r4,60(sp)
   83034:	0102170e 	bge	zero,r4,83894 <_dtoa_r+0x1164>
   83038:	d9800b17 	ldw	r6,44(sp)
   8303c:	3005003a 	cmpeq	r2,r6,zero
   83040:	1000881e 	bne	r2,zero,83264 <_dtoa_r+0xb34>
   83044:	0400050e 	bge	zero,r16,8305c <_dtoa_r+0x92c>
   83048:	d9001617 	ldw	r4,88(sp)
   8304c:	980b883a 	mov	r5,r19
   83050:	800d883a 	mov	r6,r16
   83054:	008623c0 	call	8623c <__lshift>
   83058:	1027883a 	mov	r19,r2
   8305c:	8804c03a 	cmpne	r2,r17,zero
   83060:	1002541e 	bne	r2,zero,839b4 <_dtoa_r+0x1284>
   83064:	980b883a 	mov	r5,r19
   83068:	dd800517 	ldw	r22,20(sp)
   8306c:	dcc00615 	stw	r19,24(sp)
   83070:	a700004c 	andi	fp,r20,1
   83074:	2827883a 	mov	r19,r5
   83078:	d9000717 	ldw	r4,28(sp)
   8307c:	900b883a 	mov	r5,r18
   83080:	00824ec0 	call	824ec <quorem>
   83084:	d9000717 	ldw	r4,28(sp)
   83088:	d9400617 	ldw	r5,24(sp)
   8308c:	1023883a 	mov	r17,r2
   83090:	8dc00c04 	addi	r23,r17,48
   83094:	0085a540 	call	85a54 <__mcmp>
   83098:	d9001617 	ldw	r4,88(sp)
   8309c:	900b883a 	mov	r5,r18
   830a0:	980d883a 	mov	r6,r19
   830a4:	1029883a 	mov	r20,r2
   830a8:	00860b00 	call	860b0 <__mdiff>
   830ac:	102b883a 	mov	r21,r2
   830b0:	10800317 	ldw	r2,12(r2)
   830b4:	1001281e 	bne	r2,zero,83558 <_dtoa_r+0xe28>
   830b8:	d9000717 	ldw	r4,28(sp)
   830bc:	a80b883a 	mov	r5,r21
   830c0:	0085a540 	call	85a54 <__mcmp>
   830c4:	d9001617 	ldw	r4,88(sp)
   830c8:	1021883a 	mov	r16,r2
   830cc:	a80b883a 	mov	r5,r21
   830d0:	00858f80 	call	858f8 <_Bfree>
   830d4:	8000041e 	bne	r16,zero,830e8 <_dtoa_r+0x9b8>
   830d8:	d8801717 	ldw	r2,92(sp)
   830dc:	1000021e 	bne	r2,zero,830e8 <_dtoa_r+0x9b8>
   830e0:	e004c03a 	cmpne	r2,fp,zero
   830e4:	10011726 	beq	r2,zero,83544 <_dtoa_r+0xe14>
   830e8:	a0010616 	blt	r20,zero,83504 <_dtoa_r+0xdd4>
   830ec:	a000041e 	bne	r20,zero,83100 <_dtoa_r+0x9d0>
   830f0:	d8c01717 	ldw	r3,92(sp)
   830f4:	1800021e 	bne	r3,zero,83100 <_dtoa_r+0x9d0>
   830f8:	e004c03a 	cmpne	r2,fp,zero
   830fc:	10010126 	beq	r2,zero,83504 <_dtoa_r+0xdd4>
   83100:	04023d16 	blt	zero,r16,839f8 <_dtoa_r+0x12c8>
   83104:	b5c00005 	stb	r23,0(r22)
   83108:	d9800517 	ldw	r6,20(sp)
   8310c:	d9000f17 	ldw	r4,60(sp)
   83110:	b5800044 	addi	r22,r22,1
   83114:	3105883a 	add	r2,r6,r4
   83118:	b0806526 	beq	r22,r2,832b0 <_dtoa_r+0xb80>
   8311c:	d9400717 	ldw	r5,28(sp)
   83120:	d9001617 	ldw	r4,88(sp)
   83124:	01800284 	movi	r6,10
   83128:	000f883a 	mov	r7,zero
   8312c:	00866180 	call	86618 <__multadd>
   83130:	d8800715 	stw	r2,28(sp)
   83134:	d8800617 	ldw	r2,24(sp)
   83138:	14c10c26 	beq	r2,r19,8356c <_dtoa_r+0xe3c>
   8313c:	d9400617 	ldw	r5,24(sp)
   83140:	d9001617 	ldw	r4,88(sp)
   83144:	01800284 	movi	r6,10
   83148:	000f883a 	mov	r7,zero
   8314c:	00866180 	call	86618 <__multadd>
   83150:	d9001617 	ldw	r4,88(sp)
   83154:	980b883a 	mov	r5,r19
   83158:	01800284 	movi	r6,10
   8315c:	000f883a 	mov	r7,zero
   83160:	d8800615 	stw	r2,24(sp)
   83164:	00866180 	call	86618 <__multadd>
   83168:	1027883a 	mov	r19,r2
   8316c:	003fc206 	br	83078 <_dtoa_r+0x948>
   83170:	2445c83a 	sub	r2,r4,r17
   83174:	a088983a 	sll	r4,r20,r2
   83178:	003e4b06 	br	82aa8 <_dtoa_r+0x378>
   8317c:	01bfffc4 	movi	r6,-1
   83180:	00800044 	movi	r2,1
   83184:	d9800e15 	stw	r6,56(sp)
   83188:	d9800f15 	stw	r6,60(sp)
   8318c:	d8800b15 	stw	r2,44(sp)
   83190:	d8c01617 	ldw	r3,88(sp)
   83194:	008005c4 	movi	r2,23
   83198:	18001115 	stw	zero,68(r3)
   8319c:	1580082e 	bgeu	r2,r22,831c0 <_dtoa_r+0xa90>
   831a0:	00c00104 	movi	r3,4
   831a4:	0009883a 	mov	r4,zero
   831a8:	18c7883a 	add	r3,r3,r3
   831ac:	18800504 	addi	r2,r3,20
   831b0:	21000044 	addi	r4,r4,1
   831b4:	b0bffc2e 	bgeu	r22,r2,831a8 <_dtoa_r+0xa78>
   831b8:	d9801617 	ldw	r6,88(sp)
   831bc:	31001115 	stw	r4,68(r6)
   831c0:	dc000f17 	ldw	r16,60(sp)
   831c4:	003e4b06 	br	82af4 <_dtoa_r+0x3c4>
   831c8:	d9801717 	ldw	r6,92(sp)
   831cc:	0023883a 	mov	r17,zero
   831d0:	31bfff04 	addi	r6,r6,-4
   831d4:	d9801715 	stw	r6,92(sp)
   831d8:	003df806 	br	829bc <_dtoa_r+0x28c>
   831dc:	00800804 	movi	r2,32
   831e0:	10c9c83a 	sub	r4,r2,r3
   831e4:	00c00104 	movi	r3,4
   831e8:	19005a16 	blt	r3,r4,83354 <_dtoa_r+0xc24>
   831ec:	008000c4 	movi	r2,3
   831f0:	113f7e16 	blt	r2,r4,82fec <_dtoa_r+0x8bc>
   831f4:	20800704 	addi	r2,r4,28
   831f8:	003f7506 	br	82fd0 <_dtoa_r+0x8a0>
   831fc:	d9801717 	ldw	r6,92(sp)
   83200:	00800044 	movi	r2,1
   83204:	1180a10e 	bge	r2,r6,8348c <_dtoa_r+0xd5c>
   83208:	d9800f17 	ldw	r6,60(sp)
   8320c:	d8c01017 	ldw	r3,64(sp)
   83210:	30bfffc4 	addi	r2,r6,-1
   83214:	1881c616 	blt	r3,r2,83930 <_dtoa_r+0x1200>
   83218:	18a5c83a 	sub	r18,r3,r2
   8321c:	d8800f17 	ldw	r2,60(sp)
   83220:	10026216 	blt	r2,zero,83bac <_dtoa_r+0x147c>
   83224:	dc001117 	ldw	r16,68(sp)
   83228:	1007883a 	mov	r3,r2
   8322c:	d9800a17 	ldw	r6,40(sp)
   83230:	d8801117 	ldw	r2,68(sp)
   83234:	d9001617 	ldw	r4,88(sp)
   83238:	30cd883a 	add	r6,r6,r3
   8323c:	10c5883a 	add	r2,r2,r3
   83240:	01400044 	movi	r5,1
   83244:	d9800a15 	stw	r6,40(sp)
   83248:	d8801115 	stw	r2,68(sp)
   8324c:	00865dc0 	call	865dc <__i2b>
   83250:	1027883a 	mov	r19,r2
   83254:	003f2506 	br	82eec <_dtoa_r+0x7bc>
   83258:	00c00274 	movhi	r3,9
   8325c:	18d57b04 	addi	r3,r3,21996
   83260:	003d6706 	br	82800 <_dtoa_r+0xd0>
   83264:	dd800517 	ldw	r22,20(sp)
   83268:	04000044 	movi	r16,1
   8326c:	00000706 	br	8328c <_dtoa_r+0xb5c>
   83270:	d9400717 	ldw	r5,28(sp)
   83274:	d9001617 	ldw	r4,88(sp)
   83278:	01800284 	movi	r6,10
   8327c:	000f883a 	mov	r7,zero
   83280:	00866180 	call	86618 <__multadd>
   83284:	d8800715 	stw	r2,28(sp)
   83288:	84000044 	addi	r16,r16,1
   8328c:	d9000717 	ldw	r4,28(sp)
   83290:	900b883a 	mov	r5,r18
   83294:	00824ec0 	call	824ec <quorem>
   83298:	15c00c04 	addi	r23,r2,48
   8329c:	b5c00005 	stb	r23,0(r22)
   832a0:	d8c00f17 	ldw	r3,60(sp)
   832a4:	b5800044 	addi	r22,r22,1
   832a8:	80fff116 	blt	r16,r3,83270 <_dtoa_r+0xb40>
   832ac:	d8000615 	stw	zero,24(sp)
   832b0:	d9400717 	ldw	r5,28(sp)
   832b4:	d9001617 	ldw	r4,88(sp)
   832b8:	01800044 	movi	r6,1
   832bc:	008623c0 	call	8623c <__lshift>
   832c0:	1009883a 	mov	r4,r2
   832c4:	900b883a 	mov	r5,r18
   832c8:	d8800715 	stw	r2,28(sp)
   832cc:	0085a540 	call	85a54 <__mcmp>
   832d0:	00803c0e 	bge	zero,r2,833c4 <_dtoa_r+0xc94>
   832d4:	b009883a 	mov	r4,r22
   832d8:	213fffc4 	addi	r4,r4,-1
   832dc:	21400003 	ldbu	r5,0(r4)
   832e0:	00800e44 	movi	r2,57
   832e4:	28c03fcc 	andi	r3,r5,255
   832e8:	18c0201c 	xori	r3,r3,128
   832ec:	18ffe004 	addi	r3,r3,-128
   832f0:	1881981e 	bne	r3,r2,83954 <_dtoa_r+0x1224>
   832f4:	d9800517 	ldw	r6,20(sp)
   832f8:	21bff71e 	bne	r4,r6,832d8 <_dtoa_r+0xba8>
   832fc:	d8800d17 	ldw	r2,52(sp)
   83300:	37000044 	addi	fp,r6,1
   83304:	10800044 	addi	r2,r2,1
   83308:	d8800d15 	stw	r2,52(sp)
   8330c:	00800c44 	movi	r2,49
   83310:	30800005 	stb	r2,0(r6)
   83314:	d9001617 	ldw	r4,88(sp)
   83318:	900b883a 	mov	r5,r18
   8331c:	00858f80 	call	858f8 <_Bfree>
   83320:	983ecd26 	beq	r19,zero,82e58 <_dtoa_r+0x728>
   83324:	d8c00617 	ldw	r3,24(sp)
   83328:	18000426 	beq	r3,zero,8333c <_dtoa_r+0xc0c>
   8332c:	1cc00326 	beq	r3,r19,8333c <_dtoa_r+0xc0c>
   83330:	d9001617 	ldw	r4,88(sp)
   83334:	180b883a 	mov	r5,r3
   83338:	00858f80 	call	858f8 <_Bfree>
   8333c:	d9001617 	ldw	r4,88(sp)
   83340:	980b883a 	mov	r5,r19
   83344:	00858f80 	call	858f8 <_Bfree>
   83348:	003ec306 	br	82e58 <_dtoa_r+0x728>
   8334c:	1805883a 	mov	r2,r3
   83350:	003eeb06 	br	82f00 <_dtoa_r+0x7d0>
   83354:	d9800a17 	ldw	r6,40(sp)
   83358:	d8c01117 	ldw	r3,68(sp)
   8335c:	20bfff04 	addi	r2,r4,-4
   83360:	308d883a 	add	r6,r6,r2
   83364:	1887883a 	add	r3,r3,r2
   83368:	80a1883a 	add	r16,r16,r2
   8336c:	d9800a15 	stw	r6,40(sp)
   83370:	d8c01115 	stw	r3,68(sp)
   83374:	003f1d06 	br	82fec <_dtoa_r+0x8bc>
   83378:	a03f0c1e 	bne	r20,zero,82fac <_dtoa_r+0x87c>
   8337c:	00800434 	movhi	r2,16
   83380:	10bfffc4 	addi	r2,r2,-1
   83384:	a884703a 	and	r2,r21,r2
   83388:	103f081e 	bne	r2,zero,82fac <_dtoa_r+0x87c>
   8338c:	a89ffc2c 	andhi	r2,r21,32752
   83390:	103f0626 	beq	r2,zero,82fac <_dtoa_r+0x87c>
   83394:	d8c01117 	ldw	r3,68(sp)
   83398:	d9000a17 	ldw	r4,40(sp)
   8339c:	18c00044 	addi	r3,r3,1
   833a0:	21000044 	addi	r4,r4,1
   833a4:	d8c01115 	stw	r3,68(sp)
   833a8:	d9000a15 	stw	r4,40(sp)
   833ac:	003f0006 	br	82fb0 <_dtoa_r+0x880>
   833b0:	d9400717 	ldw	r5,28(sp)
   833b4:	d9001617 	ldw	r4,88(sp)
   833b8:	00867440 	call	86744 <__pow5mult>
   833bc:	d8800715 	stw	r2,28(sp)
   833c0:	003eed06 	br	82f78 <_dtoa_r+0x848>
   833c4:	1000021e 	bne	r2,zero,833d0 <_dtoa_r+0xca0>
   833c8:	b880004c 	andi	r2,r23,1
   833cc:	103fc11e 	bne	r2,zero,832d4 <_dtoa_r+0xba4>
   833d0:	b5bfffc4 	addi	r22,r22,-1
   833d4:	b0c00007 	ldb	r3,0(r22)
   833d8:	00800c04 	movi	r2,48
   833dc:	18bffc26 	beq	r3,r2,833d0 <_dtoa_r+0xca0>
   833e0:	b7000044 	addi	fp,r22,1
   833e4:	003fcb06 	br	83314 <_dtoa_r+0xbe4>
   833e8:	d9800d17 	ldw	r6,52(sp)
   833ec:	018fc83a 	sub	r7,zero,r6
   833f0:	3801f726 	beq	r7,zero,83bd0 <_dtoa_r+0x14a0>
   833f4:	398003cc 	andi	r6,r7,15
   833f8:	300c90fa 	slli	r6,r6,3
   833fc:	01400274 	movhi	r5,9
   83400:	29559904 	addi	r5,r5,22116
   83404:	d9001217 	ldw	r4,72(sp)
   83408:	314d883a 	add	r6,r6,r5
   8340c:	30c00117 	ldw	r3,4(r6)
   83410:	30800017 	ldw	r2,0(r6)
   83414:	d9401317 	ldw	r5,76(sp)
   83418:	3821d13a 	srai	r16,r7,4
   8341c:	100d883a 	mov	r6,r2
   83420:	180f883a 	mov	r7,r3
   83424:	00888d80 	call	888d8 <__muldf3>
   83428:	1011883a 	mov	r8,r2
   8342c:	1813883a 	mov	r9,r3
   83430:	1029883a 	mov	r20,r2
   83434:	182b883a 	mov	r21,r3
   83438:	8001e526 	beq	r16,zero,83bd0 <_dtoa_r+0x14a0>
   8343c:	05800084 	movi	r22,2
   83440:	04400274 	movhi	r17,9
   83444:	8c55cb04 	addi	r17,r17,22316
   83448:	8080004c 	andi	r2,r16,1
   8344c:	1005003a 	cmpeq	r2,r2,zero
   83450:	1000081e 	bne	r2,zero,83474 <_dtoa_r+0xd44>
   83454:	89800017 	ldw	r6,0(r17)
   83458:	89c00117 	ldw	r7,4(r17)
   8345c:	480b883a 	mov	r5,r9
   83460:	4009883a 	mov	r4,r8
   83464:	00888d80 	call	888d8 <__muldf3>
   83468:	1011883a 	mov	r8,r2
   8346c:	b5800044 	addi	r22,r22,1
   83470:	1813883a 	mov	r9,r3
   83474:	8021d07a 	srai	r16,r16,1
   83478:	8c400204 	addi	r17,r17,8
   8347c:	803ff21e 	bne	r16,zero,83448 <_dtoa_r+0xd18>
   83480:	4029883a 	mov	r20,r8
   83484:	482b883a 	mov	r21,r9
   83488:	003dca06 	br	82bb4 <_dtoa_r+0x484>
   8348c:	d9000817 	ldw	r4,32(sp)
   83490:	2005003a 	cmpeq	r2,r4,zero
   83494:	1001f61e 	bne	r2,zero,83c70 <_dtoa_r+0x1540>
   83498:	dc001117 	ldw	r16,68(sp)
   8349c:	dc801017 	ldw	r18,64(sp)
   834a0:	18c10cc4 	addi	r3,r3,1075
   834a4:	003f6106 	br	8322c <_dtoa_r+0xafc>
   834a8:	d8000b15 	stw	zero,44(sp)
   834ac:	d9802617 	ldw	r6,152(sp)
   834b0:	d8c00d17 	ldw	r3,52(sp)
   834b4:	30800044 	addi	r2,r6,1
   834b8:	18ad883a 	add	r22,r3,r2
   834bc:	b13fffc4 	addi	r4,r22,-1
   834c0:	d9000e15 	stw	r4,56(sp)
   834c4:	0581f60e 	bge	zero,r22,83ca0 <_dtoa_r+0x1570>
   834c8:	dd800f15 	stw	r22,60(sp)
   834cc:	003f3006 	br	83190 <_dtoa_r+0xa60>
   834d0:	d8000b15 	stw	zero,44(sp)
   834d4:	d9002617 	ldw	r4,152(sp)
   834d8:	0101eb0e 	bge	zero,r4,83c88 <_dtoa_r+0x1558>
   834dc:	202d883a 	mov	r22,r4
   834e0:	d9000e15 	stw	r4,56(sp)
   834e4:	d9000f15 	stw	r4,60(sp)
   834e8:	003f2906 	br	83190 <_dtoa_r+0xa60>
   834ec:	01800044 	movi	r6,1
   834f0:	d9800b15 	stw	r6,44(sp)
   834f4:	003ff706 	br	834d4 <_dtoa_r+0xda4>
   834f8:	01000044 	movi	r4,1
   834fc:	d9000b15 	stw	r4,44(sp)
   83500:	003fea06 	br	834ac <_dtoa_r+0xd7c>
   83504:	04000c0e 	bge	zero,r16,83538 <_dtoa_r+0xe08>
   83508:	d9400717 	ldw	r5,28(sp)
   8350c:	d9001617 	ldw	r4,88(sp)
   83510:	01800044 	movi	r6,1
   83514:	008623c0 	call	8623c <__lshift>
   83518:	1009883a 	mov	r4,r2
   8351c:	900b883a 	mov	r5,r18
   83520:	d8800715 	stw	r2,28(sp)
   83524:	0085a540 	call	85a54 <__mcmp>
   83528:	0081e00e 	bge	zero,r2,83cac <_dtoa_r+0x157c>
   8352c:	bdc00044 	addi	r23,r23,1
   83530:	00800e84 	movi	r2,58
   83534:	b881a226 	beq	r23,r2,83bc0 <_dtoa_r+0x1490>
   83538:	b7000044 	addi	fp,r22,1
   8353c:	b5c00005 	stb	r23,0(r22)
   83540:	003f7406 	br	83314 <_dtoa_r+0xbe4>
   83544:	00800e44 	movi	r2,57
   83548:	b8819d26 	beq	r23,r2,83bc0 <_dtoa_r+0x1490>
   8354c:	053ffa0e 	bge	zero,r20,83538 <_dtoa_r+0xe08>
   83550:	8dc00c44 	addi	r23,r17,49
   83554:	003ff806 	br	83538 <_dtoa_r+0xe08>
   83558:	d9001617 	ldw	r4,88(sp)
   8355c:	a80b883a 	mov	r5,r21
   83560:	04000044 	movi	r16,1
   83564:	00858f80 	call	858f8 <_Bfree>
   83568:	003edf06 	br	830e8 <_dtoa_r+0x9b8>
   8356c:	d9001617 	ldw	r4,88(sp)
   83570:	980b883a 	mov	r5,r19
   83574:	01800284 	movi	r6,10
   83578:	000f883a 	mov	r7,zero
   8357c:	00866180 	call	86618 <__multadd>
   83580:	1027883a 	mov	r19,r2
   83584:	d8800615 	stw	r2,24(sp)
   83588:	003ebb06 	br	83078 <_dtoa_r+0x948>
   8358c:	d9801117 	ldw	r6,68(sp)
   83590:	d8800d17 	ldw	r2,52(sp)
   83594:	d8000915 	stw	zero,36(sp)
   83598:	308dc83a 	sub	r6,r6,r2
   8359c:	0087c83a 	sub	r3,zero,r2
   835a0:	d9801115 	stw	r6,68(sp)
   835a4:	d8c01015 	stw	r3,64(sp)
   835a8:	003cfe06 	br	829a4 <_dtoa_r+0x274>
   835ac:	018dc83a 	sub	r6,zero,r6
   835b0:	d9801115 	stw	r6,68(sp)
   835b4:	d8000a15 	stw	zero,40(sp)
   835b8:	003cf306 	br	82988 <_dtoa_r+0x258>
   835bc:	d9000d17 	ldw	r4,52(sp)
   835c0:	008919c0 	call	8919c <__floatsidf>
   835c4:	880b883a 	mov	r5,r17
   835c8:	8009883a 	mov	r4,r16
   835cc:	180f883a 	mov	r7,r3
   835d0:	100d883a 	mov	r6,r2
   835d4:	0088f7c0 	call	88f7c <__nedf2>
   835d8:	103ce126 	beq	r2,zero,82960 <_dtoa_r+0x230>
   835dc:	d9800d17 	ldw	r6,52(sp)
   835e0:	31bfffc4 	addi	r6,r6,-1
   835e4:	d9800d15 	stw	r6,52(sp)
   835e8:	003cdd06 	br	82960 <_dtoa_r+0x230>
   835ec:	d9000717 	ldw	r4,28(sp)
   835f0:	900b883a 	mov	r5,r18
   835f4:	0085a540 	call	85a54 <__mcmp>
   835f8:	103e8d0e 	bge	r2,zero,83030 <_dtoa_r+0x900>
   835fc:	d9400717 	ldw	r5,28(sp)
   83600:	d9001617 	ldw	r4,88(sp)
   83604:	01800284 	movi	r6,10
   83608:	000f883a 	mov	r7,zero
   8360c:	00866180 	call	86618 <__multadd>
   83610:	d9800d17 	ldw	r6,52(sp)
   83614:	d8800715 	stw	r2,28(sp)
   83618:	31bfffc4 	addi	r6,r6,-1
   8361c:	d9800d15 	stw	r6,52(sp)
   83620:	b001a71e 	bne	r22,zero,83cc0 <_dtoa_r+0x1590>
   83624:	d8800e17 	ldw	r2,56(sp)
   83628:	d8800f15 	stw	r2,60(sp)
   8362c:	003e8006 	br	83030 <_dtoa_r+0x900>
   83630:	90800417 	ldw	r2,16(r18)
   83634:	1085883a 	add	r2,r2,r2
   83638:	1085883a 	add	r2,r2,r2
   8363c:	1485883a 	add	r2,r2,r18
   83640:	11000417 	ldw	r4,16(r2)
   83644:	00859200 	call	85920 <__hi0bits>
   83648:	00c00804 	movi	r3,32
   8364c:	1887c83a 	sub	r3,r3,r2
   83650:	003e5a06 	br	82fbc <_dtoa_r+0x88c>
   83654:	d9400717 	ldw	r5,28(sp)
   83658:	d9801017 	ldw	r6,64(sp)
   8365c:	d9001617 	ldw	r4,88(sp)
   83660:	00867440 	call	86744 <__pow5mult>
   83664:	d8800715 	stw	r2,28(sp)
   83668:	003e4306 	br	82f78 <_dtoa_r+0x848>
   8366c:	d9800f17 	ldw	r6,60(sp)
   83670:	d8800d17 	ldw	r2,52(sp)
   83674:	d9800315 	stw	r6,12(sp)
   83678:	d8800415 	stw	r2,16(sp)
   8367c:	d8c00b17 	ldw	r3,44(sp)
   83680:	1805003a 	cmpeq	r2,r3,zero
   83684:	1000e21e 	bne	r2,zero,83a10 <_dtoa_r+0x12e0>
   83688:	d9000317 	ldw	r4,12(sp)
   8368c:	0005883a 	mov	r2,zero
   83690:	00cff834 	movhi	r3,16352
   83694:	200c90fa 	slli	r6,r4,3
   83698:	01000274 	movhi	r4,9
   8369c:	21159904 	addi	r4,r4,22116
   836a0:	180b883a 	mov	r5,r3
   836a4:	310d883a 	add	r6,r6,r4
   836a8:	327fff17 	ldw	r9,-4(r6)
   836ac:	323ffe17 	ldw	r8,-8(r6)
   836b0:	1009883a 	mov	r4,r2
   836b4:	480f883a 	mov	r7,r9
   836b8:	400d883a 	mov	r6,r8
   836bc:	0088c9c0 	call	88c9c <__divdf3>
   836c0:	180b883a 	mov	r5,r3
   836c4:	b00d883a 	mov	r6,r22
   836c8:	b80f883a 	mov	r7,r23
   836cc:	1009883a 	mov	r4,r2
   836d0:	00887e40 	call	887e4 <__subdf3>
   836d4:	a80b883a 	mov	r5,r21
   836d8:	a009883a 	mov	r4,r20
   836dc:	d8c01915 	stw	r3,100(sp)
   836e0:	d8801815 	stw	r2,96(sp)
   836e4:	00892940 	call	89294 <__fixdfsi>
   836e8:	1009883a 	mov	r4,r2
   836ec:	1027883a 	mov	r19,r2
   836f0:	008919c0 	call	8919c <__floatsidf>
   836f4:	a80b883a 	mov	r5,r21
   836f8:	a009883a 	mov	r4,r20
   836fc:	180f883a 	mov	r7,r3
   83700:	100d883a 	mov	r6,r2
   83704:	00887e40 	call	887e4 <__subdf3>
   83708:	d9801817 	ldw	r6,96(sp)
   8370c:	1823883a 	mov	r17,r3
   83710:	d8801415 	stw	r2,80(sp)
   83714:	302d883a 	mov	r22,r6
   83718:	d9800517 	ldw	r6,20(sp)
   8371c:	9cc00c04 	addi	r19,r19,48
   83720:	dc401515 	stw	r17,84(sp)
   83724:	d8c01917 	ldw	r3,100(sp)
   83728:	34c00005 	stb	r19,0(r6)
   8372c:	d8800517 	ldw	r2,20(sp)
   83730:	d9401917 	ldw	r5,100(sp)
   83734:	d9801417 	ldw	r6,80(sp)
   83738:	b009883a 	mov	r4,r22
   8373c:	880f883a 	mov	r7,r17
   83740:	182f883a 	mov	r23,r3
   83744:	17000044 	addi	fp,r2,1
   83748:	00890040 	call	89004 <__gtdf2>
   8374c:	00804e16 	blt	zero,r2,83888 <_dtoa_r+0x1158>
   83750:	d9801417 	ldw	r6,80(sp)
   83754:	0005883a 	mov	r2,zero
   83758:	00cffc34 	movhi	r3,16368
   8375c:	180b883a 	mov	r5,r3
   83760:	880f883a 	mov	r7,r17
   83764:	1009883a 	mov	r4,r2
   83768:	00887e40 	call	887e4 <__subdf3>
   8376c:	d9401917 	ldw	r5,100(sp)
   83770:	180f883a 	mov	r7,r3
   83774:	b009883a 	mov	r4,r22
   83778:	100d883a 	mov	r6,r2
   8377c:	00890040 	call	89004 <__gtdf2>
   83780:	00bda216 	blt	zero,r2,82e0c <_dtoa_r+0x6dc>
   83784:	d8c00317 	ldw	r3,12(sp)
   83788:	00800044 	movi	r2,1
   8378c:	10c01216 	blt	r2,r3,837d8 <_dtoa_r+0x10a8>
   83790:	003d4506 	br	82ca8 <_dtoa_r+0x578>
   83794:	d9801417 	ldw	r6,80(sp)
   83798:	0005883a 	mov	r2,zero
   8379c:	00cffc34 	movhi	r3,16368
   837a0:	180b883a 	mov	r5,r3
   837a4:	880f883a 	mov	r7,r17
   837a8:	1009883a 	mov	r4,r2
   837ac:	00887e40 	call	887e4 <__subdf3>
   837b0:	d9c01b17 	ldw	r7,108(sp)
   837b4:	180b883a 	mov	r5,r3
   837b8:	1009883a 	mov	r4,r2
   837bc:	b00d883a 	mov	r6,r22
   837c0:	00891140 	call	89114 <__ltdf2>
   837c4:	103d9116 	blt	r2,zero,82e0c <_dtoa_r+0x6dc>
   837c8:	d9800517 	ldw	r6,20(sp)
   837cc:	d9000317 	ldw	r4,12(sp)
   837d0:	3105883a 	add	r2,r6,r4
   837d4:	e0bd3426 	beq	fp,r2,82ca8 <_dtoa_r+0x578>
   837d8:	04500934 	movhi	r17,16420
   837dc:	0021883a 	mov	r16,zero
   837e0:	b80b883a 	mov	r5,r23
   837e4:	b009883a 	mov	r4,r22
   837e8:	800d883a 	mov	r6,r16
   837ec:	880f883a 	mov	r7,r17
   837f0:	00888d80 	call	888d8 <__muldf3>
   837f4:	d9401517 	ldw	r5,84(sp)
   837f8:	d9001417 	ldw	r4,80(sp)
   837fc:	880f883a 	mov	r7,r17
   83800:	000d883a 	mov	r6,zero
   83804:	d8801a15 	stw	r2,104(sp)
   83808:	d8c01b15 	stw	r3,108(sp)
   8380c:	00888d80 	call	888d8 <__muldf3>
   83810:	180b883a 	mov	r5,r3
   83814:	1009883a 	mov	r4,r2
   83818:	1823883a 	mov	r17,r3
   8381c:	1021883a 	mov	r16,r2
   83820:	00892940 	call	89294 <__fixdfsi>
   83824:	1009883a 	mov	r4,r2
   83828:	102b883a 	mov	r21,r2
   8382c:	008919c0 	call	8919c <__floatsidf>
   83830:	880b883a 	mov	r5,r17
   83834:	8009883a 	mov	r4,r16
   83838:	180f883a 	mov	r7,r3
   8383c:	100d883a 	mov	r6,r2
   83840:	00887e40 	call	887e4 <__subdf3>
   83844:	1021883a 	mov	r16,r2
   83848:	d9001b17 	ldw	r4,108(sp)
   8384c:	1823883a 	mov	r17,r3
   83850:	dc001415 	stw	r16,80(sp)
   83854:	ad400c04 	addi	r21,r21,48
   83858:	dc401515 	stw	r17,84(sp)
   8385c:	d8801a17 	ldw	r2,104(sp)
   83860:	e5400005 	stb	r21,0(fp)
   83864:	202f883a 	mov	r23,r4
   83868:	d9c01b17 	ldw	r7,108(sp)
   8386c:	d9001417 	ldw	r4,80(sp)
   83870:	880b883a 	mov	r5,r17
   83874:	100d883a 	mov	r6,r2
   83878:	102d883a 	mov	r22,r2
   8387c:	e7000044 	addi	fp,fp,1
   83880:	00891140 	call	89114 <__ltdf2>
   83884:	103fc30e 	bge	r2,zero,83794 <_dtoa_r+0x1064>
   83888:	d9000417 	ldw	r4,16(sp)
   8388c:	d9000d15 	stw	r4,52(sp)
   83890:	003d7106 	br	82e58 <_dtoa_r+0x728>
   83894:	d9801717 	ldw	r6,92(sp)
   83898:	00800084 	movi	r2,2
   8389c:	11bde60e 	bge	r2,r6,83038 <_dtoa_r+0x908>
   838a0:	203cfb1e 	bne	r4,zero,82c90 <_dtoa_r+0x560>
   838a4:	d9001617 	ldw	r4,88(sp)
   838a8:	900b883a 	mov	r5,r18
   838ac:	01800144 	movi	r6,5
   838b0:	000f883a 	mov	r7,zero
   838b4:	00866180 	call	86618 <__multadd>
   838b8:	d9000717 	ldw	r4,28(sp)
   838bc:	100b883a 	mov	r5,r2
   838c0:	1025883a 	mov	r18,r2
   838c4:	0085a540 	call	85a54 <__mcmp>
   838c8:	00bcf10e 	bge	zero,r2,82c90 <_dtoa_r+0x560>
   838cc:	d8c00d17 	ldw	r3,52(sp)
   838d0:	d9000517 	ldw	r4,20(sp)
   838d4:	d8000615 	stw	zero,24(sp)
   838d8:	18c00044 	addi	r3,r3,1
   838dc:	d8c00d15 	stw	r3,52(sp)
   838e0:	00800c44 	movi	r2,49
   838e4:	27000044 	addi	fp,r4,1
   838e8:	20800005 	stb	r2,0(r4)
   838ec:	003e8906 	br	83314 <_dtoa_r+0xbe4>
   838f0:	d8c00517 	ldw	r3,20(sp)
   838f4:	003bc206 	br	82800 <_dtoa_r+0xd0>
   838f8:	01800274 	movhi	r6,9
   838fc:	3195cb04 	addi	r6,r6,22316
   83900:	30c00917 	ldw	r3,36(r6)
   83904:	30800817 	ldw	r2,32(r6)
   83908:	d9001217 	ldw	r4,72(sp)
   8390c:	d9401317 	ldw	r5,76(sp)
   83910:	180f883a 	mov	r7,r3
   83914:	100d883a 	mov	r6,r2
   83918:	0088c9c0 	call	88c9c <__divdf3>
   8391c:	948003cc 	andi	r18,r18,15
   83920:	058000c4 	movi	r22,3
   83924:	1029883a 	mov	r20,r2
   83928:	182b883a 	mov	r21,r3
   8392c:	003c8906 	br	82b54 <_dtoa_r+0x424>
   83930:	d9001017 	ldw	r4,64(sp)
   83934:	d9800917 	ldw	r6,36(sp)
   83938:	0025883a 	mov	r18,zero
   8393c:	1105c83a 	sub	r2,r2,r4
   83940:	2089883a 	add	r4,r4,r2
   83944:	308d883a 	add	r6,r6,r2
   83948:	d9001015 	stw	r4,64(sp)
   8394c:	d9800915 	stw	r6,36(sp)
   83950:	003e3206 	br	8321c <_dtoa_r+0xaec>
   83954:	28800044 	addi	r2,r5,1
   83958:	27000044 	addi	fp,r4,1
   8395c:	20800005 	stb	r2,0(r4)
   83960:	003e6c06 	br	83314 <_dtoa_r+0xbe4>
   83964:	d8800f17 	ldw	r2,60(sp)
   83968:	00bce016 	blt	zero,r2,82cec <_dtoa_r+0x5bc>
   8396c:	d9800f17 	ldw	r6,60(sp)
   83970:	303cc51e 	bne	r6,zero,82c88 <_dtoa_r+0x558>
   83974:	0005883a 	mov	r2,zero
   83978:	00d00534 	movhi	r3,16404
   8397c:	980b883a 	mov	r5,r19
   83980:	180f883a 	mov	r7,r3
   83984:	9009883a 	mov	r4,r18
   83988:	100d883a 	mov	r6,r2
   8398c:	00888d80 	call	888d8 <__muldf3>
   83990:	180b883a 	mov	r5,r3
   83994:	a80f883a 	mov	r7,r21
   83998:	1009883a 	mov	r4,r2
   8399c:	a00d883a 	mov	r6,r20
   839a0:	008908c0 	call	8908c <__gedf2>
   839a4:	103cb80e 	bge	r2,zero,82c88 <_dtoa_r+0x558>
   839a8:	0027883a 	mov	r19,zero
   839ac:	0025883a 	mov	r18,zero
   839b0:	003fc606 	br	838cc <_dtoa_r+0x119c>
   839b4:	99400117 	ldw	r5,4(r19)
   839b8:	d9001617 	ldw	r4,88(sp)
   839bc:	0085e780 	call	85e78 <_Balloc>
   839c0:	99800417 	ldw	r6,16(r19)
   839c4:	11000304 	addi	r4,r2,12
   839c8:	99400304 	addi	r5,r19,12
   839cc:	318d883a 	add	r6,r6,r6
   839d0:	318d883a 	add	r6,r6,r6
   839d4:	31800204 	addi	r6,r6,8
   839d8:	1023883a 	mov	r17,r2
   839dc:	00856e00 	call	856e0 <memcpy>
   839e0:	d9001617 	ldw	r4,88(sp)
   839e4:	880b883a 	mov	r5,r17
   839e8:	01800044 	movi	r6,1
   839ec:	008623c0 	call	8623c <__lshift>
   839f0:	100b883a 	mov	r5,r2
   839f4:	003d9c06 	br	83068 <_dtoa_r+0x938>
   839f8:	00800e44 	movi	r2,57
   839fc:	b8807026 	beq	r23,r2,83bc0 <_dtoa_r+0x1490>
   83a00:	b8800044 	addi	r2,r23,1
   83a04:	b7000044 	addi	fp,r22,1
   83a08:	b0800005 	stb	r2,0(r22)
   83a0c:	003e4106 	br	83314 <_dtoa_r+0xbe4>
   83a10:	d8800317 	ldw	r2,12(sp)
   83a14:	01800274 	movhi	r6,9
   83a18:	31959904 	addi	r6,r6,22116
   83a1c:	b009883a 	mov	r4,r22
   83a20:	100e90fa 	slli	r7,r2,3
   83a24:	b80b883a 	mov	r5,r23
   83a28:	398f883a 	add	r7,r7,r6
   83a2c:	38bffe17 	ldw	r2,-8(r7)
   83a30:	d9800517 	ldw	r6,20(sp)
   83a34:	38ffff17 	ldw	r3,-4(r7)
   83a38:	37000044 	addi	fp,r6,1
   83a3c:	180f883a 	mov	r7,r3
   83a40:	100d883a 	mov	r6,r2
   83a44:	00888d80 	call	888d8 <__muldf3>
   83a48:	a80b883a 	mov	r5,r21
   83a4c:	a009883a 	mov	r4,r20
   83a50:	182f883a 	mov	r23,r3
   83a54:	102d883a 	mov	r22,r2
   83a58:	00892940 	call	89294 <__fixdfsi>
   83a5c:	1009883a 	mov	r4,r2
   83a60:	1027883a 	mov	r19,r2
   83a64:	008919c0 	call	8919c <__floatsidf>
   83a68:	a80b883a 	mov	r5,r21
   83a6c:	a009883a 	mov	r4,r20
   83a70:	180f883a 	mov	r7,r3
   83a74:	100d883a 	mov	r6,r2
   83a78:	00887e40 	call	887e4 <__subdf3>
   83a7c:	180b883a 	mov	r5,r3
   83a80:	d8c00517 	ldw	r3,20(sp)
   83a84:	9cc00c04 	addi	r19,r19,48
   83a88:	1009883a 	mov	r4,r2
   83a8c:	1cc00005 	stb	r19,0(r3)
   83a90:	2021883a 	mov	r16,r4
   83a94:	d9000317 	ldw	r4,12(sp)
   83a98:	00800044 	movi	r2,1
   83a9c:	2823883a 	mov	r17,r5
   83aa0:	20802226 	beq	r4,r2,83b2c <_dtoa_r+0x13fc>
   83aa4:	1029883a 	mov	r20,r2
   83aa8:	0005883a 	mov	r2,zero
   83aac:	00d00934 	movhi	r3,16420
   83ab0:	180f883a 	mov	r7,r3
   83ab4:	100d883a 	mov	r6,r2
   83ab8:	880b883a 	mov	r5,r17
   83abc:	8009883a 	mov	r4,r16
   83ac0:	00888d80 	call	888d8 <__muldf3>
   83ac4:	180b883a 	mov	r5,r3
   83ac8:	1009883a 	mov	r4,r2
   83acc:	1823883a 	mov	r17,r3
   83ad0:	1021883a 	mov	r16,r2
   83ad4:	00892940 	call	89294 <__fixdfsi>
   83ad8:	1009883a 	mov	r4,r2
   83adc:	102b883a 	mov	r21,r2
   83ae0:	008919c0 	call	8919c <__floatsidf>
   83ae4:	880b883a 	mov	r5,r17
   83ae8:	8009883a 	mov	r4,r16
   83aec:	180f883a 	mov	r7,r3
   83af0:	100d883a 	mov	r6,r2
   83af4:	00887e40 	call	887e4 <__subdf3>
   83af8:	180b883a 	mov	r5,r3
   83afc:	d8c00517 	ldw	r3,20(sp)
   83b00:	1009883a 	mov	r4,r2
   83b04:	ad400c04 	addi	r21,r21,48
   83b08:	1d05883a 	add	r2,r3,r20
   83b0c:	15400005 	stb	r21,0(r2)
   83b10:	2021883a 	mov	r16,r4
   83b14:	d9000317 	ldw	r4,12(sp)
   83b18:	a5000044 	addi	r20,r20,1
   83b1c:	2823883a 	mov	r17,r5
   83b20:	a13fe11e 	bne	r20,r4,83aa8 <_dtoa_r+0x1378>
   83b24:	e505883a 	add	r2,fp,r20
   83b28:	173fffc4 	addi	fp,r2,-1
   83b2c:	0025883a 	mov	r18,zero
   83b30:	04cff834 	movhi	r19,16352
   83b34:	b009883a 	mov	r4,r22
   83b38:	b80b883a 	mov	r5,r23
   83b3c:	900d883a 	mov	r6,r18
   83b40:	980f883a 	mov	r7,r19
   83b44:	00888640 	call	88864 <__adddf3>
   83b48:	180b883a 	mov	r5,r3
   83b4c:	1009883a 	mov	r4,r2
   83b50:	800d883a 	mov	r6,r16
   83b54:	880f883a 	mov	r7,r17
   83b58:	00891140 	call	89114 <__ltdf2>
   83b5c:	103cab16 	blt	r2,zero,82e0c <_dtoa_r+0x6dc>
   83b60:	0009883a 	mov	r4,zero
   83b64:	980b883a 	mov	r5,r19
   83b68:	b80f883a 	mov	r7,r23
   83b6c:	b00d883a 	mov	r6,r22
   83b70:	00887e40 	call	887e4 <__subdf3>
   83b74:	180b883a 	mov	r5,r3
   83b78:	880f883a 	mov	r7,r17
   83b7c:	1009883a 	mov	r4,r2
   83b80:	800d883a 	mov	r6,r16
   83b84:	00890040 	call	89004 <__gtdf2>
   83b88:	00bc470e 	bge	zero,r2,82ca8 <_dtoa_r+0x578>
   83b8c:	00c00c04 	movi	r3,48
   83b90:	e73fffc4 	addi	fp,fp,-1
   83b94:	e0800007 	ldb	r2,0(fp)
   83b98:	10fffd26 	beq	r2,r3,83b90 <_dtoa_r+0x1460>
   83b9c:	d9800417 	ldw	r6,16(sp)
   83ba0:	e7000044 	addi	fp,fp,1
   83ba4:	d9800d15 	stw	r6,52(sp)
   83ba8:	003cab06 	br	82e58 <_dtoa_r+0x728>
   83bac:	d8c00f17 	ldw	r3,60(sp)
   83bb0:	d9001117 	ldw	r4,68(sp)
   83bb4:	20e1c83a 	sub	r16,r4,r3
   83bb8:	0007883a 	mov	r3,zero
   83bbc:	003d9b06 	br	8322c <_dtoa_r+0xafc>
   83bc0:	00800e44 	movi	r2,57
   83bc4:	b0800005 	stb	r2,0(r22)
   83bc8:	b5800044 	addi	r22,r22,1
   83bcc:	003dc106 	br	832d4 <_dtoa_r+0xba4>
   83bd0:	05800084 	movi	r22,2
   83bd4:	003bf706 	br	82bb4 <_dtoa_r+0x484>
   83bd8:	d9000f17 	ldw	r4,60(sp)
   83bdc:	013c000e 	bge	zero,r4,82be0 <_dtoa_r+0x4b0>
   83be0:	d9800e17 	ldw	r6,56(sp)
   83be4:	01bc300e 	bge	zero,r6,82ca8 <_dtoa_r+0x578>
   83be8:	0005883a 	mov	r2,zero
   83bec:	00d00934 	movhi	r3,16420
   83bf0:	a80b883a 	mov	r5,r21
   83bf4:	180f883a 	mov	r7,r3
   83bf8:	a009883a 	mov	r4,r20
   83bfc:	100d883a 	mov	r6,r2
   83c00:	00888d80 	call	888d8 <__muldf3>
   83c04:	b1000044 	addi	r4,r22,1
   83c08:	1021883a 	mov	r16,r2
   83c0c:	1823883a 	mov	r17,r3
   83c10:	008919c0 	call	8919c <__floatsidf>
   83c14:	880b883a 	mov	r5,r17
   83c18:	8009883a 	mov	r4,r16
   83c1c:	180f883a 	mov	r7,r3
   83c20:	100d883a 	mov	r6,r2
   83c24:	00888d80 	call	888d8 <__muldf3>
   83c28:	0011883a 	mov	r8,zero
   83c2c:	02500734 	movhi	r9,16412
   83c30:	180b883a 	mov	r5,r3
   83c34:	480f883a 	mov	r7,r9
   83c38:	1009883a 	mov	r4,r2
   83c3c:	400d883a 	mov	r6,r8
   83c40:	00888640 	call	88864 <__adddf3>
   83c44:	102d883a 	mov	r22,r2
   83c48:	00bf3034 	movhi	r2,64704
   83c4c:	10ef883a 	add	r23,r2,r3
   83c50:	d8800d17 	ldw	r2,52(sp)
   83c54:	d8c00e17 	ldw	r3,56(sp)
   83c58:	8029883a 	mov	r20,r16
   83c5c:	10bfffc4 	addi	r2,r2,-1
   83c60:	882b883a 	mov	r21,r17
   83c64:	d8800415 	stw	r2,16(sp)
   83c68:	d8c00315 	stw	r3,12(sp)
   83c6c:	003e8306 	br	8367c <_dtoa_r+0xf4c>
   83c70:	d8800117 	ldw	r2,4(sp)
   83c74:	dc001117 	ldw	r16,68(sp)
   83c78:	dc801017 	ldw	r18,64(sp)
   83c7c:	00c00d84 	movi	r3,54
   83c80:	1887c83a 	sub	r3,r3,r2
   83c84:	003d6906 	br	8322c <_dtoa_r+0xafc>
   83c88:	01800044 	movi	r6,1
   83c8c:	3021883a 	mov	r16,r6
   83c90:	d9800f15 	stw	r6,60(sp)
   83c94:	d9802615 	stw	r6,152(sp)
   83c98:	d9800e15 	stw	r6,56(sp)
   83c9c:	003b9306 	br	82aec <_dtoa_r+0x3bc>
   83ca0:	b021883a 	mov	r16,r22
   83ca4:	dd800f15 	stw	r22,60(sp)
   83ca8:	003b9006 	br	82aec <_dtoa_r+0x3bc>
   83cac:	103e221e 	bne	r2,zero,83538 <_dtoa_r+0xe08>
   83cb0:	b880004c 	andi	r2,r23,1
   83cb4:	1005003a 	cmpeq	r2,r2,zero
   83cb8:	103e1f1e 	bne	r2,zero,83538 <_dtoa_r+0xe08>
   83cbc:	003e1b06 	br	8352c <_dtoa_r+0xdfc>
   83cc0:	d9001617 	ldw	r4,88(sp)
   83cc4:	980b883a 	mov	r5,r19
   83cc8:	01800284 	movi	r6,10
   83ccc:	000f883a 	mov	r7,zero
   83cd0:	00866180 	call	86618 <__multadd>
   83cd4:	d8c00e17 	ldw	r3,56(sp)
   83cd8:	1027883a 	mov	r19,r2
   83cdc:	d8c00f15 	stw	r3,60(sp)
   83ce0:	003cd306 	br	83030 <_dtoa_r+0x900>

00083ce4 <_fflush_r>:
   83ce4:	defffb04 	addi	sp,sp,-20
   83ce8:	dcc00315 	stw	r19,12(sp)
   83cec:	dc800215 	stw	r18,8(sp)
   83cf0:	dfc00415 	stw	ra,16(sp)
   83cf4:	dc400115 	stw	r17,4(sp)
   83cf8:	dc000015 	stw	r16,0(sp)
   83cfc:	2027883a 	mov	r19,r4
   83d00:	2825883a 	mov	r18,r5
   83d04:	20000226 	beq	r4,zero,83d10 <_fflush_r+0x2c>
   83d08:	20800e17 	ldw	r2,56(r4)
   83d0c:	10005626 	beq	r2,zero,83e68 <_fflush_r+0x184>
   83d10:	9100030b 	ldhu	r4,12(r18)
   83d14:	20ffffcc 	andi	r3,r4,65535
   83d18:	18e0001c 	xori	r3,r3,32768
   83d1c:	18e00004 	addi	r3,r3,-32768
   83d20:	1880020c 	andi	r2,r3,8
   83d24:	1000261e 	bne	r2,zero,83dc0 <_fflush_r+0xdc>
   83d28:	90c00117 	ldw	r3,4(r18)
   83d2c:	20820014 	ori	r2,r4,2048
   83d30:	9080030d 	sth	r2,12(r18)
   83d34:	1009883a 	mov	r4,r2
   83d38:	00c0400e 	bge	zero,r3,83e3c <_fflush_r+0x158>
   83d3c:	92000a17 	ldw	r8,40(r18)
   83d40:	40004026 	beq	r8,zero,83e44 <_fflush_r+0x160>
   83d44:	2084000c 	andi	r2,r4,4096
   83d48:	10005326 	beq	r2,zero,83e98 <_fflush_r+0x1b4>
   83d4c:	94001417 	ldw	r16,80(r18)
   83d50:	9080030b 	ldhu	r2,12(r18)
   83d54:	1080010c 	andi	r2,r2,4
   83d58:	1000481e 	bne	r2,zero,83e7c <_fflush_r+0x198>
   83d5c:	91400717 	ldw	r5,28(r18)
   83d60:	9809883a 	mov	r4,r19
   83d64:	800d883a 	mov	r6,r16
   83d68:	000f883a 	mov	r7,zero
   83d6c:	403ee83a 	callr	r8
   83d70:	8080261e 	bne	r16,r2,83e0c <_fflush_r+0x128>
   83d74:	9080030b 	ldhu	r2,12(r18)
   83d78:	91000417 	ldw	r4,16(r18)
   83d7c:	90000115 	stw	zero,4(r18)
   83d80:	10bdffcc 	andi	r2,r2,63487
   83d84:	10ffffcc 	andi	r3,r2,65535
   83d88:	18c4000c 	andi	r3,r3,4096
   83d8c:	9080030d 	sth	r2,12(r18)
   83d90:	91000015 	stw	r4,0(r18)
   83d94:	18002b26 	beq	r3,zero,83e44 <_fflush_r+0x160>
   83d98:	0007883a 	mov	r3,zero
   83d9c:	1805883a 	mov	r2,r3
   83da0:	94001415 	stw	r16,80(r18)
   83da4:	dfc00417 	ldw	ra,16(sp)
   83da8:	dcc00317 	ldw	r19,12(sp)
   83dac:	dc800217 	ldw	r18,8(sp)
   83db0:	dc400117 	ldw	r17,4(sp)
   83db4:	dc000017 	ldw	r16,0(sp)
   83db8:	dec00504 	addi	sp,sp,20
   83dbc:	f800283a 	ret
   83dc0:	94400417 	ldw	r17,16(r18)
   83dc4:	88001f26 	beq	r17,zero,83e44 <_fflush_r+0x160>
   83dc8:	90800017 	ldw	r2,0(r18)
   83dcc:	18c000cc 	andi	r3,r3,3
   83dd0:	94400015 	stw	r17,0(r18)
   83dd4:	1461c83a 	sub	r16,r2,r17
   83dd8:	18002526 	beq	r3,zero,83e70 <_fflush_r+0x18c>
   83ddc:	0005883a 	mov	r2,zero
   83de0:	90800215 	stw	r2,8(r18)
   83de4:	0400170e 	bge	zero,r16,83e44 <_fflush_r+0x160>
   83de8:	90c00917 	ldw	r3,36(r18)
   83dec:	91400717 	ldw	r5,28(r18)
   83df0:	880d883a 	mov	r6,r17
   83df4:	800f883a 	mov	r7,r16
   83df8:	9809883a 	mov	r4,r19
   83dfc:	183ee83a 	callr	r3
   83e00:	88a3883a 	add	r17,r17,r2
   83e04:	80a1c83a 	sub	r16,r16,r2
   83e08:	00bff616 	blt	zero,r2,83de4 <_fflush_r+0x100>
   83e0c:	9080030b 	ldhu	r2,12(r18)
   83e10:	00ffffc4 	movi	r3,-1
   83e14:	10801014 	ori	r2,r2,64
   83e18:	9080030d 	sth	r2,12(r18)
   83e1c:	1805883a 	mov	r2,r3
   83e20:	dfc00417 	ldw	ra,16(sp)
   83e24:	dcc00317 	ldw	r19,12(sp)
   83e28:	dc800217 	ldw	r18,8(sp)
   83e2c:	dc400117 	ldw	r17,4(sp)
   83e30:	dc000017 	ldw	r16,0(sp)
   83e34:	dec00504 	addi	sp,sp,20
   83e38:	f800283a 	ret
   83e3c:	90800f17 	ldw	r2,60(r18)
   83e40:	00bfbe16 	blt	zero,r2,83d3c <_fflush_r+0x58>
   83e44:	0007883a 	mov	r3,zero
   83e48:	1805883a 	mov	r2,r3
   83e4c:	dfc00417 	ldw	ra,16(sp)
   83e50:	dcc00317 	ldw	r19,12(sp)
   83e54:	dc800217 	ldw	r18,8(sp)
   83e58:	dc400117 	ldw	r17,4(sp)
   83e5c:	dc000017 	ldw	r16,0(sp)
   83e60:	dec00504 	addi	sp,sp,20
   83e64:	f800283a 	ret
   83e68:	0083f7c0 	call	83f7c <__sinit>
   83e6c:	003fa806 	br	83d10 <_fflush_r+0x2c>
   83e70:	90800517 	ldw	r2,20(r18)
   83e74:	90800215 	stw	r2,8(r18)
   83e78:	003fda06 	br	83de4 <_fflush_r+0x100>
   83e7c:	90800117 	ldw	r2,4(r18)
   83e80:	90c00c17 	ldw	r3,48(r18)
   83e84:	80a1c83a 	sub	r16,r16,r2
   83e88:	183fb426 	beq	r3,zero,83d5c <_fflush_r+0x78>
   83e8c:	90800f17 	ldw	r2,60(r18)
   83e90:	80a1c83a 	sub	r16,r16,r2
   83e94:	003fb106 	br	83d5c <_fflush_r+0x78>
   83e98:	91400717 	ldw	r5,28(r18)
   83e9c:	9809883a 	mov	r4,r19
   83ea0:	000d883a 	mov	r6,zero
   83ea4:	01c00044 	movi	r7,1
   83ea8:	403ee83a 	callr	r8
   83eac:	1021883a 	mov	r16,r2
   83eb0:	00bfffc4 	movi	r2,-1
   83eb4:	80800226 	beq	r16,r2,83ec0 <_fflush_r+0x1dc>
   83eb8:	92000a17 	ldw	r8,40(r18)
   83ebc:	003fa406 	br	83d50 <_fflush_r+0x6c>
   83ec0:	98c00017 	ldw	r3,0(r19)
   83ec4:	00800744 	movi	r2,29
   83ec8:	18bfde26 	beq	r3,r2,83e44 <_fflush_r+0x160>
   83ecc:	9080030b 	ldhu	r2,12(r18)
   83ed0:	8007883a 	mov	r3,r16
   83ed4:	10801014 	ori	r2,r2,64
   83ed8:	9080030d 	sth	r2,12(r18)
   83edc:	003fcf06 	br	83e1c <_fflush_r+0x138>

00083ee0 <fflush>:
   83ee0:	01400234 	movhi	r5,8
   83ee4:	294f3904 	addi	r5,r5,15588
   83ee8:	2007883a 	mov	r3,r4
   83eec:	20000526 	beq	r4,zero,83f04 <fflush+0x24>
   83ef0:	00800274 	movhi	r2,9
   83ef4:	109d0704 	addi	r2,r2,29724
   83ef8:	11000017 	ldw	r4,0(r2)
   83efc:	180b883a 	mov	r5,r3
   83f00:	0083ce41 	jmpi	83ce4 <_fflush_r>
   83f04:	00800274 	movhi	r2,9
   83f08:	109d0804 	addi	r2,r2,29728
   83f0c:	11000017 	ldw	r4,0(r2)
   83f10:	0084ae41 	jmpi	84ae4 <_fwalk_reent>

00083f14 <std>:
   83f14:	00800234 	movhi	r2,8
   83f18:	109c1604 	addi	r2,r2,28760
   83f1c:	20800b15 	stw	r2,44(r4)
   83f20:	00800234 	movhi	r2,8
   83f24:	109c5104 	addi	r2,r2,28996
   83f28:	20800815 	stw	r2,32(r4)
   83f2c:	00c00234 	movhi	r3,8
   83f30:	18dc3204 	addi	r3,r3,28872
   83f34:	00800234 	movhi	r2,8
   83f38:	109c1804 	addi	r2,r2,28768
   83f3c:	2140030d 	sth	r5,12(r4)
   83f40:	2180038d 	sth	r6,14(r4)
   83f44:	20c00915 	stw	r3,36(r4)
   83f48:	20800a15 	stw	r2,40(r4)
   83f4c:	20000015 	stw	zero,0(r4)
   83f50:	20000115 	stw	zero,4(r4)
   83f54:	20000215 	stw	zero,8(r4)
   83f58:	20000415 	stw	zero,16(r4)
   83f5c:	20000515 	stw	zero,20(r4)
   83f60:	20000615 	stw	zero,24(r4)
   83f64:	21000715 	stw	r4,28(r4)
   83f68:	f800283a 	ret

00083f6c <__sfp_lock_acquire>:
   83f6c:	f800283a 	ret

00083f70 <__sfp_lock_release>:
   83f70:	f800283a 	ret

00083f74 <__sinit_lock_acquire>:
   83f74:	f800283a 	ret

00083f78 <__sinit_lock_release>:
   83f78:	f800283a 	ret

00083f7c <__sinit>:
   83f7c:	20800e17 	ldw	r2,56(r4)
   83f80:	defffd04 	addi	sp,sp,-12
   83f84:	dc400115 	stw	r17,4(sp)
   83f88:	dc000015 	stw	r16,0(sp)
   83f8c:	dfc00215 	stw	ra,8(sp)
   83f90:	04400044 	movi	r17,1
   83f94:	01400104 	movi	r5,4
   83f98:	000d883a 	mov	r6,zero
   83f9c:	2021883a 	mov	r16,r4
   83fa0:	2200bb04 	addi	r8,r4,748
   83fa4:	200f883a 	mov	r7,r4
   83fa8:	10000526 	beq	r2,zero,83fc0 <__sinit+0x44>
   83fac:	dfc00217 	ldw	ra,8(sp)
   83fb0:	dc400117 	ldw	r17,4(sp)
   83fb4:	dc000017 	ldw	r16,0(sp)
   83fb8:	dec00304 	addi	sp,sp,12
   83fbc:	f800283a 	ret
   83fc0:	21000117 	ldw	r4,4(r4)
   83fc4:	00800234 	movhi	r2,8
   83fc8:	10901804 	addi	r2,r2,16480
   83fcc:	00c000c4 	movi	r3,3
   83fd0:	80800f15 	stw	r2,60(r16)
   83fd4:	80c0b915 	stw	r3,740(r16)
   83fd8:	8200ba15 	stw	r8,744(r16)
   83fdc:	84400e15 	stw	r17,56(r16)
   83fe0:	8000b815 	stw	zero,736(r16)
   83fe4:	0083f140 	call	83f14 <std>
   83fe8:	81000217 	ldw	r4,8(r16)
   83fec:	880d883a 	mov	r6,r17
   83ff0:	800f883a 	mov	r7,r16
   83ff4:	01400284 	movi	r5,10
   83ff8:	0083f140 	call	83f14 <std>
   83ffc:	81000317 	ldw	r4,12(r16)
   84000:	800f883a 	mov	r7,r16
   84004:	01400484 	movi	r5,18
   84008:	01800084 	movi	r6,2
   8400c:	dfc00217 	ldw	ra,8(sp)
   84010:	dc400117 	ldw	r17,4(sp)
   84014:	dc000017 	ldw	r16,0(sp)
   84018:	dec00304 	addi	sp,sp,12
   8401c:	0083f141 	jmpi	83f14 <std>

00084020 <__fp_lock>:
   84020:	0005883a 	mov	r2,zero
   84024:	f800283a 	ret

00084028 <__fp_unlock>:
   84028:	0005883a 	mov	r2,zero
   8402c:	f800283a 	ret

00084030 <__fp_unlock_all>:
   84030:	00800274 	movhi	r2,9
   84034:	109d0704 	addi	r2,r2,29724
   84038:	11000017 	ldw	r4,0(r2)
   8403c:	01400234 	movhi	r5,8
   84040:	29500a04 	addi	r5,r5,16424
   84044:	0084bac1 	jmpi	84bac <_fwalk>

00084048 <__fp_lock_all>:
   84048:	00800274 	movhi	r2,9
   8404c:	109d0704 	addi	r2,r2,29724
   84050:	11000017 	ldw	r4,0(r2)
   84054:	01400234 	movhi	r5,8
   84058:	29500804 	addi	r5,r5,16416
   8405c:	0084bac1 	jmpi	84bac <_fwalk>

00084060 <_cleanup_r>:
   84060:	01400234 	movhi	r5,8
   84064:	295d4804 	addi	r5,r5,29984
   84068:	0084bac1 	jmpi	84bac <_fwalk>

0008406c <_cleanup>:
   8406c:	00800274 	movhi	r2,9
   84070:	109d0804 	addi	r2,r2,29728
   84074:	11000017 	ldw	r4,0(r2)
   84078:	00840601 	jmpi	84060 <_cleanup_r>

0008407c <__sfmoreglue>:
   8407c:	defffc04 	addi	sp,sp,-16
   84080:	dc000015 	stw	r16,0(sp)
   84084:	2821883a 	mov	r16,r5
   84088:	dc400115 	stw	r17,4(sp)
   8408c:	01401704 	movi	r5,92
   84090:	2023883a 	mov	r17,r4
   84094:	8009883a 	mov	r4,r16
   84098:	dfc00315 	stw	ra,12(sp)
   8409c:	dcc00215 	stw	r19,8(sp)
   840a0:	008964c0 	call	8964c <__mulsi3>
   840a4:	11400304 	addi	r5,r2,12
   840a8:	8809883a 	mov	r4,r17
   840ac:	1027883a 	mov	r19,r2
   840b0:	0084ebc0 	call	84ebc <_malloc_r>
   840b4:	10c00304 	addi	r3,r2,12
   840b8:	1023883a 	mov	r17,r2
   840bc:	1809883a 	mov	r4,r3
   840c0:	980d883a 	mov	r6,r19
   840c4:	000b883a 	mov	r5,zero
   840c8:	10000b26 	beq	r2,zero,840f8 <__sfmoreglue+0x7c>
   840cc:	14000115 	stw	r16,4(r2)
   840d0:	10c00215 	stw	r3,8(r2)
   840d4:	10000015 	stw	zero,0(r2)
   840d8:	00858600 	call	85860 <memset>
   840dc:	8805883a 	mov	r2,r17
   840e0:	dfc00317 	ldw	ra,12(sp)
   840e4:	dcc00217 	ldw	r19,8(sp)
   840e8:	dc400117 	ldw	r17,4(sp)
   840ec:	dc000017 	ldw	r16,0(sp)
   840f0:	dec00404 	addi	sp,sp,16
   840f4:	f800283a 	ret
   840f8:	0023883a 	mov	r17,zero
   840fc:	8805883a 	mov	r2,r17
   84100:	dfc00317 	ldw	ra,12(sp)
   84104:	dcc00217 	ldw	r19,8(sp)
   84108:	dc400117 	ldw	r17,4(sp)
   8410c:	dc000017 	ldw	r16,0(sp)
   84110:	dec00404 	addi	sp,sp,16
   84114:	f800283a 	ret

00084118 <__sfp>:
   84118:	defffd04 	addi	sp,sp,-12
   8411c:	00800274 	movhi	r2,9
   84120:	109d0804 	addi	r2,r2,29728
   84124:	dc000015 	stw	r16,0(sp)
   84128:	14000017 	ldw	r16,0(r2)
   8412c:	dc400115 	stw	r17,4(sp)
   84130:	dfc00215 	stw	ra,8(sp)
   84134:	80800e17 	ldw	r2,56(r16)
   84138:	2023883a 	mov	r17,r4
   8413c:	10002626 	beq	r2,zero,841d8 <__sfp+0xc0>
   84140:	8400b804 	addi	r16,r16,736
   84144:	80800117 	ldw	r2,4(r16)
   84148:	81000217 	ldw	r4,8(r16)
   8414c:	10ffffc4 	addi	r3,r2,-1
   84150:	18000916 	blt	r3,zero,84178 <__sfp+0x60>
   84154:	2080030f 	ldh	r2,12(r4)
   84158:	10000b26 	beq	r2,zero,84188 <__sfp+0x70>
   8415c:	017fffc4 	movi	r5,-1
   84160:	00000206 	br	8416c <__sfp+0x54>
   84164:	2080030f 	ldh	r2,12(r4)
   84168:	10000726 	beq	r2,zero,84188 <__sfp+0x70>
   8416c:	18ffffc4 	addi	r3,r3,-1
   84170:	21001704 	addi	r4,r4,92
   84174:	197ffb1e 	bne	r3,r5,84164 <__sfp+0x4c>
   84178:	80800017 	ldw	r2,0(r16)
   8417c:	10001926 	beq	r2,zero,841e4 <__sfp+0xcc>
   84180:	1021883a 	mov	r16,r2
   84184:	003fef06 	br	84144 <__sfp+0x2c>
   84188:	00bfffc4 	movi	r2,-1
   8418c:	00c00044 	movi	r3,1
   84190:	2080038d 	sth	r2,14(r4)
   84194:	20c0030d 	sth	r3,12(r4)
   84198:	20000015 	stw	zero,0(r4)
   8419c:	20000215 	stw	zero,8(r4)
   841a0:	20000115 	stw	zero,4(r4)
   841a4:	20000415 	stw	zero,16(r4)
   841a8:	20000515 	stw	zero,20(r4)
   841ac:	20000615 	stw	zero,24(r4)
   841b0:	20000c15 	stw	zero,48(r4)
   841b4:	20000d15 	stw	zero,52(r4)
   841b8:	20001115 	stw	zero,68(r4)
   841bc:	20001215 	stw	zero,72(r4)
   841c0:	2005883a 	mov	r2,r4
   841c4:	dfc00217 	ldw	ra,8(sp)
   841c8:	dc400117 	ldw	r17,4(sp)
   841cc:	dc000017 	ldw	r16,0(sp)
   841d0:	dec00304 	addi	sp,sp,12
   841d4:	f800283a 	ret
   841d8:	8009883a 	mov	r4,r16
   841dc:	0083f7c0 	call	83f7c <__sinit>
   841e0:	003fd706 	br	84140 <__sfp+0x28>
   841e4:	8809883a 	mov	r4,r17
   841e8:	01400104 	movi	r5,4
   841ec:	008407c0 	call	8407c <__sfmoreglue>
   841f0:	80800015 	stw	r2,0(r16)
   841f4:	103fe21e 	bne	r2,zero,84180 <__sfp+0x68>
   841f8:	00800304 	movi	r2,12
   841fc:	0009883a 	mov	r4,zero
   84200:	88800015 	stw	r2,0(r17)
   84204:	003fee06 	br	841c0 <__sfp+0xa8>

00084208 <_malloc_trim_r>:
   84208:	defffb04 	addi	sp,sp,-20
   8420c:	dcc00315 	stw	r19,12(sp)
   84210:	04c00274 	movhi	r19,9
   84214:	9cd78004 	addi	r19,r19,24064
   84218:	dc800215 	stw	r18,8(sp)
   8421c:	dc400115 	stw	r17,4(sp)
   84220:	dc000015 	stw	r16,0(sp)
   84224:	2823883a 	mov	r17,r5
   84228:	2025883a 	mov	r18,r4
   8422c:	dfc00415 	stw	ra,16(sp)
   84230:	008a9700 	call	8a970 <__malloc_lock>
   84234:	98800217 	ldw	r2,8(r19)
   84238:	9009883a 	mov	r4,r18
   8423c:	000b883a 	mov	r5,zero
   84240:	10c00117 	ldw	r3,4(r2)
   84244:	00bfff04 	movi	r2,-4
   84248:	18a0703a 	and	r16,r3,r2
   8424c:	8463c83a 	sub	r17,r16,r17
   84250:	8c43fbc4 	addi	r17,r17,4079
   84254:	8822d33a 	srli	r17,r17,12
   84258:	0083ffc4 	movi	r2,4095
   8425c:	8c7fffc4 	addi	r17,r17,-1
   84260:	8822933a 	slli	r17,r17,12
   84264:	1440060e 	bge	r2,r17,84280 <_malloc_trim_r+0x78>
   84268:	0086fe80 	call	86fe8 <_sbrk_r>
   8426c:	98c00217 	ldw	r3,8(r19)
   84270:	9009883a 	mov	r4,r18
   84274:	044bc83a 	sub	r5,zero,r17
   84278:	80c7883a 	add	r3,r16,r3
   8427c:	10c00926 	beq	r2,r3,842a4 <_malloc_trim_r+0x9c>
   84280:	008aa780 	call	8aa78 <__malloc_unlock>
   84284:	0005883a 	mov	r2,zero
   84288:	dfc00417 	ldw	ra,16(sp)
   8428c:	dcc00317 	ldw	r19,12(sp)
   84290:	dc800217 	ldw	r18,8(sp)
   84294:	dc400117 	ldw	r17,4(sp)
   84298:	dc000017 	ldw	r16,0(sp)
   8429c:	dec00504 	addi	sp,sp,20
   842a0:	f800283a 	ret
   842a4:	9009883a 	mov	r4,r18
   842a8:	0086fe80 	call	86fe8 <_sbrk_r>
   842ac:	844dc83a 	sub	r6,r16,r17
   842b0:	00ffffc4 	movi	r3,-1
   842b4:	9009883a 	mov	r4,r18
   842b8:	000b883a 	mov	r5,zero
   842bc:	01c002b4 	movhi	r7,10
   842c0:	39e41504 	addi	r7,r7,-28588
   842c4:	31800054 	ori	r6,r6,1
   842c8:	10c00926 	beq	r2,r3,842f0 <_malloc_trim_r+0xe8>
   842cc:	38800017 	ldw	r2,0(r7)
   842d0:	98c00217 	ldw	r3,8(r19)
   842d4:	9009883a 	mov	r4,r18
   842d8:	1445c83a 	sub	r2,r2,r17
   842dc:	38800015 	stw	r2,0(r7)
   842e0:	19800115 	stw	r6,4(r3)
   842e4:	008aa780 	call	8aa78 <__malloc_unlock>
   842e8:	00800044 	movi	r2,1
   842ec:	003fe606 	br	84288 <_malloc_trim_r+0x80>
   842f0:	0086fe80 	call	86fe8 <_sbrk_r>
   842f4:	99800217 	ldw	r6,8(r19)
   842f8:	100f883a 	mov	r7,r2
   842fc:	9009883a 	mov	r4,r18
   84300:	1187c83a 	sub	r3,r2,r6
   84304:	008003c4 	movi	r2,15
   84308:	19400054 	ori	r5,r3,1
   8430c:	10ffdc0e 	bge	r2,r3,84280 <_malloc_trim_r+0x78>
   84310:	00800274 	movhi	r2,9
   84314:	109d0c04 	addi	r2,r2,29744
   84318:	10c00017 	ldw	r3,0(r2)
   8431c:	008002b4 	movhi	r2,10
   84320:	10a41504 	addi	r2,r2,-28588
   84324:	31400115 	stw	r5,4(r6)
   84328:	38c7c83a 	sub	r3,r7,r3
   8432c:	10c00015 	stw	r3,0(r2)
   84330:	003fd306 	br	84280 <_malloc_trim_r+0x78>

00084334 <_free_r>:
   84334:	defffd04 	addi	sp,sp,-12
   84338:	dc400115 	stw	r17,4(sp)
   8433c:	dc000015 	stw	r16,0(sp)
   84340:	dfc00215 	stw	ra,8(sp)
   84344:	2821883a 	mov	r16,r5
   84348:	2023883a 	mov	r17,r4
   8434c:	28005a26 	beq	r5,zero,844b8 <_free_r+0x184>
   84350:	008a9700 	call	8a970 <__malloc_lock>
   84354:	823ffe04 	addi	r8,r16,-8
   84358:	41400117 	ldw	r5,4(r8)
   8435c:	00bfff84 	movi	r2,-2
   84360:	02800274 	movhi	r10,9
   84364:	52978004 	addi	r10,r10,24064
   84368:	288e703a 	and	r7,r5,r2
   8436c:	41cd883a 	add	r6,r8,r7
   84370:	30c00117 	ldw	r3,4(r6)
   84374:	51000217 	ldw	r4,8(r10)
   84378:	00bfff04 	movi	r2,-4
   8437c:	1892703a 	and	r9,r3,r2
   84380:	5017883a 	mov	r11,r10
   84384:	31006726 	beq	r6,r4,84524 <_free_r+0x1f0>
   84388:	2880004c 	andi	r2,r5,1
   8438c:	1005003a 	cmpeq	r2,r2,zero
   84390:	32400115 	stw	r9,4(r6)
   84394:	10001a1e 	bne	r2,zero,84400 <_free_r+0xcc>
   84398:	000b883a 	mov	r5,zero
   8439c:	3247883a 	add	r3,r6,r9
   843a0:	18800117 	ldw	r2,4(r3)
   843a4:	1080004c 	andi	r2,r2,1
   843a8:	1000231e 	bne	r2,zero,84438 <_free_r+0x104>
   843ac:	280ac03a 	cmpne	r5,r5,zero
   843b0:	3a4f883a 	add	r7,r7,r9
   843b4:	2800451e 	bne	r5,zero,844cc <_free_r+0x198>
   843b8:	31000217 	ldw	r4,8(r6)
   843bc:	00800274 	movhi	r2,9
   843c0:	10978204 	addi	r2,r2,24072
   843c4:	20807b26 	beq	r4,r2,845b4 <_free_r+0x280>
   843c8:	30800317 	ldw	r2,12(r6)
   843cc:	3a07883a 	add	r3,r7,r8
   843d0:	19c00015 	stw	r7,0(r3)
   843d4:	11000215 	stw	r4,8(r2)
   843d8:	20800315 	stw	r2,12(r4)
   843dc:	38800054 	ori	r2,r7,1
   843e0:	40800115 	stw	r2,4(r8)
   843e4:	28001a26 	beq	r5,zero,84450 <_free_r+0x11c>
   843e8:	8809883a 	mov	r4,r17
   843ec:	dfc00217 	ldw	ra,8(sp)
   843f0:	dc400117 	ldw	r17,4(sp)
   843f4:	dc000017 	ldw	r16,0(sp)
   843f8:	dec00304 	addi	sp,sp,12
   843fc:	008aa781 	jmpi	8aa78 <__malloc_unlock>
   84400:	80bffe17 	ldw	r2,-8(r16)
   84404:	50c00204 	addi	r3,r10,8
   84408:	4091c83a 	sub	r8,r8,r2
   8440c:	41000217 	ldw	r4,8(r8)
   84410:	388f883a 	add	r7,r7,r2
   84414:	20c06126 	beq	r4,r3,8459c <_free_r+0x268>
   84418:	40800317 	ldw	r2,12(r8)
   8441c:	3247883a 	add	r3,r6,r9
   84420:	000b883a 	mov	r5,zero
   84424:	11000215 	stw	r4,8(r2)
   84428:	20800315 	stw	r2,12(r4)
   8442c:	18800117 	ldw	r2,4(r3)
   84430:	1080004c 	andi	r2,r2,1
   84434:	103fdd26 	beq	r2,zero,843ac <_free_r+0x78>
   84438:	38800054 	ori	r2,r7,1
   8443c:	3a07883a 	add	r3,r7,r8
   84440:	280ac03a 	cmpne	r5,r5,zero
   84444:	40800115 	stw	r2,4(r8)
   84448:	19c00015 	stw	r7,0(r3)
   8444c:	283fe61e 	bne	r5,zero,843e8 <_free_r+0xb4>
   84450:	00807fc4 	movi	r2,511
   84454:	11c01f2e 	bgeu	r2,r7,844d4 <_free_r+0x1a0>
   84458:	3806d27a 	srli	r3,r7,9
   8445c:	1800481e 	bne	r3,zero,84580 <_free_r+0x24c>
   84460:	3804d0fa 	srli	r2,r7,3
   84464:	100690fa 	slli	r3,r2,3
   84468:	1acd883a 	add	r6,r3,r11
   8446c:	31400217 	ldw	r5,8(r6)
   84470:	31405926 	beq	r6,r5,845d8 <_free_r+0x2a4>
   84474:	28800117 	ldw	r2,4(r5)
   84478:	00ffff04 	movi	r3,-4
   8447c:	10c4703a 	and	r2,r2,r3
   84480:	3880022e 	bgeu	r7,r2,8448c <_free_r+0x158>
   84484:	29400217 	ldw	r5,8(r5)
   84488:	317ffa1e 	bne	r6,r5,84474 <_free_r+0x140>
   8448c:	29800317 	ldw	r6,12(r5)
   84490:	41800315 	stw	r6,12(r8)
   84494:	41400215 	stw	r5,8(r8)
   84498:	8809883a 	mov	r4,r17
   8449c:	2a000315 	stw	r8,12(r5)
   844a0:	32000215 	stw	r8,8(r6)
   844a4:	dfc00217 	ldw	ra,8(sp)
   844a8:	dc400117 	ldw	r17,4(sp)
   844ac:	dc000017 	ldw	r16,0(sp)
   844b0:	dec00304 	addi	sp,sp,12
   844b4:	008aa781 	jmpi	8aa78 <__malloc_unlock>
   844b8:	dfc00217 	ldw	ra,8(sp)
   844bc:	dc400117 	ldw	r17,4(sp)
   844c0:	dc000017 	ldw	r16,0(sp)
   844c4:	dec00304 	addi	sp,sp,12
   844c8:	f800283a 	ret
   844cc:	31000217 	ldw	r4,8(r6)
   844d0:	003fbd06 	br	843c8 <_free_r+0x94>
   844d4:	3806d0fa 	srli	r3,r7,3
   844d8:	00800044 	movi	r2,1
   844dc:	51400117 	ldw	r5,4(r10)
   844e0:	180890fa 	slli	r4,r3,3
   844e4:	1807d0ba 	srai	r3,r3,2
   844e8:	22c9883a 	add	r4,r4,r11
   844ec:	21800217 	ldw	r6,8(r4)
   844f0:	10c4983a 	sll	r2,r2,r3
   844f4:	41000315 	stw	r4,12(r8)
   844f8:	41800215 	stw	r6,8(r8)
   844fc:	288ab03a 	or	r5,r5,r2
   84500:	22000215 	stw	r8,8(r4)
   84504:	8809883a 	mov	r4,r17
   84508:	51400115 	stw	r5,4(r10)
   8450c:	32000315 	stw	r8,12(r6)
   84510:	dfc00217 	ldw	ra,8(sp)
   84514:	dc400117 	ldw	r17,4(sp)
   84518:	dc000017 	ldw	r16,0(sp)
   8451c:	dec00304 	addi	sp,sp,12
   84520:	008aa781 	jmpi	8aa78 <__malloc_unlock>
   84524:	2880004c 	andi	r2,r5,1
   84528:	3a4d883a 	add	r6,r7,r9
   8452c:	1000071e 	bne	r2,zero,8454c <_free_r+0x218>
   84530:	80bffe17 	ldw	r2,-8(r16)
   84534:	4091c83a 	sub	r8,r8,r2
   84538:	41000317 	ldw	r4,12(r8)
   8453c:	40c00217 	ldw	r3,8(r8)
   84540:	308d883a 	add	r6,r6,r2
   84544:	20c00215 	stw	r3,8(r4)
   84548:	19000315 	stw	r4,12(r3)
   8454c:	00800274 	movhi	r2,9
   84550:	109d0b04 	addi	r2,r2,29740
   84554:	11000017 	ldw	r4,0(r2)
   84558:	30c00054 	ori	r3,r6,1
   8455c:	52000215 	stw	r8,8(r10)
   84560:	40c00115 	stw	r3,4(r8)
   84564:	313fa036 	bltu	r6,r4,843e8 <_free_r+0xb4>
   84568:	008002b4 	movhi	r2,10
   8456c:	10a3f204 	addi	r2,r2,-28728
   84570:	11400017 	ldw	r5,0(r2)
   84574:	8809883a 	mov	r4,r17
   84578:	00842080 	call	84208 <_malloc_trim_r>
   8457c:	003f9a06 	br	843e8 <_free_r+0xb4>
   84580:	00800104 	movi	r2,4
   84584:	10c0072e 	bgeu	r2,r3,845a4 <_free_r+0x270>
   84588:	00800504 	movi	r2,20
   8458c:	10c01936 	bltu	r2,r3,845f4 <_free_r+0x2c0>
   84590:	188016c4 	addi	r2,r3,91
   84594:	100690fa 	slli	r3,r2,3
   84598:	003fb306 	br	84468 <_free_r+0x134>
   8459c:	01400044 	movi	r5,1
   845a0:	003f7e06 	br	8439c <_free_r+0x68>
   845a4:	3804d1ba 	srli	r2,r7,6
   845a8:	10800e04 	addi	r2,r2,56
   845ac:	100690fa 	slli	r3,r2,3
   845b0:	003fad06 	br	84468 <_free_r+0x134>
   845b4:	22000315 	stw	r8,12(r4)
   845b8:	22000215 	stw	r8,8(r4)
   845bc:	3a05883a 	add	r2,r7,r8
   845c0:	38c00054 	ori	r3,r7,1
   845c4:	11c00015 	stw	r7,0(r2)
   845c8:	41000215 	stw	r4,8(r8)
   845cc:	40c00115 	stw	r3,4(r8)
   845d0:	41000315 	stw	r4,12(r8)
   845d4:	003f8406 	br	843e8 <_free_r+0xb4>
   845d8:	1005d0ba 	srai	r2,r2,2
   845dc:	00c00044 	movi	r3,1
   845e0:	51000117 	ldw	r4,4(r10)
   845e4:	1886983a 	sll	r3,r3,r2
   845e8:	20c8b03a 	or	r4,r4,r3
   845ec:	51000115 	stw	r4,4(r10)
   845f0:	003fa706 	br	84490 <_free_r+0x15c>
   845f4:	00801504 	movi	r2,84
   845f8:	10c00436 	bltu	r2,r3,8460c <_free_r+0x2d8>
   845fc:	3804d33a 	srli	r2,r7,12
   84600:	10801b84 	addi	r2,r2,110
   84604:	100690fa 	slli	r3,r2,3
   84608:	003f9706 	br	84468 <_free_r+0x134>
   8460c:	00805504 	movi	r2,340
   84610:	10c00436 	bltu	r2,r3,84624 <_free_r+0x2f0>
   84614:	3804d3fa 	srli	r2,r7,15
   84618:	10801dc4 	addi	r2,r2,119
   8461c:	100690fa 	slli	r3,r2,3
   84620:	003f9106 	br	84468 <_free_r+0x134>
   84624:	00815504 	movi	r2,1364
   84628:	10c0032e 	bgeu	r2,r3,84638 <_free_r+0x304>
   8462c:	00801f84 	movi	r2,126
   84630:	00c0fc04 	movi	r3,1008
   84634:	003f8c06 	br	84468 <_free_r+0x134>
   84638:	3804d4ba 	srli	r2,r7,18
   8463c:	10801f04 	addi	r2,r2,124
   84640:	100690fa 	slli	r3,r2,3
   84644:	003f8806 	br	84468 <_free_r+0x134>

00084648 <__sfvwrite_r>:
   84648:	30800217 	ldw	r2,8(r6)
   8464c:	defff504 	addi	sp,sp,-44
   84650:	df000915 	stw	fp,36(sp)
   84654:	dd800715 	stw	r22,28(sp)
   84658:	dc800315 	stw	r18,12(sp)
   8465c:	dfc00a15 	stw	ra,40(sp)
   84660:	ddc00815 	stw	r23,32(sp)
   84664:	dd400615 	stw	r21,24(sp)
   84668:	dd000515 	stw	r20,20(sp)
   8466c:	dcc00415 	stw	r19,16(sp)
   84670:	dc400215 	stw	r17,8(sp)
   84674:	dc000115 	stw	r16,4(sp)
   84678:	302d883a 	mov	r22,r6
   8467c:	2039883a 	mov	fp,r4
   84680:	2825883a 	mov	r18,r5
   84684:	10001c26 	beq	r2,zero,846f8 <__sfvwrite_r+0xb0>
   84688:	29c0030b 	ldhu	r7,12(r5)
   8468c:	3880020c 	andi	r2,r7,8
   84690:	10002726 	beq	r2,zero,84730 <__sfvwrite_r+0xe8>
   84694:	28800417 	ldw	r2,16(r5)
   84698:	10002526 	beq	r2,zero,84730 <__sfvwrite_r+0xe8>
   8469c:	3880008c 	andi	r2,r7,2
   846a0:	b5400017 	ldw	r21,0(r22)
   846a4:	10002826 	beq	r2,zero,84748 <__sfvwrite_r+0x100>
   846a8:	0021883a 	mov	r16,zero
   846ac:	0023883a 	mov	r17,zero
   846b0:	880d883a 	mov	r6,r17
   846b4:	e009883a 	mov	r4,fp
   846b8:	00810004 	movi	r2,1024
   846bc:	80006e26 	beq	r16,zero,84878 <__sfvwrite_r+0x230>
   846c0:	800f883a 	mov	r7,r16
   846c4:	91400717 	ldw	r5,28(r18)
   846c8:	1400012e 	bgeu	r2,r16,846d0 <__sfvwrite_r+0x88>
   846cc:	100f883a 	mov	r7,r2
   846d0:	90c00917 	ldw	r3,36(r18)
   846d4:	183ee83a 	callr	r3
   846d8:	1007883a 	mov	r3,r2
   846dc:	80a1c83a 	sub	r16,r16,r2
   846e0:	88a3883a 	add	r17,r17,r2
   846e4:	00806d0e 	bge	zero,r2,8489c <__sfvwrite_r+0x254>
   846e8:	b0800217 	ldw	r2,8(r22)
   846ec:	10c5c83a 	sub	r2,r2,r3
   846f0:	b0800215 	stw	r2,8(r22)
   846f4:	103fee1e 	bne	r2,zero,846b0 <__sfvwrite_r+0x68>
   846f8:	0009883a 	mov	r4,zero
   846fc:	2005883a 	mov	r2,r4
   84700:	dfc00a17 	ldw	ra,40(sp)
   84704:	df000917 	ldw	fp,36(sp)
   84708:	ddc00817 	ldw	r23,32(sp)
   8470c:	dd800717 	ldw	r22,28(sp)
   84710:	dd400617 	ldw	r21,24(sp)
   84714:	dd000517 	ldw	r20,20(sp)
   84718:	dcc00417 	ldw	r19,16(sp)
   8471c:	dc800317 	ldw	r18,12(sp)
   84720:	dc400217 	ldw	r17,8(sp)
   84724:	dc000117 	ldw	r16,4(sp)
   84728:	dec00b04 	addi	sp,sp,44
   8472c:	f800283a 	ret
   84730:	00823b00 	call	823b0 <__swsetup_r>
   84734:	1000e41e 	bne	r2,zero,84ac8 <__sfvwrite_r+0x480>
   84738:	91c0030b 	ldhu	r7,12(r18)
   8473c:	b5400017 	ldw	r21,0(r22)
   84740:	3880008c 	andi	r2,r7,2
   84744:	103fd81e 	bne	r2,zero,846a8 <__sfvwrite_r+0x60>
   84748:	3880004c 	andi	r2,r7,1
   8474c:	1005003a 	cmpeq	r2,r2,zero
   84750:	10005726 	beq	r2,zero,848b0 <__sfvwrite_r+0x268>
   84754:	0029883a 	mov	r20,zero
   84758:	002f883a 	mov	r23,zero
   8475c:	a0004226 	beq	r20,zero,84868 <__sfvwrite_r+0x220>
   84760:	3880800c 	andi	r2,r7,512
   84764:	94000217 	ldw	r16,8(r18)
   84768:	10008b26 	beq	r2,zero,84998 <__sfvwrite_r+0x350>
   8476c:	800d883a 	mov	r6,r16
   84770:	a400a536 	bltu	r20,r16,84a08 <__sfvwrite_r+0x3c0>
   84774:	3881200c 	andi	r2,r7,1152
   84778:	10002726 	beq	r2,zero,84818 <__sfvwrite_r+0x1d0>
   8477c:	90800517 	ldw	r2,20(r18)
   84780:	92000417 	ldw	r8,16(r18)
   84784:	91400017 	ldw	r5,0(r18)
   84788:	1087883a 	add	r3,r2,r2
   8478c:	1887883a 	add	r3,r3,r2
   84790:	1808d7fa 	srli	r4,r3,31
   84794:	2a21c83a 	sub	r16,r5,r8
   84798:	80800044 	addi	r2,r16,1
   8479c:	20c9883a 	add	r4,r4,r3
   847a0:	2027d07a 	srai	r19,r4,1
   847a4:	a085883a 	add	r2,r20,r2
   847a8:	980d883a 	mov	r6,r19
   847ac:	9880022e 	bgeu	r19,r2,847b8 <__sfvwrite_r+0x170>
   847b0:	1027883a 	mov	r19,r2
   847b4:	100d883a 	mov	r6,r2
   847b8:	3881000c 	andi	r2,r7,1024
   847bc:	1000b826 	beq	r2,zero,84aa0 <__sfvwrite_r+0x458>
   847c0:	300b883a 	mov	r5,r6
   847c4:	e009883a 	mov	r4,fp
   847c8:	0084ebc0 	call	84ebc <_malloc_r>
   847cc:	10003126 	beq	r2,zero,84894 <__sfvwrite_r+0x24c>
   847d0:	91400417 	ldw	r5,16(r18)
   847d4:	1009883a 	mov	r4,r2
   847d8:	800d883a 	mov	r6,r16
   847dc:	1023883a 	mov	r17,r2
   847e0:	00856e00 	call	856e0 <memcpy>
   847e4:	90c0030b 	ldhu	r3,12(r18)
   847e8:	00beffc4 	movi	r2,-1025
   847ec:	1886703a 	and	r3,r3,r2
   847f0:	18c02014 	ori	r3,r3,128
   847f4:	90c0030d 	sth	r3,12(r18)
   847f8:	9c07c83a 	sub	r3,r19,r16
   847fc:	8c05883a 	add	r2,r17,r16
   84800:	a00d883a 	mov	r6,r20
   84804:	a021883a 	mov	r16,r20
   84808:	90800015 	stw	r2,0(r18)
   8480c:	90c00215 	stw	r3,8(r18)
   84810:	94400415 	stw	r17,16(r18)
   84814:	94c00515 	stw	r19,20(r18)
   84818:	91000017 	ldw	r4,0(r18)
   8481c:	b80b883a 	mov	r5,r23
   84820:	a023883a 	mov	r17,r20
   84824:	00857800 	call	85780 <memmove>
   84828:	90c00217 	ldw	r3,8(r18)
   8482c:	90800017 	ldw	r2,0(r18)
   84830:	a027883a 	mov	r19,r20
   84834:	1c07c83a 	sub	r3,r3,r16
   84838:	1405883a 	add	r2,r2,r16
   8483c:	90c00215 	stw	r3,8(r18)
   84840:	a021883a 	mov	r16,r20
   84844:	90800015 	stw	r2,0(r18)
   84848:	b0800217 	ldw	r2,8(r22)
   8484c:	1405c83a 	sub	r2,r2,r16
   84850:	b0800215 	stw	r2,8(r22)
   84854:	103fa826 	beq	r2,zero,846f8 <__sfvwrite_r+0xb0>
   84858:	a469c83a 	sub	r20,r20,r17
   8485c:	91c0030b 	ldhu	r7,12(r18)
   84860:	bcef883a 	add	r23,r23,r19
   84864:	a03fbe1e 	bne	r20,zero,84760 <__sfvwrite_r+0x118>
   84868:	adc00017 	ldw	r23,0(r21)
   8486c:	ad000117 	ldw	r20,4(r21)
   84870:	ad400204 	addi	r21,r21,8
   84874:	003fb906 	br	8475c <__sfvwrite_r+0x114>
   84878:	ac400017 	ldw	r17,0(r21)
   8487c:	ac000117 	ldw	r16,4(r21)
   84880:	ad400204 	addi	r21,r21,8
   84884:	003f8a06 	br	846b0 <__sfvwrite_r+0x68>
   84888:	91400417 	ldw	r5,16(r18)
   8488c:	e009883a 	mov	r4,fp
   84890:	00843340 	call	84334 <_free_r>
   84894:	00800304 	movi	r2,12
   84898:	e0800015 	stw	r2,0(fp)
   8489c:	9080030b 	ldhu	r2,12(r18)
   848a0:	013fffc4 	movi	r4,-1
   848a4:	10801014 	ori	r2,r2,64
   848a8:	9080030d 	sth	r2,12(r18)
   848ac:	003f9306 	br	846fc <__sfvwrite_r+0xb4>
   848b0:	0027883a 	mov	r19,zero
   848b4:	002f883a 	mov	r23,zero
   848b8:	d8000015 	stw	zero,0(sp)
   848bc:	0029883a 	mov	r20,zero
   848c0:	98001e26 	beq	r19,zero,8493c <__sfvwrite_r+0x2f4>
   848c4:	d8c00017 	ldw	r3,0(sp)
   848c8:	1804c03a 	cmpne	r2,r3,zero
   848cc:	10005e26 	beq	r2,zero,84a48 <__sfvwrite_r+0x400>
   848d0:	9821883a 	mov	r16,r19
   848d4:	a4c0012e 	bgeu	r20,r19,848dc <__sfvwrite_r+0x294>
   848d8:	a021883a 	mov	r16,r20
   848dc:	91000017 	ldw	r4,0(r18)
   848e0:	90800417 	ldw	r2,16(r18)
   848e4:	91800217 	ldw	r6,8(r18)
   848e8:	91c00517 	ldw	r7,20(r18)
   848ec:	1100022e 	bgeu	r2,r4,848f8 <__sfvwrite_r+0x2b0>
   848f0:	31e3883a 	add	r17,r6,r7
   848f4:	8c001616 	blt	r17,r16,84950 <__sfvwrite_r+0x308>
   848f8:	81c03816 	blt	r16,r7,849dc <__sfvwrite_r+0x394>
   848fc:	90c00917 	ldw	r3,36(r18)
   84900:	91400717 	ldw	r5,28(r18)
   84904:	e009883a 	mov	r4,fp
   84908:	b80d883a 	mov	r6,r23
   8490c:	183ee83a 	callr	r3
   84910:	1023883a 	mov	r17,r2
   84914:	00bfe10e 	bge	zero,r2,8489c <__sfvwrite_r+0x254>
   84918:	a469c83a 	sub	r20,r20,r17
   8491c:	a0001826 	beq	r20,zero,84980 <__sfvwrite_r+0x338>
   84920:	b0800217 	ldw	r2,8(r22)
   84924:	1445c83a 	sub	r2,r2,r17
   84928:	b0800215 	stw	r2,8(r22)
   8492c:	103f7226 	beq	r2,zero,846f8 <__sfvwrite_r+0xb0>
   84930:	9c67c83a 	sub	r19,r19,r17
   84934:	bc6f883a 	add	r23,r23,r17
   84938:	983fe21e 	bne	r19,zero,848c4 <__sfvwrite_r+0x27c>
   8493c:	adc00017 	ldw	r23,0(r21)
   84940:	acc00117 	ldw	r19,4(r21)
   84944:	ad400204 	addi	r21,r21,8
   84948:	d8000015 	stw	zero,0(sp)
   8494c:	003fdc06 	br	848c0 <__sfvwrite_r+0x278>
   84950:	b80b883a 	mov	r5,r23
   84954:	880d883a 	mov	r6,r17
   84958:	00857800 	call	85780 <memmove>
   8495c:	90c00017 	ldw	r3,0(r18)
   84960:	e009883a 	mov	r4,fp
   84964:	900b883a 	mov	r5,r18
   84968:	1c47883a 	add	r3,r3,r17
   8496c:	90c00015 	stw	r3,0(r18)
   84970:	0083ce40 	call	83ce4 <_fflush_r>
   84974:	103fc91e 	bne	r2,zero,8489c <__sfvwrite_r+0x254>
   84978:	a469c83a 	sub	r20,r20,r17
   8497c:	a03fe81e 	bne	r20,zero,84920 <__sfvwrite_r+0x2d8>
   84980:	e009883a 	mov	r4,fp
   84984:	900b883a 	mov	r5,r18
   84988:	0083ce40 	call	83ce4 <_fflush_r>
   8498c:	103fc31e 	bne	r2,zero,8489c <__sfvwrite_r+0x254>
   84990:	d8000015 	stw	zero,0(sp)
   84994:	003fe206 	br	84920 <__sfvwrite_r+0x2d8>
   84998:	91000017 	ldw	r4,0(r18)
   8499c:	90800417 	ldw	r2,16(r18)
   849a0:	1100022e 	bgeu	r2,r4,849ac <__sfvwrite_r+0x364>
   849a4:	8023883a 	mov	r17,r16
   849a8:	85003136 	bltu	r16,r20,84a70 <__sfvwrite_r+0x428>
   849ac:	91c00517 	ldw	r7,20(r18)
   849b0:	a1c01836 	bltu	r20,r7,84a14 <__sfvwrite_r+0x3cc>
   849b4:	90c00917 	ldw	r3,36(r18)
   849b8:	91400717 	ldw	r5,28(r18)
   849bc:	e009883a 	mov	r4,fp
   849c0:	b80d883a 	mov	r6,r23
   849c4:	183ee83a 	callr	r3
   849c8:	1021883a 	mov	r16,r2
   849cc:	00bfb30e 	bge	zero,r2,8489c <__sfvwrite_r+0x254>
   849d0:	1023883a 	mov	r17,r2
   849d4:	1027883a 	mov	r19,r2
   849d8:	003f9b06 	br	84848 <__sfvwrite_r+0x200>
   849dc:	b80b883a 	mov	r5,r23
   849e0:	800d883a 	mov	r6,r16
   849e4:	00857800 	call	85780 <memmove>
   849e8:	90c00217 	ldw	r3,8(r18)
   849ec:	90800017 	ldw	r2,0(r18)
   849f0:	8023883a 	mov	r17,r16
   849f4:	1c07c83a 	sub	r3,r3,r16
   849f8:	1405883a 	add	r2,r2,r16
   849fc:	90c00215 	stw	r3,8(r18)
   84a00:	90800015 	stw	r2,0(r18)
   84a04:	003fc406 	br	84918 <__sfvwrite_r+0x2d0>
   84a08:	a00d883a 	mov	r6,r20
   84a0c:	a021883a 	mov	r16,r20
   84a10:	003f8106 	br	84818 <__sfvwrite_r+0x1d0>
   84a14:	b80b883a 	mov	r5,r23
   84a18:	a00d883a 	mov	r6,r20
   84a1c:	00857800 	call	85780 <memmove>
   84a20:	90c00217 	ldw	r3,8(r18)
   84a24:	90800017 	ldw	r2,0(r18)
   84a28:	a021883a 	mov	r16,r20
   84a2c:	1d07c83a 	sub	r3,r3,r20
   84a30:	1505883a 	add	r2,r2,r20
   84a34:	a023883a 	mov	r17,r20
   84a38:	a027883a 	mov	r19,r20
   84a3c:	90c00215 	stw	r3,8(r18)
   84a40:	90800015 	stw	r2,0(r18)
   84a44:	003f8006 	br	84848 <__sfvwrite_r+0x200>
   84a48:	b809883a 	mov	r4,r23
   84a4c:	01400284 	movi	r5,10
   84a50:	980d883a 	mov	r6,r19
   84a54:	00855fc0 	call	855fc <memchr>
   84a58:	10001726 	beq	r2,zero,84ab8 <__sfvwrite_r+0x470>
   84a5c:	15c5c83a 	sub	r2,r2,r23
   84a60:	15000044 	addi	r20,r2,1
   84a64:	00800044 	movi	r2,1
   84a68:	d8800015 	stw	r2,0(sp)
   84a6c:	003f9806 	br	848d0 <__sfvwrite_r+0x288>
   84a70:	b80b883a 	mov	r5,r23
   84a74:	800d883a 	mov	r6,r16
   84a78:	00857800 	call	85780 <memmove>
   84a7c:	90c00017 	ldw	r3,0(r18)
   84a80:	e009883a 	mov	r4,fp
   84a84:	900b883a 	mov	r5,r18
   84a88:	1c07883a 	add	r3,r3,r16
   84a8c:	90c00015 	stw	r3,0(r18)
   84a90:	8027883a 	mov	r19,r16
   84a94:	0083ce40 	call	83ce4 <_fflush_r>
   84a98:	103f6b26 	beq	r2,zero,84848 <__sfvwrite_r+0x200>
   84a9c:	003f7f06 	br	8489c <__sfvwrite_r+0x254>
   84aa0:	400b883a 	mov	r5,r8
   84aa4:	e009883a 	mov	r4,fp
   84aa8:	00869840 	call	86984 <_realloc_r>
   84aac:	103f7626 	beq	r2,zero,84888 <__sfvwrite_r+0x240>
   84ab0:	1023883a 	mov	r17,r2
   84ab4:	003f5006 	br	847f8 <__sfvwrite_r+0x1b0>
   84ab8:	00c00044 	movi	r3,1
   84abc:	9d000044 	addi	r20,r19,1
   84ac0:	d8c00015 	stw	r3,0(sp)
   84ac4:	003f8206 	br	848d0 <__sfvwrite_r+0x288>
   84ac8:	9080030b 	ldhu	r2,12(r18)
   84acc:	00c00244 	movi	r3,9
   84ad0:	013fffc4 	movi	r4,-1
   84ad4:	10801014 	ori	r2,r2,64
   84ad8:	9080030d 	sth	r2,12(r18)
   84adc:	e0c00015 	stw	r3,0(fp)
   84ae0:	003f0606 	br	846fc <__sfvwrite_r+0xb4>

00084ae4 <_fwalk_reent>:
   84ae4:	defff704 	addi	sp,sp,-36
   84ae8:	dcc00315 	stw	r19,12(sp)
   84aec:	24c0b804 	addi	r19,r4,736
   84af0:	dd800615 	stw	r22,24(sp)
   84af4:	dd400515 	stw	r21,20(sp)
   84af8:	dfc00815 	stw	ra,32(sp)
   84afc:	ddc00715 	stw	r23,28(sp)
   84b00:	dd000415 	stw	r20,16(sp)
   84b04:	dc800215 	stw	r18,8(sp)
   84b08:	dc400115 	stw	r17,4(sp)
   84b0c:	dc000015 	stw	r16,0(sp)
   84b10:	202b883a 	mov	r21,r4
   84b14:	282d883a 	mov	r22,r5
   84b18:	0083f6c0 	call	83f6c <__sfp_lock_acquire>
   84b1c:	98002126 	beq	r19,zero,84ba4 <_fwalk_reent+0xc0>
   84b20:	002f883a 	mov	r23,zero
   84b24:	9c800117 	ldw	r18,4(r19)
   84b28:	9c000217 	ldw	r16,8(r19)
   84b2c:	90bfffc4 	addi	r2,r18,-1
   84b30:	10000d16 	blt	r2,zero,84b68 <_fwalk_reent+0x84>
   84b34:	0023883a 	mov	r17,zero
   84b38:	053fffc4 	movi	r20,-1
   84b3c:	8080030f 	ldh	r2,12(r16)
   84b40:	8c400044 	addi	r17,r17,1
   84b44:	10000626 	beq	r2,zero,84b60 <_fwalk_reent+0x7c>
   84b48:	8080038f 	ldh	r2,14(r16)
   84b4c:	800b883a 	mov	r5,r16
   84b50:	a809883a 	mov	r4,r21
   84b54:	15000226 	beq	r2,r20,84b60 <_fwalk_reent+0x7c>
   84b58:	b03ee83a 	callr	r22
   84b5c:	b8aeb03a 	or	r23,r23,r2
   84b60:	84001704 	addi	r16,r16,92
   84b64:	947ff51e 	bne	r18,r17,84b3c <_fwalk_reent+0x58>
   84b68:	9cc00017 	ldw	r19,0(r19)
   84b6c:	983fed1e 	bne	r19,zero,84b24 <_fwalk_reent+0x40>
   84b70:	0083f700 	call	83f70 <__sfp_lock_release>
   84b74:	b805883a 	mov	r2,r23
   84b78:	dfc00817 	ldw	ra,32(sp)
   84b7c:	ddc00717 	ldw	r23,28(sp)
   84b80:	dd800617 	ldw	r22,24(sp)
   84b84:	dd400517 	ldw	r21,20(sp)
   84b88:	dd000417 	ldw	r20,16(sp)
   84b8c:	dcc00317 	ldw	r19,12(sp)
   84b90:	dc800217 	ldw	r18,8(sp)
   84b94:	dc400117 	ldw	r17,4(sp)
   84b98:	dc000017 	ldw	r16,0(sp)
   84b9c:	dec00904 	addi	sp,sp,36
   84ba0:	f800283a 	ret
   84ba4:	002f883a 	mov	r23,zero
   84ba8:	003ff106 	br	84b70 <_fwalk_reent+0x8c>

00084bac <_fwalk>:
   84bac:	defff804 	addi	sp,sp,-32
   84bb0:	dcc00315 	stw	r19,12(sp)
   84bb4:	24c0b804 	addi	r19,r4,736
   84bb8:	dd400515 	stw	r21,20(sp)
   84bbc:	dfc00715 	stw	ra,28(sp)
   84bc0:	dd800615 	stw	r22,24(sp)
   84bc4:	dd000415 	stw	r20,16(sp)
   84bc8:	dc800215 	stw	r18,8(sp)
   84bcc:	dc400115 	stw	r17,4(sp)
   84bd0:	dc000015 	stw	r16,0(sp)
   84bd4:	282b883a 	mov	r21,r5
   84bd8:	0083f6c0 	call	83f6c <__sfp_lock_acquire>
   84bdc:	98001f26 	beq	r19,zero,84c5c <_fwalk+0xb0>
   84be0:	002d883a 	mov	r22,zero
   84be4:	9c800117 	ldw	r18,4(r19)
   84be8:	9c000217 	ldw	r16,8(r19)
   84bec:	90bfffc4 	addi	r2,r18,-1
   84bf0:	10000c16 	blt	r2,zero,84c24 <_fwalk+0x78>
   84bf4:	0023883a 	mov	r17,zero
   84bf8:	053fffc4 	movi	r20,-1
   84bfc:	8080030f 	ldh	r2,12(r16)
   84c00:	8c400044 	addi	r17,r17,1
   84c04:	10000526 	beq	r2,zero,84c1c <_fwalk+0x70>
   84c08:	8080038f 	ldh	r2,14(r16)
   84c0c:	8009883a 	mov	r4,r16
   84c10:	15000226 	beq	r2,r20,84c1c <_fwalk+0x70>
   84c14:	a83ee83a 	callr	r21
   84c18:	b0acb03a 	or	r22,r22,r2
   84c1c:	84001704 	addi	r16,r16,92
   84c20:	947ff61e 	bne	r18,r17,84bfc <_fwalk+0x50>
   84c24:	9cc00017 	ldw	r19,0(r19)
   84c28:	983fee1e 	bne	r19,zero,84be4 <_fwalk+0x38>
   84c2c:	0083f700 	call	83f70 <__sfp_lock_release>
   84c30:	b005883a 	mov	r2,r22
   84c34:	dfc00717 	ldw	ra,28(sp)
   84c38:	dd800617 	ldw	r22,24(sp)
   84c3c:	dd400517 	ldw	r21,20(sp)
   84c40:	dd000417 	ldw	r20,16(sp)
   84c44:	dcc00317 	ldw	r19,12(sp)
   84c48:	dc800217 	ldw	r18,8(sp)
   84c4c:	dc400117 	ldw	r17,4(sp)
   84c50:	dc000017 	ldw	r16,0(sp)
   84c54:	dec00804 	addi	sp,sp,32
   84c58:	f800283a 	ret
   84c5c:	002d883a 	mov	r22,zero
   84c60:	003ff206 	br	84c2c <_fwalk+0x80>

00084c64 <__locale_charset>:
   84c64:	d0a00317 	ldw	r2,-32756(gp)
   84c68:	f800283a 	ret

00084c6c <_localeconv_r>:
   84c6c:	00800274 	movhi	r2,9
   84c70:	10958d04 	addi	r2,r2,22068
   84c74:	f800283a 	ret

00084c78 <localeconv>:
   84c78:	00800274 	movhi	r2,9
   84c7c:	109d0704 	addi	r2,r2,29724
   84c80:	11000017 	ldw	r4,0(r2)
   84c84:	0084c6c1 	jmpi	84c6c <_localeconv_r>

00084c88 <_setlocale_r>:
   84c88:	defffc04 	addi	sp,sp,-16
   84c8c:	00c00274 	movhi	r3,9
   84c90:	18d58804 	addi	r3,r3,22048
   84c94:	dc800215 	stw	r18,8(sp)
   84c98:	dc400115 	stw	r17,4(sp)
   84c9c:	dc000015 	stw	r16,0(sp)
   84ca0:	2023883a 	mov	r17,r4
   84ca4:	2825883a 	mov	r18,r5
   84ca8:	dfc00315 	stw	ra,12(sp)
   84cac:	3021883a 	mov	r16,r6
   84cb0:	3009883a 	mov	r4,r6
   84cb4:	180b883a 	mov	r5,r3
   84cb8:	30000926 	beq	r6,zero,84ce0 <_setlocale_r+0x58>
   84cbc:	00871a40 	call	871a4 <strcmp>
   84cc0:	8009883a 	mov	r4,r16
   84cc4:	01400274 	movhi	r5,9
   84cc8:	29557304 	addi	r5,r5,21964
   84ccc:	10000b1e 	bne	r2,zero,84cfc <_setlocale_r+0x74>
   84cd0:	8c000d15 	stw	r16,52(r17)
   84cd4:	8c800c15 	stw	r18,48(r17)
   84cd8:	00c00274 	movhi	r3,9
   84cdc:	18d58804 	addi	r3,r3,22048
   84ce0:	1805883a 	mov	r2,r3
   84ce4:	dfc00317 	ldw	ra,12(sp)
   84ce8:	dc800217 	ldw	r18,8(sp)
   84cec:	dc400117 	ldw	r17,4(sp)
   84cf0:	dc000017 	ldw	r16,0(sp)
   84cf4:	dec00404 	addi	sp,sp,16
   84cf8:	f800283a 	ret
   84cfc:	00871a40 	call	871a4 <strcmp>
   84d00:	0007883a 	mov	r3,zero
   84d04:	103ff226 	beq	r2,zero,84cd0 <_setlocale_r+0x48>
   84d08:	003ff506 	br	84ce0 <_setlocale_r+0x58>

00084d0c <setlocale>:
   84d0c:	01800274 	movhi	r6,9
   84d10:	319d0704 	addi	r6,r6,29724
   84d14:	2007883a 	mov	r3,r4
   84d18:	31000017 	ldw	r4,0(r6)
   84d1c:	280d883a 	mov	r6,r5
   84d20:	180b883a 	mov	r5,r3
   84d24:	0084c881 	jmpi	84c88 <_setlocale_r>

00084d28 <__smakebuf_r>:
   84d28:	2880030b 	ldhu	r2,12(r5)
   84d2c:	deffed04 	addi	sp,sp,-76
   84d30:	dc401015 	stw	r17,64(sp)
   84d34:	1080008c 	andi	r2,r2,2
   84d38:	dc000f15 	stw	r16,60(sp)
   84d3c:	dfc01215 	stw	ra,72(sp)
   84d40:	dc801115 	stw	r18,68(sp)
   84d44:	2821883a 	mov	r16,r5
   84d48:	2023883a 	mov	r17,r4
   84d4c:	10000b26 	beq	r2,zero,84d7c <__smakebuf_r+0x54>
   84d50:	28c010c4 	addi	r3,r5,67
   84d54:	00800044 	movi	r2,1
   84d58:	28800515 	stw	r2,20(r5)
   84d5c:	28c00415 	stw	r3,16(r5)
   84d60:	28c00015 	stw	r3,0(r5)
   84d64:	dfc01217 	ldw	ra,72(sp)
   84d68:	dc801117 	ldw	r18,68(sp)
   84d6c:	dc401017 	ldw	r17,64(sp)
   84d70:	dc000f17 	ldw	r16,60(sp)
   84d74:	dec01304 	addi	sp,sp,76
   84d78:	f800283a 	ret
   84d7c:	2940038f 	ldh	r5,14(r5)
   84d80:	28002116 	blt	r5,zero,84e08 <__smakebuf_r+0xe0>
   84d84:	d80d883a 	mov	r6,sp
   84d88:	00875340 	call	87534 <_fstat_r>
   84d8c:	10001e16 	blt	r2,zero,84e08 <__smakebuf_r+0xe0>
   84d90:	d8800117 	ldw	r2,4(sp)
   84d94:	00e00014 	movui	r3,32768
   84d98:	113c000c 	andi	r4,r2,61440
   84d9c:	20c03126 	beq	r4,r3,84e64 <__smakebuf_r+0x13c>
   84da0:	8080030b 	ldhu	r2,12(r16)
   84da4:	00c80004 	movi	r3,8192
   84da8:	10820014 	ori	r2,r2,2048
   84dac:	8080030d 	sth	r2,12(r16)
   84db0:	20c01e26 	beq	r4,r3,84e2c <__smakebuf_r+0x104>
   84db4:	04810004 	movi	r18,1024
   84db8:	8809883a 	mov	r4,r17
   84dbc:	900b883a 	mov	r5,r18
   84dc0:	0084ebc0 	call	84ebc <_malloc_r>
   84dc4:	1009883a 	mov	r4,r2
   84dc8:	10003126 	beq	r2,zero,84e90 <__smakebuf_r+0x168>
   84dcc:	80c0030b 	ldhu	r3,12(r16)
   84dd0:	00800234 	movhi	r2,8
   84dd4:	10901804 	addi	r2,r2,16480
   84dd8:	88800f15 	stw	r2,60(r17)
   84ddc:	18c02014 	ori	r3,r3,128
   84de0:	84800515 	stw	r18,20(r16)
   84de4:	80c0030d 	sth	r3,12(r16)
   84de8:	81000415 	stw	r4,16(r16)
   84dec:	81000015 	stw	r4,0(r16)
   84df0:	dfc01217 	ldw	ra,72(sp)
   84df4:	dc801117 	ldw	r18,68(sp)
   84df8:	dc401017 	ldw	r17,64(sp)
   84dfc:	dc000f17 	ldw	r16,60(sp)
   84e00:	dec01304 	addi	sp,sp,76
   84e04:	f800283a 	ret
   84e08:	80c0030b 	ldhu	r3,12(r16)
   84e0c:	1880200c 	andi	r2,r3,128
   84e10:	10000426 	beq	r2,zero,84e24 <__smakebuf_r+0xfc>
   84e14:	04801004 	movi	r18,64
   84e18:	18820014 	ori	r2,r3,2048
   84e1c:	8080030d 	sth	r2,12(r16)
   84e20:	003fe506 	br	84db8 <__smakebuf_r+0x90>
   84e24:	04810004 	movi	r18,1024
   84e28:	003ffb06 	br	84e18 <__smakebuf_r+0xf0>
   84e2c:	8140038f 	ldh	r5,14(r16)
   84e30:	8809883a 	mov	r4,r17
   84e34:	00875a80 	call	875a8 <_isatty_r>
   84e38:	103fde26 	beq	r2,zero,84db4 <__smakebuf_r+0x8c>
   84e3c:	8080030b 	ldhu	r2,12(r16)
   84e40:	80c010c4 	addi	r3,r16,67
   84e44:	04810004 	movi	r18,1024
   84e48:	10800054 	ori	r2,r2,1
   84e4c:	8080030d 	sth	r2,12(r16)
   84e50:	00800044 	movi	r2,1
   84e54:	80c00415 	stw	r3,16(r16)
   84e58:	80800515 	stw	r2,20(r16)
   84e5c:	80c00015 	stw	r3,0(r16)
   84e60:	003fd506 	br	84db8 <__smakebuf_r+0x90>
   84e64:	80c00a17 	ldw	r3,40(r16)
   84e68:	00800234 	movhi	r2,8
   84e6c:	109c1804 	addi	r2,r2,28768
   84e70:	18bfcb1e 	bne	r3,r2,84da0 <__smakebuf_r+0x78>
   84e74:	8080030b 	ldhu	r2,12(r16)
   84e78:	00c10004 	movi	r3,1024
   84e7c:	1825883a 	mov	r18,r3
   84e80:	10c4b03a 	or	r2,r2,r3
   84e84:	8080030d 	sth	r2,12(r16)
   84e88:	80c01315 	stw	r3,76(r16)
   84e8c:	003fca06 	br	84db8 <__smakebuf_r+0x90>
   84e90:	8100030b 	ldhu	r4,12(r16)
   84e94:	2080800c 	andi	r2,r4,512
   84e98:	103fb21e 	bne	r2,zero,84d64 <__smakebuf_r+0x3c>
   84e9c:	80c010c4 	addi	r3,r16,67
   84ea0:	21000094 	ori	r4,r4,2
   84ea4:	00800044 	movi	r2,1
   84ea8:	80800515 	stw	r2,20(r16)
   84eac:	8100030d 	sth	r4,12(r16)
   84eb0:	80c00415 	stw	r3,16(r16)
   84eb4:	80c00015 	stw	r3,0(r16)
   84eb8:	003faa06 	br	84d64 <__smakebuf_r+0x3c>

00084ebc <_malloc_r>:
   84ebc:	defff604 	addi	sp,sp,-40
   84ec0:	28c002c4 	addi	r3,r5,11
   84ec4:	00800584 	movi	r2,22
   84ec8:	dc800215 	stw	r18,8(sp)
   84ecc:	dfc00915 	stw	ra,36(sp)
   84ed0:	df000815 	stw	fp,32(sp)
   84ed4:	ddc00715 	stw	r23,28(sp)
   84ed8:	dd800615 	stw	r22,24(sp)
   84edc:	dd400515 	stw	r21,20(sp)
   84ee0:	dd000415 	stw	r20,16(sp)
   84ee4:	dcc00315 	stw	r19,12(sp)
   84ee8:	dc400115 	stw	r17,4(sp)
   84eec:	dc000015 	stw	r16,0(sp)
   84ef0:	2025883a 	mov	r18,r4
   84ef4:	10c01236 	bltu	r2,r3,84f40 <_malloc_r+0x84>
   84ef8:	04400404 	movi	r17,16
   84efc:	8940142e 	bgeu	r17,r5,84f50 <_malloc_r+0x94>
   84f00:	00800304 	movi	r2,12
   84f04:	0007883a 	mov	r3,zero
   84f08:	90800015 	stw	r2,0(r18)
   84f0c:	1805883a 	mov	r2,r3
   84f10:	dfc00917 	ldw	ra,36(sp)
   84f14:	df000817 	ldw	fp,32(sp)
   84f18:	ddc00717 	ldw	r23,28(sp)
   84f1c:	dd800617 	ldw	r22,24(sp)
   84f20:	dd400517 	ldw	r21,20(sp)
   84f24:	dd000417 	ldw	r20,16(sp)
   84f28:	dcc00317 	ldw	r19,12(sp)
   84f2c:	dc800217 	ldw	r18,8(sp)
   84f30:	dc400117 	ldw	r17,4(sp)
   84f34:	dc000017 	ldw	r16,0(sp)
   84f38:	dec00a04 	addi	sp,sp,40
   84f3c:	f800283a 	ret
   84f40:	00bffe04 	movi	r2,-8
   84f44:	18a2703a 	and	r17,r3,r2
   84f48:	883fed16 	blt	r17,zero,84f00 <_malloc_r+0x44>
   84f4c:	897fec36 	bltu	r17,r5,84f00 <_malloc_r+0x44>
   84f50:	9009883a 	mov	r4,r18
   84f54:	008a9700 	call	8a970 <__malloc_lock>
   84f58:	00807dc4 	movi	r2,503
   84f5c:	14402b2e 	bgeu	r2,r17,8500c <_malloc_r+0x150>
   84f60:	8806d27a 	srli	r3,r17,9
   84f64:	18003f1e 	bne	r3,zero,85064 <_malloc_r+0x1a8>
   84f68:	880cd0fa 	srli	r6,r17,3
   84f6c:	300490fa 	slli	r2,r6,3
   84f70:	02c00274 	movhi	r11,9
   84f74:	5ad78004 	addi	r11,r11,24064
   84f78:	12cb883a 	add	r5,r2,r11
   84f7c:	2c000317 	ldw	r16,12(r5)
   84f80:	580f883a 	mov	r7,r11
   84f84:	2c00041e 	bne	r5,r16,84f98 <_malloc_r+0xdc>
   84f88:	00000a06 	br	84fb4 <_malloc_r+0xf8>
   84f8c:	1800860e 	bge	r3,zero,851a8 <_malloc_r+0x2ec>
   84f90:	84000317 	ldw	r16,12(r16)
   84f94:	2c000726 	beq	r5,r16,84fb4 <_malloc_r+0xf8>
   84f98:	80800117 	ldw	r2,4(r16)
   84f9c:	00ffff04 	movi	r3,-4
   84fa0:	10c8703a 	and	r4,r2,r3
   84fa4:	2447c83a 	sub	r3,r4,r17
   84fa8:	008003c4 	movi	r2,15
   84fac:	10fff70e 	bge	r2,r3,84f8c <_malloc_r+0xd0>
   84fb0:	31bfffc4 	addi	r6,r6,-1
   84fb4:	32400044 	addi	r9,r6,1
   84fb8:	02800274 	movhi	r10,9
   84fbc:	52978204 	addi	r10,r10,24072
   84fc0:	54000217 	ldw	r16,8(r10)
   84fc4:	8280a026 	beq	r16,r10,85248 <_malloc_r+0x38c>
   84fc8:	80800117 	ldw	r2,4(r16)
   84fcc:	00ffff04 	movi	r3,-4
   84fd0:	10ca703a 	and	r5,r2,r3
   84fd4:	2c4dc83a 	sub	r6,r5,r17
   84fd8:	008003c4 	movi	r2,15
   84fdc:	11808316 	blt	r2,r6,851ec <_malloc_r+0x330>
   84fe0:	52800315 	stw	r10,12(r10)
   84fe4:	52800215 	stw	r10,8(r10)
   84fe8:	30002916 	blt	r6,zero,85090 <_malloc_r+0x1d4>
   84fec:	8147883a 	add	r3,r16,r5
   84ff0:	18800117 	ldw	r2,4(r3)
   84ff4:	9009883a 	mov	r4,r18
   84ff8:	10800054 	ori	r2,r2,1
   84ffc:	18800115 	stw	r2,4(r3)
   85000:	008aa780 	call	8aa78 <__malloc_unlock>
   85004:	80c00204 	addi	r3,r16,8
   85008:	003fc006 	br	84f0c <_malloc_r+0x50>
   8500c:	02c00274 	movhi	r11,9
   85010:	5ad78004 	addi	r11,r11,24064
   85014:	8ac5883a 	add	r2,r17,r11
   85018:	14000317 	ldw	r16,12(r2)
   8501c:	580f883a 	mov	r7,r11
   85020:	8806d0fa 	srli	r3,r17,3
   85024:	14006c26 	beq	r2,r16,851d8 <_malloc_r+0x31c>
   85028:	80c00117 	ldw	r3,4(r16)
   8502c:	00bfff04 	movi	r2,-4
   85030:	81800317 	ldw	r6,12(r16)
   85034:	1886703a 	and	r3,r3,r2
   85038:	80c7883a 	add	r3,r16,r3
   8503c:	18800117 	ldw	r2,4(r3)
   85040:	81400217 	ldw	r5,8(r16)
   85044:	9009883a 	mov	r4,r18
   85048:	10800054 	ori	r2,r2,1
   8504c:	18800115 	stw	r2,4(r3)
   85050:	31400215 	stw	r5,8(r6)
   85054:	29800315 	stw	r6,12(r5)
   85058:	008aa780 	call	8aa78 <__malloc_unlock>
   8505c:	80c00204 	addi	r3,r16,8
   85060:	003faa06 	br	84f0c <_malloc_r+0x50>
   85064:	00800104 	movi	r2,4
   85068:	10c0052e 	bgeu	r2,r3,85080 <_malloc_r+0x1c4>
   8506c:	00800504 	movi	r2,20
   85070:	10c07836 	bltu	r2,r3,85254 <_malloc_r+0x398>
   85074:	198016c4 	addi	r6,r3,91
   85078:	300490fa 	slli	r2,r6,3
   8507c:	003fbc06 	br	84f70 <_malloc_r+0xb4>
   85080:	8804d1ba 	srli	r2,r17,6
   85084:	11800e04 	addi	r6,r2,56
   85088:	300490fa 	slli	r2,r6,3
   8508c:	003fb806 	br	84f70 <_malloc_r+0xb4>
   85090:	00807fc4 	movi	r2,511
   85094:	1140bb36 	bltu	r2,r5,85384 <_malloc_r+0x4c8>
   85098:	2806d0fa 	srli	r3,r5,3
   8509c:	573ffe04 	addi	fp,r10,-8
   850a0:	00800044 	movi	r2,1
   850a4:	180890fa 	slli	r4,r3,3
   850a8:	1807d0ba 	srai	r3,r3,2
   850ac:	e1c00117 	ldw	r7,4(fp)
   850b0:	5909883a 	add	r4,r11,r4
   850b4:	21400217 	ldw	r5,8(r4)
   850b8:	10c4983a 	sll	r2,r2,r3
   850bc:	81000315 	stw	r4,12(r16)
   850c0:	81400215 	stw	r5,8(r16)
   850c4:	388eb03a 	or	r7,r7,r2
   850c8:	2c000315 	stw	r16,12(r5)
   850cc:	24000215 	stw	r16,8(r4)
   850d0:	e1c00115 	stw	r7,4(fp)
   850d4:	4807883a 	mov	r3,r9
   850d8:	4800cd16 	blt	r9,zero,85410 <_malloc_r+0x554>
   850dc:	1807d0ba 	srai	r3,r3,2
   850e0:	00800044 	movi	r2,1
   850e4:	10c8983a 	sll	r4,r2,r3
   850e8:	39004436 	bltu	r7,r4,851fc <_malloc_r+0x340>
   850ec:	21c4703a 	and	r2,r4,r7
   850f0:	10000a1e 	bne	r2,zero,8511c <_malloc_r+0x260>
   850f4:	2109883a 	add	r4,r4,r4
   850f8:	00bfff04 	movi	r2,-4
   850fc:	4884703a 	and	r2,r9,r2
   85100:	3906703a 	and	r3,r7,r4
   85104:	12400104 	addi	r9,r2,4
   85108:	1800041e 	bne	r3,zero,8511c <_malloc_r+0x260>
   8510c:	2109883a 	add	r4,r4,r4
   85110:	3904703a 	and	r2,r7,r4
   85114:	4a400104 	addi	r9,r9,4
   85118:	103ffc26 	beq	r2,zero,8510c <_malloc_r+0x250>
   8511c:	480490fa 	slli	r2,r9,3
   85120:	4819883a 	mov	r12,r9
   85124:	023fff04 	movi	r8,-4
   85128:	589b883a 	add	r13,r11,r2
   8512c:	6807883a 	mov	r3,r13
   85130:	014003c4 	movi	r5,15
   85134:	1c000317 	ldw	r16,12(r3)
   85138:	1c00041e 	bne	r3,r16,8514c <_malloc_r+0x290>
   8513c:	0000a706 	br	853dc <_malloc_r+0x520>
   85140:	3000ab0e 	bge	r6,zero,853f0 <_malloc_r+0x534>
   85144:	84000317 	ldw	r16,12(r16)
   85148:	1c00a426 	beq	r3,r16,853dc <_malloc_r+0x520>
   8514c:	80800117 	ldw	r2,4(r16)
   85150:	1204703a 	and	r2,r2,r8
   85154:	144dc83a 	sub	r6,r2,r17
   85158:	29bff90e 	bge	r5,r6,85140 <_malloc_r+0x284>
   8515c:	81000317 	ldw	r4,12(r16)
   85160:	80c00217 	ldw	r3,8(r16)
   85164:	89400054 	ori	r5,r17,1
   85168:	8445883a 	add	r2,r16,r17
   8516c:	20c00215 	stw	r3,8(r4)
   85170:	19000315 	stw	r4,12(r3)
   85174:	81400115 	stw	r5,4(r16)
   85178:	1187883a 	add	r3,r2,r6
   8517c:	31000054 	ori	r4,r6,1
   85180:	50800315 	stw	r2,12(r10)
   85184:	50800215 	stw	r2,8(r10)
   85188:	19800015 	stw	r6,0(r3)
   8518c:	11000115 	stw	r4,4(r2)
   85190:	12800215 	stw	r10,8(r2)
   85194:	12800315 	stw	r10,12(r2)
   85198:	9009883a 	mov	r4,r18
   8519c:	008aa780 	call	8aa78 <__malloc_unlock>
   851a0:	80c00204 	addi	r3,r16,8
   851a4:	003f5906 	br	84f0c <_malloc_r+0x50>
   851a8:	8109883a 	add	r4,r16,r4
   851ac:	20800117 	ldw	r2,4(r4)
   851b0:	80c00217 	ldw	r3,8(r16)
   851b4:	81400317 	ldw	r5,12(r16)
   851b8:	10800054 	ori	r2,r2,1
   851bc:	20800115 	stw	r2,4(r4)
   851c0:	28c00215 	stw	r3,8(r5)
   851c4:	19400315 	stw	r5,12(r3)
   851c8:	9009883a 	mov	r4,r18
   851cc:	008aa780 	call	8aa78 <__malloc_unlock>
   851d0:	80c00204 	addi	r3,r16,8
   851d4:	003f4d06 	br	84f0c <_malloc_r+0x50>
   851d8:	80800204 	addi	r2,r16,8
   851dc:	14000317 	ldw	r16,12(r2)
   851e0:	143f911e 	bne	r2,r16,85028 <_malloc_r+0x16c>
   851e4:	1a400084 	addi	r9,r3,2
   851e8:	003f7306 	br	84fb8 <_malloc_r+0xfc>
   851ec:	88c00054 	ori	r3,r17,1
   851f0:	8445883a 	add	r2,r16,r17
   851f4:	80c00115 	stw	r3,4(r16)
   851f8:	003fdf06 	br	85178 <_malloc_r+0x2bc>
   851fc:	e4000217 	ldw	r16,8(fp)
   85200:	00bfff04 	movi	r2,-4
   85204:	80c00117 	ldw	r3,4(r16)
   85208:	802d883a 	mov	r22,r16
   8520c:	18aa703a 	and	r21,r3,r2
   85210:	ac401636 	bltu	r21,r17,8526c <_malloc_r+0x3b0>
   85214:	ac49c83a 	sub	r4,r21,r17
   85218:	008003c4 	movi	r2,15
   8521c:	1100130e 	bge	r2,r4,8526c <_malloc_r+0x3b0>
   85220:	88800054 	ori	r2,r17,1
   85224:	8447883a 	add	r3,r16,r17
   85228:	80800115 	stw	r2,4(r16)
   8522c:	20800054 	ori	r2,r4,1
   85230:	18800115 	stw	r2,4(r3)
   85234:	e0c00215 	stw	r3,8(fp)
   85238:	9009883a 	mov	r4,r18
   8523c:	008aa780 	call	8aa78 <__malloc_unlock>
   85240:	80c00204 	addi	r3,r16,8
   85244:	003f3106 	br	84f0c <_malloc_r+0x50>
   85248:	39c00117 	ldw	r7,4(r7)
   8524c:	573ffe04 	addi	fp,r10,-8
   85250:	003fa006 	br	850d4 <_malloc_r+0x218>
   85254:	00801504 	movi	r2,84
   85258:	10c06736 	bltu	r2,r3,853f8 <_malloc_r+0x53c>
   8525c:	8804d33a 	srli	r2,r17,12
   85260:	11801b84 	addi	r6,r2,110
   85264:	300490fa 	slli	r2,r6,3
   85268:	003f4106 	br	84f70 <_malloc_r+0xb4>
   8526c:	d0a6eb17 	ldw	r2,-25684(gp)
   85270:	d0e00517 	ldw	r3,-32748(gp)
   85274:	053fffc4 	movi	r20,-1
   85278:	10800404 	addi	r2,r2,16
   8527c:	88a7883a 	add	r19,r17,r2
   85280:	1d000326 	beq	r3,r20,85290 <_malloc_r+0x3d4>
   85284:	98c3ffc4 	addi	r3,r19,4095
   85288:	00bc0004 	movi	r2,-4096
   8528c:	18a6703a 	and	r19,r3,r2
   85290:	9009883a 	mov	r4,r18
   85294:	980b883a 	mov	r5,r19
   85298:	0086fe80 	call	86fe8 <_sbrk_r>
   8529c:	1009883a 	mov	r4,r2
   852a0:	15000426 	beq	r2,r20,852b4 <_malloc_r+0x3f8>
   852a4:	854b883a 	add	r5,r16,r21
   852a8:	1029883a 	mov	r20,r2
   852ac:	11405a2e 	bgeu	r2,r5,85418 <_malloc_r+0x55c>
   852b0:	87000c26 	beq	r16,fp,852e4 <_malloc_r+0x428>
   852b4:	e4000217 	ldw	r16,8(fp)
   852b8:	80c00117 	ldw	r3,4(r16)
   852bc:	00bfff04 	movi	r2,-4
   852c0:	1884703a 	and	r2,r3,r2
   852c4:	14400336 	bltu	r2,r17,852d4 <_malloc_r+0x418>
   852c8:	1449c83a 	sub	r4,r2,r17
   852cc:	008003c4 	movi	r2,15
   852d0:	113fd316 	blt	r2,r4,85220 <_malloc_r+0x364>
   852d4:	9009883a 	mov	r4,r18
   852d8:	008aa780 	call	8aa78 <__malloc_unlock>
   852dc:	0007883a 	mov	r3,zero
   852e0:	003f0a06 	br	84f0c <_malloc_r+0x50>
   852e4:	05c002b4 	movhi	r23,10
   852e8:	bde41504 	addi	r23,r23,-28588
   852ec:	b8800017 	ldw	r2,0(r23)
   852f0:	988d883a 	add	r6,r19,r2
   852f4:	b9800015 	stw	r6,0(r23)
   852f8:	d0e00517 	ldw	r3,-32748(gp)
   852fc:	00bfffc4 	movi	r2,-1
   85300:	18808e26 	beq	r3,r2,8553c <_malloc_r+0x680>
   85304:	2145c83a 	sub	r2,r4,r5
   85308:	3085883a 	add	r2,r6,r2
   8530c:	b8800015 	stw	r2,0(r23)
   85310:	20c001cc 	andi	r3,r4,7
   85314:	18005f1e 	bne	r3,zero,85494 <_malloc_r+0x5d8>
   85318:	000b883a 	mov	r5,zero
   8531c:	a4c5883a 	add	r2,r20,r19
   85320:	1083ffcc 	andi	r2,r2,4095
   85324:	00c40004 	movi	r3,4096
   85328:	1887c83a 	sub	r3,r3,r2
   8532c:	28e7883a 	add	r19,r5,r3
   85330:	9009883a 	mov	r4,r18
   85334:	980b883a 	mov	r5,r19
   85338:	0086fe80 	call	86fe8 <_sbrk_r>
   8533c:	1007883a 	mov	r3,r2
   85340:	00bfffc4 	movi	r2,-1
   85344:	18807a26 	beq	r3,r2,85530 <_malloc_r+0x674>
   85348:	1d05c83a 	sub	r2,r3,r20
   8534c:	9885883a 	add	r2,r19,r2
   85350:	10c00054 	ori	r3,r2,1
   85354:	b8800017 	ldw	r2,0(r23)
   85358:	a021883a 	mov	r16,r20
   8535c:	a0c00115 	stw	r3,4(r20)
   85360:	9885883a 	add	r2,r19,r2
   85364:	b8800015 	stw	r2,0(r23)
   85368:	e5000215 	stw	r20,8(fp)
   8536c:	b7003626 	beq	r22,fp,85448 <_malloc_r+0x58c>
   85370:	018003c4 	movi	r6,15
   85374:	35404b36 	bltu	r6,r21,854a4 <_malloc_r+0x5e8>
   85378:	00800044 	movi	r2,1
   8537c:	a0800115 	stw	r2,4(r20)
   85380:	003fcd06 	br	852b8 <_malloc_r+0x3fc>
   85384:	2808d27a 	srli	r4,r5,9
   85388:	2000371e 	bne	r4,zero,85468 <_malloc_r+0x5ac>
   8538c:	2808d0fa 	srli	r4,r5,3
   85390:	200690fa 	slli	r3,r4,3
   85394:	1ad1883a 	add	r8,r3,r11
   85398:	41800217 	ldw	r6,8(r8)
   8539c:	41805b26 	beq	r8,r6,8550c <_malloc_r+0x650>
   853a0:	30800117 	ldw	r2,4(r6)
   853a4:	00ffff04 	movi	r3,-4
   853a8:	10c4703a 	and	r2,r2,r3
   853ac:	2880022e 	bgeu	r5,r2,853b8 <_malloc_r+0x4fc>
   853b0:	31800217 	ldw	r6,8(r6)
   853b4:	41bffa1e 	bne	r8,r6,853a0 <_malloc_r+0x4e4>
   853b8:	32000317 	ldw	r8,12(r6)
   853bc:	39c00117 	ldw	r7,4(r7)
   853c0:	82000315 	stw	r8,12(r16)
   853c4:	81800215 	stw	r6,8(r16)
   853c8:	07000274 	movhi	fp,9
   853cc:	e7178004 	addi	fp,fp,24064
   853d0:	34000315 	stw	r16,12(r6)
   853d4:	44000215 	stw	r16,8(r8)
   853d8:	003f3e06 	br	850d4 <_malloc_r+0x218>
   853dc:	63000044 	addi	r12,r12,1
   853e0:	608000cc 	andi	r2,r12,3
   853e4:	10005d26 	beq	r2,zero,8555c <_malloc_r+0x6a0>
   853e8:	18c00204 	addi	r3,r3,8
   853ec:	003f5106 	br	85134 <_malloc_r+0x278>
   853f0:	8089883a 	add	r4,r16,r2
   853f4:	003f6d06 	br	851ac <_malloc_r+0x2f0>
   853f8:	00805504 	movi	r2,340
   853fc:	10c02036 	bltu	r2,r3,85480 <_malloc_r+0x5c4>
   85400:	8804d3fa 	srli	r2,r17,15
   85404:	11801dc4 	addi	r6,r2,119
   85408:	300490fa 	slli	r2,r6,3
   8540c:	003ed806 	br	84f70 <_malloc_r+0xb4>
   85410:	48c000c4 	addi	r3,r9,3
   85414:	003f3106 	br	850dc <_malloc_r+0x220>
   85418:	05c002b4 	movhi	r23,10
   8541c:	bde41504 	addi	r23,r23,-28588
   85420:	b8800017 	ldw	r2,0(r23)
   85424:	988d883a 	add	r6,r19,r2
   85428:	b9800015 	stw	r6,0(r23)
   8542c:	293fb21e 	bne	r5,r4,852f8 <_malloc_r+0x43c>
   85430:	2083ffcc 	andi	r2,r4,4095
   85434:	103fb01e 	bne	r2,zero,852f8 <_malloc_r+0x43c>
   85438:	e4000217 	ldw	r16,8(fp)
   8543c:	9d45883a 	add	r2,r19,r21
   85440:	10800054 	ori	r2,r2,1
   85444:	80800115 	stw	r2,4(r16)
   85448:	b8c00017 	ldw	r3,0(r23)
   8544c:	d0a6ec17 	ldw	r2,-25680(gp)
   85450:	10c0012e 	bgeu	r2,r3,85458 <_malloc_r+0x59c>
   85454:	d0e6ec15 	stw	r3,-25680(gp)
   85458:	d0a6ed17 	ldw	r2,-25676(gp)
   8545c:	10ff962e 	bgeu	r2,r3,852b8 <_malloc_r+0x3fc>
   85460:	d0e6ed15 	stw	r3,-25676(gp)
   85464:	003f9406 	br	852b8 <_malloc_r+0x3fc>
   85468:	00800104 	movi	r2,4
   8546c:	11001e36 	bltu	r2,r4,854e8 <_malloc_r+0x62c>
   85470:	2804d1ba 	srli	r2,r5,6
   85474:	11000e04 	addi	r4,r2,56
   85478:	200690fa 	slli	r3,r4,3
   8547c:	003fc506 	br	85394 <_malloc_r+0x4d8>
   85480:	00815504 	movi	r2,1364
   85484:	10c01d2e 	bgeu	r2,r3,854fc <_malloc_r+0x640>
   85488:	01801f84 	movi	r6,126
   8548c:	0080fc04 	movi	r2,1008
   85490:	003eb706 	br	84f70 <_malloc_r+0xb4>
   85494:	00800204 	movi	r2,8
   85498:	10cbc83a 	sub	r5,r2,r3
   8549c:	2169883a 	add	r20,r4,r5
   854a0:	003f9e06 	br	8531c <_malloc_r+0x460>
   854a4:	00bffe04 	movi	r2,-8
   854a8:	a93ffd04 	addi	r4,r21,-12
   854ac:	2088703a 	and	r4,r4,r2
   854b0:	b10b883a 	add	r5,r22,r4
   854b4:	00c00144 	movi	r3,5
   854b8:	28c00215 	stw	r3,8(r5)
   854bc:	28c00115 	stw	r3,4(r5)
   854c0:	b0800117 	ldw	r2,4(r22)
   854c4:	1080004c 	andi	r2,r2,1
   854c8:	2084b03a 	or	r2,r4,r2
   854cc:	b0800115 	stw	r2,4(r22)
   854d0:	313fdd2e 	bgeu	r6,r4,85448 <_malloc_r+0x58c>
   854d4:	b1400204 	addi	r5,r22,8
   854d8:	9009883a 	mov	r4,r18
   854dc:	00843340 	call	84334 <_free_r>
   854e0:	e4000217 	ldw	r16,8(fp)
   854e4:	003fd806 	br	85448 <_malloc_r+0x58c>
   854e8:	00800504 	movi	r2,20
   854ec:	11001536 	bltu	r2,r4,85544 <_malloc_r+0x688>
   854f0:	210016c4 	addi	r4,r4,91
   854f4:	200690fa 	slli	r3,r4,3
   854f8:	003fa606 	br	85394 <_malloc_r+0x4d8>
   854fc:	8804d4ba 	srli	r2,r17,18
   85500:	11801f04 	addi	r6,r2,124
   85504:	300490fa 	slli	r2,r6,3
   85508:	003e9906 	br	84f70 <_malloc_r+0xb4>
   8550c:	2009d0ba 	srai	r4,r4,2
   85510:	01400274 	movhi	r5,9
   85514:	29578004 	addi	r5,r5,24064
   85518:	00c00044 	movi	r3,1
   8551c:	28800117 	ldw	r2,4(r5)
   85520:	1906983a 	sll	r3,r3,r4
   85524:	10c4b03a 	or	r2,r2,r3
   85528:	28800115 	stw	r2,4(r5)
   8552c:	003fa306 	br	853bc <_malloc_r+0x500>
   85530:	0027883a 	mov	r19,zero
   85534:	00c00044 	movi	r3,1
   85538:	003f8606 	br	85354 <_malloc_r+0x498>
   8553c:	d1200515 	stw	r4,-32748(gp)
   85540:	003f7306 	br	85310 <_malloc_r+0x454>
   85544:	00801504 	movi	r2,84
   85548:	11001936 	bltu	r2,r4,855b0 <_malloc_r+0x6f4>
   8554c:	2804d33a 	srli	r2,r5,12
   85550:	11001b84 	addi	r4,r2,110
   85554:	200690fa 	slli	r3,r4,3
   85558:	003f8e06 	br	85394 <_malloc_r+0x4d8>
   8555c:	480b883a 	mov	r5,r9
   85560:	6807883a 	mov	r3,r13
   85564:	288000cc 	andi	r2,r5,3
   85568:	18fffe04 	addi	r3,r3,-8
   8556c:	297fffc4 	addi	r5,r5,-1
   85570:	10001526 	beq	r2,zero,855c8 <_malloc_r+0x70c>
   85574:	18800217 	ldw	r2,8(r3)
   85578:	10fffa26 	beq	r2,r3,85564 <_malloc_r+0x6a8>
   8557c:	2109883a 	add	r4,r4,r4
   85580:	393f1e36 	bltu	r7,r4,851fc <_malloc_r+0x340>
   85584:	203f1d26 	beq	r4,zero,851fc <_malloc_r+0x340>
   85588:	21c4703a 	and	r2,r4,r7
   8558c:	10000226 	beq	r2,zero,85598 <_malloc_r+0x6dc>
   85590:	6013883a 	mov	r9,r12
   85594:	003ee106 	br	8511c <_malloc_r+0x260>
   85598:	2109883a 	add	r4,r4,r4
   8559c:	3904703a 	and	r2,r7,r4
   855a0:	63000104 	addi	r12,r12,4
   855a4:	103ffc26 	beq	r2,zero,85598 <_malloc_r+0x6dc>
   855a8:	6013883a 	mov	r9,r12
   855ac:	003edb06 	br	8511c <_malloc_r+0x260>
   855b0:	00805504 	movi	r2,340
   855b4:	11000836 	bltu	r2,r4,855d8 <_malloc_r+0x71c>
   855b8:	2804d3fa 	srli	r2,r5,15
   855bc:	11001dc4 	addi	r4,r2,119
   855c0:	200690fa 	slli	r3,r4,3
   855c4:	003f7306 	br	85394 <_malloc_r+0x4d8>
   855c8:	0104303a 	nor	r2,zero,r4
   855cc:	388e703a 	and	r7,r7,r2
   855d0:	e1c00115 	stw	r7,4(fp)
   855d4:	003fe906 	br	8557c <_malloc_r+0x6c0>
   855d8:	00815504 	movi	r2,1364
   855dc:	1100032e 	bgeu	r2,r4,855ec <_malloc_r+0x730>
   855e0:	01001f84 	movi	r4,126
   855e4:	00c0fc04 	movi	r3,1008
   855e8:	003f6a06 	br	85394 <_malloc_r+0x4d8>
   855ec:	2804d4ba 	srli	r2,r5,18
   855f0:	11001f04 	addi	r4,r2,124
   855f4:	200690fa 	slli	r3,r4,3
   855f8:	003f6606 	br	85394 <_malloc_r+0x4d8>

000855fc <memchr>:
   855fc:	008000c4 	movi	r2,3
   85600:	29403fcc 	andi	r5,r5,255
   85604:	2007883a 	mov	r3,r4
   85608:	1180022e 	bgeu	r2,r6,85614 <memchr+0x18>
   8560c:	2084703a 	and	r2,r4,r2
   85610:	10000b26 	beq	r2,zero,85640 <memchr+0x44>
   85614:	313fffc4 	addi	r4,r6,-1
   85618:	3000051e 	bne	r6,zero,85630 <memchr+0x34>
   8561c:	00002c06 	br	856d0 <memchr+0xd4>
   85620:	213fffc4 	addi	r4,r4,-1
   85624:	00bfffc4 	movi	r2,-1
   85628:	18c00044 	addi	r3,r3,1
   8562c:	20802826 	beq	r4,r2,856d0 <memchr+0xd4>
   85630:	18800003 	ldbu	r2,0(r3)
   85634:	28bffa1e 	bne	r5,r2,85620 <memchr+0x24>
   85638:	1805883a 	mov	r2,r3
   8563c:	f800283a 	ret
   85640:	0011883a 	mov	r8,zero
   85644:	0007883a 	mov	r3,zero
   85648:	01c00104 	movi	r7,4
   8564c:	4004923a 	slli	r2,r8,8
   85650:	18c00044 	addi	r3,r3,1
   85654:	1151883a 	add	r8,r2,r5
   85658:	19fffc1e 	bne	r3,r7,8564c <memchr+0x50>
   8565c:	02bfbff4 	movhi	r10,65279
   85660:	52bfbfc4 	addi	r10,r10,-257
   85664:	02602074 	movhi	r9,32897
   85668:	4a602004 	addi	r9,r9,-32640
   8566c:	02c000c4 	movi	r11,3
   85670:	20800017 	ldw	r2,0(r4)
   85674:	31bfff04 	addi	r6,r6,-4
   85678:	200f883a 	mov	r7,r4
   8567c:	1204f03a 	xor	r2,r2,r8
   85680:	1287883a 	add	r3,r2,r10
   85684:	1a46703a 	and	r3,r3,r9
   85688:	0084303a 	nor	r2,zero,r2
   8568c:	10c4703a 	and	r2,r2,r3
   85690:	10000b26 	beq	r2,zero,856c0 <memchr+0xc4>
   85694:	20800003 	ldbu	r2,0(r4)
   85698:	28800f26 	beq	r5,r2,856d8 <memchr+0xdc>
   8569c:	20800043 	ldbu	r2,1(r4)
   856a0:	21c00044 	addi	r7,r4,1
   856a4:	28800c26 	beq	r5,r2,856d8 <memchr+0xdc>
   856a8:	20800083 	ldbu	r2,2(r4)
   856ac:	21c00084 	addi	r7,r4,2
   856b0:	28800926 	beq	r5,r2,856d8 <memchr+0xdc>
   856b4:	208000c3 	ldbu	r2,3(r4)
   856b8:	21c000c4 	addi	r7,r4,3
   856bc:	28800626 	beq	r5,r2,856d8 <memchr+0xdc>
   856c0:	21000104 	addi	r4,r4,4
   856c4:	59bfea36 	bltu	r11,r6,85670 <memchr+0x74>
   856c8:	2007883a 	mov	r3,r4
   856cc:	003fd106 	br	85614 <memchr+0x18>
   856d0:	0005883a 	mov	r2,zero
   856d4:	f800283a 	ret
   856d8:	3805883a 	mov	r2,r7
   856dc:	f800283a 	ret

000856e0 <memcpy>:
   856e0:	01c003c4 	movi	r7,15
   856e4:	2007883a 	mov	r3,r4
   856e8:	3980032e 	bgeu	r7,r6,856f8 <memcpy+0x18>
   856ec:	2904b03a 	or	r2,r5,r4
   856f0:	108000cc 	andi	r2,r2,3
   856f4:	10000926 	beq	r2,zero,8571c <memcpy+0x3c>
   856f8:	30000626 	beq	r6,zero,85714 <memcpy+0x34>
   856fc:	30cd883a 	add	r6,r6,r3
   85700:	28800003 	ldbu	r2,0(r5)
   85704:	29400044 	addi	r5,r5,1
   85708:	18800005 	stb	r2,0(r3)
   8570c:	18c00044 	addi	r3,r3,1
   85710:	30fffb1e 	bne	r6,r3,85700 <memcpy+0x20>
   85714:	2005883a 	mov	r2,r4
   85718:	f800283a 	ret
   8571c:	3811883a 	mov	r8,r7
   85720:	200f883a 	mov	r7,r4
   85724:	28c00017 	ldw	r3,0(r5)
   85728:	31bffc04 	addi	r6,r6,-16
   8572c:	38c00015 	stw	r3,0(r7)
   85730:	28800117 	ldw	r2,4(r5)
   85734:	38800115 	stw	r2,4(r7)
   85738:	28c00217 	ldw	r3,8(r5)
   8573c:	38c00215 	stw	r3,8(r7)
   85740:	28800317 	ldw	r2,12(r5)
   85744:	29400404 	addi	r5,r5,16
   85748:	38800315 	stw	r2,12(r7)
   8574c:	39c00404 	addi	r7,r7,16
   85750:	41bff436 	bltu	r8,r6,85724 <memcpy+0x44>
   85754:	008000c4 	movi	r2,3
   85758:	1180072e 	bgeu	r2,r6,85778 <memcpy+0x98>
   8575c:	1007883a 	mov	r3,r2
   85760:	28800017 	ldw	r2,0(r5)
   85764:	31bfff04 	addi	r6,r6,-4
   85768:	29400104 	addi	r5,r5,4
   8576c:	38800015 	stw	r2,0(r7)
   85770:	39c00104 	addi	r7,r7,4
   85774:	19bffa36 	bltu	r3,r6,85760 <memcpy+0x80>
   85778:	3807883a 	mov	r3,r7
   8577c:	003fde06 	br	856f8 <memcpy+0x18>

00085780 <memmove>:
   85780:	2807883a 	mov	r3,r5
   85784:	2011883a 	mov	r8,r4
   85788:	29000c2e 	bgeu	r5,r4,857bc <memmove+0x3c>
   8578c:	298f883a 	add	r7,r5,r6
   85790:	21c00a2e 	bgeu	r4,r7,857bc <memmove+0x3c>
   85794:	30000726 	beq	r6,zero,857b4 <memmove+0x34>
   85798:	2187883a 	add	r3,r4,r6
   8579c:	198dc83a 	sub	r6,r3,r6
   857a0:	39ffffc4 	addi	r7,r7,-1
   857a4:	38800003 	ldbu	r2,0(r7)
   857a8:	18ffffc4 	addi	r3,r3,-1
   857ac:	18800005 	stb	r2,0(r3)
   857b0:	19bffb1e 	bne	r3,r6,857a0 <memmove+0x20>
   857b4:	2005883a 	mov	r2,r4
   857b8:	f800283a 	ret
   857bc:	01c003c4 	movi	r7,15
   857c0:	39800a36 	bltu	r7,r6,857ec <memmove+0x6c>
   857c4:	303ffb26 	beq	r6,zero,857b4 <memmove+0x34>
   857c8:	400f883a 	mov	r7,r8
   857cc:	320d883a 	add	r6,r6,r8
   857d0:	28800003 	ldbu	r2,0(r5)
   857d4:	29400044 	addi	r5,r5,1
   857d8:	38800005 	stb	r2,0(r7)
   857dc:	39c00044 	addi	r7,r7,1
   857e0:	39bffb1e 	bne	r7,r6,857d0 <memmove+0x50>
   857e4:	2005883a 	mov	r2,r4
   857e8:	f800283a 	ret
   857ec:	1904b03a 	or	r2,r3,r4
   857f0:	108000cc 	andi	r2,r2,3
   857f4:	103ff31e 	bne	r2,zero,857c4 <memmove+0x44>
   857f8:	3811883a 	mov	r8,r7
   857fc:	180b883a 	mov	r5,r3
   85800:	200f883a 	mov	r7,r4
   85804:	28c00017 	ldw	r3,0(r5)
   85808:	31bffc04 	addi	r6,r6,-16
   8580c:	38c00015 	stw	r3,0(r7)
   85810:	28800117 	ldw	r2,4(r5)
   85814:	38800115 	stw	r2,4(r7)
   85818:	28c00217 	ldw	r3,8(r5)
   8581c:	38c00215 	stw	r3,8(r7)
   85820:	28800317 	ldw	r2,12(r5)
   85824:	29400404 	addi	r5,r5,16
   85828:	38800315 	stw	r2,12(r7)
   8582c:	39c00404 	addi	r7,r7,16
   85830:	41bff436 	bltu	r8,r6,85804 <memmove+0x84>
   85834:	008000c4 	movi	r2,3
   85838:	1180072e 	bgeu	r2,r6,85858 <memmove+0xd8>
   8583c:	1007883a 	mov	r3,r2
   85840:	28800017 	ldw	r2,0(r5)
   85844:	31bfff04 	addi	r6,r6,-4
   85848:	29400104 	addi	r5,r5,4
   8584c:	38800015 	stw	r2,0(r7)
   85850:	39c00104 	addi	r7,r7,4
   85854:	19bffa36 	bltu	r3,r6,85840 <memmove+0xc0>
   85858:	3811883a 	mov	r8,r7
   8585c:	003fd906 	br	857c4 <memmove+0x44>

00085860 <memset>:
   85860:	008000c4 	movi	r2,3
   85864:	29403fcc 	andi	r5,r5,255
   85868:	2007883a 	mov	r3,r4
   8586c:	1180022e 	bgeu	r2,r6,85878 <memset+0x18>
   85870:	2084703a 	and	r2,r4,r2
   85874:	10000826 	beq	r2,zero,85898 <memset+0x38>
   85878:	30000526 	beq	r6,zero,85890 <memset+0x30>
   8587c:	2805883a 	mov	r2,r5
   85880:	30cd883a 	add	r6,r6,r3
   85884:	18800005 	stb	r2,0(r3)
   85888:	18c00044 	addi	r3,r3,1
   8588c:	19bffd1e 	bne	r3,r6,85884 <memset+0x24>
   85890:	2005883a 	mov	r2,r4
   85894:	f800283a 	ret
   85898:	2804923a 	slli	r2,r5,8
   8589c:	020003c4 	movi	r8,15
   858a0:	200f883a 	mov	r7,r4
   858a4:	2884b03a 	or	r2,r5,r2
   858a8:	1006943a 	slli	r3,r2,16
   858ac:	10c6b03a 	or	r3,r2,r3
   858b0:	41800a2e 	bgeu	r8,r6,858dc <memset+0x7c>
   858b4:	4005883a 	mov	r2,r8
   858b8:	31bffc04 	addi	r6,r6,-16
   858bc:	38c00015 	stw	r3,0(r7)
   858c0:	38c00115 	stw	r3,4(r7)
   858c4:	38c00215 	stw	r3,8(r7)
   858c8:	38c00315 	stw	r3,12(r7)
   858cc:	39c00404 	addi	r7,r7,16
   858d0:	11bff936 	bltu	r2,r6,858b8 <memset+0x58>
   858d4:	008000c4 	movi	r2,3
   858d8:	1180052e 	bgeu	r2,r6,858f0 <memset+0x90>
   858dc:	31bfff04 	addi	r6,r6,-4
   858e0:	008000c4 	movi	r2,3
   858e4:	38c00015 	stw	r3,0(r7)
   858e8:	39c00104 	addi	r7,r7,4
   858ec:	11bffb36 	bltu	r2,r6,858dc <memset+0x7c>
   858f0:	3807883a 	mov	r3,r7
   858f4:	003fe006 	br	85878 <memset+0x18>

000858f8 <_Bfree>:
   858f8:	28000826 	beq	r5,zero,8591c <_Bfree+0x24>
   858fc:	28800117 	ldw	r2,4(r5)
   85900:	21001317 	ldw	r4,76(r4)
   85904:	1085883a 	add	r2,r2,r2
   85908:	1085883a 	add	r2,r2,r2
   8590c:	1105883a 	add	r2,r2,r4
   85910:	10c00017 	ldw	r3,0(r2)
   85914:	28c00015 	stw	r3,0(r5)
   85918:	11400015 	stw	r5,0(r2)
   8591c:	f800283a 	ret

00085920 <__hi0bits>:
   85920:	20bfffec 	andhi	r2,r4,65535
   85924:	10001426 	beq	r2,zero,85978 <__hi0bits+0x58>
   85928:	0007883a 	mov	r3,zero
   8592c:	20bfc02c 	andhi	r2,r4,65280
   85930:	1000021e 	bne	r2,zero,8593c <__hi0bits+0x1c>
   85934:	2008923a 	slli	r4,r4,8
   85938:	18c00204 	addi	r3,r3,8
   8593c:	20bc002c 	andhi	r2,r4,61440
   85940:	1000021e 	bne	r2,zero,8594c <__hi0bits+0x2c>
   85944:	2008913a 	slli	r4,r4,4
   85948:	18c00104 	addi	r3,r3,4
   8594c:	20b0002c 	andhi	r2,r4,49152
   85950:	1000031e 	bne	r2,zero,85960 <__hi0bits+0x40>
   85954:	2105883a 	add	r2,r4,r4
   85958:	18c00084 	addi	r3,r3,2
   8595c:	1089883a 	add	r4,r2,r2
   85960:	20000316 	blt	r4,zero,85970 <__hi0bits+0x50>
   85964:	2090002c 	andhi	r2,r4,16384
   85968:	10000626 	beq	r2,zero,85984 <__hi0bits+0x64>
   8596c:	18c00044 	addi	r3,r3,1
   85970:	1805883a 	mov	r2,r3
   85974:	f800283a 	ret
   85978:	2008943a 	slli	r4,r4,16
   8597c:	00c00404 	movi	r3,16
   85980:	003fea06 	br	8592c <__hi0bits+0xc>
   85984:	00c00804 	movi	r3,32
   85988:	1805883a 	mov	r2,r3
   8598c:	f800283a 	ret

00085990 <__lo0bits>:
   85990:	20c00017 	ldw	r3,0(r4)
   85994:	188001cc 	andi	r2,r3,7
   85998:	10000a26 	beq	r2,zero,859c4 <__lo0bits+0x34>
   8599c:	1880004c 	andi	r2,r3,1
   859a0:	1005003a 	cmpeq	r2,r2,zero
   859a4:	10002126 	beq	r2,zero,85a2c <__lo0bits+0x9c>
   859a8:	1880008c 	andi	r2,r3,2
   859ac:	1000251e 	bne	r2,zero,85a44 <__lo0bits+0xb4>
   859b0:	1804d0ba 	srli	r2,r3,2
   859b4:	01400084 	movi	r5,2
   859b8:	20800015 	stw	r2,0(r4)
   859bc:	2805883a 	mov	r2,r5
   859c0:	f800283a 	ret
   859c4:	18bfffcc 	andi	r2,r3,65535
   859c8:	10001526 	beq	r2,zero,85a20 <__lo0bits+0x90>
   859cc:	000b883a 	mov	r5,zero
   859d0:	18803fcc 	andi	r2,r3,255
   859d4:	1000021e 	bne	r2,zero,859e0 <__lo0bits+0x50>
   859d8:	1806d23a 	srli	r3,r3,8
   859dc:	29400204 	addi	r5,r5,8
   859e0:	188003cc 	andi	r2,r3,15
   859e4:	1000021e 	bne	r2,zero,859f0 <__lo0bits+0x60>
   859e8:	1806d13a 	srli	r3,r3,4
   859ec:	29400104 	addi	r5,r5,4
   859f0:	188000cc 	andi	r2,r3,3
   859f4:	1000021e 	bne	r2,zero,85a00 <__lo0bits+0x70>
   859f8:	1806d0ba 	srli	r3,r3,2
   859fc:	29400084 	addi	r5,r5,2
   85a00:	1880004c 	andi	r2,r3,1
   85a04:	1000031e 	bne	r2,zero,85a14 <__lo0bits+0x84>
   85a08:	1806d07a 	srli	r3,r3,1
   85a0c:	18000a26 	beq	r3,zero,85a38 <__lo0bits+0xa8>
   85a10:	29400044 	addi	r5,r5,1
   85a14:	2805883a 	mov	r2,r5
   85a18:	20c00015 	stw	r3,0(r4)
   85a1c:	f800283a 	ret
   85a20:	1806d43a 	srli	r3,r3,16
   85a24:	01400404 	movi	r5,16
   85a28:	003fe906 	br	859d0 <__lo0bits+0x40>
   85a2c:	000b883a 	mov	r5,zero
   85a30:	2805883a 	mov	r2,r5
   85a34:	f800283a 	ret
   85a38:	01400804 	movi	r5,32
   85a3c:	2805883a 	mov	r2,r5
   85a40:	f800283a 	ret
   85a44:	1804d07a 	srli	r2,r3,1
   85a48:	01400044 	movi	r5,1
   85a4c:	20800015 	stw	r2,0(r4)
   85a50:	003fda06 	br	859bc <__lo0bits+0x2c>

00085a54 <__mcmp>:
   85a54:	20800417 	ldw	r2,16(r4)
   85a58:	28c00417 	ldw	r3,16(r5)
   85a5c:	10cfc83a 	sub	r7,r2,r3
   85a60:	38000c1e 	bne	r7,zero,85a94 <__mcmp+0x40>
   85a64:	18c5883a 	add	r2,r3,r3
   85a68:	1085883a 	add	r2,r2,r2
   85a6c:	10c00504 	addi	r3,r2,20
   85a70:	21000504 	addi	r4,r4,20
   85a74:	28cb883a 	add	r5,r5,r3
   85a78:	2085883a 	add	r2,r4,r2
   85a7c:	10bfff04 	addi	r2,r2,-4
   85a80:	297fff04 	addi	r5,r5,-4
   85a84:	11800017 	ldw	r6,0(r2)
   85a88:	28c00017 	ldw	r3,0(r5)
   85a8c:	30c0031e 	bne	r6,r3,85a9c <__mcmp+0x48>
   85a90:	20bffa36 	bltu	r4,r2,85a7c <__mcmp+0x28>
   85a94:	3805883a 	mov	r2,r7
   85a98:	f800283a 	ret
   85a9c:	30c00336 	bltu	r6,r3,85aac <__mcmp+0x58>
   85aa0:	01c00044 	movi	r7,1
   85aa4:	3805883a 	mov	r2,r7
   85aa8:	f800283a 	ret
   85aac:	01ffffc4 	movi	r7,-1
   85ab0:	003ff806 	br	85a94 <__mcmp+0x40>

00085ab4 <__ulp>:
   85ab4:	295ffc2c 	andhi	r5,r5,32752
   85ab8:	013f3034 	movhi	r4,64704
   85abc:	290b883a 	add	r5,r5,r4
   85ac0:	0145c83a 	sub	r2,zero,r5
   85ac4:	1007d53a 	srai	r3,r2,20
   85ac8:	000d883a 	mov	r6,zero
   85acc:	0140040e 	bge	zero,r5,85ae0 <__ulp+0x2c>
   85ad0:	280f883a 	mov	r7,r5
   85ad4:	3807883a 	mov	r3,r7
   85ad8:	3005883a 	mov	r2,r6
   85adc:	f800283a 	ret
   85ae0:	008004c4 	movi	r2,19
   85ae4:	193ffb04 	addi	r4,r3,-20
   85ae8:	10c00c0e 	bge	r2,r3,85b1c <__ulp+0x68>
   85aec:	008007c4 	movi	r2,31
   85af0:	1107c83a 	sub	r3,r2,r4
   85af4:	00800784 	movi	r2,30
   85af8:	01400044 	movi	r5,1
   85afc:	11000216 	blt	r2,r4,85b08 <__ulp+0x54>
   85b00:	00800044 	movi	r2,1
   85b04:	10ca983a 	sll	r5,r2,r3
   85b08:	000f883a 	mov	r7,zero
   85b0c:	280d883a 	mov	r6,r5
   85b10:	3807883a 	mov	r3,r7
   85b14:	3005883a 	mov	r2,r6
   85b18:	f800283a 	ret
   85b1c:	00800234 	movhi	r2,8
   85b20:	10cfd83a 	sra	r7,r2,r3
   85b24:	000d883a 	mov	r6,zero
   85b28:	3005883a 	mov	r2,r6
   85b2c:	3807883a 	mov	r3,r7
   85b30:	f800283a 	ret

00085b34 <__b2d>:
   85b34:	20800417 	ldw	r2,16(r4)
   85b38:	defff904 	addi	sp,sp,-28
   85b3c:	dd000415 	stw	r20,16(sp)
   85b40:	1085883a 	add	r2,r2,r2
   85b44:	25000504 	addi	r20,r4,20
   85b48:	1085883a 	add	r2,r2,r2
   85b4c:	dc000015 	stw	r16,0(sp)
   85b50:	a0a1883a 	add	r16,r20,r2
   85b54:	dd400515 	stw	r21,20(sp)
   85b58:	857fff17 	ldw	r21,-4(r16)
   85b5c:	dc400115 	stw	r17,4(sp)
   85b60:	dfc00615 	stw	ra,24(sp)
   85b64:	a809883a 	mov	r4,r21
   85b68:	2823883a 	mov	r17,r5
   85b6c:	dcc00315 	stw	r19,12(sp)
   85b70:	dc800215 	stw	r18,8(sp)
   85b74:	00859200 	call	85920 <__hi0bits>
   85b78:	100b883a 	mov	r5,r2
   85b7c:	00800804 	movi	r2,32
   85b80:	1145c83a 	sub	r2,r2,r5
   85b84:	88800015 	stw	r2,0(r17)
   85b88:	00800284 	movi	r2,10
   85b8c:	80ffff04 	addi	r3,r16,-4
   85b90:	11401416 	blt	r2,r5,85be4 <__b2d+0xb0>
   85b94:	008002c4 	movi	r2,11
   85b98:	1149c83a 	sub	r4,r2,r5
   85b9c:	a0c02736 	bltu	r20,r3,85c3c <__b2d+0x108>
   85ba0:	000d883a 	mov	r6,zero
   85ba4:	28800544 	addi	r2,r5,21
   85ba8:	a906d83a 	srl	r3,r21,r4
   85bac:	a884983a 	sll	r2,r21,r2
   85bb0:	1ccffc34 	orhi	r19,r3,16368
   85bb4:	11a4b03a 	or	r18,r2,r6
   85bb8:	9005883a 	mov	r2,r18
   85bbc:	9807883a 	mov	r3,r19
   85bc0:	dfc00617 	ldw	ra,24(sp)
   85bc4:	dd400517 	ldw	r21,20(sp)
   85bc8:	dd000417 	ldw	r20,16(sp)
   85bcc:	dcc00317 	ldw	r19,12(sp)
   85bd0:	dc800217 	ldw	r18,8(sp)
   85bd4:	dc400117 	ldw	r17,4(sp)
   85bd8:	dc000017 	ldw	r16,0(sp)
   85bdc:	dec00704 	addi	sp,sp,28
   85be0:	f800283a 	ret
   85be4:	a0c00e36 	bltu	r20,r3,85c20 <__b2d+0xec>
   85be8:	293ffd44 	addi	r4,r5,-11
   85bec:	000d883a 	mov	r6,zero
   85bf0:	20000f26 	beq	r4,zero,85c30 <__b2d+0xfc>
   85bf4:	00800804 	movi	r2,32
   85bf8:	110bc83a 	sub	r5,r2,r4
   85bfc:	a0c01236 	bltu	r20,r3,85c48 <__b2d+0x114>
   85c00:	000f883a 	mov	r7,zero
   85c04:	a904983a 	sll	r2,r21,r4
   85c08:	3146d83a 	srl	r3,r6,r5
   85c0c:	3108983a 	sll	r4,r6,r4
   85c10:	108ffc34 	orhi	r2,r2,16368
   85c14:	18a6b03a 	or	r19,r3,r2
   85c18:	3924b03a 	or	r18,r7,r4
   85c1c:	003fe606 	br	85bb8 <__b2d+0x84>
   85c20:	293ffd44 	addi	r4,r5,-11
   85c24:	81bffe17 	ldw	r6,-8(r16)
   85c28:	80fffe04 	addi	r3,r16,-8
   85c2c:	203ff11e 	bne	r4,zero,85bf4 <__b2d+0xc0>
   85c30:	accffc34 	orhi	r19,r21,16368
   85c34:	3025883a 	mov	r18,r6
   85c38:	003fdf06 	br	85bb8 <__b2d+0x84>
   85c3c:	18bfff17 	ldw	r2,-4(r3)
   85c40:	110cd83a 	srl	r6,r2,r4
   85c44:	003fd706 	br	85ba4 <__b2d+0x70>
   85c48:	18bfff17 	ldw	r2,-4(r3)
   85c4c:	114ed83a 	srl	r7,r2,r5
   85c50:	003fec06 	br	85c04 <__b2d+0xd0>

00085c54 <__ratio>:
   85c54:	defff904 	addi	sp,sp,-28
   85c58:	dc400215 	stw	r17,8(sp)
   85c5c:	2823883a 	mov	r17,r5
   85c60:	d80b883a 	mov	r5,sp
   85c64:	dfc00615 	stw	ra,24(sp)
   85c68:	dd000515 	stw	r20,20(sp)
   85c6c:	dcc00415 	stw	r19,16(sp)
   85c70:	dc800315 	stw	r18,12(sp)
   85c74:	2025883a 	mov	r18,r4
   85c78:	0085b340 	call	85b34 <__b2d>
   85c7c:	8809883a 	mov	r4,r17
   85c80:	d9400104 	addi	r5,sp,4
   85c84:	1027883a 	mov	r19,r2
   85c88:	1829883a 	mov	r20,r3
   85c8c:	0085b340 	call	85b34 <__b2d>
   85c90:	89000417 	ldw	r4,16(r17)
   85c94:	91c00417 	ldw	r7,16(r18)
   85c98:	d9800117 	ldw	r6,4(sp)
   85c9c:	180b883a 	mov	r5,r3
   85ca0:	390fc83a 	sub	r7,r7,r4
   85ca4:	1009883a 	mov	r4,r2
   85ca8:	d8800017 	ldw	r2,0(sp)
   85cac:	380e917a 	slli	r7,r7,5
   85cb0:	2011883a 	mov	r8,r4
   85cb4:	1185c83a 	sub	r2,r2,r6
   85cb8:	11c5883a 	add	r2,r2,r7
   85cbc:	1006953a 	slli	r3,r2,20
   85cc0:	2813883a 	mov	r9,r5
   85cc4:	00800d0e 	bge	zero,r2,85cfc <__ratio+0xa8>
   85cc8:	1d29883a 	add	r20,r3,r20
   85ccc:	a00b883a 	mov	r5,r20
   85cd0:	480f883a 	mov	r7,r9
   85cd4:	9809883a 	mov	r4,r19
   85cd8:	400d883a 	mov	r6,r8
   85cdc:	0088c9c0 	call	88c9c <__divdf3>
   85ce0:	dfc00617 	ldw	ra,24(sp)
   85ce4:	dd000517 	ldw	r20,20(sp)
   85ce8:	dcc00417 	ldw	r19,16(sp)
   85cec:	dc800317 	ldw	r18,12(sp)
   85cf0:	dc400217 	ldw	r17,8(sp)
   85cf4:	dec00704 	addi	sp,sp,28
   85cf8:	f800283a 	ret
   85cfc:	28d3c83a 	sub	r9,r5,r3
   85d00:	003ff206 	br	85ccc <__ratio+0x78>

00085d04 <_mprec_log10>:
   85d04:	defffe04 	addi	sp,sp,-8
   85d08:	008005c4 	movi	r2,23
   85d0c:	dc000015 	stw	r16,0(sp)
   85d10:	dfc00115 	stw	ra,4(sp)
   85d14:	2021883a 	mov	r16,r4
   85d18:	11000c16 	blt	r2,r4,85d4c <_mprec_log10+0x48>
   85d1c:	200490fa 	slli	r2,r4,3
   85d20:	00c00274 	movhi	r3,9
   85d24:	18d59904 	addi	r3,r3,22116
   85d28:	10c5883a 	add	r2,r2,r3
   85d2c:	12400117 	ldw	r9,4(r2)
   85d30:	12000017 	ldw	r8,0(r2)
   85d34:	4807883a 	mov	r3,r9
   85d38:	4005883a 	mov	r2,r8
   85d3c:	dfc00117 	ldw	ra,4(sp)
   85d40:	dc000017 	ldw	r16,0(sp)
   85d44:	dec00204 	addi	sp,sp,8
   85d48:	f800283a 	ret
   85d4c:	0011883a 	mov	r8,zero
   85d50:	024ffc34 	movhi	r9,16368
   85d54:	0005883a 	mov	r2,zero
   85d58:	00d00934 	movhi	r3,16420
   85d5c:	480b883a 	mov	r5,r9
   85d60:	4009883a 	mov	r4,r8
   85d64:	180f883a 	mov	r7,r3
   85d68:	100d883a 	mov	r6,r2
   85d6c:	00888d80 	call	888d8 <__muldf3>
   85d70:	843fffc4 	addi	r16,r16,-1
   85d74:	1011883a 	mov	r8,r2
   85d78:	1813883a 	mov	r9,r3
   85d7c:	803ff51e 	bne	r16,zero,85d54 <_mprec_log10+0x50>
   85d80:	4005883a 	mov	r2,r8
   85d84:	4807883a 	mov	r3,r9
   85d88:	dfc00117 	ldw	ra,4(sp)
   85d8c:	dc000017 	ldw	r16,0(sp)
   85d90:	dec00204 	addi	sp,sp,8
   85d94:	f800283a 	ret

00085d98 <__copybits>:
   85d98:	297fffc4 	addi	r5,r5,-1
   85d9c:	30800417 	ldw	r2,16(r6)
   85da0:	280bd17a 	srai	r5,r5,5
   85da4:	31800504 	addi	r6,r6,20
   85da8:	1085883a 	add	r2,r2,r2
   85dac:	294b883a 	add	r5,r5,r5
   85db0:	294b883a 	add	r5,r5,r5
   85db4:	1085883a 	add	r2,r2,r2
   85db8:	290b883a 	add	r5,r5,r4
   85dbc:	3087883a 	add	r3,r6,r2
   85dc0:	29400104 	addi	r5,r5,4
   85dc4:	30c0052e 	bgeu	r6,r3,85ddc <__copybits+0x44>
   85dc8:	30800017 	ldw	r2,0(r6)
   85dcc:	31800104 	addi	r6,r6,4
   85dd0:	20800015 	stw	r2,0(r4)
   85dd4:	21000104 	addi	r4,r4,4
   85dd8:	30fffb36 	bltu	r6,r3,85dc8 <__copybits+0x30>
   85ddc:	2140032e 	bgeu	r4,r5,85dec <__copybits+0x54>
   85de0:	20000015 	stw	zero,0(r4)
   85de4:	21000104 	addi	r4,r4,4
   85de8:	217ffd36 	bltu	r4,r5,85de0 <__copybits+0x48>
   85dec:	f800283a 	ret

00085df0 <__any_on>:
   85df0:	20800417 	ldw	r2,16(r4)
   85df4:	2807d17a 	srai	r3,r5,5
   85df8:	21000504 	addi	r4,r4,20
   85dfc:	10c00d0e 	bge	r2,r3,85e34 <__any_on+0x44>
   85e00:	1085883a 	add	r2,r2,r2
   85e04:	1085883a 	add	r2,r2,r2
   85e08:	208d883a 	add	r6,r4,r2
   85e0c:	2180182e 	bgeu	r4,r6,85e70 <__any_on+0x80>
   85e10:	30bfff17 	ldw	r2,-4(r6)
   85e14:	30ffff04 	addi	r3,r6,-4
   85e18:	1000041e 	bne	r2,zero,85e2c <__any_on+0x3c>
   85e1c:	20c0142e 	bgeu	r4,r3,85e70 <__any_on+0x80>
   85e20:	18ffff04 	addi	r3,r3,-4
   85e24:	18800017 	ldw	r2,0(r3)
   85e28:	103ffc26 	beq	r2,zero,85e1c <__any_on+0x2c>
   85e2c:	00800044 	movi	r2,1
   85e30:	f800283a 	ret
   85e34:	18800a0e 	bge	r3,r2,85e60 <__any_on+0x70>
   85e38:	294007cc 	andi	r5,r5,31
   85e3c:	28000826 	beq	r5,zero,85e60 <__any_on+0x70>
   85e40:	18c5883a 	add	r2,r3,r3
   85e44:	1085883a 	add	r2,r2,r2
   85e48:	208d883a 	add	r6,r4,r2
   85e4c:	30c00017 	ldw	r3,0(r6)
   85e50:	1944d83a 	srl	r2,r3,r5
   85e54:	1144983a 	sll	r2,r2,r5
   85e58:	18bff41e 	bne	r3,r2,85e2c <__any_on+0x3c>
   85e5c:	003feb06 	br	85e0c <__any_on+0x1c>
   85e60:	18c5883a 	add	r2,r3,r3
   85e64:	1085883a 	add	r2,r2,r2
   85e68:	208d883a 	add	r6,r4,r2
   85e6c:	003fe706 	br	85e0c <__any_on+0x1c>
   85e70:	0005883a 	mov	r2,zero
   85e74:	f800283a 	ret

00085e78 <_Balloc>:
   85e78:	20c01317 	ldw	r3,76(r4)
   85e7c:	defffb04 	addi	sp,sp,-20
   85e80:	dcc00315 	stw	r19,12(sp)
   85e84:	dc800215 	stw	r18,8(sp)
   85e88:	dfc00415 	stw	ra,16(sp)
   85e8c:	2825883a 	mov	r18,r5
   85e90:	dc400115 	stw	r17,4(sp)
   85e94:	dc000015 	stw	r16,0(sp)
   85e98:	2027883a 	mov	r19,r4
   85e9c:	01800404 	movi	r6,16
   85ea0:	01400104 	movi	r5,4
   85ea4:	18001726 	beq	r3,zero,85f04 <_Balloc+0x8c>
   85ea8:	01400044 	movi	r5,1
   85eac:	9485883a 	add	r2,r18,r18
   85eb0:	2ca2983a 	sll	r17,r5,r18
   85eb4:	1085883a 	add	r2,r2,r2
   85eb8:	10c7883a 	add	r3,r2,r3
   85ebc:	1c000017 	ldw	r16,0(r3)
   85ec0:	8c4d883a 	add	r6,r17,r17
   85ec4:	318d883a 	add	r6,r6,r6
   85ec8:	9809883a 	mov	r4,r19
   85ecc:	31800504 	addi	r6,r6,20
   85ed0:	80001226 	beq	r16,zero,85f1c <_Balloc+0xa4>
   85ed4:	80800017 	ldw	r2,0(r16)
   85ed8:	18800015 	stw	r2,0(r3)
   85edc:	80000415 	stw	zero,16(r16)
   85ee0:	80000315 	stw	zero,12(r16)
   85ee4:	8005883a 	mov	r2,r16
   85ee8:	dfc00417 	ldw	ra,16(sp)
   85eec:	dcc00317 	ldw	r19,12(sp)
   85ef0:	dc800217 	ldw	r18,8(sp)
   85ef4:	dc400117 	ldw	r17,4(sp)
   85ef8:	dc000017 	ldw	r16,0(sp)
   85efc:	dec00504 	addi	sp,sp,20
   85f00:	f800283a 	ret
   85f04:	00872d80 	call	872d8 <_calloc_r>
   85f08:	1007883a 	mov	r3,r2
   85f0c:	0021883a 	mov	r16,zero
   85f10:	98801315 	stw	r2,76(r19)
   85f14:	103fe41e 	bne	r2,zero,85ea8 <_Balloc+0x30>
   85f18:	003ff206 	br	85ee4 <_Balloc+0x6c>
   85f1c:	00872d80 	call	872d8 <_calloc_r>
   85f20:	103ff026 	beq	r2,zero,85ee4 <_Balloc+0x6c>
   85f24:	1021883a 	mov	r16,r2
   85f28:	14800115 	stw	r18,4(r2)
   85f2c:	14400215 	stw	r17,8(r2)
   85f30:	003fea06 	br	85edc <_Balloc+0x64>

00085f34 <__d2b>:
   85f34:	defff504 	addi	sp,sp,-44
   85f38:	dcc00515 	stw	r19,20(sp)
   85f3c:	04c00044 	movi	r19,1
   85f40:	dc000215 	stw	r16,8(sp)
   85f44:	2821883a 	mov	r16,r5
   85f48:	980b883a 	mov	r5,r19
   85f4c:	ddc00915 	stw	r23,36(sp)
   85f50:	dd800815 	stw	r22,32(sp)
   85f54:	dd400715 	stw	r21,28(sp)
   85f58:	dd000615 	stw	r20,24(sp)
   85f5c:	dc800415 	stw	r18,16(sp)
   85f60:	dc400315 	stw	r17,12(sp)
   85f64:	dfc00a15 	stw	ra,40(sp)
   85f68:	3023883a 	mov	r17,r6
   85f6c:	382d883a 	mov	r22,r7
   85f70:	ddc00b17 	ldw	r23,44(sp)
   85f74:	0085e780 	call	85e78 <_Balloc>
   85f78:	1025883a 	mov	r18,r2
   85f7c:	00a00034 	movhi	r2,32768
   85f80:	10bfffc4 	addi	r2,r2,-1
   85f84:	8888703a 	and	r4,r17,r2
   85f88:	202ad53a 	srli	r21,r4,20
   85f8c:	00800434 	movhi	r2,16
   85f90:	10bfffc4 	addi	r2,r2,-1
   85f94:	8886703a 	and	r3,r17,r2
   85f98:	a829003a 	cmpeq	r20,r21,zero
   85f9c:	800b883a 	mov	r5,r16
   85fa0:	d8c00115 	stw	r3,4(sp)
   85fa4:	94000504 	addi	r16,r18,20
   85fa8:	a000021e 	bne	r20,zero,85fb4 <__d2b+0x80>
   85fac:	18c00434 	orhi	r3,r3,16
   85fb0:	d8c00115 	stw	r3,4(sp)
   85fb4:	28002726 	beq	r5,zero,86054 <__d2b+0x120>
   85fb8:	d809883a 	mov	r4,sp
   85fbc:	d9400015 	stw	r5,0(sp)
   85fc0:	00859900 	call	85990 <__lo0bits>
   85fc4:	100d883a 	mov	r6,r2
   85fc8:	10003526 	beq	r2,zero,860a0 <__d2b+0x16c>
   85fcc:	d8c00117 	ldw	r3,4(sp)
   85fd0:	00800804 	movi	r2,32
   85fd4:	1185c83a 	sub	r2,r2,r6
   85fd8:	d9000017 	ldw	r4,0(sp)
   85fdc:	1886983a 	sll	r3,r3,r2
   85fe0:	1906b03a 	or	r3,r3,r4
   85fe4:	90c00515 	stw	r3,20(r18)
   85fe8:	d8c00117 	ldw	r3,4(sp)
   85fec:	1986d83a 	srl	r3,r3,r6
   85ff0:	d8c00115 	stw	r3,4(sp)
   85ff4:	180b003a 	cmpeq	r5,r3,zero
   85ff8:	00800084 	movi	r2,2
   85ffc:	114bc83a 	sub	r5,r2,r5
   86000:	80c00115 	stw	r3,4(r16)
   86004:	91400415 	stw	r5,16(r18)
   86008:	a0001a1e 	bne	r20,zero,86074 <__d2b+0x140>
   8600c:	3545883a 	add	r2,r6,r21
   86010:	10bef344 	addi	r2,r2,-1075
   86014:	00c00d44 	movi	r3,53
   86018:	b0800015 	stw	r2,0(r22)
   8601c:	1987c83a 	sub	r3,r3,r6
   86020:	b8c00015 	stw	r3,0(r23)
   86024:	9005883a 	mov	r2,r18
   86028:	dfc00a17 	ldw	ra,40(sp)
   8602c:	ddc00917 	ldw	r23,36(sp)
   86030:	dd800817 	ldw	r22,32(sp)
   86034:	dd400717 	ldw	r21,28(sp)
   86038:	dd000617 	ldw	r20,24(sp)
   8603c:	dcc00517 	ldw	r19,20(sp)
   86040:	dc800417 	ldw	r18,16(sp)
   86044:	dc400317 	ldw	r17,12(sp)
   86048:	dc000217 	ldw	r16,8(sp)
   8604c:	dec00b04 	addi	sp,sp,44
   86050:	f800283a 	ret
   86054:	d9000104 	addi	r4,sp,4
   86058:	00859900 	call	85990 <__lo0bits>
   8605c:	11800804 	addi	r6,r2,32
   86060:	d8800117 	ldw	r2,4(sp)
   86064:	94c00415 	stw	r19,16(r18)
   86068:	980b883a 	mov	r5,r19
   8606c:	90800515 	stw	r2,20(r18)
   86070:	a03fe626 	beq	r20,zero,8600c <__d2b+0xd8>
   86074:	2945883a 	add	r2,r5,r5
   86078:	1085883a 	add	r2,r2,r2
   8607c:	1405883a 	add	r2,r2,r16
   86080:	113fff17 	ldw	r4,-4(r2)
   86084:	30fef384 	addi	r3,r6,-1074
   86088:	2820917a 	slli	r16,r5,5
   8608c:	b0c00015 	stw	r3,0(r22)
   86090:	00859200 	call	85920 <__hi0bits>
   86094:	80a1c83a 	sub	r16,r16,r2
   86098:	bc000015 	stw	r16,0(r23)
   8609c:	003fe106 	br	86024 <__d2b+0xf0>
   860a0:	d8800017 	ldw	r2,0(sp)
   860a4:	90800515 	stw	r2,20(r18)
   860a8:	d8c00117 	ldw	r3,4(sp)
   860ac:	003fd106 	br	85ff4 <__d2b+0xc0>

000860b0 <__mdiff>:
   860b0:	defffb04 	addi	sp,sp,-20
   860b4:	dc000015 	stw	r16,0(sp)
   860b8:	2821883a 	mov	r16,r5
   860bc:	dc800215 	stw	r18,8(sp)
   860c0:	300b883a 	mov	r5,r6
   860c4:	2025883a 	mov	r18,r4
   860c8:	8009883a 	mov	r4,r16
   860cc:	dc400115 	stw	r17,4(sp)
   860d0:	dfc00415 	stw	ra,16(sp)
   860d4:	dcc00315 	stw	r19,12(sp)
   860d8:	3023883a 	mov	r17,r6
   860dc:	0085a540 	call	85a54 <__mcmp>
   860e0:	10004226 	beq	r2,zero,861ec <__mdiff+0x13c>
   860e4:	10005016 	blt	r2,zero,86228 <__mdiff+0x178>
   860e8:	0027883a 	mov	r19,zero
   860ec:	81400117 	ldw	r5,4(r16)
   860f0:	9009883a 	mov	r4,r18
   860f4:	0085e780 	call	85e78 <_Balloc>
   860f8:	1019883a 	mov	r12,r2
   860fc:	82800417 	ldw	r10,16(r16)
   86100:	88800417 	ldw	r2,16(r17)
   86104:	81800504 	addi	r6,r16,20
   86108:	5287883a 	add	r3,r10,r10
   8610c:	1085883a 	add	r2,r2,r2
   86110:	18c7883a 	add	r3,r3,r3
   86114:	1085883a 	add	r2,r2,r2
   86118:	8a000504 	addi	r8,r17,20
   8611c:	64c00315 	stw	r19,12(r12)
   86120:	30db883a 	add	r13,r6,r3
   86124:	4097883a 	add	r11,r8,r2
   86128:	61c00504 	addi	r7,r12,20
   8612c:	0013883a 	mov	r9,zero
   86130:	31000017 	ldw	r4,0(r6)
   86134:	41400017 	ldw	r5,0(r8)
   86138:	42000104 	addi	r8,r8,4
   8613c:	20bfffcc 	andi	r2,r4,65535
   86140:	28ffffcc 	andi	r3,r5,65535
   86144:	10c5c83a 	sub	r2,r2,r3
   86148:	1245883a 	add	r2,r2,r9
   8614c:	2008d43a 	srli	r4,r4,16
   86150:	280ad43a 	srli	r5,r5,16
   86154:	1007d43a 	srai	r3,r2,16
   86158:	3880000d 	sth	r2,0(r7)
   8615c:	2149c83a 	sub	r4,r4,r5
   86160:	20c9883a 	add	r4,r4,r3
   86164:	3900008d 	sth	r4,2(r7)
   86168:	31800104 	addi	r6,r6,4
   8616c:	39c00104 	addi	r7,r7,4
   86170:	2013d43a 	srai	r9,r4,16
   86174:	42ffee36 	bltu	r8,r11,86130 <__mdiff+0x80>
   86178:	33400c2e 	bgeu	r6,r13,861ac <__mdiff+0xfc>
   8617c:	30800017 	ldw	r2,0(r6)
   86180:	31800104 	addi	r6,r6,4
   86184:	10ffffcc 	andi	r3,r2,65535
   86188:	1a47883a 	add	r3,r3,r9
   8618c:	1004d43a 	srli	r2,r2,16
   86190:	1809d43a 	srai	r4,r3,16
   86194:	38c0000d 	sth	r3,0(r7)
   86198:	1105883a 	add	r2,r2,r4
   8619c:	3880008d 	sth	r2,2(r7)
   861a0:	1013d43a 	srai	r9,r2,16
   861a4:	39c00104 	addi	r7,r7,4
   861a8:	337ff436 	bltu	r6,r13,8617c <__mdiff+0xcc>
   861ac:	38bfff17 	ldw	r2,-4(r7)
   861b0:	38ffff04 	addi	r3,r7,-4
   861b4:	1000041e 	bne	r2,zero,861c8 <__mdiff+0x118>
   861b8:	18ffff04 	addi	r3,r3,-4
   861bc:	18800017 	ldw	r2,0(r3)
   861c0:	52bfffc4 	addi	r10,r10,-1
   861c4:	103ffc26 	beq	r2,zero,861b8 <__mdiff+0x108>
   861c8:	6005883a 	mov	r2,r12
   861cc:	62800415 	stw	r10,16(r12)
   861d0:	dfc00417 	ldw	ra,16(sp)
   861d4:	dcc00317 	ldw	r19,12(sp)
   861d8:	dc800217 	ldw	r18,8(sp)
   861dc:	dc400117 	ldw	r17,4(sp)
   861e0:	dc000017 	ldw	r16,0(sp)
   861e4:	dec00504 	addi	sp,sp,20
   861e8:	f800283a 	ret
   861ec:	9009883a 	mov	r4,r18
   861f0:	000b883a 	mov	r5,zero
   861f4:	0085e780 	call	85e78 <_Balloc>
   861f8:	1019883a 	mov	r12,r2
   861fc:	00800044 	movi	r2,1
   86200:	60800415 	stw	r2,16(r12)
   86204:	6005883a 	mov	r2,r12
   86208:	60000515 	stw	zero,20(r12)
   8620c:	dfc00417 	ldw	ra,16(sp)
   86210:	dcc00317 	ldw	r19,12(sp)
   86214:	dc800217 	ldw	r18,8(sp)
   86218:	dc400117 	ldw	r17,4(sp)
   8621c:	dc000017 	ldw	r16,0(sp)
   86220:	dec00504 	addi	sp,sp,20
   86224:	f800283a 	ret
   86228:	880d883a 	mov	r6,r17
   8622c:	04c00044 	movi	r19,1
   86230:	8023883a 	mov	r17,r16
   86234:	3021883a 	mov	r16,r6
   86238:	003fac06 	br	860ec <__mdiff+0x3c>

0008623c <__lshift>:
   8623c:	defff904 	addi	sp,sp,-28
   86240:	28800417 	ldw	r2,16(r5)
   86244:	dc000015 	stw	r16,0(sp)
   86248:	3021d17a 	srai	r16,r6,5
   8624c:	28c00217 	ldw	r3,8(r5)
   86250:	10800044 	addi	r2,r2,1
   86254:	dc400115 	stw	r17,4(sp)
   86258:	80a3883a 	add	r17,r16,r2
   8625c:	dd400515 	stw	r21,20(sp)
   86260:	dd000415 	stw	r20,16(sp)
   86264:	dc800215 	stw	r18,8(sp)
   86268:	dfc00615 	stw	ra,24(sp)
   8626c:	2825883a 	mov	r18,r5
   86270:	dcc00315 	stw	r19,12(sp)
   86274:	3029883a 	mov	r20,r6
   86278:	202b883a 	mov	r21,r4
   8627c:	29400117 	ldw	r5,4(r5)
   86280:	1c40030e 	bge	r3,r17,86290 <__lshift+0x54>
   86284:	18c7883a 	add	r3,r3,r3
   86288:	29400044 	addi	r5,r5,1
   8628c:	1c7ffd16 	blt	r3,r17,86284 <__lshift+0x48>
   86290:	a809883a 	mov	r4,r21
   86294:	0085e780 	call	85e78 <_Balloc>
   86298:	1027883a 	mov	r19,r2
   8629c:	11400504 	addi	r5,r2,20
   862a0:	0400090e 	bge	zero,r16,862c8 <__lshift+0x8c>
   862a4:	2805883a 	mov	r2,r5
   862a8:	0007883a 	mov	r3,zero
   862ac:	18c00044 	addi	r3,r3,1
   862b0:	10000015 	stw	zero,0(r2)
   862b4:	10800104 	addi	r2,r2,4
   862b8:	80fffc1e 	bne	r16,r3,862ac <__lshift+0x70>
   862bc:	8405883a 	add	r2,r16,r16
   862c0:	1085883a 	add	r2,r2,r2
   862c4:	288b883a 	add	r5,r5,r2
   862c8:	90800417 	ldw	r2,16(r18)
   862cc:	91000504 	addi	r4,r18,20
   862d0:	a18007cc 	andi	r6,r20,31
   862d4:	1085883a 	add	r2,r2,r2
   862d8:	1085883a 	add	r2,r2,r2
   862dc:	208f883a 	add	r7,r4,r2
   862e0:	30001e26 	beq	r6,zero,8635c <__lshift+0x120>
   862e4:	00800804 	movi	r2,32
   862e8:	1191c83a 	sub	r8,r2,r6
   862ec:	0007883a 	mov	r3,zero
   862f0:	20800017 	ldw	r2,0(r4)
   862f4:	1184983a 	sll	r2,r2,r6
   862f8:	1884b03a 	or	r2,r3,r2
   862fc:	28800015 	stw	r2,0(r5)
   86300:	20c00017 	ldw	r3,0(r4)
   86304:	21000104 	addi	r4,r4,4
   86308:	29400104 	addi	r5,r5,4
   8630c:	1a06d83a 	srl	r3,r3,r8
   86310:	21fff736 	bltu	r4,r7,862f0 <__lshift+0xb4>
   86314:	28c00015 	stw	r3,0(r5)
   86318:	18000126 	beq	r3,zero,86320 <__lshift+0xe4>
   8631c:	8c400044 	addi	r17,r17,1
   86320:	88bfffc4 	addi	r2,r17,-1
   86324:	98800415 	stw	r2,16(r19)
   86328:	a809883a 	mov	r4,r21
   8632c:	900b883a 	mov	r5,r18
   86330:	00858f80 	call	858f8 <_Bfree>
   86334:	9805883a 	mov	r2,r19
   86338:	dfc00617 	ldw	ra,24(sp)
   8633c:	dd400517 	ldw	r21,20(sp)
   86340:	dd000417 	ldw	r20,16(sp)
   86344:	dcc00317 	ldw	r19,12(sp)
   86348:	dc800217 	ldw	r18,8(sp)
   8634c:	dc400117 	ldw	r17,4(sp)
   86350:	dc000017 	ldw	r16,0(sp)
   86354:	dec00704 	addi	sp,sp,28
   86358:	f800283a 	ret
   8635c:	20800017 	ldw	r2,0(r4)
   86360:	21000104 	addi	r4,r4,4
   86364:	28800015 	stw	r2,0(r5)
   86368:	29400104 	addi	r5,r5,4
   8636c:	21ffec2e 	bgeu	r4,r7,86320 <__lshift+0xe4>
   86370:	20800017 	ldw	r2,0(r4)
   86374:	21000104 	addi	r4,r4,4
   86378:	28800015 	stw	r2,0(r5)
   8637c:	29400104 	addi	r5,r5,4
   86380:	21fff636 	bltu	r4,r7,8635c <__lshift+0x120>
   86384:	003fe606 	br	86320 <__lshift+0xe4>

00086388 <__multiply>:
   86388:	defff004 	addi	sp,sp,-64
   8638c:	dc800815 	stw	r18,32(sp)
   86390:	dc400715 	stw	r17,28(sp)
   86394:	2c800417 	ldw	r18,16(r5)
   86398:	34400417 	ldw	r17,16(r6)
   8639c:	dcc00915 	stw	r19,36(sp)
   863a0:	dc000615 	stw	r16,24(sp)
   863a4:	dfc00f15 	stw	ra,60(sp)
   863a8:	df000e15 	stw	fp,56(sp)
   863ac:	ddc00d15 	stw	r23,52(sp)
   863b0:	dd800c15 	stw	r22,48(sp)
   863b4:	dd400b15 	stw	r21,44(sp)
   863b8:	dd000a15 	stw	r20,40(sp)
   863bc:	2821883a 	mov	r16,r5
   863c0:	3027883a 	mov	r19,r6
   863c4:	9440040e 	bge	r18,r17,863d8 <__multiply+0x50>
   863c8:	8825883a 	mov	r18,r17
   863cc:	2c400417 	ldw	r17,16(r5)
   863d0:	2827883a 	mov	r19,r5
   863d4:	3021883a 	mov	r16,r6
   863d8:	80800217 	ldw	r2,8(r16)
   863dc:	9447883a 	add	r3,r18,r17
   863e0:	d8c00415 	stw	r3,16(sp)
   863e4:	81400117 	ldw	r5,4(r16)
   863e8:	10c0010e 	bge	r2,r3,863f0 <__multiply+0x68>
   863ec:	29400044 	addi	r5,r5,1
   863f0:	0085e780 	call	85e78 <_Balloc>
   863f4:	d8800515 	stw	r2,20(sp)
   863f8:	d9000417 	ldw	r4,16(sp)
   863fc:	d8c00517 	ldw	r3,20(sp)
   86400:	2105883a 	add	r2,r4,r4
   86404:	1085883a 	add	r2,r2,r2
   86408:	19000504 	addi	r4,r3,20
   8640c:	2085883a 	add	r2,r4,r2
   86410:	d8800315 	stw	r2,12(sp)
   86414:	2080052e 	bgeu	r4,r2,8642c <__multiply+0xa4>
   86418:	2005883a 	mov	r2,r4
   8641c:	d8c00317 	ldw	r3,12(sp)
   86420:	10000015 	stw	zero,0(r2)
   86424:	10800104 	addi	r2,r2,4
   86428:	10fffc36 	bltu	r2,r3,8641c <__multiply+0x94>
   8642c:	8c45883a 	add	r2,r17,r17
   86430:	9487883a 	add	r3,r18,r18
   86434:	9dc00504 	addi	r23,r19,20
   86438:	1085883a 	add	r2,r2,r2
   8643c:	84000504 	addi	r16,r16,20
   86440:	18c7883a 	add	r3,r3,r3
   86444:	b885883a 	add	r2,r23,r2
   86448:	dc000015 	stw	r16,0(sp)
   8644c:	d8800215 	stw	r2,8(sp)
   86450:	80f9883a 	add	fp,r16,r3
   86454:	b880432e 	bgeu	r23,r2,86564 <__multiply+0x1dc>
   86458:	d9000115 	stw	r4,4(sp)
   8645c:	b9000017 	ldw	r4,0(r23)
   86460:	253fffcc 	andi	r20,r4,65535
   86464:	a0001a26 	beq	r20,zero,864d0 <__multiply+0x148>
   86468:	dcc00017 	ldw	r19,0(sp)
   8646c:	dc800117 	ldw	r18,4(sp)
   86470:	002b883a 	mov	r21,zero
   86474:	9c400017 	ldw	r17,0(r19)
   86478:	94000017 	ldw	r16,0(r18)
   8647c:	a009883a 	mov	r4,r20
   86480:	897fffcc 	andi	r5,r17,65535
   86484:	008964c0 	call	8964c <__mulsi3>
   86488:	880ad43a 	srli	r5,r17,16
   8648c:	80ffffcc 	andi	r3,r16,65535
   86490:	a8c7883a 	add	r3,r21,r3
   86494:	a009883a 	mov	r4,r20
   86498:	10e3883a 	add	r17,r2,r3
   8649c:	8020d43a 	srli	r16,r16,16
   864a0:	008964c0 	call	8964c <__mulsi3>
   864a4:	8806d43a 	srli	r3,r17,16
   864a8:	1405883a 	add	r2,r2,r16
   864ac:	9cc00104 	addi	r19,r19,4
   864b0:	1887883a 	add	r3,r3,r2
   864b4:	90c0008d 	sth	r3,2(r18)
   864b8:	9440000d 	sth	r17,0(r18)
   864bc:	182ad43a 	srli	r21,r3,16
   864c0:	94800104 	addi	r18,r18,4
   864c4:	9f3feb36 	bltu	r19,fp,86474 <__multiply+0xec>
   864c8:	95400015 	stw	r21,0(r18)
   864cc:	b9000017 	ldw	r4,0(r23)
   864d0:	202ad43a 	srli	r21,r4,16
   864d4:	a8001c26 	beq	r21,zero,86548 <__multiply+0x1c0>
   864d8:	d9000117 	ldw	r4,4(sp)
   864dc:	dd000017 	ldw	r20,0(sp)
   864e0:	002d883a 	mov	r22,zero
   864e4:	24c00017 	ldw	r19,0(r4)
   864e8:	2025883a 	mov	r18,r4
   864ec:	9823883a 	mov	r17,r19
   864f0:	a4000017 	ldw	r16,0(r20)
   864f4:	a809883a 	mov	r4,r21
   864f8:	a5000104 	addi	r20,r20,4
   864fc:	817fffcc 	andi	r5,r16,65535
   86500:	008964c0 	call	8964c <__mulsi3>
   86504:	8806d43a 	srli	r3,r17,16
   86508:	800ad43a 	srli	r5,r16,16
   8650c:	94c0000d 	sth	r19,0(r18)
   86510:	b0c7883a 	add	r3,r22,r3
   86514:	10e1883a 	add	r16,r2,r3
   86518:	9400008d 	sth	r16,2(r18)
   8651c:	a809883a 	mov	r4,r21
   86520:	94800104 	addi	r18,r18,4
   86524:	008964c0 	call	8964c <__mulsi3>
   86528:	94400017 	ldw	r17,0(r18)
   8652c:	8020d43a 	srli	r16,r16,16
   86530:	88ffffcc 	andi	r3,r17,65535
   86534:	10c5883a 	add	r2,r2,r3
   86538:	80a7883a 	add	r19,r16,r2
   8653c:	982cd43a 	srli	r22,r19,16
   86540:	a73feb36 	bltu	r20,fp,864f0 <__multiply+0x168>
   86544:	94c00015 	stw	r19,0(r18)
   86548:	d8800217 	ldw	r2,8(sp)
   8654c:	bdc00104 	addi	r23,r23,4
   86550:	b880042e 	bgeu	r23,r2,86564 <__multiply+0x1dc>
   86554:	d8c00117 	ldw	r3,4(sp)
   86558:	18c00104 	addi	r3,r3,4
   8655c:	d8c00115 	stw	r3,4(sp)
   86560:	003fbe06 	br	8645c <__multiply+0xd4>
   86564:	d9000417 	ldw	r4,16(sp)
   86568:	01000c0e 	bge	zero,r4,8659c <__multiply+0x214>
   8656c:	d8c00317 	ldw	r3,12(sp)
   86570:	18bfff17 	ldw	r2,-4(r3)
   86574:	18ffff04 	addi	r3,r3,-4
   86578:	10000326 	beq	r2,zero,86588 <__multiply+0x200>
   8657c:	00000706 	br	8659c <__multiply+0x214>
   86580:	18800017 	ldw	r2,0(r3)
   86584:	1000051e 	bne	r2,zero,8659c <__multiply+0x214>
   86588:	d9000417 	ldw	r4,16(sp)
   8658c:	18ffff04 	addi	r3,r3,-4
   86590:	213fffc4 	addi	r4,r4,-1
   86594:	d9000415 	stw	r4,16(sp)
   86598:	203ff91e 	bne	r4,zero,86580 <__multiply+0x1f8>
   8659c:	d8800417 	ldw	r2,16(sp)
   865a0:	d8c00517 	ldw	r3,20(sp)
   865a4:	18800415 	stw	r2,16(r3)
   865a8:	1805883a 	mov	r2,r3
   865ac:	dfc00f17 	ldw	ra,60(sp)
   865b0:	df000e17 	ldw	fp,56(sp)
   865b4:	ddc00d17 	ldw	r23,52(sp)
   865b8:	dd800c17 	ldw	r22,48(sp)
   865bc:	dd400b17 	ldw	r21,44(sp)
   865c0:	dd000a17 	ldw	r20,40(sp)
   865c4:	dcc00917 	ldw	r19,36(sp)
   865c8:	dc800817 	ldw	r18,32(sp)
   865cc:	dc400717 	ldw	r17,28(sp)
   865d0:	dc000617 	ldw	r16,24(sp)
   865d4:	dec01004 	addi	sp,sp,64
   865d8:	f800283a 	ret

000865dc <__i2b>:
   865dc:	defffd04 	addi	sp,sp,-12
   865e0:	dc000015 	stw	r16,0(sp)
   865e4:	04000044 	movi	r16,1
   865e8:	dc800115 	stw	r18,4(sp)
   865ec:	2825883a 	mov	r18,r5
   865f0:	800b883a 	mov	r5,r16
   865f4:	dfc00215 	stw	ra,8(sp)
   865f8:	0085e780 	call	85e78 <_Balloc>
   865fc:	14000415 	stw	r16,16(r2)
   86600:	14800515 	stw	r18,20(r2)
   86604:	dfc00217 	ldw	ra,8(sp)
   86608:	dc800117 	ldw	r18,4(sp)
   8660c:	dc000017 	ldw	r16,0(sp)
   86610:	dec00304 	addi	sp,sp,12
   86614:	f800283a 	ret

00086618 <__multadd>:
   86618:	defff604 	addi	sp,sp,-40
   8661c:	dd800615 	stw	r22,24(sp)
   86620:	2d800417 	ldw	r22,16(r5)
   86624:	df000815 	stw	fp,32(sp)
   86628:	ddc00715 	stw	r23,28(sp)
   8662c:	dd400515 	stw	r21,20(sp)
   86630:	dd000415 	stw	r20,16(sp)
   86634:	dcc00315 	stw	r19,12(sp)
   86638:	dc800215 	stw	r18,8(sp)
   8663c:	dfc00915 	stw	ra,36(sp)
   86640:	dc400115 	stw	r17,4(sp)
   86644:	dc000015 	stw	r16,0(sp)
   86648:	282f883a 	mov	r23,r5
   8664c:	2039883a 	mov	fp,r4
   86650:	302b883a 	mov	r21,r6
   86654:	3829883a 	mov	r20,r7
   86658:	2c800504 	addi	r18,r5,20
   8665c:	0027883a 	mov	r19,zero
   86660:	94400017 	ldw	r17,0(r18)
   86664:	a80b883a 	mov	r5,r21
   86668:	9cc00044 	addi	r19,r19,1
   8666c:	893fffcc 	andi	r4,r17,65535
   86670:	008964c0 	call	8964c <__mulsi3>
   86674:	8808d43a 	srli	r4,r17,16
   86678:	1521883a 	add	r16,r2,r20
   8667c:	a80b883a 	mov	r5,r21
   86680:	008964c0 	call	8964c <__mulsi3>
   86684:	8008d43a 	srli	r4,r16,16
   86688:	843fffcc 	andi	r16,r16,65535
   8668c:	1105883a 	add	r2,r2,r4
   86690:	1006943a 	slli	r3,r2,16
   86694:	1028d43a 	srli	r20,r2,16
   86698:	1c07883a 	add	r3,r3,r16
   8669c:	90c00015 	stw	r3,0(r18)
   866a0:	94800104 	addi	r18,r18,4
   866a4:	9dbfee16 	blt	r19,r22,86660 <__multadd+0x48>
   866a8:	a0000826 	beq	r20,zero,866cc <__multadd+0xb4>
   866ac:	b8800217 	ldw	r2,8(r23)
   866b0:	b080130e 	bge	r22,r2,86700 <__multadd+0xe8>
   866b4:	b585883a 	add	r2,r22,r22
   866b8:	1085883a 	add	r2,r2,r2
   866bc:	15c5883a 	add	r2,r2,r23
   866c0:	b0c00044 	addi	r3,r22,1
   866c4:	15000515 	stw	r20,20(r2)
   866c8:	b8c00415 	stw	r3,16(r23)
   866cc:	b805883a 	mov	r2,r23
   866d0:	dfc00917 	ldw	ra,36(sp)
   866d4:	df000817 	ldw	fp,32(sp)
   866d8:	ddc00717 	ldw	r23,28(sp)
   866dc:	dd800617 	ldw	r22,24(sp)
   866e0:	dd400517 	ldw	r21,20(sp)
   866e4:	dd000417 	ldw	r20,16(sp)
   866e8:	dcc00317 	ldw	r19,12(sp)
   866ec:	dc800217 	ldw	r18,8(sp)
   866f0:	dc400117 	ldw	r17,4(sp)
   866f4:	dc000017 	ldw	r16,0(sp)
   866f8:	dec00a04 	addi	sp,sp,40
   866fc:	f800283a 	ret
   86700:	b9400117 	ldw	r5,4(r23)
   86704:	e009883a 	mov	r4,fp
   86708:	29400044 	addi	r5,r5,1
   8670c:	0085e780 	call	85e78 <_Balloc>
   86710:	b9800417 	ldw	r6,16(r23)
   86714:	b9400304 	addi	r5,r23,12
   86718:	11000304 	addi	r4,r2,12
   8671c:	318d883a 	add	r6,r6,r6
   86720:	318d883a 	add	r6,r6,r6
   86724:	31800204 	addi	r6,r6,8
   86728:	1023883a 	mov	r17,r2
   8672c:	00856e00 	call	856e0 <memcpy>
   86730:	b80b883a 	mov	r5,r23
   86734:	e009883a 	mov	r4,fp
   86738:	00858f80 	call	858f8 <_Bfree>
   8673c:	882f883a 	mov	r23,r17
   86740:	003fdc06 	br	866b4 <__multadd+0x9c>

00086744 <__pow5mult>:
   86744:	defffa04 	addi	sp,sp,-24
   86748:	308000cc 	andi	r2,r6,3
   8674c:	dd000415 	stw	r20,16(sp)
   86750:	dcc00315 	stw	r19,12(sp)
   86754:	dc000015 	stw	r16,0(sp)
   86758:	dfc00515 	stw	ra,20(sp)
   8675c:	dc800215 	stw	r18,8(sp)
   86760:	dc400115 	stw	r17,4(sp)
   86764:	3021883a 	mov	r16,r6
   86768:	2027883a 	mov	r19,r4
   8676c:	2829883a 	mov	r20,r5
   86770:	10002b1e 	bne	r2,zero,86820 <__pow5mult+0xdc>
   86774:	8025d0ba 	srai	r18,r16,2
   86778:	90001b26 	beq	r18,zero,867e8 <__pow5mult+0xa4>
   8677c:	9c001217 	ldw	r16,72(r19)
   86780:	8000081e 	bne	r16,zero,867a4 <__pow5mult+0x60>
   86784:	00003006 	br	86848 <__pow5mult+0x104>
   86788:	800b883a 	mov	r5,r16
   8678c:	800d883a 	mov	r6,r16
   86790:	9809883a 	mov	r4,r19
   86794:	90001426 	beq	r18,zero,867e8 <__pow5mult+0xa4>
   86798:	80800017 	ldw	r2,0(r16)
   8679c:	10001b26 	beq	r2,zero,8680c <__pow5mult+0xc8>
   867a0:	1021883a 	mov	r16,r2
   867a4:	9080004c 	andi	r2,r18,1
   867a8:	1005003a 	cmpeq	r2,r2,zero
   867ac:	9025d07a 	srai	r18,r18,1
   867b0:	800d883a 	mov	r6,r16
   867b4:	9809883a 	mov	r4,r19
   867b8:	a00b883a 	mov	r5,r20
   867bc:	103ff21e 	bne	r2,zero,86788 <__pow5mult+0x44>
   867c0:	00863880 	call	86388 <__multiply>
   867c4:	a00b883a 	mov	r5,r20
   867c8:	9809883a 	mov	r4,r19
   867cc:	1023883a 	mov	r17,r2
   867d0:	00858f80 	call	858f8 <_Bfree>
   867d4:	8829883a 	mov	r20,r17
   867d8:	800b883a 	mov	r5,r16
   867dc:	800d883a 	mov	r6,r16
   867e0:	9809883a 	mov	r4,r19
   867e4:	903fec1e 	bne	r18,zero,86798 <__pow5mult+0x54>
   867e8:	a005883a 	mov	r2,r20
   867ec:	dfc00517 	ldw	ra,20(sp)
   867f0:	dd000417 	ldw	r20,16(sp)
   867f4:	dcc00317 	ldw	r19,12(sp)
   867f8:	dc800217 	ldw	r18,8(sp)
   867fc:	dc400117 	ldw	r17,4(sp)
   86800:	dc000017 	ldw	r16,0(sp)
   86804:	dec00604 	addi	sp,sp,24
   86808:	f800283a 	ret
   8680c:	00863880 	call	86388 <__multiply>
   86810:	80800015 	stw	r2,0(r16)
   86814:	1021883a 	mov	r16,r2
   86818:	10000015 	stw	zero,0(r2)
   8681c:	003fe106 	br	867a4 <__pow5mult+0x60>
   86820:	1085883a 	add	r2,r2,r2
   86824:	00c00274 	movhi	r3,9
   86828:	18d5df04 	addi	r3,r3,22396
   8682c:	1085883a 	add	r2,r2,r2
   86830:	10c5883a 	add	r2,r2,r3
   86834:	11bfff17 	ldw	r6,-4(r2)
   86838:	000f883a 	mov	r7,zero
   8683c:	00866180 	call	86618 <__multadd>
   86840:	1029883a 	mov	r20,r2
   86844:	003fcb06 	br	86774 <__pow5mult+0x30>
   86848:	9809883a 	mov	r4,r19
   8684c:	01409c44 	movi	r5,625
   86850:	00865dc0 	call	865dc <__i2b>
   86854:	98801215 	stw	r2,72(r19)
   86858:	1021883a 	mov	r16,r2
   8685c:	10000015 	stw	zero,0(r2)
   86860:	003fd006 	br	867a4 <__pow5mult+0x60>

00086864 <__s2b>:
   86864:	defff904 	addi	sp,sp,-28
   86868:	dcc00315 	stw	r19,12(sp)
   8686c:	dc800215 	stw	r18,8(sp)
   86870:	2827883a 	mov	r19,r5
   86874:	2025883a 	mov	r18,r4
   86878:	01400244 	movi	r5,9
   8687c:	39000204 	addi	r4,r7,8
   86880:	dd000415 	stw	r20,16(sp)
   86884:	dc400115 	stw	r17,4(sp)
   86888:	dfc00615 	stw	ra,24(sp)
   8688c:	dd400515 	stw	r21,20(sp)
   86890:	dc000015 	stw	r16,0(sp)
   86894:	3829883a 	mov	r20,r7
   86898:	3023883a 	mov	r17,r6
   8689c:	008957c0 	call	8957c <__divsi3>
   868a0:	00c00044 	movi	r3,1
   868a4:	1880350e 	bge	r3,r2,8697c <__s2b+0x118>
   868a8:	000b883a 	mov	r5,zero
   868ac:	18c7883a 	add	r3,r3,r3
   868b0:	29400044 	addi	r5,r5,1
   868b4:	18bffd16 	blt	r3,r2,868ac <__s2b+0x48>
   868b8:	9009883a 	mov	r4,r18
   868bc:	0085e780 	call	85e78 <_Balloc>
   868c0:	1011883a 	mov	r8,r2
   868c4:	d8800717 	ldw	r2,28(sp)
   868c8:	00c00044 	movi	r3,1
   868cc:	01800244 	movi	r6,9
   868d0:	40800515 	stw	r2,20(r8)
   868d4:	40c00415 	stw	r3,16(r8)
   868d8:	3440260e 	bge	r6,r17,86974 <__s2b+0x110>
   868dc:	3021883a 	mov	r16,r6
   868e0:	99ab883a 	add	r21,r19,r6
   868e4:	9c05883a 	add	r2,r19,r16
   868e8:	11c00007 	ldb	r7,0(r2)
   868ec:	400b883a 	mov	r5,r8
   868f0:	9009883a 	mov	r4,r18
   868f4:	39fff404 	addi	r7,r7,-48
   868f8:	01800284 	movi	r6,10
   868fc:	00866180 	call	86618 <__multadd>
   86900:	84000044 	addi	r16,r16,1
   86904:	1011883a 	mov	r8,r2
   86908:	8c3ff61e 	bne	r17,r16,868e4 <__s2b+0x80>
   8690c:	ac45883a 	add	r2,r21,r17
   86910:	117ffe04 	addi	r5,r2,-8
   86914:	880d883a 	mov	r6,r17
   86918:	35000c0e 	bge	r6,r20,8694c <__s2b+0xe8>
   8691c:	a185c83a 	sub	r2,r20,r6
   86920:	2821883a 	mov	r16,r5
   86924:	28a3883a 	add	r17,r5,r2
   86928:	81c00007 	ldb	r7,0(r16)
   8692c:	400b883a 	mov	r5,r8
   86930:	9009883a 	mov	r4,r18
   86934:	39fff404 	addi	r7,r7,-48
   86938:	01800284 	movi	r6,10
   8693c:	00866180 	call	86618 <__multadd>
   86940:	84000044 	addi	r16,r16,1
   86944:	1011883a 	mov	r8,r2
   86948:	847ff71e 	bne	r16,r17,86928 <__s2b+0xc4>
   8694c:	4005883a 	mov	r2,r8
   86950:	dfc00617 	ldw	ra,24(sp)
   86954:	dd400517 	ldw	r21,20(sp)
   86958:	dd000417 	ldw	r20,16(sp)
   8695c:	dcc00317 	ldw	r19,12(sp)
   86960:	dc800217 	ldw	r18,8(sp)
   86964:	dc400117 	ldw	r17,4(sp)
   86968:	dc000017 	ldw	r16,0(sp)
   8696c:	dec00704 	addi	sp,sp,28
   86970:	f800283a 	ret
   86974:	99400284 	addi	r5,r19,10
   86978:	003fe706 	br	86918 <__s2b+0xb4>
   8697c:	000b883a 	mov	r5,zero
   86980:	003fcd06 	br	868b8 <__s2b+0x54>

00086984 <_realloc_r>:
   86984:	defff404 	addi	sp,sp,-48
   86988:	dd800815 	stw	r22,32(sp)
   8698c:	dc800415 	stw	r18,16(sp)
   86990:	dc400315 	stw	r17,12(sp)
   86994:	dfc00b15 	stw	ra,44(sp)
   86998:	df000a15 	stw	fp,40(sp)
   8699c:	ddc00915 	stw	r23,36(sp)
   869a0:	dd400715 	stw	r21,28(sp)
   869a4:	dd000615 	stw	r20,24(sp)
   869a8:	dcc00515 	stw	r19,20(sp)
   869ac:	dc000215 	stw	r16,8(sp)
   869b0:	2825883a 	mov	r18,r5
   869b4:	3023883a 	mov	r17,r6
   869b8:	202d883a 	mov	r22,r4
   869bc:	2800c926 	beq	r5,zero,86ce4 <_realloc_r+0x360>
   869c0:	008a9700 	call	8a970 <__malloc_lock>
   869c4:	943ffe04 	addi	r16,r18,-8
   869c8:	88c002c4 	addi	r3,r17,11
   869cc:	00800584 	movi	r2,22
   869d0:	82000117 	ldw	r8,4(r16)
   869d4:	10c01b2e 	bgeu	r2,r3,86a44 <_realloc_r+0xc0>
   869d8:	00bffe04 	movi	r2,-8
   869dc:	188e703a 	and	r7,r3,r2
   869e0:	3839883a 	mov	fp,r7
   869e4:	38001a16 	blt	r7,zero,86a50 <_realloc_r+0xcc>
   869e8:	e4401936 	bltu	fp,r17,86a50 <_realloc_r+0xcc>
   869ec:	013fff04 	movi	r4,-4
   869f0:	4126703a 	and	r19,r8,r4
   869f4:	99c02616 	blt	r19,r7,86a90 <_realloc_r+0x10c>
   869f8:	802b883a 	mov	r21,r16
   869fc:	9829883a 	mov	r20,r19
   86a00:	84000204 	addi	r16,r16,8
   86a04:	a80f883a 	mov	r7,r21
   86a08:	a70dc83a 	sub	r6,r20,fp
   86a0c:	008003c4 	movi	r2,15
   86a10:	1180c136 	bltu	r2,r6,86d18 <_realloc_r+0x394>
   86a14:	38800117 	ldw	r2,4(r7)
   86a18:	a549883a 	add	r4,r20,r21
   86a1c:	1080004c 	andi	r2,r2,1
   86a20:	a084b03a 	or	r2,r20,r2
   86a24:	38800115 	stw	r2,4(r7)
   86a28:	20c00117 	ldw	r3,4(r4)
   86a2c:	18c00054 	ori	r3,r3,1
   86a30:	20c00115 	stw	r3,4(r4)
   86a34:	b009883a 	mov	r4,r22
   86a38:	008aa780 	call	8aa78 <__malloc_unlock>
   86a3c:	8023883a 	mov	r17,r16
   86a40:	00000606 	br	86a5c <_realloc_r+0xd8>
   86a44:	01c00404 	movi	r7,16
   86a48:	3839883a 	mov	fp,r7
   86a4c:	e47fe72e 	bgeu	fp,r17,869ec <_realloc_r+0x68>
   86a50:	00800304 	movi	r2,12
   86a54:	0023883a 	mov	r17,zero
   86a58:	b0800015 	stw	r2,0(r22)
   86a5c:	8805883a 	mov	r2,r17
   86a60:	dfc00b17 	ldw	ra,44(sp)
   86a64:	df000a17 	ldw	fp,40(sp)
   86a68:	ddc00917 	ldw	r23,36(sp)
   86a6c:	dd800817 	ldw	r22,32(sp)
   86a70:	dd400717 	ldw	r21,28(sp)
   86a74:	dd000617 	ldw	r20,24(sp)
   86a78:	dcc00517 	ldw	r19,20(sp)
   86a7c:	dc800417 	ldw	r18,16(sp)
   86a80:	dc400317 	ldw	r17,12(sp)
   86a84:	dc000217 	ldw	r16,8(sp)
   86a88:	dec00c04 	addi	sp,sp,48
   86a8c:	f800283a 	ret
   86a90:	00800274 	movhi	r2,9
   86a94:	10978004 	addi	r2,r2,24064
   86a98:	12400217 	ldw	r9,8(r2)
   86a9c:	84cd883a 	add	r6,r16,r19
   86aa0:	802b883a 	mov	r21,r16
   86aa4:	3240b926 	beq	r6,r9,86d8c <_realloc_r+0x408>
   86aa8:	31400117 	ldw	r5,4(r6)
   86aac:	00bfff84 	movi	r2,-2
   86ab0:	2884703a 	and	r2,r5,r2
   86ab4:	1185883a 	add	r2,r2,r6
   86ab8:	10c00117 	ldw	r3,4(r2)
   86abc:	18c0004c 	andi	r3,r3,1
   86ac0:	1807003a 	cmpeq	r3,r3,zero
   86ac4:	1800a326 	beq	r3,zero,86d54 <_realloc_r+0x3d0>
   86ac8:	2908703a 	and	r4,r5,r4
   86acc:	9929883a 	add	r20,r19,r4
   86ad0:	a1c0a30e 	bge	r20,r7,86d60 <_realloc_r+0x3dc>
   86ad4:	4080004c 	andi	r2,r8,1
   86ad8:	1000551e 	bne	r2,zero,86c30 <_realloc_r+0x2ac>
   86adc:	80800017 	ldw	r2,0(r16)
   86ae0:	80afc83a 	sub	r23,r16,r2
   86ae4:	b8c00117 	ldw	r3,4(r23)
   86ae8:	00bfff04 	movi	r2,-4
   86aec:	1884703a 	and	r2,r3,r2
   86af0:	30002e26 	beq	r6,zero,86bac <_realloc_r+0x228>
   86af4:	3240b926 	beq	r6,r9,86ddc <_realloc_r+0x458>
   86af8:	98a9883a 	add	r20,r19,r2
   86afc:	2509883a 	add	r4,r4,r20
   86b00:	d9000015 	stw	r4,0(sp)
   86b04:	21c02a16 	blt	r4,r7,86bb0 <_realloc_r+0x22c>
   86b08:	30800317 	ldw	r2,12(r6)
   86b0c:	30c00217 	ldw	r3,8(r6)
   86b10:	01400904 	movi	r5,36
   86b14:	99bfff04 	addi	r6,r19,-4
   86b18:	18800315 	stw	r2,12(r3)
   86b1c:	10c00215 	stw	r3,8(r2)
   86b20:	b9000317 	ldw	r4,12(r23)
   86b24:	b8800217 	ldw	r2,8(r23)
   86b28:	b82b883a 	mov	r21,r23
   86b2c:	bc000204 	addi	r16,r23,8
   86b30:	20800215 	stw	r2,8(r4)
   86b34:	11000315 	stw	r4,12(r2)
   86b38:	2980e436 	bltu	r5,r6,86ecc <_realloc_r+0x548>
   86b3c:	008004c4 	movi	r2,19
   86b40:	9009883a 	mov	r4,r18
   86b44:	8011883a 	mov	r8,r16
   86b48:	11800f2e 	bgeu	r2,r6,86b88 <_realloc_r+0x204>
   86b4c:	90800017 	ldw	r2,0(r18)
   86b50:	ba000404 	addi	r8,r23,16
   86b54:	91000204 	addi	r4,r18,8
   86b58:	b8800215 	stw	r2,8(r23)
   86b5c:	90c00117 	ldw	r3,4(r18)
   86b60:	008006c4 	movi	r2,27
   86b64:	b8c00315 	stw	r3,12(r23)
   86b68:	1180072e 	bgeu	r2,r6,86b88 <_realloc_r+0x204>
   86b6c:	90c00217 	ldw	r3,8(r18)
   86b70:	ba000604 	addi	r8,r23,24
   86b74:	91000404 	addi	r4,r18,16
   86b78:	b8c00415 	stw	r3,16(r23)
   86b7c:	90800317 	ldw	r2,12(r18)
   86b80:	b8800515 	stw	r2,20(r23)
   86b84:	3140e726 	beq	r6,r5,86f24 <_realloc_r+0x5a0>
   86b88:	20800017 	ldw	r2,0(r4)
   86b8c:	dd000017 	ldw	r20,0(sp)
   86b90:	b80f883a 	mov	r7,r23
   86b94:	40800015 	stw	r2,0(r8)
   86b98:	20c00117 	ldw	r3,4(r4)
   86b9c:	40c00115 	stw	r3,4(r8)
   86ba0:	20800217 	ldw	r2,8(r4)
   86ba4:	40800215 	stw	r2,8(r8)
   86ba8:	003f9706 	br	86a08 <_realloc_r+0x84>
   86bac:	98a9883a 	add	r20,r19,r2
   86bb0:	a1c01f16 	blt	r20,r7,86c30 <_realloc_r+0x2ac>
   86bb4:	b8c00317 	ldw	r3,12(r23)
   86bb8:	b8800217 	ldw	r2,8(r23)
   86bbc:	99bfff04 	addi	r6,r19,-4
   86bc0:	01400904 	movi	r5,36
   86bc4:	b82b883a 	mov	r21,r23
   86bc8:	18800215 	stw	r2,8(r3)
   86bcc:	10c00315 	stw	r3,12(r2)
   86bd0:	bc000204 	addi	r16,r23,8
   86bd4:	2980c336 	bltu	r5,r6,86ee4 <_realloc_r+0x560>
   86bd8:	008004c4 	movi	r2,19
   86bdc:	9009883a 	mov	r4,r18
   86be0:	8011883a 	mov	r8,r16
   86be4:	11800f2e 	bgeu	r2,r6,86c24 <_realloc_r+0x2a0>
   86be8:	90800017 	ldw	r2,0(r18)
   86bec:	ba000404 	addi	r8,r23,16
   86bf0:	91000204 	addi	r4,r18,8
   86bf4:	b8800215 	stw	r2,8(r23)
   86bf8:	90c00117 	ldw	r3,4(r18)
   86bfc:	008006c4 	movi	r2,27
   86c00:	b8c00315 	stw	r3,12(r23)
   86c04:	1180072e 	bgeu	r2,r6,86c24 <_realloc_r+0x2a0>
   86c08:	90c00217 	ldw	r3,8(r18)
   86c0c:	ba000604 	addi	r8,r23,24
   86c10:	91000404 	addi	r4,r18,16
   86c14:	b8c00415 	stw	r3,16(r23)
   86c18:	90800317 	ldw	r2,12(r18)
   86c1c:	b8800515 	stw	r2,20(r23)
   86c20:	3140c726 	beq	r6,r5,86f40 <_realloc_r+0x5bc>
   86c24:	20800017 	ldw	r2,0(r4)
   86c28:	b80f883a 	mov	r7,r23
   86c2c:	003fd906 	br	86b94 <_realloc_r+0x210>
   86c30:	880b883a 	mov	r5,r17
   86c34:	b009883a 	mov	r4,r22
   86c38:	0084ebc0 	call	84ebc <_malloc_r>
   86c3c:	1023883a 	mov	r17,r2
   86c40:	10002526 	beq	r2,zero,86cd8 <_realloc_r+0x354>
   86c44:	80800117 	ldw	r2,4(r16)
   86c48:	00ffff84 	movi	r3,-2
   86c4c:	893ffe04 	addi	r4,r17,-8
   86c50:	10c4703a 	and	r2,r2,r3
   86c54:	8085883a 	add	r2,r16,r2
   86c58:	20809526 	beq	r4,r2,86eb0 <_realloc_r+0x52c>
   86c5c:	99bfff04 	addi	r6,r19,-4
   86c60:	01c00904 	movi	r7,36
   86c64:	39804536 	bltu	r7,r6,86d7c <_realloc_r+0x3f8>
   86c68:	008004c4 	movi	r2,19
   86c6c:	9009883a 	mov	r4,r18
   86c70:	880b883a 	mov	r5,r17
   86c74:	11800f2e 	bgeu	r2,r6,86cb4 <_realloc_r+0x330>
   86c78:	90800017 	ldw	r2,0(r18)
   86c7c:	89400204 	addi	r5,r17,8
   86c80:	91000204 	addi	r4,r18,8
   86c84:	88800015 	stw	r2,0(r17)
   86c88:	90c00117 	ldw	r3,4(r18)
   86c8c:	008006c4 	movi	r2,27
   86c90:	88c00115 	stw	r3,4(r17)
   86c94:	1180072e 	bgeu	r2,r6,86cb4 <_realloc_r+0x330>
   86c98:	90c00217 	ldw	r3,8(r18)
   86c9c:	89400404 	addi	r5,r17,16
   86ca0:	91000404 	addi	r4,r18,16
   86ca4:	88c00215 	stw	r3,8(r17)
   86ca8:	90800317 	ldw	r2,12(r18)
   86cac:	88800315 	stw	r2,12(r17)
   86cb0:	31c09126 	beq	r6,r7,86ef8 <_realloc_r+0x574>
   86cb4:	20800017 	ldw	r2,0(r4)
   86cb8:	28800015 	stw	r2,0(r5)
   86cbc:	20c00117 	ldw	r3,4(r4)
   86cc0:	28c00115 	stw	r3,4(r5)
   86cc4:	20800217 	ldw	r2,8(r4)
   86cc8:	28800215 	stw	r2,8(r5)
   86ccc:	900b883a 	mov	r5,r18
   86cd0:	b009883a 	mov	r4,r22
   86cd4:	00843340 	call	84334 <_free_r>
   86cd8:	b009883a 	mov	r4,r22
   86cdc:	008aa780 	call	8aa78 <__malloc_unlock>
   86ce0:	003f5e06 	br	86a5c <_realloc_r+0xd8>
   86ce4:	300b883a 	mov	r5,r6
   86ce8:	dfc00b17 	ldw	ra,44(sp)
   86cec:	df000a17 	ldw	fp,40(sp)
   86cf0:	ddc00917 	ldw	r23,36(sp)
   86cf4:	dd800817 	ldw	r22,32(sp)
   86cf8:	dd400717 	ldw	r21,28(sp)
   86cfc:	dd000617 	ldw	r20,24(sp)
   86d00:	dcc00517 	ldw	r19,20(sp)
   86d04:	dc800417 	ldw	r18,16(sp)
   86d08:	dc400317 	ldw	r17,12(sp)
   86d0c:	dc000217 	ldw	r16,8(sp)
   86d10:	dec00c04 	addi	sp,sp,48
   86d14:	0084ebc1 	jmpi	84ebc <_malloc_r>
   86d18:	38800117 	ldw	r2,4(r7)
   86d1c:	e54b883a 	add	r5,fp,r21
   86d20:	31000054 	ori	r4,r6,1
   86d24:	1080004c 	andi	r2,r2,1
   86d28:	1704b03a 	or	r2,r2,fp
   86d2c:	38800115 	stw	r2,4(r7)
   86d30:	29000115 	stw	r4,4(r5)
   86d34:	2987883a 	add	r3,r5,r6
   86d38:	18800117 	ldw	r2,4(r3)
   86d3c:	29400204 	addi	r5,r5,8
   86d40:	b009883a 	mov	r4,r22
   86d44:	10800054 	ori	r2,r2,1
   86d48:	18800115 	stw	r2,4(r3)
   86d4c:	00843340 	call	84334 <_free_r>
   86d50:	003f3806 	br	86a34 <_realloc_r+0xb0>
   86d54:	000d883a 	mov	r6,zero
   86d58:	0009883a 	mov	r4,zero
   86d5c:	003f5d06 	br	86ad4 <_realloc_r+0x150>
   86d60:	30c00217 	ldw	r3,8(r6)
   86d64:	30800317 	ldw	r2,12(r6)
   86d68:	800f883a 	mov	r7,r16
   86d6c:	84000204 	addi	r16,r16,8
   86d70:	10c00215 	stw	r3,8(r2)
   86d74:	18800315 	stw	r2,12(r3)
   86d78:	003f2306 	br	86a08 <_realloc_r+0x84>
   86d7c:	8809883a 	mov	r4,r17
   86d80:	900b883a 	mov	r5,r18
   86d84:	00857800 	call	85780 <memmove>
   86d88:	003fd006 	br	86ccc <_realloc_r+0x348>
   86d8c:	30800117 	ldw	r2,4(r6)
   86d90:	e0c00404 	addi	r3,fp,16
   86d94:	1108703a 	and	r4,r2,r4
   86d98:	9905883a 	add	r2,r19,r4
   86d9c:	10ff4d16 	blt	r2,r3,86ad4 <_realloc_r+0x150>
   86da0:	1705c83a 	sub	r2,r2,fp
   86da4:	870b883a 	add	r5,r16,fp
   86da8:	10800054 	ori	r2,r2,1
   86dac:	28800115 	stw	r2,4(r5)
   86db0:	80c00117 	ldw	r3,4(r16)
   86db4:	00800274 	movhi	r2,9
   86db8:	10978004 	addi	r2,r2,24064
   86dbc:	b009883a 	mov	r4,r22
   86dc0:	18c0004c 	andi	r3,r3,1
   86dc4:	e0c6b03a 	or	r3,fp,r3
   86dc8:	11400215 	stw	r5,8(r2)
   86dcc:	80c00115 	stw	r3,4(r16)
   86dd0:	008aa780 	call	8aa78 <__malloc_unlock>
   86dd4:	84400204 	addi	r17,r16,8
   86dd8:	003f2006 	br	86a5c <_realloc_r+0xd8>
   86ddc:	98a9883a 	add	r20,r19,r2
   86de0:	2509883a 	add	r4,r4,r20
   86de4:	e0800404 	addi	r2,fp,16
   86de8:	d9000115 	stw	r4,4(sp)
   86dec:	20bf7016 	blt	r4,r2,86bb0 <_realloc_r+0x22c>
   86df0:	b8c00317 	ldw	r3,12(r23)
   86df4:	b8800217 	ldw	r2,8(r23)
   86df8:	99bfff04 	addi	r6,r19,-4
   86dfc:	01400904 	movi	r5,36
   86e00:	18800215 	stw	r2,8(r3)
   86e04:	10c00315 	stw	r3,12(r2)
   86e08:	bc400204 	addi	r17,r23,8
   86e0c:	29804136 	bltu	r5,r6,86f14 <_realloc_r+0x590>
   86e10:	008004c4 	movi	r2,19
   86e14:	9009883a 	mov	r4,r18
   86e18:	880f883a 	mov	r7,r17
   86e1c:	11800f2e 	bgeu	r2,r6,86e5c <_realloc_r+0x4d8>
   86e20:	90800017 	ldw	r2,0(r18)
   86e24:	b9c00404 	addi	r7,r23,16
   86e28:	91000204 	addi	r4,r18,8
   86e2c:	b8800215 	stw	r2,8(r23)
   86e30:	90c00117 	ldw	r3,4(r18)
   86e34:	008006c4 	movi	r2,27
   86e38:	b8c00315 	stw	r3,12(r23)
   86e3c:	1180072e 	bgeu	r2,r6,86e5c <_realloc_r+0x4d8>
   86e40:	90c00217 	ldw	r3,8(r18)
   86e44:	b9c00604 	addi	r7,r23,24
   86e48:	91000404 	addi	r4,r18,16
   86e4c:	b8c00415 	stw	r3,16(r23)
   86e50:	90800317 	ldw	r2,12(r18)
   86e54:	b8800515 	stw	r2,20(r23)
   86e58:	31404026 	beq	r6,r5,86f5c <_realloc_r+0x5d8>
   86e5c:	20800017 	ldw	r2,0(r4)
   86e60:	38800015 	stw	r2,0(r7)
   86e64:	20c00117 	ldw	r3,4(r4)
   86e68:	38c00115 	stw	r3,4(r7)
   86e6c:	20800217 	ldw	r2,8(r4)
   86e70:	38800215 	stw	r2,8(r7)
   86e74:	d8c00117 	ldw	r3,4(sp)
   86e78:	bf0b883a 	add	r5,r23,fp
   86e7c:	b009883a 	mov	r4,r22
   86e80:	1f05c83a 	sub	r2,r3,fp
   86e84:	10800054 	ori	r2,r2,1
   86e88:	28800115 	stw	r2,4(r5)
   86e8c:	b8c00117 	ldw	r3,4(r23)
   86e90:	00800274 	movhi	r2,9
   86e94:	10978004 	addi	r2,r2,24064
   86e98:	11400215 	stw	r5,8(r2)
   86e9c:	18c0004c 	andi	r3,r3,1
   86ea0:	e0c6b03a 	or	r3,fp,r3
   86ea4:	b8c00115 	stw	r3,4(r23)
   86ea8:	008aa780 	call	8aa78 <__malloc_unlock>
   86eac:	003eeb06 	br	86a5c <_realloc_r+0xd8>
   86eb0:	20800117 	ldw	r2,4(r4)
   86eb4:	00ffff04 	movi	r3,-4
   86eb8:	800f883a 	mov	r7,r16
   86ebc:	10c4703a 	and	r2,r2,r3
   86ec0:	98a9883a 	add	r20,r19,r2
   86ec4:	84000204 	addi	r16,r16,8
   86ec8:	003ecf06 	br	86a08 <_realloc_r+0x84>
   86ecc:	900b883a 	mov	r5,r18
   86ed0:	8009883a 	mov	r4,r16
   86ed4:	00857800 	call	85780 <memmove>
   86ed8:	dd000017 	ldw	r20,0(sp)
   86edc:	b80f883a 	mov	r7,r23
   86ee0:	003ec906 	br	86a08 <_realloc_r+0x84>
   86ee4:	900b883a 	mov	r5,r18
   86ee8:	8009883a 	mov	r4,r16
   86eec:	00857800 	call	85780 <memmove>
   86ef0:	b80f883a 	mov	r7,r23
   86ef4:	003ec406 	br	86a08 <_realloc_r+0x84>
   86ef8:	90c00417 	ldw	r3,16(r18)
   86efc:	89400604 	addi	r5,r17,24
   86f00:	91000604 	addi	r4,r18,24
   86f04:	88c00415 	stw	r3,16(r17)
   86f08:	90800517 	ldw	r2,20(r18)
   86f0c:	88800515 	stw	r2,20(r17)
   86f10:	003f6806 	br	86cb4 <_realloc_r+0x330>
   86f14:	900b883a 	mov	r5,r18
   86f18:	8809883a 	mov	r4,r17
   86f1c:	00857800 	call	85780 <memmove>
   86f20:	003fd406 	br	86e74 <_realloc_r+0x4f0>
   86f24:	90c00417 	ldw	r3,16(r18)
   86f28:	91000604 	addi	r4,r18,24
   86f2c:	ba000804 	addi	r8,r23,32
   86f30:	b8c00615 	stw	r3,24(r23)
   86f34:	90800517 	ldw	r2,20(r18)
   86f38:	b8800715 	stw	r2,28(r23)
   86f3c:	003f1206 	br	86b88 <_realloc_r+0x204>
   86f40:	90c00417 	ldw	r3,16(r18)
   86f44:	91000604 	addi	r4,r18,24
   86f48:	ba000804 	addi	r8,r23,32
   86f4c:	b8c00615 	stw	r3,24(r23)
   86f50:	90800517 	ldw	r2,20(r18)
   86f54:	b8800715 	stw	r2,28(r23)
   86f58:	003f3206 	br	86c24 <_realloc_r+0x2a0>
   86f5c:	90c00417 	ldw	r3,16(r18)
   86f60:	91000604 	addi	r4,r18,24
   86f64:	b9c00804 	addi	r7,r23,32
   86f68:	b8c00615 	stw	r3,24(r23)
   86f6c:	90800517 	ldw	r2,20(r18)
   86f70:	b8800715 	stw	r2,28(r23)
   86f74:	003fb906 	br	86e5c <_realloc_r+0x4d8>

00086f78 <__isinfd>:
   86f78:	200d883a 	mov	r6,r4
   86f7c:	0109c83a 	sub	r4,zero,r4
   86f80:	2188b03a 	or	r4,r4,r6
   86f84:	2008d7fa 	srli	r4,r4,31
   86f88:	00a00034 	movhi	r2,32768
   86f8c:	10bfffc4 	addi	r2,r2,-1
   86f90:	1144703a 	and	r2,r2,r5
   86f94:	2088b03a 	or	r4,r4,r2
   86f98:	009ffc34 	movhi	r2,32752
   86f9c:	1105c83a 	sub	r2,r2,r4
   86fa0:	0087c83a 	sub	r3,zero,r2
   86fa4:	10c4b03a 	or	r2,r2,r3
   86fa8:	1004d7fa 	srli	r2,r2,31
   86fac:	00c00044 	movi	r3,1
   86fb0:	1885c83a 	sub	r2,r3,r2
   86fb4:	f800283a 	ret

00086fb8 <__isnand>:
   86fb8:	200d883a 	mov	r6,r4
   86fbc:	0109c83a 	sub	r4,zero,r4
   86fc0:	2188b03a 	or	r4,r4,r6
   86fc4:	2008d7fa 	srli	r4,r4,31
   86fc8:	00a00034 	movhi	r2,32768
   86fcc:	10bfffc4 	addi	r2,r2,-1
   86fd0:	1144703a 	and	r2,r2,r5
   86fd4:	2088b03a 	or	r4,r4,r2
   86fd8:	009ffc34 	movhi	r2,32752
   86fdc:	1105c83a 	sub	r2,r2,r4
   86fe0:	1004d7fa 	srli	r2,r2,31
   86fe4:	f800283a 	ret

00086fe8 <_sbrk_r>:
   86fe8:	defffd04 	addi	sp,sp,-12
   86fec:	dc000015 	stw	r16,0(sp)
   86ff0:	040002b4 	movhi	r16,10
   86ff4:	8423f504 	addi	r16,r16,-28716
   86ff8:	dc400115 	stw	r17,4(sp)
   86ffc:	80000015 	stw	zero,0(r16)
   87000:	2023883a 	mov	r17,r4
   87004:	2809883a 	mov	r4,r5
   87008:	dfc00215 	stw	ra,8(sp)
   8700c:	008a6280 	call	8a628 <sbrk>
   87010:	1007883a 	mov	r3,r2
   87014:	00bfffc4 	movi	r2,-1
   87018:	18800626 	beq	r3,r2,87034 <_sbrk_r+0x4c>
   8701c:	1805883a 	mov	r2,r3
   87020:	dfc00217 	ldw	ra,8(sp)
   87024:	dc400117 	ldw	r17,4(sp)
   87028:	dc000017 	ldw	r16,0(sp)
   8702c:	dec00304 	addi	sp,sp,12
   87030:	f800283a 	ret
   87034:	80800017 	ldw	r2,0(r16)
   87038:	103ff826 	beq	r2,zero,8701c <_sbrk_r+0x34>
   8703c:	88800015 	stw	r2,0(r17)
   87040:	1805883a 	mov	r2,r3
   87044:	dfc00217 	ldw	ra,8(sp)
   87048:	dc400117 	ldw	r17,4(sp)
   8704c:	dc000017 	ldw	r16,0(sp)
   87050:	dec00304 	addi	sp,sp,12
   87054:	f800283a 	ret

00087058 <__sclose>:
   87058:	2940038f 	ldh	r5,14(r5)
   8705c:	00873a01 	jmpi	873a0 <_close_r>

00087060 <__sseek>:
   87060:	defffe04 	addi	sp,sp,-8
   87064:	dc000015 	stw	r16,0(sp)
   87068:	2821883a 	mov	r16,r5
   8706c:	2940038f 	ldh	r5,14(r5)
   87070:	dfc00115 	stw	ra,4(sp)
   87074:	00876180 	call	87618 <_lseek_r>
   87078:	1007883a 	mov	r3,r2
   8707c:	00bfffc4 	movi	r2,-1
   87080:	18800926 	beq	r3,r2,870a8 <__sseek+0x48>
   87084:	8080030b 	ldhu	r2,12(r16)
   87088:	80c01415 	stw	r3,80(r16)
   8708c:	10840014 	ori	r2,r2,4096
   87090:	8080030d 	sth	r2,12(r16)
   87094:	1805883a 	mov	r2,r3
   87098:	dfc00117 	ldw	ra,4(sp)
   8709c:	dc000017 	ldw	r16,0(sp)
   870a0:	dec00204 	addi	sp,sp,8
   870a4:	f800283a 	ret
   870a8:	8080030b 	ldhu	r2,12(r16)
   870ac:	10bbffcc 	andi	r2,r2,61439
   870b0:	8080030d 	sth	r2,12(r16)
   870b4:	1805883a 	mov	r2,r3
   870b8:	dfc00117 	ldw	ra,4(sp)
   870bc:	dc000017 	ldw	r16,0(sp)
   870c0:	dec00204 	addi	sp,sp,8
   870c4:	f800283a 	ret

000870c8 <__swrite>:
   870c8:	2880030b 	ldhu	r2,12(r5)
   870cc:	defffb04 	addi	sp,sp,-20
   870d0:	dcc00315 	stw	r19,12(sp)
   870d4:	1080400c 	andi	r2,r2,256
   870d8:	dc800215 	stw	r18,8(sp)
   870dc:	dc400115 	stw	r17,4(sp)
   870e0:	dc000015 	stw	r16,0(sp)
   870e4:	3027883a 	mov	r19,r6
   870e8:	3825883a 	mov	r18,r7
   870ec:	dfc00415 	stw	ra,16(sp)
   870f0:	2821883a 	mov	r16,r5
   870f4:	000d883a 	mov	r6,zero
   870f8:	01c00084 	movi	r7,2
   870fc:	2023883a 	mov	r17,r4
   87100:	10000226 	beq	r2,zero,8710c <__swrite+0x44>
   87104:	2940038f 	ldh	r5,14(r5)
   87108:	00876180 	call	87618 <_lseek_r>
   8710c:	8080030b 	ldhu	r2,12(r16)
   87110:	8140038f 	ldh	r5,14(r16)
   87114:	8809883a 	mov	r4,r17
   87118:	10bbffcc 	andi	r2,r2,61439
   8711c:	980d883a 	mov	r6,r19
   87120:	900f883a 	mov	r7,r18
   87124:	8080030d 	sth	r2,12(r16)
   87128:	dfc00417 	ldw	ra,16(sp)
   8712c:	dcc00317 	ldw	r19,12(sp)
   87130:	dc800217 	ldw	r18,8(sp)
   87134:	dc400117 	ldw	r17,4(sp)
   87138:	dc000017 	ldw	r16,0(sp)
   8713c:	dec00504 	addi	sp,sp,20
   87140:	00872601 	jmpi	87260 <_write_r>

00087144 <__sread>:
   87144:	defffe04 	addi	sp,sp,-8
   87148:	dc000015 	stw	r16,0(sp)
   8714c:	2821883a 	mov	r16,r5
   87150:	2940038f 	ldh	r5,14(r5)
   87154:	dfc00115 	stw	ra,4(sp)
   87158:	00876900 	call	87690 <_read_r>
   8715c:	1007883a 	mov	r3,r2
   87160:	10000816 	blt	r2,zero,87184 <__sread+0x40>
   87164:	80801417 	ldw	r2,80(r16)
   87168:	10c5883a 	add	r2,r2,r3
   8716c:	80801415 	stw	r2,80(r16)
   87170:	1805883a 	mov	r2,r3
   87174:	dfc00117 	ldw	ra,4(sp)
   87178:	dc000017 	ldw	r16,0(sp)
   8717c:	dec00204 	addi	sp,sp,8
   87180:	f800283a 	ret
   87184:	8080030b 	ldhu	r2,12(r16)
   87188:	10bbffcc 	andi	r2,r2,61439
   8718c:	8080030d 	sth	r2,12(r16)
   87190:	1805883a 	mov	r2,r3
   87194:	dfc00117 	ldw	ra,4(sp)
   87198:	dc000017 	ldw	r16,0(sp)
   8719c:	dec00204 	addi	sp,sp,8
   871a0:	f800283a 	ret

000871a4 <strcmp>:
   871a4:	2144b03a 	or	r2,r4,r5
   871a8:	108000cc 	andi	r2,r2,3
   871ac:	10001d1e 	bne	r2,zero,87224 <strcmp+0x80>
   871b0:	200f883a 	mov	r7,r4
   871b4:	28800017 	ldw	r2,0(r5)
   871b8:	21000017 	ldw	r4,0(r4)
   871bc:	280d883a 	mov	r6,r5
   871c0:	2080161e 	bne	r4,r2,8721c <strcmp+0x78>
   871c4:	023fbff4 	movhi	r8,65279
   871c8:	423fbfc4 	addi	r8,r8,-257
   871cc:	2207883a 	add	r3,r4,r8
   871d0:	01602074 	movhi	r5,32897
   871d4:	29602004 	addi	r5,r5,-32640
   871d8:	1946703a 	and	r3,r3,r5
   871dc:	0104303a 	nor	r2,zero,r4
   871e0:	10c4703a 	and	r2,r2,r3
   871e4:	10001c1e 	bne	r2,zero,87258 <strcmp+0xb4>
   871e8:	4013883a 	mov	r9,r8
   871ec:	2811883a 	mov	r8,r5
   871f0:	00000106 	br	871f8 <strcmp+0x54>
   871f4:	1800181e 	bne	r3,zero,87258 <strcmp+0xb4>
   871f8:	39c00104 	addi	r7,r7,4
   871fc:	39000017 	ldw	r4,0(r7)
   87200:	31800104 	addi	r6,r6,4
   87204:	31400017 	ldw	r5,0(r6)
   87208:	2245883a 	add	r2,r4,r9
   8720c:	1204703a 	and	r2,r2,r8
   87210:	0106303a 	nor	r3,zero,r4
   87214:	1886703a 	and	r3,r3,r2
   87218:	217ff626 	beq	r4,r5,871f4 <strcmp+0x50>
   8721c:	3809883a 	mov	r4,r7
   87220:	300b883a 	mov	r5,r6
   87224:	20c00007 	ldb	r3,0(r4)
   87228:	1800051e 	bne	r3,zero,87240 <strcmp+0x9c>
   8722c:	00000606 	br	87248 <strcmp+0xa4>
   87230:	21000044 	addi	r4,r4,1
   87234:	20c00007 	ldb	r3,0(r4)
   87238:	29400044 	addi	r5,r5,1
   8723c:	18000226 	beq	r3,zero,87248 <strcmp+0xa4>
   87240:	28800007 	ldb	r2,0(r5)
   87244:	18bffa26 	beq	r3,r2,87230 <strcmp+0x8c>
   87248:	20c00003 	ldbu	r3,0(r4)
   8724c:	28800003 	ldbu	r2,0(r5)
   87250:	1885c83a 	sub	r2,r3,r2
   87254:	f800283a 	ret
   87258:	0005883a 	mov	r2,zero
   8725c:	f800283a 	ret

00087260 <_write_r>:
   87260:	defffd04 	addi	sp,sp,-12
   87264:	dc000015 	stw	r16,0(sp)
   87268:	040002b4 	movhi	r16,10
   8726c:	8423f504 	addi	r16,r16,-28716
   87270:	dc400115 	stw	r17,4(sp)
   87274:	80000015 	stw	zero,0(r16)
   87278:	2023883a 	mov	r17,r4
   8727c:	2809883a 	mov	r4,r5
   87280:	300b883a 	mov	r5,r6
   87284:	380d883a 	mov	r6,r7
   87288:	dfc00215 	stw	ra,8(sp)
   8728c:	008a6e40 	call	8a6e4 <write>
   87290:	1007883a 	mov	r3,r2
   87294:	00bfffc4 	movi	r2,-1
   87298:	18800626 	beq	r3,r2,872b4 <_write_r+0x54>
   8729c:	1805883a 	mov	r2,r3
   872a0:	dfc00217 	ldw	ra,8(sp)
   872a4:	dc400117 	ldw	r17,4(sp)
   872a8:	dc000017 	ldw	r16,0(sp)
   872ac:	dec00304 	addi	sp,sp,12
   872b0:	f800283a 	ret
   872b4:	80800017 	ldw	r2,0(r16)
   872b8:	103ff826 	beq	r2,zero,8729c <_write_r+0x3c>
   872bc:	88800015 	stw	r2,0(r17)
   872c0:	1805883a 	mov	r2,r3
   872c4:	dfc00217 	ldw	ra,8(sp)
   872c8:	dc400117 	ldw	r17,4(sp)
   872cc:	dc000017 	ldw	r16,0(sp)
   872d0:	dec00304 	addi	sp,sp,12
   872d4:	f800283a 	ret

000872d8 <_calloc_r>:
   872d8:	defffe04 	addi	sp,sp,-8
   872dc:	dc400015 	stw	r17,0(sp)
   872e0:	2023883a 	mov	r17,r4
   872e4:	2809883a 	mov	r4,r5
   872e8:	300b883a 	mov	r5,r6
   872ec:	dfc00115 	stw	ra,4(sp)
   872f0:	008964c0 	call	8964c <__mulsi3>
   872f4:	100b883a 	mov	r5,r2
   872f8:	8809883a 	mov	r4,r17
   872fc:	0084ebc0 	call	84ebc <_malloc_r>
   87300:	1023883a 	mov	r17,r2
   87304:	01c00904 	movi	r7,36
   87308:	10000d26 	beq	r2,zero,87340 <_calloc_r+0x68>
   8730c:	10ffff17 	ldw	r3,-4(r2)
   87310:	1009883a 	mov	r4,r2
   87314:	00bfff04 	movi	r2,-4
   87318:	1886703a 	and	r3,r3,r2
   8731c:	1887883a 	add	r3,r3,r2
   87320:	180d883a 	mov	r6,r3
   87324:	000b883a 	mov	r5,zero
   87328:	38c01736 	bltu	r7,r3,87388 <_calloc_r+0xb0>
   8732c:	008004c4 	movi	r2,19
   87330:	10c00836 	bltu	r2,r3,87354 <_calloc_r+0x7c>
   87334:	20000215 	stw	zero,8(r4)
   87338:	20000015 	stw	zero,0(r4)
   8733c:	20000115 	stw	zero,4(r4)
   87340:	8805883a 	mov	r2,r17
   87344:	dfc00117 	ldw	ra,4(sp)
   87348:	dc400017 	ldw	r17,0(sp)
   8734c:	dec00204 	addi	sp,sp,8
   87350:	f800283a 	ret
   87354:	008006c4 	movi	r2,27
   87358:	88000015 	stw	zero,0(r17)
   8735c:	88000115 	stw	zero,4(r17)
   87360:	89000204 	addi	r4,r17,8
   87364:	10fff32e 	bgeu	r2,r3,87334 <_calloc_r+0x5c>
   87368:	88000215 	stw	zero,8(r17)
   8736c:	88000315 	stw	zero,12(r17)
   87370:	89000404 	addi	r4,r17,16
   87374:	19ffef1e 	bne	r3,r7,87334 <_calloc_r+0x5c>
   87378:	89000604 	addi	r4,r17,24
   8737c:	88000415 	stw	zero,16(r17)
   87380:	88000515 	stw	zero,20(r17)
   87384:	003feb06 	br	87334 <_calloc_r+0x5c>
   87388:	00858600 	call	85860 <memset>
   8738c:	8805883a 	mov	r2,r17
   87390:	dfc00117 	ldw	ra,4(sp)
   87394:	dc400017 	ldw	r17,0(sp)
   87398:	dec00204 	addi	sp,sp,8
   8739c:	f800283a 	ret

000873a0 <_close_r>:
   873a0:	defffd04 	addi	sp,sp,-12
   873a4:	dc000015 	stw	r16,0(sp)
   873a8:	040002b4 	movhi	r16,10
   873ac:	8423f504 	addi	r16,r16,-28716
   873b0:	dc400115 	stw	r17,4(sp)
   873b4:	80000015 	stw	zero,0(r16)
   873b8:	2023883a 	mov	r17,r4
   873bc:	2809883a 	mov	r4,r5
   873c0:	dfc00215 	stw	ra,8(sp)
   873c4:	0089d3c0 	call	89d3c <close>
   873c8:	1007883a 	mov	r3,r2
   873cc:	00bfffc4 	movi	r2,-1
   873d0:	18800626 	beq	r3,r2,873ec <_close_r+0x4c>
   873d4:	1805883a 	mov	r2,r3
   873d8:	dfc00217 	ldw	ra,8(sp)
   873dc:	dc400117 	ldw	r17,4(sp)
   873e0:	dc000017 	ldw	r16,0(sp)
   873e4:	dec00304 	addi	sp,sp,12
   873e8:	f800283a 	ret
   873ec:	80800017 	ldw	r2,0(r16)
   873f0:	103ff826 	beq	r2,zero,873d4 <_close_r+0x34>
   873f4:	88800015 	stw	r2,0(r17)
   873f8:	1805883a 	mov	r2,r3
   873fc:	dfc00217 	ldw	ra,8(sp)
   87400:	dc400117 	ldw	r17,4(sp)
   87404:	dc000017 	ldw	r16,0(sp)
   87408:	dec00304 	addi	sp,sp,12
   8740c:	f800283a 	ret

00087410 <_fclose_r>:
   87410:	defffc04 	addi	sp,sp,-16
   87414:	dc400115 	stw	r17,4(sp)
   87418:	dc000015 	stw	r16,0(sp)
   8741c:	dfc00315 	stw	ra,12(sp)
   87420:	dc800215 	stw	r18,8(sp)
   87424:	2821883a 	mov	r16,r5
   87428:	2023883a 	mov	r17,r4
   8742c:	28002926 	beq	r5,zero,874d4 <_fclose_r+0xc4>
   87430:	0083f6c0 	call	83f6c <__sfp_lock_acquire>
   87434:	88000226 	beq	r17,zero,87440 <_fclose_r+0x30>
   87438:	88800e17 	ldw	r2,56(r17)
   8743c:	10002d26 	beq	r2,zero,874f4 <_fclose_r+0xe4>
   87440:	8080030f 	ldh	r2,12(r16)
   87444:	10002226 	beq	r2,zero,874d0 <_fclose_r+0xc0>
   87448:	8809883a 	mov	r4,r17
   8744c:	800b883a 	mov	r5,r16
   87450:	0083ce40 	call	83ce4 <_fflush_r>
   87454:	1025883a 	mov	r18,r2
   87458:	80800b17 	ldw	r2,44(r16)
   8745c:	10000426 	beq	r2,zero,87470 <_fclose_r+0x60>
   87460:	81400717 	ldw	r5,28(r16)
   87464:	8809883a 	mov	r4,r17
   87468:	103ee83a 	callr	r2
   8746c:	10002a16 	blt	r2,zero,87518 <_fclose_r+0x108>
   87470:	8080030b 	ldhu	r2,12(r16)
   87474:	1080200c 	andi	r2,r2,128
   87478:	1000231e 	bne	r2,zero,87508 <_fclose_r+0xf8>
   8747c:	81400c17 	ldw	r5,48(r16)
   87480:	28000526 	beq	r5,zero,87498 <_fclose_r+0x88>
   87484:	80801004 	addi	r2,r16,64
   87488:	28800226 	beq	r5,r2,87494 <_fclose_r+0x84>
   8748c:	8809883a 	mov	r4,r17
   87490:	00843340 	call	84334 <_free_r>
   87494:	80000c15 	stw	zero,48(r16)
   87498:	81401117 	ldw	r5,68(r16)
   8749c:	28000326 	beq	r5,zero,874ac <_fclose_r+0x9c>
   874a0:	8809883a 	mov	r4,r17
   874a4:	00843340 	call	84334 <_free_r>
   874a8:	80001115 	stw	zero,68(r16)
   874ac:	8000030d 	sth	zero,12(r16)
   874b0:	0083f700 	call	83f70 <__sfp_lock_release>
   874b4:	9005883a 	mov	r2,r18
   874b8:	dfc00317 	ldw	ra,12(sp)
   874bc:	dc800217 	ldw	r18,8(sp)
   874c0:	dc400117 	ldw	r17,4(sp)
   874c4:	dc000017 	ldw	r16,0(sp)
   874c8:	dec00404 	addi	sp,sp,16
   874cc:	f800283a 	ret
   874d0:	0083f700 	call	83f70 <__sfp_lock_release>
   874d4:	0025883a 	mov	r18,zero
   874d8:	9005883a 	mov	r2,r18
   874dc:	dfc00317 	ldw	ra,12(sp)
   874e0:	dc800217 	ldw	r18,8(sp)
   874e4:	dc400117 	ldw	r17,4(sp)
   874e8:	dc000017 	ldw	r16,0(sp)
   874ec:	dec00404 	addi	sp,sp,16
   874f0:	f800283a 	ret
   874f4:	8809883a 	mov	r4,r17
   874f8:	0083f7c0 	call	83f7c <__sinit>
   874fc:	8080030f 	ldh	r2,12(r16)
   87500:	103fd11e 	bne	r2,zero,87448 <_fclose_r+0x38>
   87504:	003ff206 	br	874d0 <_fclose_r+0xc0>
   87508:	81400417 	ldw	r5,16(r16)
   8750c:	8809883a 	mov	r4,r17
   87510:	00843340 	call	84334 <_free_r>
   87514:	003fd906 	br	8747c <_fclose_r+0x6c>
   87518:	04bfffc4 	movi	r18,-1
   8751c:	003fd406 	br	87470 <_fclose_r+0x60>

00087520 <fclose>:
   87520:	00800274 	movhi	r2,9
   87524:	109d0704 	addi	r2,r2,29724
   87528:	200b883a 	mov	r5,r4
   8752c:	11000017 	ldw	r4,0(r2)
   87530:	00874101 	jmpi	87410 <_fclose_r>

00087534 <_fstat_r>:
   87534:	defffd04 	addi	sp,sp,-12
   87538:	dc000015 	stw	r16,0(sp)
   8753c:	040002b4 	movhi	r16,10
   87540:	8423f504 	addi	r16,r16,-28716
   87544:	dc400115 	stw	r17,4(sp)
   87548:	80000015 	stw	zero,0(r16)
   8754c:	2023883a 	mov	r17,r4
   87550:	2809883a 	mov	r4,r5
   87554:	300b883a 	mov	r5,r6
   87558:	dfc00215 	stw	ra,8(sp)
   8755c:	0089ec80 	call	89ec8 <fstat>
   87560:	1007883a 	mov	r3,r2
   87564:	00bfffc4 	movi	r2,-1
   87568:	18800626 	beq	r3,r2,87584 <_fstat_r+0x50>
   8756c:	1805883a 	mov	r2,r3
   87570:	dfc00217 	ldw	ra,8(sp)
   87574:	dc400117 	ldw	r17,4(sp)
   87578:	dc000017 	ldw	r16,0(sp)
   8757c:	dec00304 	addi	sp,sp,12
   87580:	f800283a 	ret
   87584:	80800017 	ldw	r2,0(r16)
   87588:	103ff826 	beq	r2,zero,8756c <_fstat_r+0x38>
   8758c:	88800015 	stw	r2,0(r17)
   87590:	1805883a 	mov	r2,r3
   87594:	dfc00217 	ldw	ra,8(sp)
   87598:	dc400117 	ldw	r17,4(sp)
   8759c:	dc000017 	ldw	r16,0(sp)
   875a0:	dec00304 	addi	sp,sp,12
   875a4:	f800283a 	ret

000875a8 <_isatty_r>:
   875a8:	defffd04 	addi	sp,sp,-12
   875ac:	dc000015 	stw	r16,0(sp)
   875b0:	040002b4 	movhi	r16,10
   875b4:	8423f504 	addi	r16,r16,-28716
   875b8:	dc400115 	stw	r17,4(sp)
   875bc:	80000015 	stw	zero,0(r16)
   875c0:	2023883a 	mov	r17,r4
   875c4:	2809883a 	mov	r4,r5
   875c8:	dfc00215 	stw	ra,8(sp)
   875cc:	008a0000 	call	8a000 <isatty>
   875d0:	1007883a 	mov	r3,r2
   875d4:	00bfffc4 	movi	r2,-1
   875d8:	18800626 	beq	r3,r2,875f4 <_isatty_r+0x4c>
   875dc:	1805883a 	mov	r2,r3
   875e0:	dfc00217 	ldw	ra,8(sp)
   875e4:	dc400117 	ldw	r17,4(sp)
   875e8:	dc000017 	ldw	r16,0(sp)
   875ec:	dec00304 	addi	sp,sp,12
   875f0:	f800283a 	ret
   875f4:	80800017 	ldw	r2,0(r16)
   875f8:	103ff826 	beq	r2,zero,875dc <_isatty_r+0x34>
   875fc:	88800015 	stw	r2,0(r17)
   87600:	1805883a 	mov	r2,r3
   87604:	dfc00217 	ldw	ra,8(sp)
   87608:	dc400117 	ldw	r17,4(sp)
   8760c:	dc000017 	ldw	r16,0(sp)
   87610:	dec00304 	addi	sp,sp,12
   87614:	f800283a 	ret

00087618 <_lseek_r>:
   87618:	defffd04 	addi	sp,sp,-12
   8761c:	dc000015 	stw	r16,0(sp)
   87620:	040002b4 	movhi	r16,10
   87624:	8423f504 	addi	r16,r16,-28716
   87628:	dc400115 	stw	r17,4(sp)
   8762c:	80000015 	stw	zero,0(r16)
   87630:	2023883a 	mov	r17,r4
   87634:	2809883a 	mov	r4,r5
   87638:	300b883a 	mov	r5,r6
   8763c:	380d883a 	mov	r6,r7
   87640:	dfc00215 	stw	ra,8(sp)
   87644:	008a2100 	call	8a210 <lseek>
   87648:	1007883a 	mov	r3,r2
   8764c:	00bfffc4 	movi	r2,-1
   87650:	18800626 	beq	r3,r2,8766c <_lseek_r+0x54>
   87654:	1805883a 	mov	r2,r3
   87658:	dfc00217 	ldw	ra,8(sp)
   8765c:	dc400117 	ldw	r17,4(sp)
   87660:	dc000017 	ldw	r16,0(sp)
   87664:	dec00304 	addi	sp,sp,12
   87668:	f800283a 	ret
   8766c:	80800017 	ldw	r2,0(r16)
   87670:	103ff826 	beq	r2,zero,87654 <_lseek_r+0x3c>
   87674:	88800015 	stw	r2,0(r17)
   87678:	1805883a 	mov	r2,r3
   8767c:	dfc00217 	ldw	ra,8(sp)
   87680:	dc400117 	ldw	r17,4(sp)
   87684:	dc000017 	ldw	r16,0(sp)
   87688:	dec00304 	addi	sp,sp,12
   8768c:	f800283a 	ret

00087690 <_read_r>:
   87690:	defffd04 	addi	sp,sp,-12
   87694:	dc000015 	stw	r16,0(sp)
   87698:	040002b4 	movhi	r16,10
   8769c:	8423f504 	addi	r16,r16,-28716
   876a0:	dc400115 	stw	r17,4(sp)
   876a4:	80000015 	stw	zero,0(r16)
   876a8:	2023883a 	mov	r17,r4
   876ac:	2809883a 	mov	r4,r5
   876b0:	300b883a 	mov	r5,r6
   876b4:	380d883a 	mov	r6,r7
   876b8:	dfc00215 	stw	ra,8(sp)
   876bc:	008a42c0 	call	8a42c <read>
   876c0:	1007883a 	mov	r3,r2
   876c4:	00bfffc4 	movi	r2,-1
   876c8:	18800626 	beq	r3,r2,876e4 <_read_r+0x54>
   876cc:	1805883a 	mov	r2,r3
   876d0:	dfc00217 	ldw	ra,8(sp)
   876d4:	dc400117 	ldw	r17,4(sp)
   876d8:	dc000017 	ldw	r16,0(sp)
   876dc:	dec00304 	addi	sp,sp,12
   876e0:	f800283a 	ret
   876e4:	80800017 	ldw	r2,0(r16)
   876e8:	103ff826 	beq	r2,zero,876cc <_read_r+0x3c>
   876ec:	88800015 	stw	r2,0(r17)
   876f0:	1805883a 	mov	r2,r3
   876f4:	dfc00217 	ldw	ra,8(sp)
   876f8:	dc400117 	ldw	r17,4(sp)
   876fc:	dc000017 	ldw	r16,0(sp)
   87700:	dec00304 	addi	sp,sp,12
   87704:	f800283a 	ret

00087708 <__udivdi3>:
   87708:	defff104 	addi	sp,sp,-60
   8770c:	0015883a 	mov	r10,zero
   87710:	2005883a 	mov	r2,r4
   87714:	3011883a 	mov	r8,r6
   87718:	df000d15 	stw	fp,52(sp)
   8771c:	dd400a15 	stw	r21,40(sp)
   87720:	dcc00815 	stw	r19,32(sp)
   87724:	dfc00e15 	stw	ra,56(sp)
   87728:	ddc00c15 	stw	r23,48(sp)
   8772c:	dd800b15 	stw	r22,44(sp)
   87730:	dd000915 	stw	r20,36(sp)
   87734:	dc800715 	stw	r18,28(sp)
   87738:	dc400615 	stw	r17,24(sp)
   8773c:	dc000515 	stw	r16,20(sp)
   87740:	da800315 	stw	r10,12(sp)
   87744:	4027883a 	mov	r19,r8
   87748:	1039883a 	mov	fp,r2
   8774c:	282b883a 	mov	r21,r5
   87750:	da800415 	stw	r10,16(sp)
   87754:	3800401e 	bne	r7,zero,87858 <__udivdi3+0x150>
   87758:	2a006536 	bltu	r5,r8,878f0 <__udivdi3+0x1e8>
   8775c:	4000b526 	beq	r8,zero,87a34 <__udivdi3+0x32c>
   87760:	00bfffd4 	movui	r2,65535
   87764:	14c0ad36 	bltu	r2,r19,87a1c <__udivdi3+0x314>
   87768:	00803fc4 	movi	r2,255
   8776c:	14c15e36 	bltu	r2,r19,87ce8 <__udivdi3+0x5e0>
   87770:	000b883a 	mov	r5,zero
   87774:	0005883a 	mov	r2,zero
   87778:	9884d83a 	srl	r2,r19,r2
   8777c:	01000274 	movhi	r4,9
   87780:	2115e704 	addi	r4,r4,22428
   87784:	01800804 	movi	r6,32
   87788:	1105883a 	add	r2,r2,r4
   8778c:	10c00003 	ldbu	r3,0(r2)
   87790:	28c7883a 	add	r3,r5,r3
   87794:	30e9c83a 	sub	r20,r6,r3
   87798:	a0010a1e 	bne	r20,zero,87bc4 <__udivdi3+0x4bc>
   8779c:	982ed43a 	srli	r23,r19,16
   877a0:	acebc83a 	sub	r21,r21,r19
   877a4:	9dbfffcc 	andi	r22,r19,65535
   877a8:	05000044 	movi	r20,1
   877ac:	a809883a 	mov	r4,r21
   877b0:	b80b883a 	mov	r5,r23
   877b4:	008963c0 	call	8963c <__udivsi3>
   877b8:	100b883a 	mov	r5,r2
   877bc:	b009883a 	mov	r4,r22
   877c0:	1021883a 	mov	r16,r2
   877c4:	008964c0 	call	8964c <__mulsi3>
   877c8:	a809883a 	mov	r4,r21
   877cc:	b80b883a 	mov	r5,r23
   877d0:	1023883a 	mov	r17,r2
   877d4:	00896440 	call	89644 <__umodsi3>
   877d8:	1004943a 	slli	r2,r2,16
   877dc:	e006d43a 	srli	r3,fp,16
   877e0:	10c4b03a 	or	r2,r2,r3
   877e4:	1440042e 	bgeu	r2,r17,877f8 <__udivdi3+0xf0>
   877e8:	14c5883a 	add	r2,r2,r19
   877ec:	843fffc4 	addi	r16,r16,-1
   877f0:	14c00136 	bltu	r2,r19,877f8 <__udivdi3+0xf0>
   877f4:	14415c36 	bltu	r2,r17,87d68 <__udivdi3+0x660>
   877f8:	1463c83a 	sub	r17,r2,r17
   877fc:	8809883a 	mov	r4,r17
   87800:	b80b883a 	mov	r5,r23
   87804:	008963c0 	call	8963c <__udivsi3>
   87808:	100b883a 	mov	r5,r2
   8780c:	b009883a 	mov	r4,r22
   87810:	102b883a 	mov	r21,r2
   87814:	008964c0 	call	8964c <__mulsi3>
   87818:	8809883a 	mov	r4,r17
   8781c:	b80b883a 	mov	r5,r23
   87820:	1025883a 	mov	r18,r2
   87824:	00896440 	call	89644 <__umodsi3>
   87828:	1004943a 	slli	r2,r2,16
   8782c:	e0ffffcc 	andi	r3,fp,65535
   87830:	10c4b03a 	or	r2,r2,r3
   87834:	1480042e 	bgeu	r2,r18,87848 <__udivdi3+0x140>
   87838:	9885883a 	add	r2,r19,r2
   8783c:	ad7fffc4 	addi	r21,r21,-1
   87840:	14c00136 	bltu	r2,r19,87848 <__udivdi3+0x140>
   87844:	14813c36 	bltu	r2,r18,87d38 <__udivdi3+0x630>
   87848:	8004943a 	slli	r2,r16,16
   8784c:	a009883a 	mov	r4,r20
   87850:	a884b03a 	or	r2,r21,r2
   87854:	00001506 	br	878ac <__udivdi3+0x1a4>
   87858:	380d883a 	mov	r6,r7
   8785c:	29c06c36 	bltu	r5,r7,87a10 <__udivdi3+0x308>
   87860:	00bfffd4 	movui	r2,65535
   87864:	11c06436 	bltu	r2,r7,879f8 <__udivdi3+0x2f0>
   87868:	00803fc4 	movi	r2,255
   8786c:	11c11836 	bltu	r2,r7,87cd0 <__udivdi3+0x5c8>
   87870:	000b883a 	mov	r5,zero
   87874:	0005883a 	mov	r2,zero
   87878:	3084d83a 	srl	r2,r6,r2
   8787c:	01000274 	movhi	r4,9
   87880:	2115e704 	addi	r4,r4,22428
   87884:	01c00804 	movi	r7,32
   87888:	1105883a 	add	r2,r2,r4
   8788c:	10c00003 	ldbu	r3,0(r2)
   87890:	28c7883a 	add	r3,r5,r3
   87894:	38edc83a 	sub	r22,r7,r3
   87898:	b000731e 	bne	r22,zero,87a68 <__udivdi3+0x360>
   8789c:	35400136 	bltu	r6,r21,878a4 <__udivdi3+0x19c>
   878a0:	e4c05b36 	bltu	fp,r19,87a10 <__udivdi3+0x308>
   878a4:	00800044 	movi	r2,1
   878a8:	0009883a 	mov	r4,zero
   878ac:	d8800315 	stw	r2,12(sp)
   878b0:	d9400317 	ldw	r5,12(sp)
   878b4:	2007883a 	mov	r3,r4
   878b8:	d9000415 	stw	r4,16(sp)
   878bc:	2805883a 	mov	r2,r5
   878c0:	dfc00e17 	ldw	ra,56(sp)
   878c4:	df000d17 	ldw	fp,52(sp)
   878c8:	ddc00c17 	ldw	r23,48(sp)
   878cc:	dd800b17 	ldw	r22,44(sp)
   878d0:	dd400a17 	ldw	r21,40(sp)
   878d4:	dd000917 	ldw	r20,36(sp)
   878d8:	dcc00817 	ldw	r19,32(sp)
   878dc:	dc800717 	ldw	r18,28(sp)
   878e0:	dc400617 	ldw	r17,24(sp)
   878e4:	dc000517 	ldw	r16,20(sp)
   878e8:	dec00f04 	addi	sp,sp,60
   878ec:	f800283a 	ret
   878f0:	00bfffd4 	movui	r2,65535
   878f4:	12005636 	bltu	r2,r8,87a50 <__udivdi3+0x348>
   878f8:	00803fc4 	movi	r2,255
   878fc:	12010036 	bltu	r2,r8,87d00 <__udivdi3+0x5f8>
   87900:	000b883a 	mov	r5,zero
   87904:	0005883a 	mov	r2,zero
   87908:	9884d83a 	srl	r2,r19,r2
   8790c:	01000274 	movhi	r4,9
   87910:	2115e704 	addi	r4,r4,22428
   87914:	01800804 	movi	r6,32
   87918:	1105883a 	add	r2,r2,r4
   8791c:	10c00003 	ldbu	r3,0(r2)
   87920:	28c7883a 	add	r3,r5,r3
   87924:	30cbc83a 	sub	r5,r6,r3
   87928:	28000626 	beq	r5,zero,87944 <__udivdi3+0x23c>
   8792c:	3145c83a 	sub	r2,r6,r5
   87930:	e084d83a 	srl	r2,fp,r2
   87934:	a946983a 	sll	r3,r21,r5
   87938:	e178983a 	sll	fp,fp,r5
   8793c:	9966983a 	sll	r19,r19,r5
   87940:	18aab03a 	or	r21,r3,r2
   87944:	982ed43a 	srli	r23,r19,16
   87948:	a809883a 	mov	r4,r21
   8794c:	9cbfffcc 	andi	r18,r19,65535
   87950:	b80b883a 	mov	r5,r23
   87954:	008963c0 	call	8963c <__udivsi3>
   87958:	100b883a 	mov	r5,r2
   8795c:	9009883a 	mov	r4,r18
   87960:	1021883a 	mov	r16,r2
   87964:	008964c0 	call	8964c <__mulsi3>
   87968:	a809883a 	mov	r4,r21
   8796c:	b80b883a 	mov	r5,r23
   87970:	1023883a 	mov	r17,r2
   87974:	00896440 	call	89644 <__umodsi3>
   87978:	1004943a 	slli	r2,r2,16
   8797c:	e006d43a 	srli	r3,fp,16
   87980:	10c4b03a 	or	r2,r2,r3
   87984:	1440042e 	bgeu	r2,r17,87998 <__udivdi3+0x290>
   87988:	14c5883a 	add	r2,r2,r19
   8798c:	843fffc4 	addi	r16,r16,-1
   87990:	14c00136 	bltu	r2,r19,87998 <__udivdi3+0x290>
   87994:	1440ea36 	bltu	r2,r17,87d40 <__udivdi3+0x638>
   87998:	1463c83a 	sub	r17,r2,r17
   8799c:	8809883a 	mov	r4,r17
   879a0:	b80b883a 	mov	r5,r23
   879a4:	008963c0 	call	8963c <__udivsi3>
   879a8:	100b883a 	mov	r5,r2
   879ac:	9009883a 	mov	r4,r18
   879b0:	102b883a 	mov	r21,r2
   879b4:	008964c0 	call	8964c <__mulsi3>
   879b8:	8809883a 	mov	r4,r17
   879bc:	b80b883a 	mov	r5,r23
   879c0:	1025883a 	mov	r18,r2
   879c4:	00896440 	call	89644 <__umodsi3>
   879c8:	1004943a 	slli	r2,r2,16
   879cc:	e0ffffcc 	andi	r3,fp,65535
   879d0:	10c4b03a 	or	r2,r2,r3
   879d4:	1480042e 	bgeu	r2,r18,879e8 <__udivdi3+0x2e0>
   879d8:	9885883a 	add	r2,r19,r2
   879dc:	ad7fffc4 	addi	r21,r21,-1
   879e0:	14c00136 	bltu	r2,r19,879e8 <__udivdi3+0x2e0>
   879e4:	1480d936 	bltu	r2,r18,87d4c <__udivdi3+0x644>
   879e8:	8004943a 	slli	r2,r16,16
   879ec:	0009883a 	mov	r4,zero
   879f0:	a884b03a 	or	r2,r21,r2
   879f4:	003fad06 	br	878ac <__udivdi3+0x1a4>
   879f8:	00804034 	movhi	r2,256
   879fc:	10bfffc4 	addi	r2,r2,-1
   87a00:	11c0b636 	bltu	r2,r7,87cdc <__udivdi3+0x5d4>
   87a04:	01400404 	movi	r5,16
   87a08:	2805883a 	mov	r2,r5
   87a0c:	003f9a06 	br	87878 <__udivdi3+0x170>
   87a10:	0005883a 	mov	r2,zero
   87a14:	0009883a 	mov	r4,zero
   87a18:	003fa406 	br	878ac <__udivdi3+0x1a4>
   87a1c:	00804034 	movhi	r2,256
   87a20:	10bfffc4 	addi	r2,r2,-1
   87a24:	14c0b336 	bltu	r2,r19,87cf4 <__udivdi3+0x5ec>
   87a28:	01400404 	movi	r5,16
   87a2c:	2805883a 	mov	r2,r5
   87a30:	003f5106 	br	87778 <__udivdi3+0x70>
   87a34:	01000044 	movi	r4,1
   87a38:	000b883a 	mov	r5,zero
   87a3c:	008963c0 	call	8963c <__udivsi3>
   87a40:	1027883a 	mov	r19,r2
   87a44:	00bfffd4 	movui	r2,65535
   87a48:	14fff436 	bltu	r2,r19,87a1c <__udivdi3+0x314>
   87a4c:	003f4606 	br	87768 <__udivdi3+0x60>
   87a50:	00804034 	movhi	r2,256
   87a54:	10bfffc4 	addi	r2,r2,-1
   87a58:	1200ac36 	bltu	r2,r8,87d0c <__udivdi3+0x604>
   87a5c:	01400404 	movi	r5,16
   87a60:	2805883a 	mov	r2,r5
   87a64:	003fa806 	br	87908 <__udivdi3+0x200>
   87a68:	3d85c83a 	sub	r2,r7,r22
   87a6c:	3588983a 	sll	r4,r6,r22
   87a70:	9886d83a 	srl	r3,r19,r2
   87a74:	a8a2d83a 	srl	r17,r21,r2
   87a78:	e084d83a 	srl	r2,fp,r2
   87a7c:	20eeb03a 	or	r23,r4,r3
   87a80:	b824d43a 	srli	r18,r23,16
   87a84:	ad86983a 	sll	r3,r21,r22
   87a88:	8809883a 	mov	r4,r17
   87a8c:	900b883a 	mov	r5,r18
   87a90:	1886b03a 	or	r3,r3,r2
   87a94:	d8c00115 	stw	r3,4(sp)
   87a98:	bc3fffcc 	andi	r16,r23,65535
   87a9c:	008963c0 	call	8963c <__udivsi3>
   87aa0:	100b883a 	mov	r5,r2
   87aa4:	8009883a 	mov	r4,r16
   87aa8:	1029883a 	mov	r20,r2
   87aac:	008964c0 	call	8964c <__mulsi3>
   87ab0:	900b883a 	mov	r5,r18
   87ab4:	8809883a 	mov	r4,r17
   87ab8:	102b883a 	mov	r21,r2
   87abc:	00896440 	call	89644 <__umodsi3>
   87ac0:	d9400117 	ldw	r5,4(sp)
   87ac4:	1004943a 	slli	r2,r2,16
   87ac8:	9da6983a 	sll	r19,r19,r22
   87acc:	2806d43a 	srli	r3,r5,16
   87ad0:	10c4b03a 	or	r2,r2,r3
   87ad4:	1540032e 	bgeu	r2,r21,87ae4 <__udivdi3+0x3dc>
   87ad8:	15c5883a 	add	r2,r2,r23
   87adc:	a53fffc4 	addi	r20,r20,-1
   87ae0:	15c0912e 	bgeu	r2,r23,87d28 <__udivdi3+0x620>
   87ae4:	1563c83a 	sub	r17,r2,r21
   87ae8:	8809883a 	mov	r4,r17
   87aec:	900b883a 	mov	r5,r18
   87af0:	008963c0 	call	8963c <__udivsi3>
   87af4:	100b883a 	mov	r5,r2
   87af8:	8009883a 	mov	r4,r16
   87afc:	102b883a 	mov	r21,r2
   87b00:	008964c0 	call	8964c <__mulsi3>
   87b04:	8809883a 	mov	r4,r17
   87b08:	900b883a 	mov	r5,r18
   87b0c:	1021883a 	mov	r16,r2
   87b10:	00896440 	call	89644 <__umodsi3>
   87b14:	da800117 	ldw	r10,4(sp)
   87b18:	1004943a 	slli	r2,r2,16
   87b1c:	50ffffcc 	andi	r3,r10,65535
   87b20:	10c6b03a 	or	r3,r2,r3
   87b24:	1c00032e 	bgeu	r3,r16,87b34 <__udivdi3+0x42c>
   87b28:	1dc7883a 	add	r3,r3,r23
   87b2c:	ad7fffc4 	addi	r21,r21,-1
   87b30:	1dc0792e 	bgeu	r3,r23,87d18 <__udivdi3+0x610>
   87b34:	a004943a 	slli	r2,r20,16
   87b38:	982ed43a 	srli	r23,r19,16
   87b3c:	9cffffcc 	andi	r19,r19,65535
   87b40:	a8a4b03a 	or	r18,r21,r2
   87b44:	947fffcc 	andi	r17,r18,65535
   87b48:	902ad43a 	srli	r21,r18,16
   87b4c:	8809883a 	mov	r4,r17
   87b50:	980b883a 	mov	r5,r19
   87b54:	1c21c83a 	sub	r16,r3,r16
   87b58:	008964c0 	call	8964c <__mulsi3>
   87b5c:	8809883a 	mov	r4,r17
   87b60:	b80b883a 	mov	r5,r23
   87b64:	1029883a 	mov	r20,r2
   87b68:	008964c0 	call	8964c <__mulsi3>
   87b6c:	980b883a 	mov	r5,r19
   87b70:	a809883a 	mov	r4,r21
   87b74:	1023883a 	mov	r17,r2
   87b78:	008964c0 	call	8964c <__mulsi3>
   87b7c:	a809883a 	mov	r4,r21
   87b80:	b80b883a 	mov	r5,r23
   87b84:	1027883a 	mov	r19,r2
   87b88:	008964c0 	call	8964c <__mulsi3>
   87b8c:	1009883a 	mov	r4,r2
   87b90:	a004d43a 	srli	r2,r20,16
   87b94:	8ce3883a 	add	r17,r17,r19
   87b98:	1447883a 	add	r3,r2,r17
   87b9c:	1cc0022e 	bgeu	r3,r19,87ba8 <__udivdi3+0x4a0>
   87ba0:	00800074 	movhi	r2,1
   87ba4:	2089883a 	add	r4,r4,r2
   87ba8:	1804d43a 	srli	r2,r3,16
   87bac:	2085883a 	add	r2,r4,r2
   87bb0:	80804436 	bltu	r16,r2,87cc4 <__udivdi3+0x5bc>
   87bb4:	80803e26 	beq	r16,r2,87cb0 <__udivdi3+0x5a8>
   87bb8:	9005883a 	mov	r2,r18
   87bbc:	0009883a 	mov	r4,zero
   87bc0:	003f3a06 	br	878ac <__udivdi3+0x1a4>
   87bc4:	9d26983a 	sll	r19,r19,r20
   87bc8:	3505c83a 	sub	r2,r6,r20
   87bcc:	a8a2d83a 	srl	r17,r21,r2
   87bd0:	982ed43a 	srli	r23,r19,16
   87bd4:	e084d83a 	srl	r2,fp,r2
   87bd8:	ad06983a 	sll	r3,r21,r20
   87bdc:	8809883a 	mov	r4,r17
   87be0:	b80b883a 	mov	r5,r23
   87be4:	1886b03a 	or	r3,r3,r2
   87be8:	d8c00015 	stw	r3,0(sp)
   87bec:	9dbfffcc 	andi	r22,r19,65535
   87bf0:	008963c0 	call	8963c <__udivsi3>
   87bf4:	100b883a 	mov	r5,r2
   87bf8:	b009883a 	mov	r4,r22
   87bfc:	d8800215 	stw	r2,8(sp)
   87c00:	008964c0 	call	8964c <__mulsi3>
   87c04:	8809883a 	mov	r4,r17
   87c08:	b80b883a 	mov	r5,r23
   87c0c:	102b883a 	mov	r21,r2
   87c10:	00896440 	call	89644 <__umodsi3>
   87c14:	d9000017 	ldw	r4,0(sp)
   87c18:	1004943a 	slli	r2,r2,16
   87c1c:	2006d43a 	srli	r3,r4,16
   87c20:	10c4b03a 	or	r2,r2,r3
   87c24:	1540052e 	bgeu	r2,r21,87c3c <__udivdi3+0x534>
   87c28:	d9400217 	ldw	r5,8(sp)
   87c2c:	14c5883a 	add	r2,r2,r19
   87c30:	297fffc4 	addi	r5,r5,-1
   87c34:	d9400215 	stw	r5,8(sp)
   87c38:	14c0462e 	bgeu	r2,r19,87d54 <__udivdi3+0x64c>
   87c3c:	1563c83a 	sub	r17,r2,r21
   87c40:	8809883a 	mov	r4,r17
   87c44:	b80b883a 	mov	r5,r23
   87c48:	008963c0 	call	8963c <__udivsi3>
   87c4c:	100b883a 	mov	r5,r2
   87c50:	b009883a 	mov	r4,r22
   87c54:	1025883a 	mov	r18,r2
   87c58:	008964c0 	call	8964c <__mulsi3>
   87c5c:	8809883a 	mov	r4,r17
   87c60:	b80b883a 	mov	r5,r23
   87c64:	1021883a 	mov	r16,r2
   87c68:	00896440 	call	89644 <__umodsi3>
   87c6c:	da800017 	ldw	r10,0(sp)
   87c70:	1004943a 	slli	r2,r2,16
   87c74:	50ffffcc 	andi	r3,r10,65535
   87c78:	10c6b03a 	or	r3,r2,r3
   87c7c:	1c00062e 	bgeu	r3,r16,87c98 <__udivdi3+0x590>
   87c80:	1cc7883a 	add	r3,r3,r19
   87c84:	94bfffc4 	addi	r18,r18,-1
   87c88:	1cc00336 	bltu	r3,r19,87c98 <__udivdi3+0x590>
   87c8c:	1c00022e 	bgeu	r3,r16,87c98 <__udivdi3+0x590>
   87c90:	94bfffc4 	addi	r18,r18,-1
   87c94:	1cc7883a 	add	r3,r3,r19
   87c98:	d9000217 	ldw	r4,8(sp)
   87c9c:	e538983a 	sll	fp,fp,r20
   87ca0:	1c2bc83a 	sub	r21,r3,r16
   87ca4:	2004943a 	slli	r2,r4,16
   87ca8:	90a8b03a 	or	r20,r18,r2
   87cac:	003ebf06 	br	877ac <__udivdi3+0xa4>
   87cb0:	1804943a 	slli	r2,r3,16
   87cb4:	e588983a 	sll	r4,fp,r22
   87cb8:	a0ffffcc 	andi	r3,r20,65535
   87cbc:	10c5883a 	add	r2,r2,r3
   87cc0:	20bfbd2e 	bgeu	r4,r2,87bb8 <__udivdi3+0x4b0>
   87cc4:	90bfffc4 	addi	r2,r18,-1
   87cc8:	0009883a 	mov	r4,zero
   87ccc:	003ef706 	br	878ac <__udivdi3+0x1a4>
   87cd0:	01400204 	movi	r5,8
   87cd4:	2805883a 	mov	r2,r5
   87cd8:	003ee706 	br	87878 <__udivdi3+0x170>
   87cdc:	01400604 	movi	r5,24
   87ce0:	2805883a 	mov	r2,r5
   87ce4:	003ee406 	br	87878 <__udivdi3+0x170>
   87ce8:	01400204 	movi	r5,8
   87cec:	2805883a 	mov	r2,r5
   87cf0:	003ea106 	br	87778 <__udivdi3+0x70>
   87cf4:	01400604 	movi	r5,24
   87cf8:	2805883a 	mov	r2,r5
   87cfc:	003e9e06 	br	87778 <__udivdi3+0x70>
   87d00:	01400204 	movi	r5,8
   87d04:	2805883a 	mov	r2,r5
   87d08:	003eff06 	br	87908 <__udivdi3+0x200>
   87d0c:	01400604 	movi	r5,24
   87d10:	2805883a 	mov	r2,r5
   87d14:	003efc06 	br	87908 <__udivdi3+0x200>
   87d18:	1c3f862e 	bgeu	r3,r16,87b34 <__udivdi3+0x42c>
   87d1c:	1dc7883a 	add	r3,r3,r23
   87d20:	ad7fffc4 	addi	r21,r21,-1
   87d24:	003f8306 	br	87b34 <__udivdi3+0x42c>
   87d28:	157f6e2e 	bgeu	r2,r21,87ae4 <__udivdi3+0x3dc>
   87d2c:	a53fffc4 	addi	r20,r20,-1
   87d30:	15c5883a 	add	r2,r2,r23
   87d34:	003f6b06 	br	87ae4 <__udivdi3+0x3dc>
   87d38:	ad7fffc4 	addi	r21,r21,-1
   87d3c:	003ec206 	br	87848 <__udivdi3+0x140>
   87d40:	843fffc4 	addi	r16,r16,-1
   87d44:	14c5883a 	add	r2,r2,r19
   87d48:	003f1306 	br	87998 <__udivdi3+0x290>
   87d4c:	ad7fffc4 	addi	r21,r21,-1
   87d50:	003f2506 	br	879e8 <__udivdi3+0x2e0>
   87d54:	157fb92e 	bgeu	r2,r21,87c3c <__udivdi3+0x534>
   87d58:	297fffc4 	addi	r5,r5,-1
   87d5c:	14c5883a 	add	r2,r2,r19
   87d60:	d9400215 	stw	r5,8(sp)
   87d64:	003fb506 	br	87c3c <__udivdi3+0x534>
   87d68:	843fffc4 	addi	r16,r16,-1
   87d6c:	14c5883a 	add	r2,r2,r19
   87d70:	003ea106 	br	877f8 <__udivdi3+0xf0>

00087d74 <__umoddi3>:
   87d74:	defff004 	addi	sp,sp,-64
   87d78:	3011883a 	mov	r8,r6
   87d7c:	000d883a 	mov	r6,zero
   87d80:	dd400b15 	stw	r21,44(sp)
   87d84:	dcc00915 	stw	r19,36(sp)
   87d88:	dc000615 	stw	r16,24(sp)
   87d8c:	dfc00f15 	stw	ra,60(sp)
   87d90:	df000e15 	stw	fp,56(sp)
   87d94:	ddc00d15 	stw	r23,52(sp)
   87d98:	dd800c15 	stw	r22,48(sp)
   87d9c:	dd000a15 	stw	r20,40(sp)
   87da0:	dc800815 	stw	r18,32(sp)
   87da4:	dc400715 	stw	r17,28(sp)
   87da8:	2817883a 	mov	r11,r5
   87dac:	d9800415 	stw	r6,16(sp)
   87db0:	4027883a 	mov	r19,r8
   87db4:	d9800515 	stw	r6,20(sp)
   87db8:	2021883a 	mov	r16,r4
   87dbc:	282b883a 	mov	r21,r5
   87dc0:	38002c1e 	bne	r7,zero,87e74 <__umoddi3+0x100>
   87dc4:	2a005636 	bltu	r5,r8,87f20 <__umoddi3+0x1ac>
   87dc8:	40009a26 	beq	r8,zero,88034 <__umoddi3+0x2c0>
   87dcc:	00bfffd4 	movui	r2,65535
   87dd0:	14c09236 	bltu	r2,r19,8801c <__umoddi3+0x2a8>
   87dd4:	00803fc4 	movi	r2,255
   87dd8:	14c15c36 	bltu	r2,r19,8834c <__umoddi3+0x5d8>
   87ddc:	000b883a 	mov	r5,zero
   87de0:	0005883a 	mov	r2,zero
   87de4:	9884d83a 	srl	r2,r19,r2
   87de8:	01000274 	movhi	r4,9
   87dec:	2115e704 	addi	r4,r4,22428
   87df0:	01800804 	movi	r6,32
   87df4:	1105883a 	add	r2,r2,r4
   87df8:	10c00003 	ldbu	r3,0(r2)
   87dfc:	28c7883a 	add	r3,r5,r3
   87e00:	30e5c83a 	sub	r18,r6,r3
   87e04:	9000a41e 	bne	r18,zero,88098 <__umoddi3+0x324>
   87e08:	982ed43a 	srli	r23,r19,16
   87e0c:	acebc83a 	sub	r21,r21,r19
   87e10:	9d3fffcc 	andi	r20,r19,65535
   87e14:	002d883a 	mov	r22,zero
   87e18:	a809883a 	mov	r4,r21
   87e1c:	b80b883a 	mov	r5,r23
   87e20:	008963c0 	call	8963c <__udivsi3>
   87e24:	100b883a 	mov	r5,r2
   87e28:	a009883a 	mov	r4,r20
   87e2c:	008964c0 	call	8964c <__mulsi3>
   87e30:	a809883a 	mov	r4,r21
   87e34:	b80b883a 	mov	r5,r23
   87e38:	1023883a 	mov	r17,r2
   87e3c:	00896440 	call	89644 <__umodsi3>
   87e40:	1004943a 	slli	r2,r2,16
   87e44:	8006d43a 	srli	r3,r16,16
   87e48:	10c4b03a 	or	r2,r2,r3
   87e4c:	1440032e 	bgeu	r2,r17,87e5c <__umoddi3+0xe8>
   87e50:	14c5883a 	add	r2,r2,r19
   87e54:	14c00136 	bltu	r2,r19,87e5c <__umoddi3+0xe8>
   87e58:	14415836 	bltu	r2,r17,883bc <__umoddi3+0x648>
   87e5c:	1463c83a 	sub	r17,r2,r17
   87e60:	8809883a 	mov	r4,r17
   87e64:	b80b883a 	mov	r5,r23
   87e68:	008963c0 	call	8963c <__udivsi3>
   87e6c:	a009883a 	mov	r4,r20
   87e70:	00005306 	br	87fc0 <__umoddi3+0x24c>
   87e74:	380d883a 	mov	r6,r7
   87e78:	29c0132e 	bgeu	r5,r7,87ec8 <__umoddi3+0x154>
   87e7c:	d9000415 	stw	r4,16(sp)
   87e80:	d9400515 	stw	r5,20(sp)
   87e84:	d9400417 	ldw	r5,16(sp)
   87e88:	5813883a 	mov	r9,r11
   87e8c:	2811883a 	mov	r8,r5
   87e90:	4005883a 	mov	r2,r8
   87e94:	4807883a 	mov	r3,r9
   87e98:	dfc00f17 	ldw	ra,60(sp)
   87e9c:	df000e17 	ldw	fp,56(sp)
   87ea0:	ddc00d17 	ldw	r23,52(sp)
   87ea4:	dd800c17 	ldw	r22,48(sp)
   87ea8:	dd400b17 	ldw	r21,44(sp)
   87eac:	dd000a17 	ldw	r20,40(sp)
   87eb0:	dcc00917 	ldw	r19,36(sp)
   87eb4:	dc800817 	ldw	r18,32(sp)
   87eb8:	dc400717 	ldw	r17,28(sp)
   87ebc:	dc000617 	ldw	r16,24(sp)
   87ec0:	dec01004 	addi	sp,sp,64
   87ec4:	f800283a 	ret
   87ec8:	00bfffd4 	movui	r2,65535
   87ecc:	11c06636 	bltu	r2,r7,88068 <__umoddi3+0x2f4>
   87ed0:	00803fc4 	movi	r2,255
   87ed4:	11c12036 	bltu	r2,r7,88358 <__umoddi3+0x5e4>
   87ed8:	000b883a 	mov	r5,zero
   87edc:	0005883a 	mov	r2,zero
   87ee0:	3084d83a 	srl	r2,r6,r2
   87ee4:	01000274 	movhi	r4,9
   87ee8:	2115e704 	addi	r4,r4,22428
   87eec:	01c00804 	movi	r7,32
   87ef0:	1105883a 	add	r2,r2,r4
   87ef4:	10c00003 	ldbu	r3,0(r2)
   87ef8:	28c7883a 	add	r3,r5,r3
   87efc:	38e5c83a 	sub	r18,r7,r3
   87f00:	9000941e 	bne	r18,zero,88154 <__umoddi3+0x3e0>
   87f04:	35405e36 	bltu	r6,r21,88080 <__umoddi3+0x30c>
   87f08:	84c05d2e 	bgeu	r16,r19,88080 <__umoddi3+0x30c>
   87f0c:	8011883a 	mov	r8,r16
   87f10:	a813883a 	mov	r9,r21
   87f14:	dc000415 	stw	r16,16(sp)
   87f18:	dd400515 	stw	r21,20(sp)
   87f1c:	003fdc06 	br	87e90 <__umoddi3+0x11c>
   87f20:	00bfffd4 	movui	r2,65535
   87f24:	12004a36 	bltu	r2,r8,88050 <__umoddi3+0x2dc>
   87f28:	00803fc4 	movi	r2,255
   87f2c:	12010d36 	bltu	r2,r8,88364 <__umoddi3+0x5f0>
   87f30:	000b883a 	mov	r5,zero
   87f34:	0005883a 	mov	r2,zero
   87f38:	9884d83a 	srl	r2,r19,r2
   87f3c:	01000274 	movhi	r4,9
   87f40:	2115e704 	addi	r4,r4,22428
   87f44:	01800804 	movi	r6,32
   87f48:	1105883a 	add	r2,r2,r4
   87f4c:	10c00003 	ldbu	r3,0(r2)
   87f50:	28c7883a 	add	r3,r5,r3
   87f54:	30c7c83a 	sub	r3,r6,r3
   87f58:	1800dc1e 	bne	r3,zero,882cc <__umoddi3+0x558>
   87f5c:	002d883a 	mov	r22,zero
   87f60:	982ed43a 	srli	r23,r19,16
   87f64:	a809883a 	mov	r4,r21
   87f68:	9cbfffcc 	andi	r18,r19,65535
   87f6c:	b80b883a 	mov	r5,r23
   87f70:	008963c0 	call	8963c <__udivsi3>
   87f74:	100b883a 	mov	r5,r2
   87f78:	9009883a 	mov	r4,r18
   87f7c:	008964c0 	call	8964c <__mulsi3>
   87f80:	a809883a 	mov	r4,r21
   87f84:	b80b883a 	mov	r5,r23
   87f88:	1023883a 	mov	r17,r2
   87f8c:	00896440 	call	89644 <__umodsi3>
   87f90:	1004943a 	slli	r2,r2,16
   87f94:	8006d43a 	srli	r3,r16,16
   87f98:	10c4b03a 	or	r2,r2,r3
   87f9c:	1440032e 	bgeu	r2,r17,87fac <__umoddi3+0x238>
   87fa0:	14c5883a 	add	r2,r2,r19
   87fa4:	14c00136 	bltu	r2,r19,87fac <__umoddi3+0x238>
   87fa8:	14410236 	bltu	r2,r17,883b4 <__umoddi3+0x640>
   87fac:	1463c83a 	sub	r17,r2,r17
   87fb0:	8809883a 	mov	r4,r17
   87fb4:	b80b883a 	mov	r5,r23
   87fb8:	008963c0 	call	8963c <__udivsi3>
   87fbc:	9009883a 	mov	r4,r18
   87fc0:	100b883a 	mov	r5,r2
   87fc4:	008964c0 	call	8964c <__mulsi3>
   87fc8:	8809883a 	mov	r4,r17
   87fcc:	b80b883a 	mov	r5,r23
   87fd0:	102b883a 	mov	r21,r2
   87fd4:	00896440 	call	89644 <__umodsi3>
   87fd8:	1004943a 	slli	r2,r2,16
   87fdc:	80ffffcc 	andi	r3,r16,65535
   87fe0:	10c4b03a 	or	r2,r2,r3
   87fe4:	1540042e 	bgeu	r2,r21,87ff8 <__umoddi3+0x284>
   87fe8:	14c5883a 	add	r2,r2,r19
   87fec:	14c00236 	bltu	r2,r19,87ff8 <__umoddi3+0x284>
   87ff0:	1540012e 	bgeu	r2,r21,87ff8 <__umoddi3+0x284>
   87ff4:	14c5883a 	add	r2,r2,r19
   87ff8:	1545c83a 	sub	r2,r2,r21
   87ffc:	1584d83a 	srl	r2,r2,r22
   88000:	0013883a 	mov	r9,zero
   88004:	d8800415 	stw	r2,16(sp)
   88008:	d8c00417 	ldw	r3,16(sp)
   8800c:	0005883a 	mov	r2,zero
   88010:	d8800515 	stw	r2,20(sp)
   88014:	1811883a 	mov	r8,r3
   88018:	003f9d06 	br	87e90 <__umoddi3+0x11c>
   8801c:	00804034 	movhi	r2,256
   88020:	10bfffc4 	addi	r2,r2,-1
   88024:	14c0c636 	bltu	r2,r19,88340 <__umoddi3+0x5cc>
   88028:	01400404 	movi	r5,16
   8802c:	2805883a 	mov	r2,r5
   88030:	003f6c06 	br	87de4 <__umoddi3+0x70>
   88034:	01000044 	movi	r4,1
   88038:	000b883a 	mov	r5,zero
   8803c:	008963c0 	call	8963c <__udivsi3>
   88040:	1027883a 	mov	r19,r2
   88044:	00bfffd4 	movui	r2,65535
   88048:	14fff436 	bltu	r2,r19,8801c <__umoddi3+0x2a8>
   8804c:	003f6106 	br	87dd4 <__umoddi3+0x60>
   88050:	00804034 	movhi	r2,256
   88054:	10bfffc4 	addi	r2,r2,-1
   88058:	1200c536 	bltu	r2,r8,88370 <__umoddi3+0x5fc>
   8805c:	01400404 	movi	r5,16
   88060:	2805883a 	mov	r2,r5
   88064:	003fb406 	br	87f38 <__umoddi3+0x1c4>
   88068:	00804034 	movhi	r2,256
   8806c:	10bfffc4 	addi	r2,r2,-1
   88070:	11c0c236 	bltu	r2,r7,8837c <__umoddi3+0x608>
   88074:	01400404 	movi	r5,16
   88078:	2805883a 	mov	r2,r5
   8807c:	003f9806 	br	87ee0 <__umoddi3+0x16c>
   88080:	84c9c83a 	sub	r4,r16,r19
   88084:	8105803a 	cmpltu	r2,r16,r4
   88088:	a987c83a 	sub	r3,r21,r6
   8808c:	18abc83a 	sub	r21,r3,r2
   88090:	2021883a 	mov	r16,r4
   88094:	003f9d06 	br	87f0c <__umoddi3+0x198>
   88098:	9ca6983a 	sll	r19,r19,r18
   8809c:	3485c83a 	sub	r2,r6,r18
   880a0:	a8a2d83a 	srl	r17,r21,r2
   880a4:	982ed43a 	srli	r23,r19,16
   880a8:	ac86983a 	sll	r3,r21,r18
   880ac:	8084d83a 	srl	r2,r16,r2
   880b0:	8809883a 	mov	r4,r17
   880b4:	b80b883a 	mov	r5,r23
   880b8:	18b8b03a 	or	fp,r3,r2
   880bc:	9d3fffcc 	andi	r20,r19,65535
   880c0:	008963c0 	call	8963c <__udivsi3>
   880c4:	100b883a 	mov	r5,r2
   880c8:	a009883a 	mov	r4,r20
   880cc:	008964c0 	call	8964c <__mulsi3>
   880d0:	8809883a 	mov	r4,r17
   880d4:	b80b883a 	mov	r5,r23
   880d8:	102b883a 	mov	r21,r2
   880dc:	00896440 	call	89644 <__umodsi3>
   880e0:	1004943a 	slli	r2,r2,16
   880e4:	e006d43a 	srli	r3,fp,16
   880e8:	902d883a 	mov	r22,r18
   880ec:	10c4b03a 	or	r2,r2,r3
   880f0:	1540022e 	bgeu	r2,r21,880fc <__umoddi3+0x388>
   880f4:	14c5883a 	add	r2,r2,r19
   880f8:	14c0ab2e 	bgeu	r2,r19,883a8 <__umoddi3+0x634>
   880fc:	1563c83a 	sub	r17,r2,r21
   88100:	8809883a 	mov	r4,r17
   88104:	b80b883a 	mov	r5,r23
   88108:	008963c0 	call	8963c <__udivsi3>
   8810c:	100b883a 	mov	r5,r2
   88110:	a009883a 	mov	r4,r20
   88114:	008964c0 	call	8964c <__mulsi3>
   88118:	8809883a 	mov	r4,r17
   8811c:	b80b883a 	mov	r5,r23
   88120:	102b883a 	mov	r21,r2
   88124:	00896440 	call	89644 <__umodsi3>
   88128:	1004943a 	slli	r2,r2,16
   8812c:	e0ffffcc 	andi	r3,fp,65535
   88130:	10c4b03a 	or	r2,r2,r3
   88134:	1540042e 	bgeu	r2,r21,88148 <__umoddi3+0x3d4>
   88138:	14c5883a 	add	r2,r2,r19
   8813c:	14c00236 	bltu	r2,r19,88148 <__umoddi3+0x3d4>
   88140:	1540012e 	bgeu	r2,r21,88148 <__umoddi3+0x3d4>
   88144:	14c5883a 	add	r2,r2,r19
   88148:	84a0983a 	sll	r16,r16,r18
   8814c:	156bc83a 	sub	r21,r2,r21
   88150:	003f3106 	br	87e18 <__umoddi3+0xa4>
   88154:	3c8fc83a 	sub	r7,r7,r18
   88158:	3486983a 	sll	r3,r6,r18
   8815c:	99c4d83a 	srl	r2,r19,r7
   88160:	a9e2d83a 	srl	r17,r21,r7
   88164:	ac8c983a 	sll	r6,r21,r18
   88168:	18acb03a 	or	r22,r3,r2
   8816c:	b02ed43a 	srli	r23,r22,16
   88170:	81c4d83a 	srl	r2,r16,r7
   88174:	8809883a 	mov	r4,r17
   88178:	b80b883a 	mov	r5,r23
   8817c:	308cb03a 	or	r6,r6,r2
   88180:	d9c00315 	stw	r7,12(sp)
   88184:	d9800215 	stw	r6,8(sp)
   88188:	b53fffcc 	andi	r20,r22,65535
   8818c:	008963c0 	call	8963c <__udivsi3>
   88190:	100b883a 	mov	r5,r2
   88194:	a009883a 	mov	r4,r20
   88198:	1039883a 	mov	fp,r2
   8819c:	008964c0 	call	8964c <__mulsi3>
   881a0:	8809883a 	mov	r4,r17
   881a4:	b80b883a 	mov	r5,r23
   881a8:	102b883a 	mov	r21,r2
   881ac:	00896440 	call	89644 <__umodsi3>
   881b0:	d9000217 	ldw	r4,8(sp)
   881b4:	1004943a 	slli	r2,r2,16
   881b8:	9ca6983a 	sll	r19,r19,r18
   881bc:	2006d43a 	srli	r3,r4,16
   881c0:	84a0983a 	sll	r16,r16,r18
   881c4:	dcc00015 	stw	r19,0(sp)
   881c8:	10c4b03a 	or	r2,r2,r3
   881cc:	dc000115 	stw	r16,4(sp)
   881d0:	1540032e 	bgeu	r2,r21,881e0 <__umoddi3+0x46c>
   881d4:	1585883a 	add	r2,r2,r22
   881d8:	e73fffc4 	addi	fp,fp,-1
   881dc:	15806e2e 	bgeu	r2,r22,88398 <__umoddi3+0x624>
   881e0:	1563c83a 	sub	r17,r2,r21
   881e4:	8809883a 	mov	r4,r17
   881e8:	b80b883a 	mov	r5,r23
   881ec:	008963c0 	call	8963c <__udivsi3>
   881f0:	100b883a 	mov	r5,r2
   881f4:	a009883a 	mov	r4,r20
   881f8:	1021883a 	mov	r16,r2
   881fc:	008964c0 	call	8964c <__mulsi3>
   88200:	b80b883a 	mov	r5,r23
   88204:	8809883a 	mov	r4,r17
   88208:	1029883a 	mov	r20,r2
   8820c:	00896440 	call	89644 <__umodsi3>
   88210:	d9400217 	ldw	r5,8(sp)
   88214:	1004943a 	slli	r2,r2,16
   88218:	28ffffcc 	andi	r3,r5,65535
   8821c:	10c4b03a 	or	r2,r2,r3
   88220:	1500032e 	bgeu	r2,r20,88230 <__umoddi3+0x4bc>
   88224:	1585883a 	add	r2,r2,r22
   88228:	843fffc4 	addi	r16,r16,-1
   8822c:	1580562e 	bgeu	r2,r22,88388 <__umoddi3+0x614>
   88230:	d9800017 	ldw	r6,0(sp)
   88234:	e022943a 	slli	r17,fp,16
   88238:	302ed43a 	srli	r23,r6,16
   8823c:	8462b03a 	or	r17,r16,r17
   88240:	34ffffcc 	andi	r19,r6,65535
   88244:	882ad43a 	srli	r21,r17,16
   88248:	8c7fffcc 	andi	r17,r17,65535
   8824c:	8809883a 	mov	r4,r17
   88250:	980b883a 	mov	r5,r19
   88254:	1521c83a 	sub	r16,r2,r20
   88258:	008964c0 	call	8964c <__mulsi3>
   8825c:	8809883a 	mov	r4,r17
   88260:	b80b883a 	mov	r5,r23
   88264:	1029883a 	mov	r20,r2
   88268:	008964c0 	call	8964c <__mulsi3>
   8826c:	980b883a 	mov	r5,r19
   88270:	a809883a 	mov	r4,r21
   88274:	1023883a 	mov	r17,r2
   88278:	008964c0 	call	8964c <__mulsi3>
   8827c:	a809883a 	mov	r4,r21
   88280:	b80b883a 	mov	r5,r23
   88284:	1027883a 	mov	r19,r2
   88288:	008964c0 	call	8964c <__mulsi3>
   8828c:	100b883a 	mov	r5,r2
   88290:	a004d43a 	srli	r2,r20,16
   88294:	8ce3883a 	add	r17,r17,r19
   88298:	1449883a 	add	r4,r2,r17
   8829c:	24c0022e 	bgeu	r4,r19,882a8 <__umoddi3+0x534>
   882a0:	00800074 	movhi	r2,1
   882a4:	288b883a 	add	r5,r5,r2
   882a8:	2004d43a 	srli	r2,r4,16
   882ac:	2008943a 	slli	r4,r4,16
   882b0:	a0ffffcc 	andi	r3,r20,65535
   882b4:	288d883a 	add	r6,r5,r2
   882b8:	20c9883a 	add	r4,r4,r3
   882bc:	81800b36 	bltu	r16,r6,882ec <__umoddi3+0x578>
   882c0:	81804026 	beq	r16,r6,883c4 <__umoddi3+0x650>
   882c4:	818dc83a 	sub	r6,r16,r6
   882c8:	00000f06 	br	88308 <__umoddi3+0x594>
   882cc:	30c5c83a 	sub	r2,r6,r3
   882d0:	182d883a 	mov	r22,r3
   882d4:	8084d83a 	srl	r2,r16,r2
   882d8:	a8c6983a 	sll	r3,r21,r3
   882dc:	9da6983a 	sll	r19,r19,r22
   882e0:	85a0983a 	sll	r16,r16,r22
   882e4:	18aab03a 	or	r21,r3,r2
   882e8:	003f1d06 	br	87f60 <__umoddi3+0x1ec>
   882ec:	d8c00017 	ldw	r3,0(sp)
   882f0:	20c5c83a 	sub	r2,r4,r3
   882f4:	2089803a 	cmpltu	r4,r4,r2
   882f8:	3587c83a 	sub	r3,r6,r22
   882fc:	1907c83a 	sub	r3,r3,r4
   88300:	80cdc83a 	sub	r6,r16,r3
   88304:	1009883a 	mov	r4,r2
   88308:	d9400117 	ldw	r5,4(sp)
   8830c:	2905c83a 	sub	r2,r5,r4
   88310:	2887803a 	cmpltu	r3,r5,r2
   88314:	30c7c83a 	sub	r3,r6,r3
   88318:	d9800317 	ldw	r6,12(sp)
   8831c:	1484d83a 	srl	r2,r2,r18
   88320:	1988983a 	sll	r4,r3,r6
   88324:	1c86d83a 	srl	r3,r3,r18
   88328:	2088b03a 	or	r4,r4,r2
   8832c:	2011883a 	mov	r8,r4
   88330:	1813883a 	mov	r9,r3
   88334:	d9000415 	stw	r4,16(sp)
   88338:	d8c00515 	stw	r3,20(sp)
   8833c:	003ed406 	br	87e90 <__umoddi3+0x11c>
   88340:	01400604 	movi	r5,24
   88344:	2805883a 	mov	r2,r5
   88348:	003ea606 	br	87de4 <__umoddi3+0x70>
   8834c:	01400204 	movi	r5,8
   88350:	2805883a 	mov	r2,r5
   88354:	003ea306 	br	87de4 <__umoddi3+0x70>
   88358:	01400204 	movi	r5,8
   8835c:	2805883a 	mov	r2,r5
   88360:	003edf06 	br	87ee0 <__umoddi3+0x16c>
   88364:	01400204 	movi	r5,8
   88368:	2805883a 	mov	r2,r5
   8836c:	003ef206 	br	87f38 <__umoddi3+0x1c4>
   88370:	01400604 	movi	r5,24
   88374:	2805883a 	mov	r2,r5
   88378:	003eef06 	br	87f38 <__umoddi3+0x1c4>
   8837c:	01400604 	movi	r5,24
   88380:	2805883a 	mov	r2,r5
   88384:	003ed606 	br	87ee0 <__umoddi3+0x16c>
   88388:	153fa92e 	bgeu	r2,r20,88230 <__umoddi3+0x4bc>
   8838c:	843fffc4 	addi	r16,r16,-1
   88390:	1585883a 	add	r2,r2,r22
   88394:	003fa606 	br	88230 <__umoddi3+0x4bc>
   88398:	157f912e 	bgeu	r2,r21,881e0 <__umoddi3+0x46c>
   8839c:	e73fffc4 	addi	fp,fp,-1
   883a0:	1585883a 	add	r2,r2,r22
   883a4:	003f8e06 	br	881e0 <__umoddi3+0x46c>
   883a8:	157f542e 	bgeu	r2,r21,880fc <__umoddi3+0x388>
   883ac:	14c5883a 	add	r2,r2,r19
   883b0:	003f5206 	br	880fc <__umoddi3+0x388>
   883b4:	14c5883a 	add	r2,r2,r19
   883b8:	003efc06 	br	87fac <__umoddi3+0x238>
   883bc:	14c5883a 	add	r2,r2,r19
   883c0:	003ea606 	br	87e5c <__umoddi3+0xe8>
   883c4:	d8800117 	ldw	r2,4(sp)
   883c8:	113fc836 	bltu	r2,r4,882ec <__umoddi3+0x578>
   883cc:	000d883a 	mov	r6,zero
   883d0:	003fcd06 	br	88308 <__umoddi3+0x594>

000883d4 <_fpadd_parts>:
   883d4:	defff804 	addi	sp,sp,-32
   883d8:	dcc00315 	stw	r19,12(sp)
   883dc:	2027883a 	mov	r19,r4
   883e0:	21000017 	ldw	r4,0(r4)
   883e4:	00c00044 	movi	r3,1
   883e8:	dd400515 	stw	r21,20(sp)
   883ec:	dd000415 	stw	r20,16(sp)
   883f0:	ddc00715 	stw	r23,28(sp)
   883f4:	dd800615 	stw	r22,24(sp)
   883f8:	dc800215 	stw	r18,8(sp)
   883fc:	dc400115 	stw	r17,4(sp)
   88400:	dc000015 	stw	r16,0(sp)
   88404:	282b883a 	mov	r21,r5
   88408:	3029883a 	mov	r20,r6
   8840c:	1900632e 	bgeu	r3,r4,8859c <_fpadd_parts+0x1c8>
   88410:	28800017 	ldw	r2,0(r5)
   88414:	1880812e 	bgeu	r3,r2,8861c <_fpadd_parts+0x248>
   88418:	00c00104 	movi	r3,4
   8841c:	20c0dc26 	beq	r4,r3,88790 <_fpadd_parts+0x3bc>
   88420:	10c07e26 	beq	r2,r3,8861c <_fpadd_parts+0x248>
   88424:	00c00084 	movi	r3,2
   88428:	10c06726 	beq	r2,r3,885c8 <_fpadd_parts+0x1f4>
   8842c:	20c07b26 	beq	r4,r3,8861c <_fpadd_parts+0x248>
   88430:	9dc00217 	ldw	r23,8(r19)
   88434:	28c00217 	ldw	r3,8(r5)
   88438:	9c400317 	ldw	r17,12(r19)
   8843c:	2bc00317 	ldw	r15,12(r5)
   88440:	b8cdc83a 	sub	r6,r23,r3
   88444:	9c800417 	ldw	r18,16(r19)
   88448:	2c000417 	ldw	r16,16(r5)
   8844c:	3009883a 	mov	r4,r6
   88450:	30009716 	blt	r6,zero,886b0 <_fpadd_parts+0x2dc>
   88454:	00800fc4 	movi	r2,63
   88458:	11806b16 	blt	r2,r6,88608 <_fpadd_parts+0x234>
   8845c:	0100a40e 	bge	zero,r4,886f0 <_fpadd_parts+0x31c>
   88460:	35bff804 	addi	r22,r6,-32
   88464:	b000bc16 	blt	r22,zero,88758 <_fpadd_parts+0x384>
   88468:	8596d83a 	srl	r11,r16,r22
   8846c:	0019883a 	mov	r12,zero
   88470:	0013883a 	mov	r9,zero
   88474:	01000044 	movi	r4,1
   88478:	0015883a 	mov	r10,zero
   8847c:	b000be16 	blt	r22,zero,88778 <_fpadd_parts+0x3a4>
   88480:	2590983a 	sll	r8,r4,r22
   88484:	000f883a 	mov	r7,zero
   88488:	00bfffc4 	movi	r2,-1
   8848c:	3889883a 	add	r4,r7,r2
   88490:	408b883a 	add	r5,r8,r2
   88494:	21cd803a 	cmpltu	r6,r4,r7
   88498:	314b883a 	add	r5,r6,r5
   8849c:	7904703a 	and	r2,r15,r4
   884a0:	8146703a 	and	r3,r16,r5
   884a4:	10c4b03a 	or	r2,r2,r3
   884a8:	10000226 	beq	r2,zero,884b4 <_fpadd_parts+0xe0>
   884ac:	02400044 	movi	r9,1
   884b0:	0015883a 	mov	r10,zero
   884b4:	5a5eb03a 	or	r15,r11,r9
   884b8:	62a0b03a 	or	r16,r12,r10
   884bc:	99400117 	ldw	r5,4(r19)
   884c0:	a8800117 	ldw	r2,4(r21)
   884c4:	28806e26 	beq	r5,r2,88680 <_fpadd_parts+0x2ac>
   884c8:	28006626 	beq	r5,zero,88664 <_fpadd_parts+0x290>
   884cc:	7c45c83a 	sub	r2,r15,r17
   884d0:	7889803a 	cmpltu	r4,r15,r2
   884d4:	8487c83a 	sub	r3,r16,r18
   884d8:	1909c83a 	sub	r4,r3,r4
   884dc:	100d883a 	mov	r6,r2
   884e0:	200f883a 	mov	r7,r4
   884e4:	38007716 	blt	r7,zero,886c4 <_fpadd_parts+0x2f0>
   884e8:	a5c00215 	stw	r23,8(r20)
   884ec:	a1c00415 	stw	r7,16(r20)
   884f0:	a0000115 	stw	zero,4(r20)
   884f4:	a1800315 	stw	r6,12(r20)
   884f8:	a2000317 	ldw	r8,12(r20)
   884fc:	a2400417 	ldw	r9,16(r20)
   88500:	00bfffc4 	movi	r2,-1
   88504:	408b883a 	add	r5,r8,r2
   88508:	2a09803a 	cmpltu	r4,r5,r8
   8850c:	488d883a 	add	r6,r9,r2
   88510:	01c40034 	movhi	r7,4096
   88514:	39ffffc4 	addi	r7,r7,-1
   88518:	218d883a 	add	r6,r4,r6
   8851c:	39801736 	bltu	r7,r6,8857c <_fpadd_parts+0x1a8>
   88520:	31c06526 	beq	r6,r7,886b8 <_fpadd_parts+0x2e4>
   88524:	a3000217 	ldw	r12,8(r20)
   88528:	4209883a 	add	r4,r8,r8
   8852c:	00bfffc4 	movi	r2,-1
   88530:	220f803a 	cmpltu	r7,r4,r8
   88534:	4a4b883a 	add	r5,r9,r9
   88538:	394f883a 	add	r7,r7,r5
   8853c:	2095883a 	add	r10,r4,r2
   88540:	3897883a 	add	r11,r7,r2
   88544:	510d803a 	cmpltu	r6,r10,r4
   88548:	6099883a 	add	r12,r12,r2
   8854c:	32d7883a 	add	r11,r6,r11
   88550:	00840034 	movhi	r2,4096
   88554:	10bfffc4 	addi	r2,r2,-1
   88558:	2011883a 	mov	r8,r4
   8855c:	3813883a 	mov	r9,r7
   88560:	a1000315 	stw	r4,12(r20)
   88564:	a1c00415 	stw	r7,16(r20)
   88568:	a3000215 	stw	r12,8(r20)
   8856c:	12c00336 	bltu	r2,r11,8857c <_fpadd_parts+0x1a8>
   88570:	58bfed1e 	bne	r11,r2,88528 <_fpadd_parts+0x154>
   88574:	00bfff84 	movi	r2,-2
   88578:	12bfeb2e 	bgeu	r2,r10,88528 <_fpadd_parts+0x154>
   8857c:	a2800417 	ldw	r10,16(r20)
   88580:	008000c4 	movi	r2,3
   88584:	00c80034 	movhi	r3,8192
   88588:	18ffffc4 	addi	r3,r3,-1
   8858c:	a2400317 	ldw	r9,12(r20)
   88590:	a0800015 	stw	r2,0(r20)
   88594:	1a802336 	bltu	r3,r10,88624 <_fpadd_parts+0x250>
   88598:	a027883a 	mov	r19,r20
   8859c:	9805883a 	mov	r2,r19
   885a0:	ddc00717 	ldw	r23,28(sp)
   885a4:	dd800617 	ldw	r22,24(sp)
   885a8:	dd400517 	ldw	r21,20(sp)
   885ac:	dd000417 	ldw	r20,16(sp)
   885b0:	dcc00317 	ldw	r19,12(sp)
   885b4:	dc800217 	ldw	r18,8(sp)
   885b8:	dc400117 	ldw	r17,4(sp)
   885bc:	dc000017 	ldw	r16,0(sp)
   885c0:	dec00804 	addi	sp,sp,32
   885c4:	f800283a 	ret
   885c8:	20fff41e 	bne	r4,r3,8859c <_fpadd_parts+0x1c8>
   885cc:	31000015 	stw	r4,0(r6)
   885d0:	98800117 	ldw	r2,4(r19)
   885d4:	30800115 	stw	r2,4(r6)
   885d8:	98c00217 	ldw	r3,8(r19)
   885dc:	30c00215 	stw	r3,8(r6)
   885e0:	98800317 	ldw	r2,12(r19)
   885e4:	30800315 	stw	r2,12(r6)
   885e8:	98c00417 	ldw	r3,16(r19)
   885ec:	30c00415 	stw	r3,16(r6)
   885f0:	98800117 	ldw	r2,4(r19)
   885f4:	28c00117 	ldw	r3,4(r5)
   885f8:	3027883a 	mov	r19,r6
   885fc:	10c4703a 	and	r2,r2,r3
   88600:	30800115 	stw	r2,4(r6)
   88604:	003fe506 	br	8859c <_fpadd_parts+0x1c8>
   88608:	1dc02616 	blt	r3,r23,886a4 <_fpadd_parts+0x2d0>
   8860c:	0023883a 	mov	r17,zero
   88610:	182f883a 	mov	r23,r3
   88614:	0025883a 	mov	r18,zero
   88618:	003fa806 	br	884bc <_fpadd_parts+0xe8>
   8861c:	a827883a 	mov	r19,r21
   88620:	003fde06 	br	8859c <_fpadd_parts+0x1c8>
   88624:	01800044 	movi	r6,1
   88628:	500497fa 	slli	r2,r10,31
   8862c:	4808d07a 	srli	r4,r9,1
   88630:	518ad83a 	srl	r5,r10,r6
   88634:	a2000217 	ldw	r8,8(r20)
   88638:	1108b03a 	or	r4,r2,r4
   8863c:	0007883a 	mov	r3,zero
   88640:	4984703a 	and	r2,r9,r6
   88644:	208cb03a 	or	r6,r4,r2
   88648:	28ceb03a 	or	r7,r5,r3
   8864c:	42000044 	addi	r8,r8,1
   88650:	a027883a 	mov	r19,r20
   88654:	a1c00415 	stw	r7,16(r20)
   88658:	a2000215 	stw	r8,8(r20)
   8865c:	a1800315 	stw	r6,12(r20)
   88660:	003fce06 	br	8859c <_fpadd_parts+0x1c8>
   88664:	8bc5c83a 	sub	r2,r17,r15
   88668:	8889803a 	cmpltu	r4,r17,r2
   8866c:	9407c83a 	sub	r3,r18,r16
   88670:	1909c83a 	sub	r4,r3,r4
   88674:	100d883a 	mov	r6,r2
   88678:	200f883a 	mov	r7,r4
   8867c:	003f9906 	br	884e4 <_fpadd_parts+0x110>
   88680:	7c45883a 	add	r2,r15,r17
   88684:	13c9803a 	cmpltu	r4,r2,r15
   88688:	8487883a 	add	r3,r16,r18
   8868c:	20c9883a 	add	r4,r4,r3
   88690:	a1400115 	stw	r5,4(r20)
   88694:	a5c00215 	stw	r23,8(r20)
   88698:	a0800315 	stw	r2,12(r20)
   8869c:	a1000415 	stw	r4,16(r20)
   886a0:	003fb606 	br	8857c <_fpadd_parts+0x1a8>
   886a4:	001f883a 	mov	r15,zero
   886a8:	0021883a 	mov	r16,zero
   886ac:	003f8306 	br	884bc <_fpadd_parts+0xe8>
   886b0:	018dc83a 	sub	r6,zero,r6
   886b4:	003f6706 	br	88454 <_fpadd_parts+0x80>
   886b8:	00bfff84 	movi	r2,-2
   886bc:	117faf36 	bltu	r2,r5,8857c <_fpadd_parts+0x1a8>
   886c0:	003f9806 	br	88524 <_fpadd_parts+0x150>
   886c4:	0005883a 	mov	r2,zero
   886c8:	1189c83a 	sub	r4,r2,r6
   886cc:	1105803a 	cmpltu	r2,r2,r4
   886d0:	01cbc83a 	sub	r5,zero,r7
   886d4:	2885c83a 	sub	r2,r5,r2
   886d8:	01800044 	movi	r6,1
   886dc:	a1800115 	stw	r6,4(r20)
   886e0:	a5c00215 	stw	r23,8(r20)
   886e4:	a1000315 	stw	r4,12(r20)
   886e8:	a0800415 	stw	r2,16(r20)
   886ec:	003f8206 	br	884f8 <_fpadd_parts+0x124>
   886f0:	203f7226 	beq	r4,zero,884bc <_fpadd_parts+0xe8>
   886f4:	35bff804 	addi	r22,r6,-32
   886f8:	b9af883a 	add	r23,r23,r6
   886fc:	b0003116 	blt	r22,zero,887c4 <_fpadd_parts+0x3f0>
   88700:	959ad83a 	srl	r13,r18,r22
   88704:	001d883a 	mov	r14,zero
   88708:	000f883a 	mov	r7,zero
   8870c:	01000044 	movi	r4,1
   88710:	0011883a 	mov	r8,zero
   88714:	b0002516 	blt	r22,zero,887ac <_fpadd_parts+0x3d8>
   88718:	2594983a 	sll	r10,r4,r22
   8871c:	0013883a 	mov	r9,zero
   88720:	00bfffc4 	movi	r2,-1
   88724:	4889883a 	add	r4,r9,r2
   88728:	508b883a 	add	r5,r10,r2
   8872c:	224d803a 	cmpltu	r6,r4,r9
   88730:	314b883a 	add	r5,r6,r5
   88734:	8904703a 	and	r2,r17,r4
   88738:	9146703a 	and	r3,r18,r5
   8873c:	10c4b03a 	or	r2,r2,r3
   88740:	10000226 	beq	r2,zero,8874c <_fpadd_parts+0x378>
   88744:	01c00044 	movi	r7,1
   88748:	0011883a 	mov	r8,zero
   8874c:	69e2b03a 	or	r17,r13,r7
   88750:	7224b03a 	or	r18,r14,r8
   88754:	003f5906 	br	884bc <_fpadd_parts+0xe8>
   88758:	8407883a 	add	r3,r16,r16
   8875c:	008007c4 	movi	r2,31
   88760:	1185c83a 	sub	r2,r2,r6
   88764:	1886983a 	sll	r3,r3,r2
   88768:	7996d83a 	srl	r11,r15,r6
   8876c:	8198d83a 	srl	r12,r16,r6
   88770:	1ad6b03a 	or	r11,r3,r11
   88774:	003f3e06 	br	88470 <_fpadd_parts+0x9c>
   88778:	2006d07a 	srli	r3,r4,1
   8877c:	008007c4 	movi	r2,31
   88780:	1185c83a 	sub	r2,r2,r6
   88784:	1890d83a 	srl	r8,r3,r2
   88788:	218e983a 	sll	r7,r4,r6
   8878c:	003f3e06 	br	88488 <_fpadd_parts+0xb4>
   88790:	113f821e 	bne	r2,r4,8859c <_fpadd_parts+0x1c8>
   88794:	28c00117 	ldw	r3,4(r5)
   88798:	98800117 	ldw	r2,4(r19)
   8879c:	10ff7f26 	beq	r2,r3,8859c <_fpadd_parts+0x1c8>
   887a0:	04c00274 	movhi	r19,9
   887a4:	9cd5e204 	addi	r19,r19,22408
   887a8:	003f7c06 	br	8859c <_fpadd_parts+0x1c8>
   887ac:	2006d07a 	srli	r3,r4,1
   887b0:	008007c4 	movi	r2,31
   887b4:	1185c83a 	sub	r2,r2,r6
   887b8:	1894d83a 	srl	r10,r3,r2
   887bc:	2192983a 	sll	r9,r4,r6
   887c0:	003fd706 	br	88720 <_fpadd_parts+0x34c>
   887c4:	9487883a 	add	r3,r18,r18
   887c8:	008007c4 	movi	r2,31
   887cc:	1185c83a 	sub	r2,r2,r6
   887d0:	1886983a 	sll	r3,r3,r2
   887d4:	899ad83a 	srl	r13,r17,r6
   887d8:	919cd83a 	srl	r14,r18,r6
   887dc:	1b5ab03a 	or	r13,r3,r13
   887e0:	003fc906 	br	88708 <_fpadd_parts+0x334>

000887e4 <__subdf3>:
   887e4:	deffea04 	addi	sp,sp,-88
   887e8:	dcc01415 	stw	r19,80(sp)
   887ec:	dcc00404 	addi	r19,sp,16
   887f0:	2011883a 	mov	r8,r4
   887f4:	2813883a 	mov	r9,r5
   887f8:	dc401315 	stw	r17,76(sp)
   887fc:	d809883a 	mov	r4,sp
   88800:	980b883a 	mov	r5,r19
   88804:	dc400904 	addi	r17,sp,36
   88808:	dfc01515 	stw	ra,84(sp)
   8880c:	da400115 	stw	r9,4(sp)
   88810:	d9c00315 	stw	r7,12(sp)
   88814:	da000015 	stw	r8,0(sp)
   88818:	d9800215 	stw	r6,8(sp)
   8881c:	0089b3c0 	call	89b3c <__unpack_d>
   88820:	d9000204 	addi	r4,sp,8
   88824:	880b883a 	mov	r5,r17
   88828:	0089b3c0 	call	89b3c <__unpack_d>
   8882c:	d8800a17 	ldw	r2,40(sp)
   88830:	880b883a 	mov	r5,r17
   88834:	9809883a 	mov	r4,r19
   88838:	d9800e04 	addi	r6,sp,56
   8883c:	1080005c 	xori	r2,r2,1
   88840:	d8800a15 	stw	r2,40(sp)
   88844:	00883d40 	call	883d4 <_fpadd_parts>
   88848:	1009883a 	mov	r4,r2
   8884c:	00898280 	call	89828 <__pack_d>
   88850:	dfc01517 	ldw	ra,84(sp)
   88854:	dcc01417 	ldw	r19,80(sp)
   88858:	dc401317 	ldw	r17,76(sp)
   8885c:	dec01604 	addi	sp,sp,88
   88860:	f800283a 	ret

00088864 <__adddf3>:
   88864:	deffea04 	addi	sp,sp,-88
   88868:	dcc01415 	stw	r19,80(sp)
   8886c:	dcc00404 	addi	r19,sp,16
   88870:	2011883a 	mov	r8,r4
   88874:	2813883a 	mov	r9,r5
   88878:	dc401315 	stw	r17,76(sp)
   8887c:	d809883a 	mov	r4,sp
   88880:	980b883a 	mov	r5,r19
   88884:	dc400904 	addi	r17,sp,36
   88888:	dfc01515 	stw	ra,84(sp)
   8888c:	da400115 	stw	r9,4(sp)
   88890:	d9c00315 	stw	r7,12(sp)
   88894:	da000015 	stw	r8,0(sp)
   88898:	d9800215 	stw	r6,8(sp)
   8889c:	0089b3c0 	call	89b3c <__unpack_d>
   888a0:	d9000204 	addi	r4,sp,8
   888a4:	880b883a 	mov	r5,r17
   888a8:	0089b3c0 	call	89b3c <__unpack_d>
   888ac:	d9800e04 	addi	r6,sp,56
   888b0:	9809883a 	mov	r4,r19
   888b4:	880b883a 	mov	r5,r17
   888b8:	00883d40 	call	883d4 <_fpadd_parts>
   888bc:	1009883a 	mov	r4,r2
   888c0:	00898280 	call	89828 <__pack_d>
   888c4:	dfc01517 	ldw	ra,84(sp)
   888c8:	dcc01417 	ldw	r19,80(sp)
   888cc:	dc401317 	ldw	r17,76(sp)
   888d0:	dec01604 	addi	sp,sp,88
   888d4:	f800283a 	ret

000888d8 <__muldf3>:
   888d8:	deffe004 	addi	sp,sp,-128
   888dc:	dc401815 	stw	r17,96(sp)
   888e0:	dc400404 	addi	r17,sp,16
   888e4:	2011883a 	mov	r8,r4
   888e8:	2813883a 	mov	r9,r5
   888ec:	dc001715 	stw	r16,92(sp)
   888f0:	d809883a 	mov	r4,sp
   888f4:	880b883a 	mov	r5,r17
   888f8:	dc000904 	addi	r16,sp,36
   888fc:	dfc01f15 	stw	ra,124(sp)
   88900:	da400115 	stw	r9,4(sp)
   88904:	d9c00315 	stw	r7,12(sp)
   88908:	da000015 	stw	r8,0(sp)
   8890c:	d9800215 	stw	r6,8(sp)
   88910:	ddc01e15 	stw	r23,120(sp)
   88914:	dd801d15 	stw	r22,116(sp)
   88918:	dd401c15 	stw	r21,112(sp)
   8891c:	dd001b15 	stw	r20,108(sp)
   88920:	dcc01a15 	stw	r19,104(sp)
   88924:	dc801915 	stw	r18,100(sp)
   88928:	0089b3c0 	call	89b3c <__unpack_d>
   8892c:	d9000204 	addi	r4,sp,8
   88930:	800b883a 	mov	r5,r16
   88934:	0089b3c0 	call	89b3c <__unpack_d>
   88938:	d9000417 	ldw	r4,16(sp)
   8893c:	00800044 	movi	r2,1
   88940:	1100102e 	bgeu	r2,r4,88984 <__muldf3+0xac>
   88944:	d8c00917 	ldw	r3,36(sp)
   88948:	10c0062e 	bgeu	r2,r3,88964 <__muldf3+0x8c>
   8894c:	00800104 	movi	r2,4
   88950:	20800a26 	beq	r4,r2,8897c <__muldf3+0xa4>
   88954:	1880cc26 	beq	r3,r2,88c88 <__muldf3+0x3b0>
   88958:	00800084 	movi	r2,2
   8895c:	20800926 	beq	r4,r2,88984 <__muldf3+0xac>
   88960:	1880191e 	bne	r3,r2,889c8 <__muldf3+0xf0>
   88964:	d8c00a17 	ldw	r3,40(sp)
   88968:	d8800517 	ldw	r2,20(sp)
   8896c:	8009883a 	mov	r4,r16
   88970:	10c4c03a 	cmpne	r2,r2,r3
   88974:	d8800a15 	stw	r2,40(sp)
   88978:	00000706 	br	88998 <__muldf3+0xc0>
   8897c:	00800084 	movi	r2,2
   88980:	1880c326 	beq	r3,r2,88c90 <__muldf3+0x3b8>
   88984:	d8800517 	ldw	r2,20(sp)
   88988:	d8c00a17 	ldw	r3,40(sp)
   8898c:	8809883a 	mov	r4,r17
   88990:	10c4c03a 	cmpne	r2,r2,r3
   88994:	d8800515 	stw	r2,20(sp)
   88998:	00898280 	call	89828 <__pack_d>
   8899c:	dfc01f17 	ldw	ra,124(sp)
   889a0:	ddc01e17 	ldw	r23,120(sp)
   889a4:	dd801d17 	ldw	r22,116(sp)
   889a8:	dd401c17 	ldw	r21,112(sp)
   889ac:	dd001b17 	ldw	r20,108(sp)
   889b0:	dcc01a17 	ldw	r19,104(sp)
   889b4:	dc801917 	ldw	r18,100(sp)
   889b8:	dc401817 	ldw	r17,96(sp)
   889bc:	dc001717 	ldw	r16,92(sp)
   889c0:	dec02004 	addi	sp,sp,128
   889c4:	f800283a 	ret
   889c8:	dd800717 	ldw	r22,28(sp)
   889cc:	dc800c17 	ldw	r18,48(sp)
   889d0:	002b883a 	mov	r21,zero
   889d4:	0023883a 	mov	r17,zero
   889d8:	a80b883a 	mov	r5,r21
   889dc:	b00d883a 	mov	r6,r22
   889e0:	880f883a 	mov	r7,r17
   889e4:	ddc00817 	ldw	r23,32(sp)
   889e8:	dcc00d17 	ldw	r19,52(sp)
   889ec:	9009883a 	mov	r4,r18
   889f0:	00896840 	call	89684 <__muldi3>
   889f4:	001b883a 	mov	r13,zero
   889f8:	680f883a 	mov	r7,r13
   889fc:	b009883a 	mov	r4,r22
   88a00:	000b883a 	mov	r5,zero
   88a04:	980d883a 	mov	r6,r19
   88a08:	b82d883a 	mov	r22,r23
   88a0c:	002f883a 	mov	r23,zero
   88a10:	db401615 	stw	r13,88(sp)
   88a14:	d8801315 	stw	r2,76(sp)
   88a18:	d8c01415 	stw	r3,80(sp)
   88a1c:	dcc01515 	stw	r19,84(sp)
   88a20:	00896840 	call	89684 <__muldi3>
   88a24:	b00d883a 	mov	r6,r22
   88a28:	000b883a 	mov	r5,zero
   88a2c:	9009883a 	mov	r4,r18
   88a30:	b80f883a 	mov	r7,r23
   88a34:	1021883a 	mov	r16,r2
   88a38:	1823883a 	mov	r17,r3
   88a3c:	00896840 	call	89684 <__muldi3>
   88a40:	8085883a 	add	r2,r16,r2
   88a44:	140d803a 	cmpltu	r6,r2,r16
   88a48:	88c7883a 	add	r3,r17,r3
   88a4c:	30cd883a 	add	r6,r6,r3
   88a50:	1029883a 	mov	r20,r2
   88a54:	302b883a 	mov	r21,r6
   88a58:	da801317 	ldw	r10,76(sp)
   88a5c:	dac01417 	ldw	r11,80(sp)
   88a60:	db001517 	ldw	r12,84(sp)
   88a64:	db401617 	ldw	r13,88(sp)
   88a68:	3440612e 	bgeu	r6,r17,88bf0 <__muldf3+0x318>
   88a6c:	0009883a 	mov	r4,zero
   88a70:	5105883a 	add	r2,r10,r4
   88a74:	128d803a 	cmpltu	r6,r2,r10
   88a78:	5d07883a 	add	r3,r11,r20
   88a7c:	30cd883a 	add	r6,r6,r3
   88a80:	0021883a 	mov	r16,zero
   88a84:	04400044 	movi	r17,1
   88a88:	1025883a 	mov	r18,r2
   88a8c:	3027883a 	mov	r19,r6
   88a90:	32c06236 	bltu	r6,r11,88c1c <__muldf3+0x344>
   88a94:	59807a26 	beq	r11,r6,88c80 <__muldf3+0x3a8>
   88a98:	680b883a 	mov	r5,r13
   88a9c:	b80f883a 	mov	r7,r23
   88aa0:	6009883a 	mov	r4,r12
   88aa4:	b00d883a 	mov	r6,r22
   88aa8:	00896840 	call	89684 <__muldi3>
   88aac:	1009883a 	mov	r4,r2
   88ab0:	000f883a 	mov	r7,zero
   88ab4:	1545883a 	add	r2,r2,r21
   88ab8:	1111803a 	cmpltu	r8,r2,r4
   88abc:	19c7883a 	add	r3,r3,r7
   88ac0:	40c7883a 	add	r3,r8,r3
   88ac4:	88cb883a 	add	r5,r17,r3
   88ac8:	d8c00617 	ldw	r3,24(sp)
   88acc:	8089883a 	add	r4,r16,r2
   88ad0:	d8800b17 	ldw	r2,44(sp)
   88ad4:	18c00104 	addi	r3,r3,4
   88ad8:	240d803a 	cmpltu	r6,r4,r16
   88adc:	10c7883a 	add	r3,r2,r3
   88ae0:	2013883a 	mov	r9,r4
   88ae4:	d8800a17 	ldw	r2,40(sp)
   88ae8:	d9000517 	ldw	r4,20(sp)
   88aec:	314d883a 	add	r6,r6,r5
   88af0:	3015883a 	mov	r10,r6
   88af4:	2088c03a 	cmpne	r4,r4,r2
   88af8:	00880034 	movhi	r2,8192
   88afc:	10bfffc4 	addi	r2,r2,-1
   88b00:	d9000f15 	stw	r4,60(sp)
   88b04:	d8c01015 	stw	r3,64(sp)
   88b08:	1180162e 	bgeu	r2,r6,88b64 <__muldf3+0x28c>
   88b0c:	1811883a 	mov	r8,r3
   88b10:	101f883a 	mov	r15,r2
   88b14:	980497fa 	slli	r2,r19,31
   88b18:	9016d07a 	srli	r11,r18,1
   88b1c:	500697fa 	slli	r3,r10,31
   88b20:	480cd07a 	srli	r6,r9,1
   88b24:	500ed07a 	srli	r7,r10,1
   88b28:	12d6b03a 	or	r11,r2,r11
   88b2c:	00800044 	movi	r2,1
   88b30:	198cb03a 	or	r6,r3,r6
   88b34:	4888703a 	and	r4,r9,r2
   88b38:	9818d07a 	srli	r12,r19,1
   88b3c:	001b883a 	mov	r13,zero
   88b40:	03a00034 	movhi	r14,32768
   88b44:	3013883a 	mov	r9,r6
   88b48:	3815883a 	mov	r10,r7
   88b4c:	4091883a 	add	r8,r8,r2
   88b50:	20000226 	beq	r4,zero,88b5c <__muldf3+0x284>
   88b54:	5b64b03a 	or	r18,r11,r13
   88b58:	63a6b03a 	or	r19,r12,r14
   88b5c:	7abfed36 	bltu	r15,r10,88b14 <__muldf3+0x23c>
   88b60:	da001015 	stw	r8,64(sp)
   88b64:	00840034 	movhi	r2,4096
   88b68:	10bfffc4 	addi	r2,r2,-1
   88b6c:	12801436 	bltu	r2,r10,88bc0 <__muldf3+0x2e8>
   88b70:	da001017 	ldw	r8,64(sp)
   88b74:	101f883a 	mov	r15,r2
   88b78:	4a45883a 	add	r2,r9,r9
   88b7c:	124d803a 	cmpltu	r6,r2,r9
   88b80:	5287883a 	add	r3,r10,r10
   88b84:	9497883a 	add	r11,r18,r18
   88b88:	5c8f803a 	cmpltu	r7,r11,r18
   88b8c:	9cd9883a 	add	r12,r19,r19
   88b90:	01000044 	movi	r4,1
   88b94:	30cd883a 	add	r6,r6,r3
   88b98:	3b0f883a 	add	r7,r7,r12
   88b9c:	423fffc4 	addi	r8,r8,-1
   88ba0:	1013883a 	mov	r9,r2
   88ba4:	3015883a 	mov	r10,r6
   88ba8:	111ab03a 	or	r13,r2,r4
   88bac:	98003016 	blt	r19,zero,88c70 <__muldf3+0x398>
   88bb0:	5825883a 	mov	r18,r11
   88bb4:	3827883a 	mov	r19,r7
   88bb8:	7abfef2e 	bgeu	r15,r10,88b78 <__muldf3+0x2a0>
   88bbc:	da001015 	stw	r8,64(sp)
   88bc0:	00803fc4 	movi	r2,255
   88bc4:	488e703a 	and	r7,r9,r2
   88bc8:	00802004 	movi	r2,128
   88bcc:	0007883a 	mov	r3,zero
   88bd0:	0011883a 	mov	r8,zero
   88bd4:	38801826 	beq	r7,r2,88c38 <__muldf3+0x360>
   88bd8:	008000c4 	movi	r2,3
   88bdc:	d9000e04 	addi	r4,sp,56
   88be0:	da801215 	stw	r10,72(sp)
   88be4:	d8800e15 	stw	r2,56(sp)
   88be8:	da401115 	stw	r9,68(sp)
   88bec:	003f6a06 	br	88998 <__muldf3+0xc0>
   88bf0:	89802126 	beq	r17,r6,88c78 <__muldf3+0x3a0>
   88bf4:	0009883a 	mov	r4,zero
   88bf8:	5105883a 	add	r2,r10,r4
   88bfc:	128d803a 	cmpltu	r6,r2,r10
   88c00:	5d07883a 	add	r3,r11,r20
   88c04:	30cd883a 	add	r6,r6,r3
   88c08:	0021883a 	mov	r16,zero
   88c0c:	0023883a 	mov	r17,zero
   88c10:	1025883a 	mov	r18,r2
   88c14:	3027883a 	mov	r19,r6
   88c18:	32ff9e2e 	bgeu	r6,r11,88a94 <__muldf3+0x1bc>
   88c1c:	00800044 	movi	r2,1
   88c20:	8089883a 	add	r4,r16,r2
   88c24:	240d803a 	cmpltu	r6,r4,r16
   88c28:	344d883a 	add	r6,r6,r17
   88c2c:	2021883a 	mov	r16,r4
   88c30:	3023883a 	mov	r17,r6
   88c34:	003f9806 	br	88a98 <__muldf3+0x1c0>
   88c38:	403fe71e 	bne	r8,zero,88bd8 <__muldf3+0x300>
   88c3c:	01004004 	movi	r4,256
   88c40:	4904703a 	and	r2,r9,r4
   88c44:	10c4b03a 	or	r2,r2,r3
   88c48:	103fe31e 	bne	r2,zero,88bd8 <__muldf3+0x300>
   88c4c:	94c4b03a 	or	r2,r18,r19
   88c50:	103fe126 	beq	r2,zero,88bd8 <__muldf3+0x300>
   88c54:	49c5883a 	add	r2,r9,r7
   88c58:	1251803a 	cmpltu	r8,r2,r9
   88c5c:	4291883a 	add	r8,r8,r10
   88c60:	013fc004 	movi	r4,-256
   88c64:	1112703a 	and	r9,r2,r4
   88c68:	4015883a 	mov	r10,r8
   88c6c:	003fda06 	br	88bd8 <__muldf3+0x300>
   88c70:	6813883a 	mov	r9,r13
   88c74:	003fce06 	br	88bb0 <__muldf3+0x2d8>
   88c78:	143f7c36 	bltu	r2,r16,88a6c <__muldf3+0x194>
   88c7c:	003fdd06 	br	88bf4 <__muldf3+0x31c>
   88c80:	12bf852e 	bgeu	r2,r10,88a98 <__muldf3+0x1c0>
   88c84:	003fe506 	br	88c1c <__muldf3+0x344>
   88c88:	00800084 	movi	r2,2
   88c8c:	20bf351e 	bne	r4,r2,88964 <__muldf3+0x8c>
   88c90:	01000274 	movhi	r4,9
   88c94:	2115e204 	addi	r4,r4,22408
   88c98:	003f3f06 	br	88998 <__muldf3+0xc0>

00088c9c <__divdf3>:
   88c9c:	deffed04 	addi	sp,sp,-76
   88ca0:	dcc01115 	stw	r19,68(sp)
   88ca4:	dcc00404 	addi	r19,sp,16
   88ca8:	2011883a 	mov	r8,r4
   88cac:	2813883a 	mov	r9,r5
   88cb0:	dc000e15 	stw	r16,56(sp)
   88cb4:	d809883a 	mov	r4,sp
   88cb8:	980b883a 	mov	r5,r19
   88cbc:	dc000904 	addi	r16,sp,36
   88cc0:	dfc01215 	stw	ra,72(sp)
   88cc4:	da400115 	stw	r9,4(sp)
   88cc8:	d9c00315 	stw	r7,12(sp)
   88ccc:	da000015 	stw	r8,0(sp)
   88cd0:	d9800215 	stw	r6,8(sp)
   88cd4:	dc801015 	stw	r18,64(sp)
   88cd8:	dc400f15 	stw	r17,60(sp)
   88cdc:	0089b3c0 	call	89b3c <__unpack_d>
   88ce0:	d9000204 	addi	r4,sp,8
   88ce4:	800b883a 	mov	r5,r16
   88ce8:	0089b3c0 	call	89b3c <__unpack_d>
   88cec:	d9000417 	ldw	r4,16(sp)
   88cf0:	00800044 	movi	r2,1
   88cf4:	11000b2e 	bgeu	r2,r4,88d24 <__divdf3+0x88>
   88cf8:	d9400917 	ldw	r5,36(sp)
   88cfc:	1140762e 	bgeu	r2,r5,88ed8 <__divdf3+0x23c>
   88d00:	d8800517 	ldw	r2,20(sp)
   88d04:	d8c00a17 	ldw	r3,40(sp)
   88d08:	01800104 	movi	r6,4
   88d0c:	10c4f03a 	xor	r2,r2,r3
   88d10:	d8800515 	stw	r2,20(sp)
   88d14:	21800226 	beq	r4,r6,88d20 <__divdf3+0x84>
   88d18:	00800084 	movi	r2,2
   88d1c:	2080141e 	bne	r4,r2,88d70 <__divdf3+0xd4>
   88d20:	29000926 	beq	r5,r4,88d48 <__divdf3+0xac>
   88d24:	9809883a 	mov	r4,r19
   88d28:	00898280 	call	89828 <__pack_d>
   88d2c:	dfc01217 	ldw	ra,72(sp)
   88d30:	dcc01117 	ldw	r19,68(sp)
   88d34:	dc801017 	ldw	r18,64(sp)
   88d38:	dc400f17 	ldw	r17,60(sp)
   88d3c:	dc000e17 	ldw	r16,56(sp)
   88d40:	dec01304 	addi	sp,sp,76
   88d44:	f800283a 	ret
   88d48:	01000274 	movhi	r4,9
   88d4c:	2115e204 	addi	r4,r4,22408
   88d50:	00898280 	call	89828 <__pack_d>
   88d54:	dfc01217 	ldw	ra,72(sp)
   88d58:	dcc01117 	ldw	r19,68(sp)
   88d5c:	dc801017 	ldw	r18,64(sp)
   88d60:	dc400f17 	ldw	r17,60(sp)
   88d64:	dc000e17 	ldw	r16,56(sp)
   88d68:	dec01304 	addi	sp,sp,76
   88d6c:	f800283a 	ret
   88d70:	29805b26 	beq	r5,r6,88ee0 <__divdf3+0x244>
   88d74:	28802d26 	beq	r5,r2,88e2c <__divdf3+0x190>
   88d78:	d8c00617 	ldw	r3,24(sp)
   88d7c:	d8800b17 	ldw	r2,44(sp)
   88d80:	d9c00817 	ldw	r7,32(sp)
   88d84:	dc400d17 	ldw	r17,52(sp)
   88d88:	188bc83a 	sub	r5,r3,r2
   88d8c:	d9800717 	ldw	r6,28(sp)
   88d90:	dc000c17 	ldw	r16,48(sp)
   88d94:	d9400615 	stw	r5,24(sp)
   88d98:	3c403836 	bltu	r7,r17,88e7c <__divdf3+0x1e0>
   88d9c:	89c03626 	beq	r17,r7,88e78 <__divdf3+0x1dc>
   88da0:	0015883a 	mov	r10,zero
   88da4:	001d883a 	mov	r14,zero
   88da8:	02c40034 	movhi	r11,4096
   88dac:	001f883a 	mov	r15,zero
   88db0:	003f883a 	mov	ra,zero
   88db4:	04800f44 	movi	r18,61
   88db8:	00000f06 	br	88df8 <__divdf3+0x15c>
   88dbc:	601d883a 	mov	r14,r12
   88dc0:	681f883a 	mov	r15,r13
   88dc4:	400d883a 	mov	r6,r8
   88dc8:	100f883a 	mov	r7,r2
   88dcc:	3191883a 	add	r8,r6,r6
   88dd0:	5808d07a 	srli	r4,r11,1
   88dd4:	4185803a 	cmpltu	r2,r8,r6
   88dd8:	39d3883a 	add	r9,r7,r7
   88ddc:	28c6b03a 	or	r3,r5,r3
   88de0:	1245883a 	add	r2,r2,r9
   88de4:	1815883a 	mov	r10,r3
   88de8:	2017883a 	mov	r11,r4
   88dec:	400d883a 	mov	r6,r8
   88df0:	100f883a 	mov	r7,r2
   88df4:	fc801726 	beq	ra,r18,88e54 <__divdf3+0x1b8>
   88df8:	580a97fa 	slli	r5,r11,31
   88dfc:	5006d07a 	srli	r3,r10,1
   88e00:	ffc00044 	addi	ra,ra,1
   88e04:	3c7ff136 	bltu	r7,r17,88dcc <__divdf3+0x130>
   88e08:	3411c83a 	sub	r8,r6,r16
   88e0c:	3205803a 	cmpltu	r2,r6,r8
   88e10:	3c53c83a 	sub	r9,r7,r17
   88e14:	7298b03a 	or	r12,r14,r10
   88e18:	7adab03a 	or	r13,r15,r11
   88e1c:	4885c83a 	sub	r2,r9,r2
   88e20:	89ffe61e 	bne	r17,r7,88dbc <__divdf3+0x120>
   88e24:	343fe936 	bltu	r6,r16,88dcc <__divdf3+0x130>
   88e28:	003fe406 	br	88dbc <__divdf3+0x120>
   88e2c:	9809883a 	mov	r4,r19
   88e30:	d9800415 	stw	r6,16(sp)
   88e34:	00898280 	call	89828 <__pack_d>
   88e38:	dfc01217 	ldw	ra,72(sp)
   88e3c:	dcc01117 	ldw	r19,68(sp)
   88e40:	dc801017 	ldw	r18,64(sp)
   88e44:	dc400f17 	ldw	r17,60(sp)
   88e48:	dc000e17 	ldw	r16,56(sp)
   88e4c:	dec01304 	addi	sp,sp,76
   88e50:	f800283a 	ret
   88e54:	00803fc4 	movi	r2,255
   88e58:	7090703a 	and	r8,r14,r2
   88e5c:	00802004 	movi	r2,128
   88e60:	0007883a 	mov	r3,zero
   88e64:	0013883a 	mov	r9,zero
   88e68:	40800d26 	beq	r8,r2,88ea0 <__divdf3+0x204>
   88e6c:	dbc00815 	stw	r15,32(sp)
   88e70:	db800715 	stw	r14,28(sp)
   88e74:	003fab06 	br	88d24 <__divdf3+0x88>
   88e78:	343fc92e 	bgeu	r6,r16,88da0 <__divdf3+0x104>
   88e7c:	3185883a 	add	r2,r6,r6
   88e80:	1189803a 	cmpltu	r4,r2,r6
   88e84:	39c7883a 	add	r3,r7,r7
   88e88:	20c9883a 	add	r4,r4,r3
   88e8c:	297fffc4 	addi	r5,r5,-1
   88e90:	100d883a 	mov	r6,r2
   88e94:	200f883a 	mov	r7,r4
   88e98:	d9400615 	stw	r5,24(sp)
   88e9c:	003fc006 	br	88da0 <__divdf3+0x104>
   88ea0:	483ff21e 	bne	r9,zero,88e6c <__divdf3+0x1d0>
   88ea4:	01004004 	movi	r4,256
   88ea8:	7104703a 	and	r2,r14,r4
   88eac:	10c4b03a 	or	r2,r2,r3
   88eb0:	103fee1e 	bne	r2,zero,88e6c <__divdf3+0x1d0>
   88eb4:	31c4b03a 	or	r2,r6,r7
   88eb8:	103fec26 	beq	r2,zero,88e6c <__divdf3+0x1d0>
   88ebc:	7205883a 	add	r2,r14,r8
   88ec0:	1391803a 	cmpltu	r8,r2,r14
   88ec4:	43d1883a 	add	r8,r8,r15
   88ec8:	013fc004 	movi	r4,-256
   88ecc:	111c703a 	and	r14,r2,r4
   88ed0:	401f883a 	mov	r15,r8
   88ed4:	003fe506 	br	88e6c <__divdf3+0x1d0>
   88ed8:	8009883a 	mov	r4,r16
   88edc:	003f9206 	br	88d28 <__divdf3+0x8c>
   88ee0:	9809883a 	mov	r4,r19
   88ee4:	d8000715 	stw	zero,28(sp)
   88ee8:	d8000815 	stw	zero,32(sp)
   88eec:	d8000615 	stw	zero,24(sp)
   88ef0:	003f8d06 	br	88d28 <__divdf3+0x8c>

00088ef4 <__eqdf2>:
   88ef4:	deffef04 	addi	sp,sp,-68
   88ef8:	dc400f15 	stw	r17,60(sp)
   88efc:	dc400404 	addi	r17,sp,16
   88f00:	2005883a 	mov	r2,r4
   88f04:	2807883a 	mov	r3,r5
   88f08:	dc000e15 	stw	r16,56(sp)
   88f0c:	d809883a 	mov	r4,sp
   88f10:	880b883a 	mov	r5,r17
   88f14:	dc000904 	addi	r16,sp,36
   88f18:	d8c00115 	stw	r3,4(sp)
   88f1c:	d8800015 	stw	r2,0(sp)
   88f20:	d9800215 	stw	r6,8(sp)
   88f24:	dfc01015 	stw	ra,64(sp)
   88f28:	d9c00315 	stw	r7,12(sp)
   88f2c:	0089b3c0 	call	89b3c <__unpack_d>
   88f30:	d9000204 	addi	r4,sp,8
   88f34:	800b883a 	mov	r5,r16
   88f38:	0089b3c0 	call	89b3c <__unpack_d>
   88f3c:	d8800417 	ldw	r2,16(sp)
   88f40:	00c00044 	movi	r3,1
   88f44:	180d883a 	mov	r6,r3
   88f48:	1880062e 	bgeu	r3,r2,88f64 <__eqdf2+0x70>
   88f4c:	d8800917 	ldw	r2,36(sp)
   88f50:	8809883a 	mov	r4,r17
   88f54:	800b883a 	mov	r5,r16
   88f58:	1880022e 	bgeu	r3,r2,88f64 <__eqdf2+0x70>
   88f5c:	0089c740 	call	89c74 <__fpcmp_parts_d>
   88f60:	100d883a 	mov	r6,r2
   88f64:	3005883a 	mov	r2,r6
   88f68:	dfc01017 	ldw	ra,64(sp)
   88f6c:	dc400f17 	ldw	r17,60(sp)
   88f70:	dc000e17 	ldw	r16,56(sp)
   88f74:	dec01104 	addi	sp,sp,68
   88f78:	f800283a 	ret

00088f7c <__nedf2>:
   88f7c:	deffef04 	addi	sp,sp,-68
   88f80:	dc400f15 	stw	r17,60(sp)
   88f84:	dc400404 	addi	r17,sp,16
   88f88:	2005883a 	mov	r2,r4
   88f8c:	2807883a 	mov	r3,r5
   88f90:	dc000e15 	stw	r16,56(sp)
   88f94:	d809883a 	mov	r4,sp
   88f98:	880b883a 	mov	r5,r17
   88f9c:	dc000904 	addi	r16,sp,36
   88fa0:	d8c00115 	stw	r3,4(sp)
   88fa4:	d8800015 	stw	r2,0(sp)
   88fa8:	d9800215 	stw	r6,8(sp)
   88fac:	dfc01015 	stw	ra,64(sp)
   88fb0:	d9c00315 	stw	r7,12(sp)
   88fb4:	0089b3c0 	call	89b3c <__unpack_d>
   88fb8:	d9000204 	addi	r4,sp,8
   88fbc:	800b883a 	mov	r5,r16
   88fc0:	0089b3c0 	call	89b3c <__unpack_d>
   88fc4:	d8800417 	ldw	r2,16(sp)
   88fc8:	00c00044 	movi	r3,1
   88fcc:	180d883a 	mov	r6,r3
   88fd0:	1880062e 	bgeu	r3,r2,88fec <__nedf2+0x70>
   88fd4:	d8800917 	ldw	r2,36(sp)
   88fd8:	8809883a 	mov	r4,r17
   88fdc:	800b883a 	mov	r5,r16
   88fe0:	1880022e 	bgeu	r3,r2,88fec <__nedf2+0x70>
   88fe4:	0089c740 	call	89c74 <__fpcmp_parts_d>
   88fe8:	100d883a 	mov	r6,r2
   88fec:	3005883a 	mov	r2,r6
   88ff0:	dfc01017 	ldw	ra,64(sp)
   88ff4:	dc400f17 	ldw	r17,60(sp)
   88ff8:	dc000e17 	ldw	r16,56(sp)
   88ffc:	dec01104 	addi	sp,sp,68
   89000:	f800283a 	ret

00089004 <__gtdf2>:
   89004:	deffef04 	addi	sp,sp,-68
   89008:	dc400f15 	stw	r17,60(sp)
   8900c:	dc400404 	addi	r17,sp,16
   89010:	2005883a 	mov	r2,r4
   89014:	2807883a 	mov	r3,r5
   89018:	dc000e15 	stw	r16,56(sp)
   8901c:	d809883a 	mov	r4,sp
   89020:	880b883a 	mov	r5,r17
   89024:	dc000904 	addi	r16,sp,36
   89028:	d8c00115 	stw	r3,4(sp)
   8902c:	d8800015 	stw	r2,0(sp)
   89030:	d9800215 	stw	r6,8(sp)
   89034:	dfc01015 	stw	ra,64(sp)
   89038:	d9c00315 	stw	r7,12(sp)
   8903c:	0089b3c0 	call	89b3c <__unpack_d>
   89040:	d9000204 	addi	r4,sp,8
   89044:	800b883a 	mov	r5,r16
   89048:	0089b3c0 	call	89b3c <__unpack_d>
   8904c:	d8800417 	ldw	r2,16(sp)
   89050:	00c00044 	movi	r3,1
   89054:	01bfffc4 	movi	r6,-1
   89058:	1880062e 	bgeu	r3,r2,89074 <__gtdf2+0x70>
   8905c:	d8800917 	ldw	r2,36(sp)
   89060:	8809883a 	mov	r4,r17
   89064:	800b883a 	mov	r5,r16
   89068:	1880022e 	bgeu	r3,r2,89074 <__gtdf2+0x70>
   8906c:	0089c740 	call	89c74 <__fpcmp_parts_d>
   89070:	100d883a 	mov	r6,r2
   89074:	3005883a 	mov	r2,r6
   89078:	dfc01017 	ldw	ra,64(sp)
   8907c:	dc400f17 	ldw	r17,60(sp)
   89080:	dc000e17 	ldw	r16,56(sp)
   89084:	dec01104 	addi	sp,sp,68
   89088:	f800283a 	ret

0008908c <__gedf2>:
   8908c:	deffef04 	addi	sp,sp,-68
   89090:	dc400f15 	stw	r17,60(sp)
   89094:	dc400404 	addi	r17,sp,16
   89098:	2005883a 	mov	r2,r4
   8909c:	2807883a 	mov	r3,r5
   890a0:	dc000e15 	stw	r16,56(sp)
   890a4:	d809883a 	mov	r4,sp
   890a8:	880b883a 	mov	r5,r17
   890ac:	dc000904 	addi	r16,sp,36
   890b0:	d8c00115 	stw	r3,4(sp)
   890b4:	d8800015 	stw	r2,0(sp)
   890b8:	d9800215 	stw	r6,8(sp)
   890bc:	dfc01015 	stw	ra,64(sp)
   890c0:	d9c00315 	stw	r7,12(sp)
   890c4:	0089b3c0 	call	89b3c <__unpack_d>
   890c8:	d9000204 	addi	r4,sp,8
   890cc:	800b883a 	mov	r5,r16
   890d0:	0089b3c0 	call	89b3c <__unpack_d>
   890d4:	d8800417 	ldw	r2,16(sp)
   890d8:	00c00044 	movi	r3,1
   890dc:	01bfffc4 	movi	r6,-1
   890e0:	1880062e 	bgeu	r3,r2,890fc <__gedf2+0x70>
   890e4:	d8800917 	ldw	r2,36(sp)
   890e8:	8809883a 	mov	r4,r17
   890ec:	800b883a 	mov	r5,r16
   890f0:	1880022e 	bgeu	r3,r2,890fc <__gedf2+0x70>
   890f4:	0089c740 	call	89c74 <__fpcmp_parts_d>
   890f8:	100d883a 	mov	r6,r2
   890fc:	3005883a 	mov	r2,r6
   89100:	dfc01017 	ldw	ra,64(sp)
   89104:	dc400f17 	ldw	r17,60(sp)
   89108:	dc000e17 	ldw	r16,56(sp)
   8910c:	dec01104 	addi	sp,sp,68
   89110:	f800283a 	ret

00089114 <__ltdf2>:
   89114:	deffef04 	addi	sp,sp,-68
   89118:	dc400f15 	stw	r17,60(sp)
   8911c:	dc400404 	addi	r17,sp,16
   89120:	2005883a 	mov	r2,r4
   89124:	2807883a 	mov	r3,r5
   89128:	dc000e15 	stw	r16,56(sp)
   8912c:	d809883a 	mov	r4,sp
   89130:	880b883a 	mov	r5,r17
   89134:	dc000904 	addi	r16,sp,36
   89138:	d8c00115 	stw	r3,4(sp)
   8913c:	d8800015 	stw	r2,0(sp)
   89140:	d9800215 	stw	r6,8(sp)
   89144:	dfc01015 	stw	ra,64(sp)
   89148:	d9c00315 	stw	r7,12(sp)
   8914c:	0089b3c0 	call	89b3c <__unpack_d>
   89150:	d9000204 	addi	r4,sp,8
   89154:	800b883a 	mov	r5,r16
   89158:	0089b3c0 	call	89b3c <__unpack_d>
   8915c:	d8800417 	ldw	r2,16(sp)
   89160:	00c00044 	movi	r3,1
   89164:	180d883a 	mov	r6,r3
   89168:	1880062e 	bgeu	r3,r2,89184 <__ltdf2+0x70>
   8916c:	d8800917 	ldw	r2,36(sp)
   89170:	8809883a 	mov	r4,r17
   89174:	800b883a 	mov	r5,r16
   89178:	1880022e 	bgeu	r3,r2,89184 <__ltdf2+0x70>
   8917c:	0089c740 	call	89c74 <__fpcmp_parts_d>
   89180:	100d883a 	mov	r6,r2
   89184:	3005883a 	mov	r2,r6
   89188:	dfc01017 	ldw	ra,64(sp)
   8918c:	dc400f17 	ldw	r17,60(sp)
   89190:	dc000e17 	ldw	r16,56(sp)
   89194:	dec01104 	addi	sp,sp,68
   89198:	f800283a 	ret

0008919c <__floatsidf>:
   8919c:	2006d7fa 	srli	r3,r4,31
   891a0:	defff604 	addi	sp,sp,-40
   891a4:	008000c4 	movi	r2,3
   891a8:	dfc00915 	stw	ra,36(sp)
   891ac:	dcc00815 	stw	r19,32(sp)
   891b0:	dc800715 	stw	r18,28(sp)
   891b4:	dc400615 	stw	r17,24(sp)
   891b8:	dc000515 	stw	r16,20(sp)
   891bc:	d8800015 	stw	r2,0(sp)
   891c0:	d8c00115 	stw	r3,4(sp)
   891c4:	20000f1e 	bne	r4,zero,89204 <__floatsidf+0x68>
   891c8:	00800084 	movi	r2,2
   891cc:	d8800015 	stw	r2,0(sp)
   891d0:	d809883a 	mov	r4,sp
   891d4:	00898280 	call	89828 <__pack_d>
   891d8:	1009883a 	mov	r4,r2
   891dc:	180b883a 	mov	r5,r3
   891e0:	2005883a 	mov	r2,r4
   891e4:	2807883a 	mov	r3,r5
   891e8:	dfc00917 	ldw	ra,36(sp)
   891ec:	dcc00817 	ldw	r19,32(sp)
   891f0:	dc800717 	ldw	r18,28(sp)
   891f4:	dc400617 	ldw	r17,24(sp)
   891f8:	dc000517 	ldw	r16,20(sp)
   891fc:	dec00a04 	addi	sp,sp,40
   89200:	f800283a 	ret
   89204:	00800f04 	movi	r2,60
   89208:	1807003a 	cmpeq	r3,r3,zero
   8920c:	d8800215 	stw	r2,8(sp)
   89210:	18001126 	beq	r3,zero,89258 <__floatsidf+0xbc>
   89214:	0027883a 	mov	r19,zero
   89218:	2025883a 	mov	r18,r4
   8921c:	d9000315 	stw	r4,12(sp)
   89220:	dcc00415 	stw	r19,16(sp)
   89224:	00897a80 	call	897a8 <__clzsi2>
   89228:	11000744 	addi	r4,r2,29
   8922c:	013fe80e 	bge	zero,r4,891d0 <__floatsidf+0x34>
   89230:	10bfff44 	addi	r2,r2,-3
   89234:	10000c16 	blt	r2,zero,89268 <__floatsidf+0xcc>
   89238:	90a2983a 	sll	r17,r18,r2
   8923c:	0021883a 	mov	r16,zero
   89240:	d8800217 	ldw	r2,8(sp)
   89244:	dc400415 	stw	r17,16(sp)
   89248:	dc000315 	stw	r16,12(sp)
   8924c:	1105c83a 	sub	r2,r2,r4
   89250:	d8800215 	stw	r2,8(sp)
   89254:	003fde06 	br	891d0 <__floatsidf+0x34>
   89258:	00a00034 	movhi	r2,32768
   8925c:	20800a26 	beq	r4,r2,89288 <__floatsidf+0xec>
   89260:	0109c83a 	sub	r4,zero,r4
   89264:	003feb06 	br	89214 <__floatsidf+0x78>
   89268:	9006d07a 	srli	r3,r18,1
   8926c:	008007c4 	movi	r2,31
   89270:	1105c83a 	sub	r2,r2,r4
   89274:	1886d83a 	srl	r3,r3,r2
   89278:	9922983a 	sll	r17,r19,r4
   8927c:	9120983a 	sll	r16,r18,r4
   89280:	1c62b03a 	or	r17,r3,r17
   89284:	003fee06 	br	89240 <__floatsidf+0xa4>
   89288:	0009883a 	mov	r4,zero
   8928c:	01707834 	movhi	r5,49632
   89290:	003fd306 	br	891e0 <__floatsidf+0x44>

00089294 <__fixdfsi>:
   89294:	defff804 	addi	sp,sp,-32
   89298:	2005883a 	mov	r2,r4
   8929c:	2807883a 	mov	r3,r5
   892a0:	d809883a 	mov	r4,sp
   892a4:	d9400204 	addi	r5,sp,8
   892a8:	d8c00115 	stw	r3,4(sp)
   892ac:	d8800015 	stw	r2,0(sp)
   892b0:	dfc00715 	stw	ra,28(sp)
   892b4:	0089b3c0 	call	89b3c <__unpack_d>
   892b8:	d8c00217 	ldw	r3,8(sp)
   892bc:	00800084 	movi	r2,2
   892c0:	1880051e 	bne	r3,r2,892d8 <__fixdfsi+0x44>
   892c4:	0007883a 	mov	r3,zero
   892c8:	1805883a 	mov	r2,r3
   892cc:	dfc00717 	ldw	ra,28(sp)
   892d0:	dec00804 	addi	sp,sp,32
   892d4:	f800283a 	ret
   892d8:	00800044 	movi	r2,1
   892dc:	10fff92e 	bgeu	r2,r3,892c4 <__fixdfsi+0x30>
   892e0:	00800104 	movi	r2,4
   892e4:	18800426 	beq	r3,r2,892f8 <__fixdfsi+0x64>
   892e8:	d8c00417 	ldw	r3,16(sp)
   892ec:	183ff516 	blt	r3,zero,892c4 <__fixdfsi+0x30>
   892f0:	00800784 	movi	r2,30
   892f4:	10c0080e 	bge	r2,r3,89318 <__fixdfsi+0x84>
   892f8:	d8800317 	ldw	r2,12(sp)
   892fc:	1000121e 	bne	r2,zero,89348 <__fixdfsi+0xb4>
   89300:	00e00034 	movhi	r3,32768
   89304:	18ffffc4 	addi	r3,r3,-1
   89308:	1805883a 	mov	r2,r3
   8930c:	dfc00717 	ldw	ra,28(sp)
   89310:	dec00804 	addi	sp,sp,32
   89314:	f800283a 	ret
   89318:	00800f04 	movi	r2,60
   8931c:	10d1c83a 	sub	r8,r2,r3
   89320:	40bff804 	addi	r2,r8,-32
   89324:	d9800517 	ldw	r6,20(sp)
   89328:	d9c00617 	ldw	r7,24(sp)
   8932c:	10000816 	blt	r2,zero,89350 <__fixdfsi+0xbc>
   89330:	3888d83a 	srl	r4,r7,r2
   89334:	d8800317 	ldw	r2,12(sp)
   89338:	2007883a 	mov	r3,r4
   8933c:	103fe226 	beq	r2,zero,892c8 <__fixdfsi+0x34>
   89340:	0107c83a 	sub	r3,zero,r4
   89344:	003fe006 	br	892c8 <__fixdfsi+0x34>
   89348:	00e00034 	movhi	r3,32768
   8934c:	003fde06 	br	892c8 <__fixdfsi+0x34>
   89350:	39c7883a 	add	r3,r7,r7
   89354:	008007c4 	movi	r2,31
   89358:	1205c83a 	sub	r2,r2,r8
   8935c:	1886983a 	sll	r3,r3,r2
   89360:	3208d83a 	srl	r4,r6,r8
   89364:	1908b03a 	or	r4,r3,r4
   89368:	003ff206 	br	89334 <__fixdfsi+0xa0>

0008936c <__floatunsidf>:
   8936c:	defff204 	addi	sp,sp,-56
   89370:	dfc00d15 	stw	ra,52(sp)
   89374:	ddc00c15 	stw	r23,48(sp)
   89378:	dd800b15 	stw	r22,44(sp)
   8937c:	dd400a15 	stw	r21,40(sp)
   89380:	dd000915 	stw	r20,36(sp)
   89384:	dcc00815 	stw	r19,32(sp)
   89388:	dc800715 	stw	r18,28(sp)
   8938c:	dc400615 	stw	r17,24(sp)
   89390:	dc000515 	stw	r16,20(sp)
   89394:	d8000115 	stw	zero,4(sp)
   89398:	20000f1e 	bne	r4,zero,893d8 <__floatunsidf+0x6c>
   8939c:	00800084 	movi	r2,2
   893a0:	d8800015 	stw	r2,0(sp)
   893a4:	d809883a 	mov	r4,sp
   893a8:	00898280 	call	89828 <__pack_d>
   893ac:	dfc00d17 	ldw	ra,52(sp)
   893b0:	ddc00c17 	ldw	r23,48(sp)
   893b4:	dd800b17 	ldw	r22,44(sp)
   893b8:	dd400a17 	ldw	r21,40(sp)
   893bc:	dd000917 	ldw	r20,36(sp)
   893c0:	dcc00817 	ldw	r19,32(sp)
   893c4:	dc800717 	ldw	r18,28(sp)
   893c8:	dc400617 	ldw	r17,24(sp)
   893cc:	dc000517 	ldw	r16,20(sp)
   893d0:	dec00e04 	addi	sp,sp,56
   893d4:	f800283a 	ret
   893d8:	008000c4 	movi	r2,3
   893dc:	00c00f04 	movi	r3,60
   893e0:	002f883a 	mov	r23,zero
   893e4:	202d883a 	mov	r22,r4
   893e8:	d8800015 	stw	r2,0(sp)
   893ec:	d8c00215 	stw	r3,8(sp)
   893f0:	d9000315 	stw	r4,12(sp)
   893f4:	ddc00415 	stw	r23,16(sp)
   893f8:	00897a80 	call	897a8 <__clzsi2>
   893fc:	12400744 	addi	r9,r2,29
   89400:	48000b16 	blt	r9,zero,89430 <__floatunsidf+0xc4>
   89404:	483fe726 	beq	r9,zero,893a4 <__floatunsidf+0x38>
   89408:	10bfff44 	addi	r2,r2,-3
   8940c:	10002e16 	blt	r2,zero,894c8 <__floatunsidf+0x15c>
   89410:	b0a2983a 	sll	r17,r22,r2
   89414:	0021883a 	mov	r16,zero
   89418:	d8800217 	ldw	r2,8(sp)
   8941c:	dc400415 	stw	r17,16(sp)
   89420:	dc000315 	stw	r16,12(sp)
   89424:	1245c83a 	sub	r2,r2,r9
   89428:	d8800215 	stw	r2,8(sp)
   8942c:	003fdd06 	br	893a4 <__floatunsidf+0x38>
   89430:	0255c83a 	sub	r10,zero,r9
   89434:	51bff804 	addi	r6,r10,-32
   89438:	30001b16 	blt	r6,zero,894a8 <__floatunsidf+0x13c>
   8943c:	b9a8d83a 	srl	r20,r23,r6
   89440:	002b883a 	mov	r21,zero
   89444:	000f883a 	mov	r7,zero
   89448:	01000044 	movi	r4,1
   8944c:	0011883a 	mov	r8,zero
   89450:	30002516 	blt	r6,zero,894e8 <__floatunsidf+0x17c>
   89454:	21a6983a 	sll	r19,r4,r6
   89458:	0025883a 	mov	r18,zero
   8945c:	00bfffc4 	movi	r2,-1
   89460:	9089883a 	add	r4,r18,r2
   89464:	988b883a 	add	r5,r19,r2
   89468:	248d803a 	cmpltu	r6,r4,r18
   8946c:	314b883a 	add	r5,r6,r5
   89470:	b104703a 	and	r2,r22,r4
   89474:	b946703a 	and	r3,r23,r5
   89478:	10c4b03a 	or	r2,r2,r3
   8947c:	10000226 	beq	r2,zero,89488 <__floatunsidf+0x11c>
   89480:	01c00044 	movi	r7,1
   89484:	0011883a 	mov	r8,zero
   89488:	d9000217 	ldw	r4,8(sp)
   8948c:	a1c4b03a 	or	r2,r20,r7
   89490:	aa06b03a 	or	r3,r21,r8
   89494:	2249c83a 	sub	r4,r4,r9
   89498:	d8c00415 	stw	r3,16(sp)
   8949c:	d9000215 	stw	r4,8(sp)
   894a0:	d8800315 	stw	r2,12(sp)
   894a4:	003fbf06 	br	893a4 <__floatunsidf+0x38>
   894a8:	bdc7883a 	add	r3,r23,r23
   894ac:	008007c4 	movi	r2,31
   894b0:	1285c83a 	sub	r2,r2,r10
   894b4:	1886983a 	sll	r3,r3,r2
   894b8:	b2a8d83a 	srl	r20,r22,r10
   894bc:	baaad83a 	srl	r21,r23,r10
   894c0:	1d28b03a 	or	r20,r3,r20
   894c4:	003fdf06 	br	89444 <__floatunsidf+0xd8>
   894c8:	b006d07a 	srli	r3,r22,1
   894cc:	008007c4 	movi	r2,31
   894d0:	1245c83a 	sub	r2,r2,r9
   894d4:	1886d83a 	srl	r3,r3,r2
   894d8:	ba62983a 	sll	r17,r23,r9
   894dc:	b260983a 	sll	r16,r22,r9
   894e0:	1c62b03a 	or	r17,r3,r17
   894e4:	003fcc06 	br	89418 <__floatunsidf+0xac>
   894e8:	2006d07a 	srli	r3,r4,1
   894ec:	008007c4 	movi	r2,31
   894f0:	1285c83a 	sub	r2,r2,r10
   894f4:	18a6d83a 	srl	r19,r3,r2
   894f8:	22a4983a 	sll	r18,r4,r10
   894fc:	003fd706 	br	8945c <__floatunsidf+0xf0>

00089500 <udivmodsi4>:
   89500:	29001b2e 	bgeu	r5,r4,89570 <udivmodsi4+0x70>
   89504:	28001a16 	blt	r5,zero,89570 <udivmodsi4+0x70>
   89508:	00800044 	movi	r2,1
   8950c:	0007883a 	mov	r3,zero
   89510:	01c007c4 	movi	r7,31
   89514:	00000306 	br	89524 <udivmodsi4+0x24>
   89518:	19c01326 	beq	r3,r7,89568 <udivmodsi4+0x68>
   8951c:	18c00044 	addi	r3,r3,1
   89520:	28000416 	blt	r5,zero,89534 <udivmodsi4+0x34>
   89524:	294b883a 	add	r5,r5,r5
   89528:	1085883a 	add	r2,r2,r2
   8952c:	293ffa36 	bltu	r5,r4,89518 <udivmodsi4+0x18>
   89530:	10000d26 	beq	r2,zero,89568 <udivmodsi4+0x68>
   89534:	0007883a 	mov	r3,zero
   89538:	21400236 	bltu	r4,r5,89544 <udivmodsi4+0x44>
   8953c:	2149c83a 	sub	r4,r4,r5
   89540:	1886b03a 	or	r3,r3,r2
   89544:	1004d07a 	srli	r2,r2,1
   89548:	280ad07a 	srli	r5,r5,1
   8954c:	103ffa1e 	bne	r2,zero,89538 <udivmodsi4+0x38>
   89550:	30000226 	beq	r6,zero,8955c <udivmodsi4+0x5c>
   89554:	2005883a 	mov	r2,r4
   89558:	f800283a 	ret
   8955c:	1809883a 	mov	r4,r3
   89560:	2005883a 	mov	r2,r4
   89564:	f800283a 	ret
   89568:	0007883a 	mov	r3,zero
   8956c:	003ff806 	br	89550 <udivmodsi4+0x50>
   89570:	00800044 	movi	r2,1
   89574:	0007883a 	mov	r3,zero
   89578:	003fef06 	br	89538 <udivmodsi4+0x38>

0008957c <__divsi3>:
   8957c:	defffe04 	addi	sp,sp,-8
   89580:	dc000015 	stw	r16,0(sp)
   89584:	dfc00115 	stw	ra,4(sp)
   89588:	0021883a 	mov	r16,zero
   8958c:	20000c16 	blt	r4,zero,895c0 <__divsi3+0x44>
   89590:	000d883a 	mov	r6,zero
   89594:	28000e16 	blt	r5,zero,895d0 <__divsi3+0x54>
   89598:	00895000 	call	89500 <udivmodsi4>
   8959c:	1007883a 	mov	r3,r2
   895a0:	8005003a 	cmpeq	r2,r16,zero
   895a4:	1000011e 	bne	r2,zero,895ac <__divsi3+0x30>
   895a8:	00c7c83a 	sub	r3,zero,r3
   895ac:	1805883a 	mov	r2,r3
   895b0:	dfc00117 	ldw	ra,4(sp)
   895b4:	dc000017 	ldw	r16,0(sp)
   895b8:	dec00204 	addi	sp,sp,8
   895bc:	f800283a 	ret
   895c0:	0109c83a 	sub	r4,zero,r4
   895c4:	04000044 	movi	r16,1
   895c8:	000d883a 	mov	r6,zero
   895cc:	283ff20e 	bge	r5,zero,89598 <__divsi3+0x1c>
   895d0:	014bc83a 	sub	r5,zero,r5
   895d4:	8021003a 	cmpeq	r16,r16,zero
   895d8:	003fef06 	br	89598 <__divsi3+0x1c>

000895dc <__modsi3>:
   895dc:	deffff04 	addi	sp,sp,-4
   895e0:	dfc00015 	stw	ra,0(sp)
   895e4:	01800044 	movi	r6,1
   895e8:	2807883a 	mov	r3,r5
   895ec:	20000416 	blt	r4,zero,89600 <__modsi3+0x24>
   895f0:	28000c16 	blt	r5,zero,89624 <__modsi3+0x48>
   895f4:	dfc00017 	ldw	ra,0(sp)
   895f8:	dec00104 	addi	sp,sp,4
   895fc:	00895001 	jmpi	89500 <udivmodsi4>
   89600:	0109c83a 	sub	r4,zero,r4
   89604:	28000b16 	blt	r5,zero,89634 <__modsi3+0x58>
   89608:	180b883a 	mov	r5,r3
   8960c:	01800044 	movi	r6,1
   89610:	00895000 	call	89500 <udivmodsi4>
   89614:	0085c83a 	sub	r2,zero,r2
   89618:	dfc00017 	ldw	ra,0(sp)
   8961c:	dec00104 	addi	sp,sp,4
   89620:	f800283a 	ret
   89624:	014bc83a 	sub	r5,zero,r5
   89628:	dfc00017 	ldw	ra,0(sp)
   8962c:	dec00104 	addi	sp,sp,4
   89630:	00895001 	jmpi	89500 <udivmodsi4>
   89634:	0147c83a 	sub	r3,zero,r5
   89638:	003ff306 	br	89608 <__modsi3+0x2c>

0008963c <__udivsi3>:
   8963c:	000d883a 	mov	r6,zero
   89640:	00895001 	jmpi	89500 <udivmodsi4>

00089644 <__umodsi3>:
   89644:	01800044 	movi	r6,1
   89648:	00895001 	jmpi	89500 <udivmodsi4>

0008964c <__mulsi3>:
   8964c:	20000a26 	beq	r4,zero,89678 <__mulsi3+0x2c>
   89650:	0007883a 	mov	r3,zero
   89654:	2080004c 	andi	r2,r4,1
   89658:	1005003a 	cmpeq	r2,r2,zero
   8965c:	2008d07a 	srli	r4,r4,1
   89660:	1000011e 	bne	r2,zero,89668 <__mulsi3+0x1c>
   89664:	1947883a 	add	r3,r3,r5
   89668:	294b883a 	add	r5,r5,r5
   8966c:	203ff91e 	bne	r4,zero,89654 <__mulsi3+0x8>
   89670:	1805883a 	mov	r2,r3
   89674:	f800283a 	ret
   89678:	0007883a 	mov	r3,zero
   8967c:	1805883a 	mov	r2,r3
   89680:	f800283a 	ret

00089684 <__muldi3>:
   89684:	defff204 	addi	sp,sp,-56
   89688:	df000c15 	stw	fp,48(sp)
   8968c:	3038d43a 	srli	fp,r6,16
   89690:	dd000815 	stw	r20,32(sp)
   89694:	dc400515 	stw	r17,20(sp)
   89698:	2028d43a 	srli	r20,r4,16
   8969c:	247fffcc 	andi	r17,r4,65535
   896a0:	dc000415 	stw	r16,16(sp)
   896a4:	343fffcc 	andi	r16,r6,65535
   896a8:	dcc00715 	stw	r19,28(sp)
   896ac:	d9000015 	stw	r4,0(sp)
   896b0:	2827883a 	mov	r19,r5
   896b4:	8809883a 	mov	r4,r17
   896b8:	d9400115 	stw	r5,4(sp)
   896bc:	800b883a 	mov	r5,r16
   896c0:	d9800215 	stw	r6,8(sp)
   896c4:	dfc00d15 	stw	ra,52(sp)
   896c8:	d9c00315 	stw	r7,12(sp)
   896cc:	dd800a15 	stw	r22,40(sp)
   896d0:	dd400915 	stw	r21,36(sp)
   896d4:	302d883a 	mov	r22,r6
   896d8:	ddc00b15 	stw	r23,44(sp)
   896dc:	dc800615 	stw	r18,24(sp)
   896e0:	008964c0 	call	8964c <__mulsi3>
   896e4:	8809883a 	mov	r4,r17
   896e8:	e00b883a 	mov	r5,fp
   896ec:	102b883a 	mov	r21,r2
   896f0:	008964c0 	call	8964c <__mulsi3>
   896f4:	800b883a 	mov	r5,r16
   896f8:	a009883a 	mov	r4,r20
   896fc:	1023883a 	mov	r17,r2
   89700:	008964c0 	call	8964c <__mulsi3>
   89704:	a009883a 	mov	r4,r20
   89708:	e00b883a 	mov	r5,fp
   8970c:	1021883a 	mov	r16,r2
   89710:	008964c0 	call	8964c <__mulsi3>
   89714:	a8ffffcc 	andi	r3,r21,65535
   89718:	a82ad43a 	srli	r21,r21,16
   8971c:	8c23883a 	add	r17,r17,r16
   89720:	1011883a 	mov	r8,r2
   89724:	ac6b883a 	add	r21,r21,r17
   89728:	a804943a 	slli	r2,r21,16
   8972c:	b009883a 	mov	r4,r22
   89730:	980b883a 	mov	r5,r19
   89734:	10c7883a 	add	r3,r2,r3
   89738:	a812d43a 	srli	r9,r21,16
   8973c:	180d883a 	mov	r6,r3
   89740:	ac00022e 	bgeu	r21,r16,8974c <__muldi3+0xc8>
   89744:	00800074 	movhi	r2,1
   89748:	4091883a 	add	r8,r8,r2
   8974c:	4267883a 	add	r19,r8,r9
   89750:	302d883a 	mov	r22,r6
   89754:	008964c0 	call	8964c <__mulsi3>
   89758:	d9400317 	ldw	r5,12(sp)
   8975c:	d9000017 	ldw	r4,0(sp)
   89760:	1023883a 	mov	r17,r2
   89764:	008964c0 	call	8964c <__mulsi3>
   89768:	14cb883a 	add	r5,r2,r19
   8976c:	894b883a 	add	r5,r17,r5
   89770:	b005883a 	mov	r2,r22
   89774:	2807883a 	mov	r3,r5
   89778:	dfc00d17 	ldw	ra,52(sp)
   8977c:	df000c17 	ldw	fp,48(sp)
   89780:	ddc00b17 	ldw	r23,44(sp)
   89784:	dd800a17 	ldw	r22,40(sp)
   89788:	dd400917 	ldw	r21,36(sp)
   8978c:	dd000817 	ldw	r20,32(sp)
   89790:	dcc00717 	ldw	r19,28(sp)
   89794:	dc800617 	ldw	r18,24(sp)
   89798:	dc400517 	ldw	r17,20(sp)
   8979c:	dc000417 	ldw	r16,16(sp)
   897a0:	dec00e04 	addi	sp,sp,56
   897a4:	f800283a 	ret

000897a8 <__clzsi2>:
   897a8:	00bfffd4 	movui	r2,65535
   897ac:	11000e36 	bltu	r2,r4,897e8 <__clzsi2+0x40>
   897b0:	00803fc4 	movi	r2,255
   897b4:	01400204 	movi	r5,8
   897b8:	0007883a 	mov	r3,zero
   897bc:	11001036 	bltu	r2,r4,89800 <__clzsi2+0x58>
   897c0:	000b883a 	mov	r5,zero
   897c4:	20c6d83a 	srl	r3,r4,r3
   897c8:	00800274 	movhi	r2,9
   897cc:	1095e704 	addi	r2,r2,22428
   897d0:	1887883a 	add	r3,r3,r2
   897d4:	18800003 	ldbu	r2,0(r3)
   897d8:	00c00804 	movi	r3,32
   897dc:	2885883a 	add	r2,r5,r2
   897e0:	1885c83a 	sub	r2,r3,r2
   897e4:	f800283a 	ret
   897e8:	01400404 	movi	r5,16
   897ec:	00804034 	movhi	r2,256
   897f0:	10bfffc4 	addi	r2,r2,-1
   897f4:	2807883a 	mov	r3,r5
   897f8:	113ff22e 	bgeu	r2,r4,897c4 <__clzsi2+0x1c>
   897fc:	01400604 	movi	r5,24
   89800:	2807883a 	mov	r3,r5
   89804:	20c6d83a 	srl	r3,r4,r3
   89808:	00800274 	movhi	r2,9
   8980c:	1095e704 	addi	r2,r2,22428
   89810:	1887883a 	add	r3,r3,r2
   89814:	18800003 	ldbu	r2,0(r3)
   89818:	00c00804 	movi	r3,32
   8981c:	2885883a 	add	r2,r5,r2
   89820:	1885c83a 	sub	r2,r3,r2
   89824:	f800283a 	ret

00089828 <__pack_d>:
   89828:	20c00017 	ldw	r3,0(r4)
   8982c:	defffd04 	addi	sp,sp,-12
   89830:	dc000015 	stw	r16,0(sp)
   89834:	dc800215 	stw	r18,8(sp)
   89838:	dc400115 	stw	r17,4(sp)
   8983c:	00800044 	movi	r2,1
   89840:	22000317 	ldw	r8,12(r4)
   89844:	001f883a 	mov	r15,zero
   89848:	22400417 	ldw	r9,16(r4)
   8984c:	24000117 	ldw	r16,4(r4)
   89850:	10c0552e 	bgeu	r2,r3,899a8 <__pack_d+0x180>
   89854:	00800104 	movi	r2,4
   89858:	18804f26 	beq	r3,r2,89998 <__pack_d+0x170>
   8985c:	00800084 	movi	r2,2
   89860:	18800226 	beq	r3,r2,8986c <__pack_d+0x44>
   89864:	4244b03a 	or	r2,r8,r9
   89868:	10001a1e 	bne	r2,zero,898d4 <__pack_d+0xac>
   8986c:	000d883a 	mov	r6,zero
   89870:	000f883a 	mov	r7,zero
   89874:	0011883a 	mov	r8,zero
   89878:	00800434 	movhi	r2,16
   8987c:	10bfffc4 	addi	r2,r2,-1
   89880:	301d883a 	mov	r14,r6
   89884:	3884703a 	and	r2,r7,r2
   89888:	400a953a 	slli	r5,r8,20
   8988c:	79bffc2c 	andhi	r6,r15,65520
   89890:	308cb03a 	or	r6,r6,r2
   89894:	00e00434 	movhi	r3,32784
   89898:	18ffffc4 	addi	r3,r3,-1
   8989c:	800497fa 	slli	r2,r16,31
   898a0:	30c6703a 	and	r3,r6,r3
   898a4:	1946b03a 	or	r3,r3,r5
   898a8:	01600034 	movhi	r5,32768
   898ac:	297fffc4 	addi	r5,r5,-1
   898b0:	194a703a 	and	r5,r3,r5
   898b4:	288ab03a 	or	r5,r5,r2
   898b8:	2807883a 	mov	r3,r5
   898bc:	7005883a 	mov	r2,r14
   898c0:	dc800217 	ldw	r18,8(sp)
   898c4:	dc400117 	ldw	r17,4(sp)
   898c8:	dc000017 	ldw	r16,0(sp)
   898cc:	dec00304 	addi	sp,sp,12
   898d0:	f800283a 	ret
   898d4:	21000217 	ldw	r4,8(r4)
   898d8:	00bf0084 	movi	r2,-1022
   898dc:	20803f16 	blt	r4,r2,899dc <__pack_d+0x1b4>
   898e0:	0080ffc4 	movi	r2,1023
   898e4:	11002c16 	blt	r2,r4,89998 <__pack_d+0x170>
   898e8:	00803fc4 	movi	r2,255
   898ec:	408c703a 	and	r6,r8,r2
   898f0:	00802004 	movi	r2,128
   898f4:	0007883a 	mov	r3,zero
   898f8:	000f883a 	mov	r7,zero
   898fc:	2280ffc4 	addi	r10,r4,1023
   89900:	30801e26 	beq	r6,r2,8997c <__pack_d+0x154>
   89904:	00801fc4 	movi	r2,127
   89908:	4089883a 	add	r4,r8,r2
   8990c:	220d803a 	cmpltu	r6,r4,r8
   89910:	324d883a 	add	r6,r6,r9
   89914:	2011883a 	mov	r8,r4
   89918:	3013883a 	mov	r9,r6
   8991c:	00880034 	movhi	r2,8192
   89920:	10bfffc4 	addi	r2,r2,-1
   89924:	12400d36 	bltu	r2,r9,8995c <__pack_d+0x134>
   89928:	4804963a 	slli	r2,r9,24
   8992c:	400cd23a 	srli	r6,r8,8
   89930:	480ed23a 	srli	r7,r9,8
   89934:	013fffc4 	movi	r4,-1
   89938:	118cb03a 	or	r6,r2,r6
   8993c:	01400434 	movhi	r5,16
   89940:	297fffc4 	addi	r5,r5,-1
   89944:	3104703a 	and	r2,r6,r4
   89948:	3946703a 	and	r3,r7,r5
   8994c:	5201ffcc 	andi	r8,r10,2047
   89950:	100d883a 	mov	r6,r2
   89954:	180f883a 	mov	r7,r3
   89958:	003fc706 	br	89878 <__pack_d+0x50>
   8995c:	480897fa 	slli	r4,r9,31
   89960:	4004d07a 	srli	r2,r8,1
   89964:	4806d07a 	srli	r3,r9,1
   89968:	52800044 	addi	r10,r10,1
   8996c:	2084b03a 	or	r2,r4,r2
   89970:	1011883a 	mov	r8,r2
   89974:	1813883a 	mov	r9,r3
   89978:	003feb06 	br	89928 <__pack_d+0x100>
   8997c:	383fe11e 	bne	r7,zero,89904 <__pack_d+0xdc>
   89980:	01004004 	movi	r4,256
   89984:	4104703a 	and	r2,r8,r4
   89988:	10c4b03a 	or	r2,r2,r3
   8998c:	103fe326 	beq	r2,zero,8991c <__pack_d+0xf4>
   89990:	3005883a 	mov	r2,r6
   89994:	003fdc06 	br	89908 <__pack_d+0xe0>
   89998:	000d883a 	mov	r6,zero
   8999c:	000f883a 	mov	r7,zero
   899a0:	0201ffc4 	movi	r8,2047
   899a4:	003fb406 	br	89878 <__pack_d+0x50>
   899a8:	0005883a 	mov	r2,zero
   899ac:	00c00234 	movhi	r3,8
   899b0:	408cb03a 	or	r6,r8,r2
   899b4:	48ceb03a 	or	r7,r9,r3
   899b8:	013fffc4 	movi	r4,-1
   899bc:	01400434 	movhi	r5,16
   899c0:	297fffc4 	addi	r5,r5,-1
   899c4:	3104703a 	and	r2,r6,r4
   899c8:	3946703a 	and	r3,r7,r5
   899cc:	100d883a 	mov	r6,r2
   899d0:	180f883a 	mov	r7,r3
   899d4:	0201ffc4 	movi	r8,2047
   899d8:	003fa706 	br	89878 <__pack_d+0x50>
   899dc:	1109c83a 	sub	r4,r2,r4
   899e0:	00800e04 	movi	r2,56
   899e4:	11004316 	blt	r2,r4,89af4 <__pack_d+0x2cc>
   899e8:	21fff804 	addi	r7,r4,-32
   899ec:	38004516 	blt	r7,zero,89b04 <__pack_d+0x2dc>
   899f0:	49d8d83a 	srl	r12,r9,r7
   899f4:	001b883a 	mov	r13,zero
   899f8:	0023883a 	mov	r17,zero
   899fc:	01400044 	movi	r5,1
   89a00:	0025883a 	mov	r18,zero
   89a04:	38004716 	blt	r7,zero,89b24 <__pack_d+0x2fc>
   89a08:	29d6983a 	sll	r11,r5,r7
   89a0c:	0015883a 	mov	r10,zero
   89a10:	00bfffc4 	movi	r2,-1
   89a14:	5089883a 	add	r4,r10,r2
   89a18:	588b883a 	add	r5,r11,r2
   89a1c:	228d803a 	cmpltu	r6,r4,r10
   89a20:	314b883a 	add	r5,r6,r5
   89a24:	4104703a 	and	r2,r8,r4
   89a28:	4946703a 	and	r3,r9,r5
   89a2c:	10c4b03a 	or	r2,r2,r3
   89a30:	10000226 	beq	r2,zero,89a3c <__pack_d+0x214>
   89a34:	04400044 	movi	r17,1
   89a38:	0025883a 	mov	r18,zero
   89a3c:	00803fc4 	movi	r2,255
   89a40:	644eb03a 	or	r7,r12,r17
   89a44:	3892703a 	and	r9,r7,r2
   89a48:	00802004 	movi	r2,128
   89a4c:	6c90b03a 	or	r8,r13,r18
   89a50:	0015883a 	mov	r10,zero
   89a54:	48801626 	beq	r9,r2,89ab0 <__pack_d+0x288>
   89a58:	01001fc4 	movi	r4,127
   89a5c:	3905883a 	add	r2,r7,r4
   89a60:	11cd803a 	cmpltu	r6,r2,r7
   89a64:	320d883a 	add	r6,r6,r8
   89a68:	100f883a 	mov	r7,r2
   89a6c:	00840034 	movhi	r2,4096
   89a70:	10bfffc4 	addi	r2,r2,-1
   89a74:	3011883a 	mov	r8,r6
   89a78:	0007883a 	mov	r3,zero
   89a7c:	11801b36 	bltu	r2,r6,89aec <__pack_d+0x2c4>
   89a80:	4004963a 	slli	r2,r8,24
   89a84:	3808d23a 	srli	r4,r7,8
   89a88:	400ad23a 	srli	r5,r8,8
   89a8c:	1813883a 	mov	r9,r3
   89a90:	1108b03a 	or	r4,r2,r4
   89a94:	00bfffc4 	movi	r2,-1
   89a98:	00c00434 	movhi	r3,16
   89a9c:	18ffffc4 	addi	r3,r3,-1
   89aa0:	208c703a 	and	r6,r4,r2
   89aa4:	28ce703a 	and	r7,r5,r3
   89aa8:	4a01ffcc 	andi	r8,r9,2047
   89aac:	003f7206 	br	89878 <__pack_d+0x50>
   89ab0:	503fe91e 	bne	r10,zero,89a58 <__pack_d+0x230>
   89ab4:	01004004 	movi	r4,256
   89ab8:	3904703a 	and	r2,r7,r4
   89abc:	0007883a 	mov	r3,zero
   89ac0:	10c4b03a 	or	r2,r2,r3
   89ac4:	10000626 	beq	r2,zero,89ae0 <__pack_d+0x2b8>
   89ac8:	3a45883a 	add	r2,r7,r9
   89acc:	11cd803a 	cmpltu	r6,r2,r7
   89ad0:	320d883a 	add	r6,r6,r8
   89ad4:	100f883a 	mov	r7,r2
   89ad8:	3011883a 	mov	r8,r6
   89adc:	0007883a 	mov	r3,zero
   89ae0:	00840034 	movhi	r2,4096
   89ae4:	10bfffc4 	addi	r2,r2,-1
   89ae8:	123fe52e 	bgeu	r2,r8,89a80 <__pack_d+0x258>
   89aec:	00c00044 	movi	r3,1
   89af0:	003fe306 	br	89a80 <__pack_d+0x258>
   89af4:	0009883a 	mov	r4,zero
   89af8:	0013883a 	mov	r9,zero
   89afc:	000b883a 	mov	r5,zero
   89b00:	003fe406 	br	89a94 <__pack_d+0x26c>
   89b04:	4a47883a 	add	r3,r9,r9
   89b08:	008007c4 	movi	r2,31
   89b0c:	1105c83a 	sub	r2,r2,r4
   89b10:	1886983a 	sll	r3,r3,r2
   89b14:	4118d83a 	srl	r12,r8,r4
   89b18:	491ad83a 	srl	r13,r9,r4
   89b1c:	1b18b03a 	or	r12,r3,r12
   89b20:	003fb506 	br	899f8 <__pack_d+0x1d0>
   89b24:	2806d07a 	srli	r3,r5,1
   89b28:	008007c4 	movi	r2,31
   89b2c:	1105c83a 	sub	r2,r2,r4
   89b30:	1896d83a 	srl	r11,r3,r2
   89b34:	2914983a 	sll	r10,r5,r4
   89b38:	003fb506 	br	89a10 <__pack_d+0x1e8>

00089b3c <__unpack_d>:
   89b3c:	20c00117 	ldw	r3,4(r4)
   89b40:	22400017 	ldw	r9,0(r4)
   89b44:	00800434 	movhi	r2,16
   89b48:	10bfffc4 	addi	r2,r2,-1
   89b4c:	1808d53a 	srli	r4,r3,20
   89b50:	180cd7fa 	srli	r6,r3,31
   89b54:	1894703a 	and	r10,r3,r2
   89b58:	2201ffcc 	andi	r8,r4,2047
   89b5c:	281b883a 	mov	r13,r5
   89b60:	4817883a 	mov	r11,r9
   89b64:	29800115 	stw	r6,4(r5)
   89b68:	5019883a 	mov	r12,r10
   89b6c:	40001e1e 	bne	r8,zero,89be8 <__unpack_d+0xac>
   89b70:	4a84b03a 	or	r2,r9,r10
   89b74:	10001926 	beq	r2,zero,89bdc <__unpack_d+0xa0>
   89b78:	4804d63a 	srli	r2,r9,24
   89b7c:	500c923a 	slli	r6,r10,8
   89b80:	013f0084 	movi	r4,-1022
   89b84:	00c40034 	movhi	r3,4096
   89b88:	18ffffc4 	addi	r3,r3,-1
   89b8c:	118cb03a 	or	r6,r2,r6
   89b90:	008000c4 	movi	r2,3
   89b94:	480a923a 	slli	r5,r9,8
   89b98:	68800015 	stw	r2,0(r13)
   89b9c:	69000215 	stw	r4,8(r13)
   89ba0:	19800b36 	bltu	r3,r6,89bd0 <__unpack_d+0x94>
   89ba4:	200f883a 	mov	r7,r4
   89ba8:	1811883a 	mov	r8,r3
   89bac:	2945883a 	add	r2,r5,r5
   89bb0:	1149803a 	cmpltu	r4,r2,r5
   89bb4:	3187883a 	add	r3,r6,r6
   89bb8:	20c9883a 	add	r4,r4,r3
   89bbc:	100b883a 	mov	r5,r2
   89bc0:	200d883a 	mov	r6,r4
   89bc4:	39ffffc4 	addi	r7,r7,-1
   89bc8:	413ff82e 	bgeu	r8,r4,89bac <__unpack_d+0x70>
   89bcc:	69c00215 	stw	r7,8(r13)
   89bd0:	69800415 	stw	r6,16(r13)
   89bd4:	69400315 	stw	r5,12(r13)
   89bd8:	f800283a 	ret
   89bdc:	00800084 	movi	r2,2
   89be0:	28800015 	stw	r2,0(r5)
   89be4:	f800283a 	ret
   89be8:	0081ffc4 	movi	r2,2047
   89bec:	40800f26 	beq	r8,r2,89c2c <__unpack_d+0xf0>
   89bf0:	480cd63a 	srli	r6,r9,24
   89bf4:	5006923a 	slli	r3,r10,8
   89bf8:	4804923a 	slli	r2,r9,8
   89bfc:	0009883a 	mov	r4,zero
   89c00:	30c6b03a 	or	r3,r6,r3
   89c04:	01440034 	movhi	r5,4096
   89c08:	110cb03a 	or	r6,r2,r4
   89c0c:	423f0044 	addi	r8,r8,-1023
   89c10:	194eb03a 	or	r7,r3,r5
   89c14:	008000c4 	movi	r2,3
   89c18:	69c00415 	stw	r7,16(r13)
   89c1c:	6a000215 	stw	r8,8(r13)
   89c20:	68800015 	stw	r2,0(r13)
   89c24:	69800315 	stw	r6,12(r13)
   89c28:	f800283a 	ret
   89c2c:	4a84b03a 	or	r2,r9,r10
   89c30:	1000031e 	bne	r2,zero,89c40 <__unpack_d+0x104>
   89c34:	00800104 	movi	r2,4
   89c38:	28800015 	stw	r2,0(r5)
   89c3c:	f800283a 	ret
   89c40:	0009883a 	mov	r4,zero
   89c44:	01400234 	movhi	r5,8
   89c48:	4904703a 	and	r2,r9,r4
   89c4c:	5146703a 	and	r3,r10,r5
   89c50:	10c4b03a 	or	r2,r2,r3
   89c54:	10000526 	beq	r2,zero,89c6c <__unpack_d+0x130>
   89c58:	00800044 	movi	r2,1
   89c5c:	68800015 	stw	r2,0(r13)
   89c60:	6b000415 	stw	r12,16(r13)
   89c64:	6ac00315 	stw	r11,12(r13)
   89c68:	f800283a 	ret
   89c6c:	68000015 	stw	zero,0(r13)
   89c70:	003ffb06 	br	89c60 <__unpack_d+0x124>

00089c74 <__fpcmp_parts_d>:
   89c74:	21800017 	ldw	r6,0(r4)
   89c78:	00c00044 	movi	r3,1
   89c7c:	19800a2e 	bgeu	r3,r6,89ca8 <__fpcmp_parts_d+0x34>
   89c80:	28800017 	ldw	r2,0(r5)
   89c84:	1880082e 	bgeu	r3,r2,89ca8 <__fpcmp_parts_d+0x34>
   89c88:	00c00104 	movi	r3,4
   89c8c:	30c02626 	beq	r6,r3,89d28 <__fpcmp_parts_d+0xb4>
   89c90:	10c02226 	beq	r2,r3,89d1c <__fpcmp_parts_d+0xa8>
   89c94:	00c00084 	movi	r3,2
   89c98:	30c00526 	beq	r6,r3,89cb0 <__fpcmp_parts_d+0x3c>
   89c9c:	10c0071e 	bne	r2,r3,89cbc <__fpcmp_parts_d+0x48>
   89ca0:	20800117 	ldw	r2,4(r4)
   89ca4:	1000091e 	bne	r2,zero,89ccc <__fpcmp_parts_d+0x58>
   89ca8:	00800044 	movi	r2,1
   89cac:	f800283a 	ret
   89cb0:	10c01a1e 	bne	r2,r3,89d1c <__fpcmp_parts_d+0xa8>
   89cb4:	0005883a 	mov	r2,zero
   89cb8:	f800283a 	ret
   89cbc:	22000117 	ldw	r8,4(r4)
   89cc0:	28800117 	ldw	r2,4(r5)
   89cc4:	40800326 	beq	r8,r2,89cd4 <__fpcmp_parts_d+0x60>
   89cc8:	403ff726 	beq	r8,zero,89ca8 <__fpcmp_parts_d+0x34>
   89ccc:	00bfffc4 	movi	r2,-1
   89cd0:	f800283a 	ret
   89cd4:	20c00217 	ldw	r3,8(r4)
   89cd8:	28800217 	ldw	r2,8(r5)
   89cdc:	10fffa16 	blt	r2,r3,89cc8 <__fpcmp_parts_d+0x54>
   89ce0:	18800916 	blt	r3,r2,89d08 <__fpcmp_parts_d+0x94>
   89ce4:	21c00417 	ldw	r7,16(r4)
   89ce8:	28c00417 	ldw	r3,16(r5)
   89cec:	21800317 	ldw	r6,12(r4)
   89cf0:	28800317 	ldw	r2,12(r5)
   89cf4:	19fff436 	bltu	r3,r7,89cc8 <__fpcmp_parts_d+0x54>
   89cf8:	38c00526 	beq	r7,r3,89d10 <__fpcmp_parts_d+0x9c>
   89cfc:	38c00236 	bltu	r7,r3,89d08 <__fpcmp_parts_d+0x94>
   89d00:	19ffec1e 	bne	r3,r7,89cb4 <__fpcmp_parts_d+0x40>
   89d04:	30bfeb2e 	bgeu	r6,r2,89cb4 <__fpcmp_parts_d+0x40>
   89d08:	403fe71e 	bne	r8,zero,89ca8 <__fpcmp_parts_d+0x34>
   89d0c:	003fef06 	br	89ccc <__fpcmp_parts_d+0x58>
   89d10:	11bffa2e 	bgeu	r2,r6,89cfc <__fpcmp_parts_d+0x88>
   89d14:	403fe426 	beq	r8,zero,89ca8 <__fpcmp_parts_d+0x34>
   89d18:	003fec06 	br	89ccc <__fpcmp_parts_d+0x58>
   89d1c:	28800117 	ldw	r2,4(r5)
   89d20:	103fe11e 	bne	r2,zero,89ca8 <__fpcmp_parts_d+0x34>
   89d24:	003fe906 	br	89ccc <__fpcmp_parts_d+0x58>
   89d28:	11bfdd1e 	bne	r2,r6,89ca0 <__fpcmp_parts_d+0x2c>
   89d2c:	28c00117 	ldw	r3,4(r5)
   89d30:	20800117 	ldw	r2,4(r4)
   89d34:	1885c83a 	sub	r2,r3,r2
   89d38:	f800283a 	ret

00089d3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   89d3c:	defff804 	addi	sp,sp,-32
   89d40:	dfc00715 	stw	ra,28(sp)
   89d44:	df000615 	stw	fp,24(sp)
   89d48:	df000604 	addi	fp,sp,24
   89d4c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   89d50:	e0bffc17 	ldw	r2,-16(fp)
   89d54:	1004803a 	cmplt	r2,r2,zero
   89d58:	1000091e 	bne	r2,zero,89d80 <close+0x44>
   89d5c:	e13ffc17 	ldw	r4,-16(fp)
   89d60:	01400304 	movi	r5,12
   89d64:	008964c0 	call	8964c <__mulsi3>
   89d68:	1007883a 	mov	r3,r2
   89d6c:	00800274 	movhi	r2,9
   89d70:	10988c04 	addi	r2,r2,25136
   89d74:	1887883a 	add	r3,r3,r2
   89d78:	e0ffff15 	stw	r3,-4(fp)
   89d7c:	00000106 	br	89d84 <close+0x48>
   89d80:	e03fff15 	stw	zero,-4(fp)
   89d84:	e0bfff17 	ldw	r2,-4(fp)
   89d88:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   89d8c:	e0bffb17 	ldw	r2,-20(fp)
   89d90:	1005003a 	cmpeq	r2,r2,zero
   89d94:	10001d1e 	bne	r2,zero,89e0c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   89d98:	e0bffb17 	ldw	r2,-20(fp)
   89d9c:	10800017 	ldw	r2,0(r2)
   89da0:	10800417 	ldw	r2,16(r2)
   89da4:	1005003a 	cmpeq	r2,r2,zero
   89da8:	1000071e 	bne	r2,zero,89dc8 <close+0x8c>
   89dac:	e0bffb17 	ldw	r2,-20(fp)
   89db0:	10800017 	ldw	r2,0(r2)
   89db4:	10800417 	ldw	r2,16(r2)
   89db8:	e13ffb17 	ldw	r4,-20(fp)
   89dbc:	103ee83a 	callr	r2
   89dc0:	e0bffe15 	stw	r2,-8(fp)
   89dc4:	00000106 	br	89dcc <close+0x90>
   89dc8:	e03ffe15 	stw	zero,-8(fp)
   89dcc:	e0bffe17 	ldw	r2,-8(fp)
   89dd0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   89dd4:	e13ffc17 	ldw	r4,-16(fp)
   89dd8:	008a5b00 	call	8a5b0 <alt_release_fd>
    if (rval < 0)
   89ddc:	e0bffa17 	ldw	r2,-24(fp)
   89de0:	1004403a 	cmpge	r2,r2,zero
   89de4:	1000071e 	bne	r2,zero,89e04 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   89de8:	0089e3c0 	call	89e3c <alt_get_errno>
   89dec:	e0fffa17 	ldw	r3,-24(fp)
   89df0:	00c7c83a 	sub	r3,zero,r3
   89df4:	10c00015 	stw	r3,0(r2)
      return -1;
   89df8:	00bfffc4 	movi	r2,-1
   89dfc:	e0bffd15 	stw	r2,-12(fp)
   89e00:	00000806 	br	89e24 <close+0xe8>
    }
    return 0;
   89e04:	e03ffd15 	stw	zero,-12(fp)
   89e08:	00000606 	br	89e24 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89e0c:	0089e3c0 	call	89e3c <alt_get_errno>
   89e10:	1007883a 	mov	r3,r2
   89e14:	00801444 	movi	r2,81
   89e18:	18800015 	stw	r2,0(r3)
    return -1;
   89e1c:	00bfffc4 	movi	r2,-1
   89e20:	e0bffd15 	stw	r2,-12(fp)
   89e24:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   89e28:	e037883a 	mov	sp,fp
   89e2c:	dfc00117 	ldw	ra,4(sp)
   89e30:	df000017 	ldw	fp,0(sp)
   89e34:	dec00204 	addi	sp,sp,8
   89e38:	f800283a 	ret

00089e3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89e3c:	defffd04 	addi	sp,sp,-12
   89e40:	dfc00215 	stw	ra,8(sp)
   89e44:	df000115 	stw	fp,4(sp)
   89e48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   89e4c:	00800274 	movhi	r2,9
   89e50:	109d1204 	addi	r2,r2,29768
   89e54:	10800017 	ldw	r2,0(r2)
   89e58:	1005003a 	cmpeq	r2,r2,zero
   89e5c:	1000061e 	bne	r2,zero,89e78 <alt_get_errno+0x3c>
   89e60:	00800274 	movhi	r2,9
   89e64:	109d1204 	addi	r2,r2,29768
   89e68:	10800017 	ldw	r2,0(r2)
   89e6c:	103ee83a 	callr	r2
   89e70:	e0bfff15 	stw	r2,-4(fp)
   89e74:	00000306 	br	89e84 <alt_get_errno+0x48>
   89e78:	008002b4 	movhi	r2,10
   89e7c:	10a3f504 	addi	r2,r2,-28716
   89e80:	e0bfff15 	stw	r2,-4(fp)
   89e84:	e0bfff17 	ldw	r2,-4(fp)
}
   89e88:	e037883a 	mov	sp,fp
   89e8c:	dfc00117 	ldw	ra,4(sp)
   89e90:	df000017 	ldw	fp,0(sp)
   89e94:	dec00204 	addi	sp,sp,8
   89e98:	f800283a 	ret

00089e9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   89e9c:	defffc04 	addi	sp,sp,-16
   89ea0:	df000315 	stw	fp,12(sp)
   89ea4:	df000304 	addi	fp,sp,12
   89ea8:	e13ffd15 	stw	r4,-12(fp)
   89eac:	e17ffe15 	stw	r5,-8(fp)
   89eb0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   89eb4:	e0bfff17 	ldw	r2,-4(fp)
}
   89eb8:	e037883a 	mov	sp,fp
   89ebc:	df000017 	ldw	fp,0(sp)
   89ec0:	dec00104 	addi	sp,sp,4
   89ec4:	f800283a 	ret

00089ec8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   89ec8:	defff904 	addi	sp,sp,-28
   89ecc:	dfc00615 	stw	ra,24(sp)
   89ed0:	df000515 	stw	fp,20(sp)
   89ed4:	df000504 	addi	fp,sp,20
   89ed8:	e13ffc15 	stw	r4,-16(fp)
   89edc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   89ee0:	e0bffc17 	ldw	r2,-16(fp)
   89ee4:	1004803a 	cmplt	r2,r2,zero
   89ee8:	1000091e 	bne	r2,zero,89f10 <fstat+0x48>
   89eec:	e13ffc17 	ldw	r4,-16(fp)
   89ef0:	01400304 	movi	r5,12
   89ef4:	008964c0 	call	8964c <__mulsi3>
   89ef8:	1007883a 	mov	r3,r2
   89efc:	00800274 	movhi	r2,9
   89f00:	10988c04 	addi	r2,r2,25136
   89f04:	1887883a 	add	r3,r3,r2
   89f08:	e0ffff15 	stw	r3,-4(fp)
   89f0c:	00000106 	br	89f14 <fstat+0x4c>
   89f10:	e03fff15 	stw	zero,-4(fp)
   89f14:	e0bfff17 	ldw	r2,-4(fp)
   89f18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   89f1c:	e0bffb17 	ldw	r2,-20(fp)
   89f20:	1005003a 	cmpeq	r2,r2,zero
   89f24:	1000121e 	bne	r2,zero,89f70 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   89f28:	e0bffb17 	ldw	r2,-20(fp)
   89f2c:	10800017 	ldw	r2,0(r2)
   89f30:	10800817 	ldw	r2,32(r2)
   89f34:	1005003a 	cmpeq	r2,r2,zero
   89f38:	1000081e 	bne	r2,zero,89f5c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   89f3c:	e0bffb17 	ldw	r2,-20(fp)
   89f40:	10800017 	ldw	r2,0(r2)
   89f44:	10800817 	ldw	r2,32(r2)
   89f48:	e13ffb17 	ldw	r4,-20(fp)
   89f4c:	e17ffd17 	ldw	r5,-12(fp)
   89f50:	103ee83a 	callr	r2
   89f54:	e0bffe15 	stw	r2,-8(fp)
   89f58:	00000b06 	br	89f88 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   89f5c:	e0fffd17 	ldw	r3,-12(fp)
   89f60:	00880004 	movi	r2,8192
   89f64:	18800115 	stw	r2,4(r3)
      return 0;
   89f68:	e03ffe15 	stw	zero,-8(fp)
   89f6c:	00000606 	br	89f88 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89f70:	0089fa00 	call	89fa0 <alt_get_errno>
   89f74:	1007883a 	mov	r3,r2
   89f78:	00801444 	movi	r2,81
   89f7c:	18800015 	stw	r2,0(r3)
    return -1;
   89f80:	00bfffc4 	movi	r2,-1
   89f84:	e0bffe15 	stw	r2,-8(fp)
   89f88:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   89f8c:	e037883a 	mov	sp,fp
   89f90:	dfc00117 	ldw	ra,4(sp)
   89f94:	df000017 	ldw	fp,0(sp)
   89f98:	dec00204 	addi	sp,sp,8
   89f9c:	f800283a 	ret

00089fa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89fa0:	defffd04 	addi	sp,sp,-12
   89fa4:	dfc00215 	stw	ra,8(sp)
   89fa8:	df000115 	stw	fp,4(sp)
   89fac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   89fb0:	00800274 	movhi	r2,9
   89fb4:	109d1204 	addi	r2,r2,29768
   89fb8:	10800017 	ldw	r2,0(r2)
   89fbc:	1005003a 	cmpeq	r2,r2,zero
   89fc0:	1000061e 	bne	r2,zero,89fdc <alt_get_errno+0x3c>
   89fc4:	00800274 	movhi	r2,9
   89fc8:	109d1204 	addi	r2,r2,29768
   89fcc:	10800017 	ldw	r2,0(r2)
   89fd0:	103ee83a 	callr	r2
   89fd4:	e0bfff15 	stw	r2,-4(fp)
   89fd8:	00000306 	br	89fe8 <alt_get_errno+0x48>
   89fdc:	008002b4 	movhi	r2,10
   89fe0:	10a3f504 	addi	r2,r2,-28716
   89fe4:	e0bfff15 	stw	r2,-4(fp)
   89fe8:	e0bfff17 	ldw	r2,-4(fp)
}
   89fec:	e037883a 	mov	sp,fp
   89ff0:	dfc00117 	ldw	ra,4(sp)
   89ff4:	df000017 	ldw	fp,0(sp)
   89ff8:	dec00204 	addi	sp,sp,8
   89ffc:	f800283a 	ret

0008a000 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8a000:	deffeb04 	addi	sp,sp,-84
   8a004:	dfc01415 	stw	ra,80(sp)
   8a008:	df001315 	stw	fp,76(sp)
   8a00c:	df001304 	addi	fp,sp,76
   8a010:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a014:	e0bffd17 	ldw	r2,-12(fp)
   8a018:	1004803a 	cmplt	r2,r2,zero
   8a01c:	1000091e 	bne	r2,zero,8a044 <isatty+0x44>
   8a020:	e13ffd17 	ldw	r4,-12(fp)
   8a024:	01400304 	movi	r5,12
   8a028:	008964c0 	call	8964c <__mulsi3>
   8a02c:	1007883a 	mov	r3,r2
   8a030:	00800274 	movhi	r2,9
   8a034:	10988c04 	addi	r2,r2,25136
   8a038:	1887883a 	add	r3,r3,r2
   8a03c:	e0ffff15 	stw	r3,-4(fp)
   8a040:	00000106 	br	8a048 <isatty+0x48>
   8a044:	e03fff15 	stw	zero,-4(fp)
   8a048:	e0bfff17 	ldw	r2,-4(fp)
   8a04c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8a050:	e0bfed17 	ldw	r2,-76(fp)
   8a054:	1005003a 	cmpeq	r2,r2,zero
   8a058:	10000f1e 	bne	r2,zero,8a098 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8a05c:	e0bfed17 	ldw	r2,-76(fp)
   8a060:	10800017 	ldw	r2,0(r2)
   8a064:	10800817 	ldw	r2,32(r2)
   8a068:	1004c03a 	cmpne	r2,r2,zero
   8a06c:	1000031e 	bne	r2,zero,8a07c <isatty+0x7c>
    {
      return 1;
   8a070:	00800044 	movi	r2,1
   8a074:	e0bffe15 	stw	r2,-8(fp)
   8a078:	00000c06 	br	8a0ac <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8a07c:	e17fee04 	addi	r5,fp,-72
   8a080:	e13ffd17 	ldw	r4,-12(fp)
   8a084:	0089ec80 	call	89ec8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8a088:	e0bfef17 	ldw	r2,-68(fp)
   8a08c:	10880020 	cmpeqi	r2,r2,8192
   8a090:	e0bffe15 	stw	r2,-8(fp)
   8a094:	00000506 	br	8a0ac <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a098:	008a0c40 	call	8a0c4 <alt_get_errno>
   8a09c:	1007883a 	mov	r3,r2
   8a0a0:	00801444 	movi	r2,81
   8a0a4:	18800015 	stw	r2,0(r3)
    return 0;
   8a0a8:	e03ffe15 	stw	zero,-8(fp)
   8a0ac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8a0b0:	e037883a 	mov	sp,fp
   8a0b4:	dfc00117 	ldw	ra,4(sp)
   8a0b8:	df000017 	ldw	fp,0(sp)
   8a0bc:	dec00204 	addi	sp,sp,8
   8a0c0:	f800283a 	ret

0008a0c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a0c4:	defffd04 	addi	sp,sp,-12
   8a0c8:	dfc00215 	stw	ra,8(sp)
   8a0cc:	df000115 	stw	fp,4(sp)
   8a0d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a0d4:	00800274 	movhi	r2,9
   8a0d8:	109d1204 	addi	r2,r2,29768
   8a0dc:	10800017 	ldw	r2,0(r2)
   8a0e0:	1005003a 	cmpeq	r2,r2,zero
   8a0e4:	1000061e 	bne	r2,zero,8a100 <alt_get_errno+0x3c>
   8a0e8:	00800274 	movhi	r2,9
   8a0ec:	109d1204 	addi	r2,r2,29768
   8a0f0:	10800017 	ldw	r2,0(r2)
   8a0f4:	103ee83a 	callr	r2
   8a0f8:	e0bfff15 	stw	r2,-4(fp)
   8a0fc:	00000306 	br	8a10c <alt_get_errno+0x48>
   8a100:	008002b4 	movhi	r2,10
   8a104:	10a3f504 	addi	r2,r2,-28716
   8a108:	e0bfff15 	stw	r2,-4(fp)
   8a10c:	e0bfff17 	ldw	r2,-4(fp)
}
   8a110:	e037883a 	mov	sp,fp
   8a114:	dfc00117 	ldw	ra,4(sp)
   8a118:	df000017 	ldw	fp,0(sp)
   8a11c:	dec00204 	addi	sp,sp,8
   8a120:	f800283a 	ret

0008a124 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8a124:	defffe04 	addi	sp,sp,-8
   8a128:	dfc00115 	stw	ra,4(sp)
   8a12c:	df000015 	stw	fp,0(sp)
   8a130:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8a134:	01000274 	movhi	r4,9
   8a138:	211d3604 	addi	r4,r4,29912
   8a13c:	01400274 	movhi	r5,9
   8a140:	29567d04 	addi	r5,r5,23028
   8a144:	01800274 	movhi	r6,9
   8a148:	319d3604 	addi	r6,r6,29912
   8a14c:	008a1a40 	call	8a1a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8a150:	01000234 	movhi	r4,8
   8a154:	21000004 	addi	r4,r4,0
   8a158:	01400434 	movhi	r5,16
   8a15c:	29500804 	addi	r5,r5,16416
   8a160:	01800434 	movhi	r6,16
   8a164:	31906f04 	addi	r6,r6,16828
   8a168:	008a1a40 	call	8a1a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8a16c:	01000274 	movhi	r4,9
   8a170:	21155004 	addi	r4,r4,21824
   8a174:	01400274 	movhi	r5,9
   8a178:	29555004 	addi	r5,r5,21824
   8a17c:	01800274 	movhi	r6,9
   8a180:	31967d04 	addi	r6,r6,23028
   8a184:	008a1a40 	call	8a1a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8a188:	0093eac0 	call	93eac <alt_dcache_flush_all>
  alt_icache_flush_all();
   8a18c:	00940a40 	call	940a4 <alt_icache_flush_all>
}
   8a190:	e037883a 	mov	sp,fp
   8a194:	dfc00117 	ldw	ra,4(sp)
   8a198:	df000017 	ldw	fp,0(sp)
   8a19c:	dec00204 	addi	sp,sp,8
   8a1a0:	f800283a 	ret

0008a1a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8a1a4:	defffc04 	addi	sp,sp,-16
   8a1a8:	df000315 	stw	fp,12(sp)
   8a1ac:	df000304 	addi	fp,sp,12
   8a1b0:	e13ffd15 	stw	r4,-12(fp)
   8a1b4:	e17ffe15 	stw	r5,-8(fp)
   8a1b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8a1bc:	e0fffe17 	ldw	r3,-8(fp)
   8a1c0:	e0bffd17 	ldw	r2,-12(fp)
   8a1c4:	18800e26 	beq	r3,r2,8a200 <alt_load_section+0x5c>
  {
    while( to != end )
   8a1c8:	00000a06 	br	8a1f4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8a1cc:	e0bffd17 	ldw	r2,-12(fp)
   8a1d0:	10c00017 	ldw	r3,0(r2)
   8a1d4:	e0bffe17 	ldw	r2,-8(fp)
   8a1d8:	10c00015 	stw	r3,0(r2)
   8a1dc:	e0bffe17 	ldw	r2,-8(fp)
   8a1e0:	10800104 	addi	r2,r2,4
   8a1e4:	e0bffe15 	stw	r2,-8(fp)
   8a1e8:	e0bffd17 	ldw	r2,-12(fp)
   8a1ec:	10800104 	addi	r2,r2,4
   8a1f0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8a1f4:	e0fffe17 	ldw	r3,-8(fp)
   8a1f8:	e0bfff17 	ldw	r2,-4(fp)
   8a1fc:	18bff31e 	bne	r3,r2,8a1cc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8a200:	e037883a 	mov	sp,fp
   8a204:	df000017 	ldw	fp,0(sp)
   8a208:	dec00104 	addi	sp,sp,4
   8a20c:	f800283a 	ret

0008a210 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8a210:	defff804 	addi	sp,sp,-32
   8a214:	dfc00715 	stw	ra,28(sp)
   8a218:	df000615 	stw	fp,24(sp)
   8a21c:	df000604 	addi	fp,sp,24
   8a220:	e13ffc15 	stw	r4,-16(fp)
   8a224:	e17ffd15 	stw	r5,-12(fp)
   8a228:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8a22c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a230:	e0bffc17 	ldw	r2,-16(fp)
   8a234:	1004803a 	cmplt	r2,r2,zero
   8a238:	1000091e 	bne	r2,zero,8a260 <lseek+0x50>
   8a23c:	e13ffc17 	ldw	r4,-16(fp)
   8a240:	01400304 	movi	r5,12
   8a244:	008964c0 	call	8964c <__mulsi3>
   8a248:	1007883a 	mov	r3,r2
   8a24c:	00800274 	movhi	r2,9
   8a250:	10988c04 	addi	r2,r2,25136
   8a254:	1887883a 	add	r3,r3,r2
   8a258:	e0ffff15 	stw	r3,-4(fp)
   8a25c:	00000106 	br	8a264 <lseek+0x54>
   8a260:	e03fff15 	stw	zero,-4(fp)
   8a264:	e0bfff17 	ldw	r2,-4(fp)
   8a268:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8a26c:	e0bffb17 	ldw	r2,-20(fp)
   8a270:	1005003a 	cmpeq	r2,r2,zero
   8a274:	1000111e 	bne	r2,zero,8a2bc <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8a278:	e0bffb17 	ldw	r2,-20(fp)
   8a27c:	10800017 	ldw	r2,0(r2)
   8a280:	10800717 	ldw	r2,28(r2)
   8a284:	1005003a 	cmpeq	r2,r2,zero
   8a288:	1000091e 	bne	r2,zero,8a2b0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8a28c:	e0bffb17 	ldw	r2,-20(fp)
   8a290:	10800017 	ldw	r2,0(r2)
   8a294:	10800717 	ldw	r2,28(r2)
   8a298:	e13ffb17 	ldw	r4,-20(fp)
   8a29c:	e17ffd17 	ldw	r5,-12(fp)
   8a2a0:	e1bffe17 	ldw	r6,-8(fp)
   8a2a4:	103ee83a 	callr	r2
   8a2a8:	e0bffa15 	stw	r2,-24(fp)
   8a2ac:	00000506 	br	8a2c4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8a2b0:	00bfde84 	movi	r2,-134
   8a2b4:	e0bffa15 	stw	r2,-24(fp)
   8a2b8:	00000206 	br	8a2c4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8a2bc:	00bfebc4 	movi	r2,-81
   8a2c0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8a2c4:	e0bffa17 	ldw	r2,-24(fp)
   8a2c8:	1004403a 	cmpge	r2,r2,zero
   8a2cc:	1000071e 	bne	r2,zero,8a2ec <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8a2d0:	008a3040 	call	8a304 <alt_get_errno>
   8a2d4:	1007883a 	mov	r3,r2
   8a2d8:	e0bffa17 	ldw	r2,-24(fp)
   8a2dc:	0085c83a 	sub	r2,zero,r2
   8a2e0:	18800015 	stw	r2,0(r3)
    rc = -1;
   8a2e4:	00bfffc4 	movi	r2,-1
   8a2e8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8a2ec:	e0bffa17 	ldw	r2,-24(fp)
}
   8a2f0:	e037883a 	mov	sp,fp
   8a2f4:	dfc00117 	ldw	ra,4(sp)
   8a2f8:	df000017 	ldw	fp,0(sp)
   8a2fc:	dec00204 	addi	sp,sp,8
   8a300:	f800283a 	ret

0008a304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a304:	defffd04 	addi	sp,sp,-12
   8a308:	dfc00215 	stw	ra,8(sp)
   8a30c:	df000115 	stw	fp,4(sp)
   8a310:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a314:	00800274 	movhi	r2,9
   8a318:	109d1204 	addi	r2,r2,29768
   8a31c:	10800017 	ldw	r2,0(r2)
   8a320:	1005003a 	cmpeq	r2,r2,zero
   8a324:	1000061e 	bne	r2,zero,8a340 <alt_get_errno+0x3c>
   8a328:	00800274 	movhi	r2,9
   8a32c:	109d1204 	addi	r2,r2,29768
   8a330:	10800017 	ldw	r2,0(r2)
   8a334:	103ee83a 	callr	r2
   8a338:	e0bfff15 	stw	r2,-4(fp)
   8a33c:	00000306 	br	8a34c <alt_get_errno+0x48>
   8a340:	008002b4 	movhi	r2,10
   8a344:	10a3f504 	addi	r2,r2,-28716
   8a348:	e0bfff15 	stw	r2,-4(fp)
   8a34c:	e0bfff17 	ldw	r2,-4(fp)
}
   8a350:	e037883a 	mov	sp,fp
   8a354:	dfc00117 	ldw	ra,4(sp)
   8a358:	df000017 	ldw	fp,0(sp)
   8a35c:	dec00204 	addi	sp,sp,8
   8a360:	f800283a 	ret

0008a364 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8a364:	defffb04 	addi	sp,sp,-20
   8a368:	dfc00415 	stw	ra,16(sp)
   8a36c:	df000315 	stw	fp,12(sp)
   8a370:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8a374:	0009883a 	mov	r4,zero
   8a378:	0092e340 	call	92e34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8a37c:	008b4700 	call	8b470 <OSInit>
   8a380:	01000044 	movi	r4,1
   8a384:	00903380 	call	90338 <OSSemCreate>
   8a388:	1007883a 	mov	r3,r2
   8a38c:	008002b4 	movhi	r2,10
   8a390:	10a3fb04 	addi	r2,r2,-28692
   8a394:	10c00015 	stw	r3,0(r2)
   8a398:	01000044 	movi	r4,1
   8a39c:	00903380 	call	90338 <OSSemCreate>
   8a3a0:	1007883a 	mov	r3,r2
   8a3a4:	008002b4 	movhi	r2,10
   8a3a8:	10a3fd04 	addi	r2,r2,-28684
   8a3ac:	10c00015 	stw	r3,0(r2)
   8a3b0:	008002b4 	movhi	r2,10
   8a3b4:	10a3f604 	addi	r2,r2,-28712
   8a3b8:	e0bffd15 	stw	r2,-12(fp)
   8a3bc:	00800044 	movi	r2,1
   8a3c0:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   8a3c4:	e13ffe0b 	ldhu	r4,-8(fp)
   8a3c8:	00903380 	call	90338 <OSSemCreate>
   8a3cc:	1007883a 	mov	r3,r2
   8a3d0:	e0bffd17 	ldw	r2,-12(fp)
   8a3d4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8a3d8:	0092e680 	call	92e68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8a3dc:	01000274 	movhi	r4,9
   8a3e0:	21162a04 	addi	r4,r4,22696
   8a3e4:	01400274 	movhi	r5,9
   8a3e8:	29562a04 	addi	r5,r5,22696
   8a3ec:	01800274 	movhi	r6,9
   8a3f0:	31962a04 	addi	r6,r6,22696
   8a3f4:	00944640 	call	94464 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8a3f8:	0093fdc0 	call	93fdc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8a3fc:	01000274 	movhi	r4,9
   8a400:	21101004 	addi	r4,r4,16448
   8a404:	00951280 	call	95128 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8a408:	d126f017 	ldw	r4,-25664(gp)
   8a40c:	d166f117 	ldw	r5,-25660(gp)
   8a410:	d1a6f217 	ldw	r6,-25656(gp)
   8a414:	00802400 	call	80240 <main>
   8a418:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8a41c:	01000044 	movi	r4,1
   8a420:	0089d3c0 	call	89d3c <close>
  exit (result);
   8a424:	e13fff17 	ldw	r4,-4(fp)
   8a428:	009513c0 	call	9513c <exit>

0008a42c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8a42c:	defff704 	addi	sp,sp,-36
   8a430:	dfc00815 	stw	ra,32(sp)
   8a434:	df000715 	stw	fp,28(sp)
   8a438:	df000704 	addi	fp,sp,28
   8a43c:	e13ffb15 	stw	r4,-20(fp)
   8a440:	e17ffc15 	stw	r5,-16(fp)
   8a444:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a448:	e0bffb17 	ldw	r2,-20(fp)
   8a44c:	1004803a 	cmplt	r2,r2,zero
   8a450:	1000091e 	bne	r2,zero,8a478 <read+0x4c>
   8a454:	e13ffb17 	ldw	r4,-20(fp)
   8a458:	01400304 	movi	r5,12
   8a45c:	008964c0 	call	8964c <__mulsi3>
   8a460:	1007883a 	mov	r3,r2
   8a464:	00800274 	movhi	r2,9
   8a468:	10988c04 	addi	r2,r2,25136
   8a46c:	1887883a 	add	r3,r3,r2
   8a470:	e0ffff15 	stw	r3,-4(fp)
   8a474:	00000106 	br	8a47c <read+0x50>
   8a478:	e03fff15 	stw	zero,-4(fp)
   8a47c:	e0bfff17 	ldw	r2,-4(fp)
   8a480:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8a484:	e0bffa17 	ldw	r2,-24(fp)
   8a488:	1005003a 	cmpeq	r2,r2,zero
   8a48c:	1000241e 	bne	r2,zero,8a520 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8a490:	e0bffa17 	ldw	r2,-24(fp)
   8a494:	10800217 	ldw	r2,8(r2)
   8a498:	108000cc 	andi	r2,r2,3
   8a49c:	10800060 	cmpeqi	r2,r2,1
   8a4a0:	10001a1e 	bne	r2,zero,8a50c <read+0xe0>
   8a4a4:	e0bffa17 	ldw	r2,-24(fp)
   8a4a8:	10800017 	ldw	r2,0(r2)
   8a4ac:	10800517 	ldw	r2,20(r2)
   8a4b0:	1005003a 	cmpeq	r2,r2,zero
   8a4b4:	1000151e 	bne	r2,zero,8a50c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8a4b8:	e0bffa17 	ldw	r2,-24(fp)
   8a4bc:	10800017 	ldw	r2,0(r2)
   8a4c0:	10800517 	ldw	r2,20(r2)
   8a4c4:	e17ffc17 	ldw	r5,-16(fp)
   8a4c8:	e1bffd17 	ldw	r6,-12(fp)
   8a4cc:	e13ffa17 	ldw	r4,-24(fp)
   8a4d0:	103ee83a 	callr	r2
   8a4d4:	e0bff915 	stw	r2,-28(fp)
   8a4d8:	e0bff917 	ldw	r2,-28(fp)
   8a4dc:	1004403a 	cmpge	r2,r2,zero
   8a4e0:	1000071e 	bne	r2,zero,8a500 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8a4e4:	008a5500 	call	8a550 <alt_get_errno>
   8a4e8:	e0fff917 	ldw	r3,-28(fp)
   8a4ec:	00c7c83a 	sub	r3,zero,r3
   8a4f0:	10c00015 	stw	r3,0(r2)
          return -1;
   8a4f4:	00bfffc4 	movi	r2,-1
   8a4f8:	e0bffe15 	stw	r2,-8(fp)
   8a4fc:	00000e06 	br	8a538 <read+0x10c>
        }
        return rval;
   8a500:	e0bff917 	ldw	r2,-28(fp)
   8a504:	e0bffe15 	stw	r2,-8(fp)
   8a508:	00000b06 	br	8a538 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8a50c:	008a5500 	call	8a550 <alt_get_errno>
   8a510:	1007883a 	mov	r3,r2
   8a514:	00800344 	movi	r2,13
   8a518:	18800015 	stw	r2,0(r3)
   8a51c:	00000406 	br	8a530 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8a520:	008a5500 	call	8a550 <alt_get_errno>
   8a524:	1007883a 	mov	r3,r2
   8a528:	00801444 	movi	r2,81
   8a52c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8a530:	00bfffc4 	movi	r2,-1
   8a534:	e0bffe15 	stw	r2,-8(fp)
   8a538:	e0bffe17 	ldw	r2,-8(fp)
}
   8a53c:	e037883a 	mov	sp,fp
   8a540:	dfc00117 	ldw	ra,4(sp)
   8a544:	df000017 	ldw	fp,0(sp)
   8a548:	dec00204 	addi	sp,sp,8
   8a54c:	f800283a 	ret

0008a550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a550:	defffd04 	addi	sp,sp,-12
   8a554:	dfc00215 	stw	ra,8(sp)
   8a558:	df000115 	stw	fp,4(sp)
   8a55c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a560:	00800274 	movhi	r2,9
   8a564:	109d1204 	addi	r2,r2,29768
   8a568:	10800017 	ldw	r2,0(r2)
   8a56c:	1005003a 	cmpeq	r2,r2,zero
   8a570:	1000061e 	bne	r2,zero,8a58c <alt_get_errno+0x3c>
   8a574:	00800274 	movhi	r2,9
   8a578:	109d1204 	addi	r2,r2,29768
   8a57c:	10800017 	ldw	r2,0(r2)
   8a580:	103ee83a 	callr	r2
   8a584:	e0bfff15 	stw	r2,-4(fp)
   8a588:	00000306 	br	8a598 <alt_get_errno+0x48>
   8a58c:	008002b4 	movhi	r2,10
   8a590:	10a3f504 	addi	r2,r2,-28716
   8a594:	e0bfff15 	stw	r2,-4(fp)
   8a598:	e0bfff17 	ldw	r2,-4(fp)
}
   8a59c:	e037883a 	mov	sp,fp
   8a5a0:	dfc00117 	ldw	ra,4(sp)
   8a5a4:	df000017 	ldw	fp,0(sp)
   8a5a8:	dec00204 	addi	sp,sp,8
   8a5ac:	f800283a 	ret

0008a5b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8a5b0:	defffc04 	addi	sp,sp,-16
   8a5b4:	dfc00315 	stw	ra,12(sp)
   8a5b8:	df000215 	stw	fp,8(sp)
   8a5bc:	dc000115 	stw	r16,4(sp)
   8a5c0:	df000104 	addi	fp,sp,4
   8a5c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8a5c8:	e0bfff17 	ldw	r2,-4(fp)
   8a5cc:	108000d0 	cmplti	r2,r2,3
   8a5d0:	10000f1e 	bne	r2,zero,8a610 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8a5d4:	e13fff17 	ldw	r4,-4(fp)
   8a5d8:	04000274 	movhi	r16,9
   8a5dc:	84188c04 	addi	r16,r16,25136
   8a5e0:	01400304 	movi	r5,12
   8a5e4:	008964c0 	call	8964c <__mulsi3>
   8a5e8:	1405883a 	add	r2,r2,r16
   8a5ec:	10800204 	addi	r2,r2,8
   8a5f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8a5f4:	e13fff17 	ldw	r4,-4(fp)
   8a5f8:	04000274 	movhi	r16,9
   8a5fc:	84188c04 	addi	r16,r16,25136
   8a600:	01400304 	movi	r5,12
   8a604:	008964c0 	call	8964c <__mulsi3>
   8a608:	1405883a 	add	r2,r2,r16
   8a60c:	10000015 	stw	zero,0(r2)
  }
}
   8a610:	e037883a 	mov	sp,fp
   8a614:	dfc00217 	ldw	ra,8(sp)
   8a618:	df000117 	ldw	fp,4(sp)
   8a61c:	dc000017 	ldw	r16,0(sp)
   8a620:	dec00304 	addi	sp,sp,12
   8a624:	f800283a 	ret

0008a628 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8a628:	defff804 	addi	sp,sp,-32
   8a62c:	df000715 	stw	fp,28(sp)
   8a630:	df000704 	addi	fp,sp,28
   8a634:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a638:	0005303a 	rdctl	r2,status
   8a63c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a640:	e0fffb17 	ldw	r3,-20(fp)
   8a644:	00bfff84 	movi	r2,-2
   8a648:	1884703a 	and	r2,r3,r2
   8a64c:	1001703a 	wrctl	status,r2
  
  return context;
   8a650:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8a654:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8a658:	d0a00c17 	ldw	r2,-32720(gp)
   8a65c:	10c000c4 	addi	r3,r2,3
   8a660:	00bfff04 	movi	r2,-4
   8a664:	1884703a 	and	r2,r3,r2
   8a668:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8a66c:	d0e00c17 	ldw	r3,-32720(gp)
   8a670:	e0bffe17 	ldw	r2,-8(fp)
   8a674:	1887883a 	add	r3,r3,r2
   8a678:	00800434 	movhi	r2,16
   8a67c:	10800004 	addi	r2,r2,0
   8a680:	10c0072e 	bgeu	r2,r3,8a6a0 <sbrk+0x78>
   8a684:	e0bffd17 	ldw	r2,-12(fp)
   8a688:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a68c:	e0bffa17 	ldw	r2,-24(fp)
   8a690:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8a694:	00bfffc4 	movi	r2,-1
   8a698:	e0bfff15 	stw	r2,-4(fp)
   8a69c:	00000c06 	br	8a6d0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8a6a0:	d0a00c17 	ldw	r2,-32720(gp)
   8a6a4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8a6a8:	d0e00c17 	ldw	r3,-32720(gp)
   8a6ac:	e0bffe17 	ldw	r2,-8(fp)
   8a6b0:	1885883a 	add	r2,r3,r2
   8a6b4:	d0a00c15 	stw	r2,-32720(gp)
   8a6b8:	e0bffd17 	ldw	r2,-12(fp)
   8a6bc:	e0bff915 	stw	r2,-28(fp)
   8a6c0:	e0bff917 	ldw	r2,-28(fp)
   8a6c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8a6c8:	e0bffc17 	ldw	r2,-16(fp)
   8a6cc:	e0bfff15 	stw	r2,-4(fp)
   8a6d0:	e0bfff17 	ldw	r2,-4(fp)
} 
   8a6d4:	e037883a 	mov	sp,fp
   8a6d8:	df000017 	ldw	fp,0(sp)
   8a6dc:	dec00104 	addi	sp,sp,4
   8a6e0:	f800283a 	ret

0008a6e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8a6e4:	defff704 	addi	sp,sp,-36
   8a6e8:	dfc00815 	stw	ra,32(sp)
   8a6ec:	df000715 	stw	fp,28(sp)
   8a6f0:	df000704 	addi	fp,sp,28
   8a6f4:	e13ffb15 	stw	r4,-20(fp)
   8a6f8:	e17ffc15 	stw	r5,-16(fp)
   8a6fc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a700:	e0bffb17 	ldw	r2,-20(fp)
   8a704:	1004803a 	cmplt	r2,r2,zero
   8a708:	1000091e 	bne	r2,zero,8a730 <write+0x4c>
   8a70c:	e13ffb17 	ldw	r4,-20(fp)
   8a710:	01400304 	movi	r5,12
   8a714:	008964c0 	call	8964c <__mulsi3>
   8a718:	1007883a 	mov	r3,r2
   8a71c:	00800274 	movhi	r2,9
   8a720:	10988c04 	addi	r2,r2,25136
   8a724:	1887883a 	add	r3,r3,r2
   8a728:	e0ffff15 	stw	r3,-4(fp)
   8a72c:	00000106 	br	8a734 <write+0x50>
   8a730:	e03fff15 	stw	zero,-4(fp)
   8a734:	e0bfff17 	ldw	r2,-4(fp)
   8a738:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8a73c:	e0bffa17 	ldw	r2,-24(fp)
   8a740:	1005003a 	cmpeq	r2,r2,zero
   8a744:	1000241e 	bne	r2,zero,8a7d8 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8a748:	e0bffa17 	ldw	r2,-24(fp)
   8a74c:	10800217 	ldw	r2,8(r2)
   8a750:	108000cc 	andi	r2,r2,3
   8a754:	1005003a 	cmpeq	r2,r2,zero
   8a758:	10001a1e 	bne	r2,zero,8a7c4 <write+0xe0>
   8a75c:	e0bffa17 	ldw	r2,-24(fp)
   8a760:	10800017 	ldw	r2,0(r2)
   8a764:	10800617 	ldw	r2,24(r2)
   8a768:	1005003a 	cmpeq	r2,r2,zero
   8a76c:	1000151e 	bne	r2,zero,8a7c4 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8a770:	e0bffa17 	ldw	r2,-24(fp)
   8a774:	10800017 	ldw	r2,0(r2)
   8a778:	10800617 	ldw	r2,24(r2)
   8a77c:	e17ffc17 	ldw	r5,-16(fp)
   8a780:	e1bffd17 	ldw	r6,-12(fp)
   8a784:	e13ffa17 	ldw	r4,-24(fp)
   8a788:	103ee83a 	callr	r2
   8a78c:	e0bff915 	stw	r2,-28(fp)
   8a790:	e0bff917 	ldw	r2,-28(fp)
   8a794:	1004403a 	cmpge	r2,r2,zero
   8a798:	1000071e 	bne	r2,zero,8a7b8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8a79c:	008a8080 	call	8a808 <alt_get_errno>
   8a7a0:	e0fff917 	ldw	r3,-28(fp)
   8a7a4:	00c7c83a 	sub	r3,zero,r3
   8a7a8:	10c00015 	stw	r3,0(r2)
        return -1;
   8a7ac:	00bfffc4 	movi	r2,-1
   8a7b0:	e0bffe15 	stw	r2,-8(fp)
   8a7b4:	00000e06 	br	8a7f0 <write+0x10c>
      }
      return rval;
   8a7b8:	e0bff917 	ldw	r2,-28(fp)
   8a7bc:	e0bffe15 	stw	r2,-8(fp)
   8a7c0:	00000b06 	br	8a7f0 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8a7c4:	008a8080 	call	8a808 <alt_get_errno>
   8a7c8:	1007883a 	mov	r3,r2
   8a7cc:	00800344 	movi	r2,13
   8a7d0:	18800015 	stw	r2,0(r3)
   8a7d4:	00000406 	br	8a7e8 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8a7d8:	008a8080 	call	8a808 <alt_get_errno>
   8a7dc:	1007883a 	mov	r3,r2
   8a7e0:	00801444 	movi	r2,81
   8a7e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8a7e8:	00bfffc4 	movi	r2,-1
   8a7ec:	e0bffe15 	stw	r2,-8(fp)
   8a7f0:	e0bffe17 	ldw	r2,-8(fp)
}
   8a7f4:	e037883a 	mov	sp,fp
   8a7f8:	dfc00117 	ldw	ra,4(sp)
   8a7fc:	df000017 	ldw	fp,0(sp)
   8a800:	dec00204 	addi	sp,sp,8
   8a804:	f800283a 	ret

0008a808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a808:	defffd04 	addi	sp,sp,-12
   8a80c:	dfc00215 	stw	ra,8(sp)
   8a810:	df000115 	stw	fp,4(sp)
   8a814:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a818:	00800274 	movhi	r2,9
   8a81c:	109d1204 	addi	r2,r2,29768
   8a820:	10800017 	ldw	r2,0(r2)
   8a824:	1005003a 	cmpeq	r2,r2,zero
   8a828:	1000061e 	bne	r2,zero,8a844 <alt_get_errno+0x3c>
   8a82c:	00800274 	movhi	r2,9
   8a830:	109d1204 	addi	r2,r2,29768
   8a834:	10800017 	ldw	r2,0(r2)
   8a838:	103ee83a 	callr	r2
   8a83c:	e0bfff15 	stw	r2,-4(fp)
   8a840:	00000306 	br	8a850 <alt_get_errno+0x48>
   8a844:	008002b4 	movhi	r2,10
   8a848:	10a3f504 	addi	r2,r2,-28716
   8a84c:	e0bfff15 	stw	r2,-4(fp)
   8a850:	e0bfff17 	ldw	r2,-4(fp)
}
   8a854:	e037883a 	mov	sp,fp
   8a858:	dfc00117 	ldw	ra,4(sp)
   8a85c:	df000017 	ldw	fp,0(sp)
   8a860:	dec00204 	addi	sp,sp,8
   8a864:	f800283a 	ret

0008a868 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   8a868:	deffdf04 	addi	sp,sp,-132
   8a86c:	dfc02015 	stw	ra,128(sp)
   8a870:	df001f15 	stw	fp,124(sp)
   8a874:	df001f04 	addi	fp,sp,124
   8a878:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8a87c:	e17fe204 	addi	r5,fp,-120
   8a880:	01003fc4 	movi	r4,255
   8a884:	00926c00 	call	926c0 <OSTaskQuery>
   8a888:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8a88c:	e0bffe83 	ldbu	r2,-6(fp)
   8a890:	10803fcc 	andi	r2,r2,255
   8a894:	1004c03a 	cmpne	r2,r2,zero
   8a898:	1000191e 	bne	r2,zero,8a900 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
   8a89c:	e0bfee83 	ldbu	r2,-70(fp)
   8a8a0:	10803fcc 	andi	r2,r2,255
   8a8a4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   8a8a8:	d126f417 	ldw	r4,-25648(gp)
   8a8ac:	e17ffd04 	addi	r5,fp,-12
   8a8b0:	0090c0c0 	call	90c0c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   8a8b4:	e0bffe43 	ldbu	r2,-7(fp)
   8a8b8:	10803fcc 	andi	r2,r2,255
   8a8bc:	1005003a 	cmpeq	r2,r2,zero
   8a8c0:	1000071e 	bne	r2,zero,8a8e0 <__env_lock+0x78>
   8a8c4:	d0e00d17 	ldw	r3,-32716(gp)
   8a8c8:	e0bfe117 	ldw	r2,-124(fp)
   8a8cc:	10c0041e 	bne	r2,r3,8a8e0 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
   8a8d0:	d0a6f317 	ldw	r2,-25652(gp)
   8a8d4:	10800044 	addi	r2,r2,1
   8a8d8:	d0a6f315 	stw	r2,-25652(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
   8a8dc:	00000806 	br	8a900 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   8a8e0:	d126f417 	ldw	r4,-25648(gp)
   8a8e4:	e1bffe84 	addi	r6,fp,-6
   8a8e8:	000b883a 	mov	r5,zero
   8a8ec:	00906ec0 	call	906ec <OSSemPend>
    locks  = 1;
   8a8f0:	00800044 	movi	r2,1
   8a8f4:	d0a6f315 	stw	r2,-25652(gp)
    lockid = id;
   8a8f8:	e0bfe117 	ldw	r2,-124(fp)
   8a8fc:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8a900:	e037883a 	mov	sp,fp
   8a904:	dfc00117 	ldw	ra,4(sp)
   8a908:	df000017 	ldw	fp,0(sp)
   8a90c:	dec00204 	addi	sp,sp,8
   8a910:	f800283a 	ret

0008a914 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   8a914:	defffd04 	addi	sp,sp,-12
   8a918:	dfc00215 	stw	ra,8(sp)
   8a91c:	df000115 	stw	fp,4(sp)
   8a920:	df000104 	addi	fp,sp,4
   8a924:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   8a928:	d0a6f317 	ldw	r2,-25652(gp)
   8a92c:	1005003a 	cmpeq	r2,r2,zero
   8a930:	10000a1e 	bne	r2,zero,8a95c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   8a934:	d0a6f317 	ldw	r2,-25652(gp)
   8a938:	10bfffc4 	addi	r2,r2,-1
   8a93c:	d0a6f315 	stw	r2,-25652(gp)
   8a940:	d0a6f317 	ldw	r2,-25652(gp)
   8a944:	1004c03a 	cmpne	r2,r2,zero
   8a948:	1000041e 	bne	r2,zero,8a95c <__env_unlock+0x48>
  {
    lockid = -1;
   8a94c:	00bfffc4 	movi	r2,-1
   8a950:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   8a954:	d126f417 	ldw	r4,-25648(gp)
   8a958:	0090ae40 	call	90ae4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8a95c:	e037883a 	mov	sp,fp
   8a960:	dfc00117 	ldw	ra,4(sp)
   8a964:	df000017 	ldw	fp,0(sp)
   8a968:	dec00204 	addi	sp,sp,8
   8a96c:	f800283a 	ret

0008a970 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   8a970:	deffdb04 	addi	sp,sp,-148
   8a974:	dfc02415 	stw	ra,144(sp)
   8a978:	df002315 	stw	fp,140(sp)
   8a97c:	df002304 	addi	fp,sp,140
   8a980:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8a984:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   8a988:	008002b4 	movhi	r2,10
   8a98c:	10a3fe44 	addi	r2,r2,-28679
   8a990:	10800003 	ldbu	r2,0(r2)
   8a994:	10803fcc 	andi	r2,r2,255
   8a998:	10800058 	cmpnei	r2,r2,1
   8a99c:	1000311e 	bne	r2,zero,8aa64 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8a9a0:	e17fe204 	addi	r5,fp,-120
   8a9a4:	01003fc4 	movi	r4,255
   8a9a8:	00926c00 	call	926c0 <OSTaskQuery>
   8a9ac:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8a9b0:	e0bffe83 	ldbu	r2,-6(fp)
   8a9b4:	10803fcc 	andi	r2,r2,255
   8a9b8:	1004c03a 	cmpne	r2,r2,zero
   8a9bc:	1000291e 	bne	r2,zero,8aa64 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
   8a9c0:	e0bfee83 	ldbu	r2,-70(fp)
   8a9c4:	10803fcc 	andi	r2,r2,255
   8a9c8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   8a9cc:	d126f617 	ldw	r4,-25640(gp)
   8a9d0:	e17ffd04 	addi	r5,fp,-12
   8a9d4:	0090c0c0 	call	90c0c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a9d8:	0005303a 	rdctl	r2,status
   8a9dc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a9e0:	e0ffdf17 	ldw	r3,-132(fp)
   8a9e4:	00bfff84 	movi	r2,-2
   8a9e8:	1884703a 	and	r2,r3,r2
   8a9ec:	1001703a 	wrctl	status,r2
  
  return context;
   8a9f0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   8a9f4:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
   8a9f8:	e0bffd0b 	ldhu	r2,-12(fp)
   8a9fc:	10bfffcc 	andi	r2,r2,65535
   8aa00:	1004c03a 	cmpne	r2,r2,zero
   8aa04:	10000b1e 	bne	r2,zero,8aa34 <__malloc_lock+0xc4>
   8aa08:	d0e00e17 	ldw	r3,-32712(gp)
   8aa0c:	e0bfe117 	ldw	r2,-124(fp)
   8aa10:	10c0081e 	bne	r2,r3,8aa34 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
   8aa14:	d0a6f517 	ldw	r2,-25644(gp)
   8aa18:	10800044 	addi	r2,r2,1
   8aa1c:	d0a6f515 	stw	r2,-25644(gp)
   8aa20:	e0bfe017 	ldw	r2,-128(fp)
   8aa24:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8aa28:	e0bfde17 	ldw	r2,-136(fp)
   8aa2c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
   8aa30:	00000c06 	br	8aa64 <__malloc_lock+0xf4>
   8aa34:	e0bfe017 	ldw	r2,-128(fp)
   8aa38:	e0bfdd15 	stw	r2,-140(fp)
   8aa3c:	e0bfdd17 	ldw	r2,-140(fp)
   8aa40:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   8aa44:	d126f617 	ldw	r4,-25640(gp)
   8aa48:	e1bffe84 	addi	r6,fp,-6
   8aa4c:	000b883a 	mov	r5,zero
   8aa50:	00906ec0 	call	906ec <OSSemPend>
    locks  = 1;
   8aa54:	00800044 	movi	r2,1
   8aa58:	d0a6f515 	stw	r2,-25644(gp)
    lockid = id;
   8aa5c:	e0bfe117 	ldw	r2,-124(fp)
   8aa60:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8aa64:	e037883a 	mov	sp,fp
   8aa68:	dfc00117 	ldw	ra,4(sp)
   8aa6c:	df000017 	ldw	fp,0(sp)
   8aa70:	dec00204 	addi	sp,sp,8
   8aa74:	f800283a 	ret

0008aa78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8aa78:	defff804 	addi	sp,sp,-32
   8aa7c:	dfc00715 	stw	ra,28(sp)
   8aa80:	df000615 	stw	fp,24(sp)
   8aa84:	df000604 	addi	fp,sp,24
   8aa88:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8aa8c:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
   8aa90:	008002b4 	movhi	r2,10
   8aa94:	10a3fe44 	addi	r2,r2,-28679
   8aa98:	10800003 	ldbu	r2,0(r2)
   8aa9c:	10803fcc 	andi	r2,r2,255
   8aaa0:	10800058 	cmpnei	r2,r2,1
   8aaa4:	1000231e 	bne	r2,zero,8ab34 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aaa8:	0005303a 	rdctl	r2,status
   8aaac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aab0:	e0fffd17 	ldw	r3,-12(fp)
   8aab4:	00bfff84 	movi	r2,-2
   8aab8:	1884703a 	and	r2,r3,r2
   8aabc:	1001703a 	wrctl	status,r2
  
  return context;
   8aac0:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
   8aac4:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
   8aac8:	d0a6f517 	ldw	r2,-25644(gp)
   8aacc:	1004c03a 	cmpne	r2,r2,zero
   8aad0:	1000051e 	bne	r2,zero,8aae8 <__malloc_unlock+0x70>
   8aad4:	e0bffe17 	ldw	r2,-8(fp)
   8aad8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8aadc:	e0bffc17 	ldw	r2,-16(fp)
   8aae0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   8aae4:	00001306 	br	8ab34 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   8aae8:	d0a6f517 	ldw	r2,-25644(gp)
   8aaec:	10bfffc4 	addi	r2,r2,-1
   8aaf0:	d0a6f515 	stw	r2,-25644(gp)
   8aaf4:	d0a6f517 	ldw	r2,-25644(gp)
   8aaf8:	1004c03a 	cmpne	r2,r2,zero
   8aafc:	1000091e 	bne	r2,zero,8ab24 <__malloc_unlock+0xac>
  {
    lockid = -1;
   8ab00:	00bfffc4 	movi	r2,-1
   8ab04:	d0a00e15 	stw	r2,-32712(gp)
   8ab08:	e0bffe17 	ldw	r2,-8(fp)
   8ab0c:	e0bffb15 	stw	r2,-20(fp)
   8ab10:	e0bffb17 	ldw	r2,-20(fp)
   8ab14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   8ab18:	d126f617 	ldw	r4,-25640(gp)
   8ab1c:	0090ae40 	call	90ae4 <OSSemPost>
   8ab20:	00000406 	br	8ab34 <__malloc_unlock+0xbc>
   8ab24:	e0bffe17 	ldw	r2,-8(fp)
   8ab28:	e0bffa15 	stw	r2,-24(fp)
   8ab2c:	e0bffa17 	ldw	r2,-24(fp)
   8ab30:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8ab34:	e037883a 	mov	sp,fp
   8ab38:	dfc00117 	ldw	ra,4(sp)
   8ab3c:	df000017 	ldw	fp,0(sp)
   8ab40:	dec00204 	addi	sp,sp,8
   8ab44:	f800283a 	ret

0008ab48 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8ab48:	defff604 	addi	sp,sp,-40
   8ab4c:	dfc00915 	stw	ra,36(sp)
   8ab50:	df000815 	stw	fp,32(sp)
   8ab54:	df000804 	addi	fp,sp,32
   8ab58:	e13ffc15 	stw	r4,-16(fp)
   8ab5c:	e17ffd15 	stw	r5,-12(fp)
   8ab60:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ab64:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8ab68:	e0bffe17 	ldw	r2,-8(fp)
   8ab6c:	1004c03a 	cmpne	r2,r2,zero
   8ab70:	1000021e 	bne	r2,zero,8ab7c <OSEventNameGet+0x34>
        return (0);
   8ab74:	e03fff15 	stw	zero,-4(fp)
   8ab78:	00003906 	br	8ac60 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8ab7c:	e0bffc17 	ldw	r2,-16(fp)
   8ab80:	1004c03a 	cmpne	r2,r2,zero
   8ab84:	1000051e 	bne	r2,zero,8ab9c <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   8ab88:	e0fffe17 	ldw	r3,-8(fp)
   8ab8c:	00800104 	movi	r2,4
   8ab90:	18800005 	stb	r2,0(r3)
        return (0);
   8ab94:	e03fff15 	stw	zero,-4(fp)
   8ab98:	00003106 	br	8ac60 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8ab9c:	e0bffd17 	ldw	r2,-12(fp)
   8aba0:	1004c03a 	cmpne	r2,r2,zero
   8aba4:	1000051e 	bne	r2,zero,8abbc <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8aba8:	e0fffe17 	ldw	r3,-8(fp)
   8abac:	00800304 	movi	r2,12
   8abb0:	18800005 	stb	r2,0(r3)
        return (0);
   8abb4:	e03fff15 	stw	zero,-4(fp)
   8abb8:	00002906 	br	8ac60 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8abbc:	d0a70503 	ldbu	r2,-25580(gp)
   8abc0:	10803fcc 	andi	r2,r2,255
   8abc4:	1005003a 	cmpeq	r2,r2,zero
   8abc8:	1000051e 	bne	r2,zero,8abe0 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
   8abcc:	e0fffe17 	ldw	r3,-8(fp)
   8abd0:	00800444 	movi	r2,17
   8abd4:	18800005 	stb	r2,0(r3)
        return (0);
   8abd8:	e03fff15 	stw	zero,-4(fp)
   8abdc:	00002006 	br	8ac60 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
   8abe0:	e0bffc17 	ldw	r2,-16(fp)
   8abe4:	10800003 	ldbu	r2,0(r2)
   8abe8:	10803fcc 	andi	r2,r2,255
   8abec:	10bfffc4 	addi	r2,r2,-1
   8abf0:	10800128 	cmpgeui	r2,r2,4
   8abf4:	1000161e 	bne	r2,zero,8ac50 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8abf8:	0005303a 	rdctl	r2,status
   8abfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ac00:	e0fff917 	ldw	r3,-28(fp)
   8ac04:	00bfff84 	movi	r2,-2
   8ac08:	1884703a 	and	r2,r3,r2
   8ac0c:	1001703a 	wrctl	status,r2
  
  return context;
   8ac10:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   8ac14:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   8ac18:	e0bffc17 	ldw	r2,-16(fp)
   8ac1c:	11400384 	addi	r5,r2,14
   8ac20:	e13ffd17 	ldw	r4,-12(fp)
   8ac24:	008c6cc0 	call	8c6cc <OS_StrCopy>
   8ac28:	e0bffb05 	stb	r2,-20(fp)
   8ac2c:	e0bffa17 	ldw	r2,-24(fp)
   8ac30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ac34:	e0bff817 	ldw	r2,-32(fp)
   8ac38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ac3c:	e0bffe17 	ldw	r2,-8(fp)
   8ac40:	10000005 	stb	zero,0(r2)
    return (len);
   8ac44:	e0bffb03 	ldbu	r2,-20(fp)
   8ac48:	e0bfff15 	stw	r2,-4(fp)
   8ac4c:	00000406 	br	8ac60 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8ac50:	e0fffe17 	ldw	r3,-8(fp)
   8ac54:	00800044 	movi	r2,1
   8ac58:	18800005 	stb	r2,0(r3)
             return (0);
   8ac5c:	e03fff15 	stw	zero,-4(fp)
   8ac60:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
   8ac64:	e037883a 	mov	sp,fp
   8ac68:	dfc00117 	ldw	ra,4(sp)
   8ac6c:	df000017 	ldw	fp,0(sp)
   8ac70:	dec00204 	addi	sp,sp,8
   8ac74:	f800283a 	ret

0008ac78 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8ac78:	defff604 	addi	sp,sp,-40
   8ac7c:	dfc00915 	stw	ra,36(sp)
   8ac80:	df000815 	stw	fp,32(sp)
   8ac84:	df000804 	addi	fp,sp,32
   8ac88:	e13ffd15 	stw	r4,-12(fp)
   8ac8c:	e17ffe15 	stw	r5,-8(fp)
   8ac90:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ac94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8ac98:	e0bfff17 	ldw	r2,-4(fp)
   8ac9c:	1005003a 	cmpeq	r2,r2,zero
   8aca0:	1000411e 	bne	r2,zero,8ada8 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8aca4:	e0bffd17 	ldw	r2,-12(fp)
   8aca8:	1004c03a 	cmpne	r2,r2,zero
   8acac:	1000041e 	bne	r2,zero,8acc0 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   8acb0:	e0ffff17 	ldw	r3,-4(fp)
   8acb4:	00800104 	movi	r2,4
   8acb8:	18800005 	stb	r2,0(r3)
        return;
   8acbc:	00003a06 	br	8ada8 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8acc0:	e0bffe17 	ldw	r2,-8(fp)
   8acc4:	1004c03a 	cmpne	r2,r2,zero
   8acc8:	1000041e 	bne	r2,zero,8acdc <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   8accc:	e0ffff17 	ldw	r3,-4(fp)
   8acd0:	00800304 	movi	r2,12
   8acd4:	18800005 	stb	r2,0(r3)
        return;
   8acd8:	00003306 	br	8ada8 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8acdc:	d0a70503 	ldbu	r2,-25580(gp)
   8ace0:	10803fcc 	andi	r2,r2,255
   8ace4:	1005003a 	cmpeq	r2,r2,zero
   8ace8:	1000041e 	bne	r2,zero,8acfc <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
   8acec:	e0ffff17 	ldw	r3,-4(fp)
   8acf0:	00800484 	movi	r2,18
   8acf4:	18800005 	stb	r2,0(r3)
        return;
   8acf8:	00002b06 	br	8ada8 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
   8acfc:	e0bffd17 	ldw	r2,-12(fp)
   8ad00:	10800003 	ldbu	r2,0(r2)
   8ad04:	10803fcc 	andi	r2,r2,255
   8ad08:	10bfffc4 	addi	r2,r2,-1
   8ad0c:	10800128 	cmpgeui	r2,r2,4
   8ad10:	10000f1e 	bne	r2,zero,8ad50 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ad14:	0005303a 	rdctl	r2,status
   8ad18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ad1c:	e0fffa17 	ldw	r3,-24(fp)
   8ad20:	00bfff84 	movi	r2,-2
   8ad24:	1884703a 	and	r2,r3,r2
   8ad28:	1001703a 	wrctl	status,r2
  
  return context;
   8ad2c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   8ad30:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   8ad34:	e13ffe17 	ldw	r4,-8(fp)
   8ad38:	008c74c0 	call	8c74c <OS_StrLen>
   8ad3c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   8ad40:	e0bffc03 	ldbu	r2,-16(fp)
   8ad44:	10800828 	cmpgeui	r2,r2,32
   8ad48:	1000051e 	bne	r2,zero,8ad60 <OSEventNameSet+0xe8>
   8ad4c:	00000c06 	br	8ad80 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8ad50:	e0ffff17 	ldw	r3,-4(fp)
   8ad54:	00800044 	movi	r2,1
   8ad58:	18800005 	stb	r2,0(r3)
             return;
   8ad5c:	00001206 	br	8ada8 <OSEventNameSet+0x130>
   8ad60:	e0bffb17 	ldw	r2,-20(fp)
   8ad64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ad68:	e0bff917 	ldw	r2,-28(fp)
   8ad6c:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   8ad70:	e0ffff17 	ldw	r3,-4(fp)
   8ad74:	008002c4 	movi	r2,11
   8ad78:	18800005 	stb	r2,0(r3)
        return;
   8ad7c:	00000a06 	br	8ada8 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   8ad80:	e0bffd17 	ldw	r2,-12(fp)
   8ad84:	11000384 	addi	r4,r2,14
   8ad88:	e17ffe17 	ldw	r5,-8(fp)
   8ad8c:	008c6cc0 	call	8c6cc <OS_StrCopy>
   8ad90:	e0bffb17 	ldw	r2,-20(fp)
   8ad94:	e0bff815 	stw	r2,-32(fp)
   8ad98:	e0bff817 	ldw	r2,-32(fp)
   8ad9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ada0:	e0bfff17 	ldw	r2,-4(fp)
   8ada4:	10000005 	stb	zero,0(r2)
}
   8ada8:	e037883a 	mov	sp,fp
   8adac:	dfc00117 	ldw	ra,4(sp)
   8adb0:	df000017 	ldw	fp,0(sp)
   8adb4:	dec00204 	addi	sp,sp,8
   8adb8:	f800283a 	ret

0008adbc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   8adbc:	deffe704 	addi	sp,sp,-100
   8adc0:	dfc01815 	stw	ra,96(sp)
   8adc4:	df001715 	stw	fp,92(sp)
   8adc8:	df001704 	addi	fp,sp,92
   8adcc:	e13ff615 	stw	r4,-40(fp)
   8add0:	e17ff715 	stw	r5,-36(fp)
   8add4:	e1bff815 	stw	r6,-32(fp)
   8add8:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   8addc:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   8ade0:	e0800217 	ldw	r2,8(fp)
   8ade4:	1004c03a 	cmpne	r2,r2,zero
   8ade8:	1000021e 	bne	r2,zero,8adf4 <OSEventPendMulti+0x38>
        return (0);
   8adec:	e03fff15 	stw	zero,-4(fp)
   8adf0:	00019906 	br	8b458 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   8adf4:	e0bff617 	ldw	r2,-40(fp)
   8adf8:	1004c03a 	cmpne	r2,r2,zero
   8adfc:	1000051e 	bne	r2,zero,8ae14 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
   8ae00:	e0c00217 	ldw	r3,8(fp)
   8ae04:	00800104 	movi	r2,4
   8ae08:	18800005 	stb	r2,0(r3)
        return (0);
   8ae0c:	e03fff15 	stw	zero,-4(fp)
   8ae10:	00019106 	br	8b458 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   8ae14:	e0bff717 	ldw	r2,-36(fp)
   8ae18:	1004c03a 	cmpne	r2,r2,zero
   8ae1c:	1000051e 	bne	r2,zero,8ae34 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
   8ae20:	e0c00217 	ldw	r3,8(fp)
   8ae24:	00800104 	movi	r2,4
   8ae28:	18800005 	stb	r2,0(r3)
        return (0);
   8ae2c:	e03fff15 	stw	zero,-4(fp)
   8ae30:	00018906 	br	8b458 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   8ae34:	e0bff817 	ldw	r2,-32(fp)
   8ae38:	1004c03a 	cmpne	r2,r2,zero
   8ae3c:	1000051e 	bne	r2,zero,8ae54 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
   8ae40:	e0c00217 	ldw	r3,8(fp)
   8ae44:	00800104 	movi	r2,4
   8ae48:	18800005 	stb	r2,0(r3)
        return (0);
   8ae4c:	e03fff15 	stw	zero,-4(fp)
   8ae50:	00018106 	br	8b458 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   8ae54:	e0bff717 	ldw	r2,-36(fp)
   8ae58:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   8ae5c:	e0bff617 	ldw	r2,-40(fp)
   8ae60:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
   8ae64:	e0bff517 	ldw	r2,-44(fp)
   8ae68:	10800017 	ldw	r2,0(r2)
   8ae6c:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
   8ae70:	00001806 	br	8aed4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   8ae74:	e0bff417 	ldw	r2,-48(fp)
   8ae78:	10800003 	ldbu	r2,0(r2)
   8ae7c:	10803fcc 	andi	r2,r2,255
   8ae80:	e0bffe15 	stw	r2,-8(fp)
   8ae84:	e0fffe17 	ldw	r3,-8(fp)
   8ae88:	188000a0 	cmpeqi	r2,r3,2
   8ae8c:	10000b1e 	bne	r2,zero,8aebc <OSEventPendMulti+0x100>
   8ae90:	e0fffe17 	ldw	r3,-8(fp)
   8ae94:	188000e0 	cmpeqi	r2,r3,3
   8ae98:	1000081e 	bne	r2,zero,8aebc <OSEventPendMulti+0x100>
   8ae9c:	e0fffe17 	ldw	r3,-8(fp)
   8aea0:	18800060 	cmpeqi	r2,r3,1
   8aea4:	1000051e 	bne	r2,zero,8aebc <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   8aea8:	e0c00217 	ldw	r3,8(fp)
   8aeac:	00800044 	movi	r2,1
   8aeb0:	18800005 	stb	r2,0(r3)
                 return (0);
   8aeb4:	e03fff15 	stw	zero,-4(fp)
   8aeb8:	00016706 	br	8b458 <OSEventPendMulti+0x69c>
        }
        pevents++;
   8aebc:	e0bff517 	ldw	r2,-44(fp)
   8aec0:	10800104 	addi	r2,r2,4
   8aec4:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   8aec8:	e0bff517 	ldw	r2,-44(fp)
   8aecc:	10800017 	ldw	r2,0(r2)
   8aed0:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   8aed4:	e0bff417 	ldw	r2,-48(fp)
   8aed8:	1004c03a 	cmpne	r2,r2,zero
   8aedc:	103fe51e 	bne	r2,zero,8ae74 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   8aee0:	d0a70503 	ldbu	r2,-25580(gp)
   8aee4:	10803fcc 	andi	r2,r2,255
   8aee8:	1005003a 	cmpeq	r2,r2,zero
   8aeec:	1000051e 	bne	r2,zero,8af04 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   8aef0:	e0c00217 	ldw	r3,8(fp)
   8aef4:	00800084 	movi	r2,2
   8aef8:	18800005 	stb	r2,0(r3)
        return (0);
   8aefc:	e03fff15 	stw	zero,-4(fp)
   8af00:	00015506 	br	8b458 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   8af04:	d0a6f703 	ldbu	r2,-25636(gp)
   8af08:	10803fcc 	andi	r2,r2,255
   8af0c:	1005003a 	cmpeq	r2,r2,zero
   8af10:	1000051e 	bne	r2,zero,8af28 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   8af14:	e0c00217 	ldw	r3,8(fp)
   8af18:	00800344 	movi	r2,13
   8af1c:	18800005 	stb	r2,0(r3)
        return (0);
   8af20:	e03fff15 	stw	zero,-4(fp)
   8af24:	00014c06 	br	8b458 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8af28:	0005303a 	rdctl	r2,status
   8af2c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8af30:	e0ffef17 	ldw	r3,-68(fp)
   8af34:	00bfff84 	movi	r2,-2
   8af38:	1884703a 	and	r2,r3,r2
   8af3c:	1001703a 	wrctl	status,r2
  
  return context;
   8af40:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   8af44:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
   8af48:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
   8af4c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   8af50:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
   8af54:	e0bff617 	ldw	r2,-40(fp)
   8af58:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
   8af5c:	e0bff517 	ldw	r2,-44(fp)
   8af60:	10800017 	ldw	r2,0(r2)
   8af64:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8af68:	00008f06 	br	8b1a8 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
   8af6c:	e0bff417 	ldw	r2,-48(fp)
   8af70:	10800003 	ldbu	r2,0(r2)
   8af74:	10803fcc 	andi	r2,r2,255
   8af78:	e0bffd15 	stw	r2,-12(fp)
   8af7c:	e0fffd17 	ldw	r3,-12(fp)
   8af80:	188000a0 	cmpeqi	r2,r3,2
   8af84:	1000441e 	bne	r2,zero,8b098 <OSEventPendMulti+0x2dc>
   8af88:	e0fffd17 	ldw	r3,-12(fp)
   8af8c:	188000e0 	cmpeqi	r2,r3,3
   8af90:	1000041e 	bne	r2,zero,8afa4 <OSEventPendMulti+0x1e8>
   8af94:	e0fffd17 	ldw	r3,-12(fp)
   8af98:	18800060 	cmpeqi	r2,r3,1
   8af9c:	1000211e 	bne	r2,zero,8b024 <OSEventPendMulti+0x268>
   8afa0:	00006f06 	br	8b160 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   8afa4:	e0bff417 	ldw	r2,-48(fp)
   8afa8:	1080020b 	ldhu	r2,8(r2)
   8afac:	10bfffcc 	andi	r2,r2,65535
   8afb0:	1005003a 	cmpeq	r2,r2,zero
   8afb4:	1000171e 	bne	r2,zero,8b014 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   8afb8:	e0bff417 	ldw	r2,-48(fp)
   8afbc:	1080020b 	ldhu	r2,8(r2)
   8afc0:	10bfffc4 	addi	r2,r2,-1
   8afc4:	1007883a 	mov	r3,r2
   8afc8:	e0bff417 	ldw	r2,-48(fp)
   8afcc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   8afd0:	e0fff717 	ldw	r3,-36(fp)
   8afd4:	e0bff417 	ldw	r2,-48(fp)
   8afd8:	18800015 	stw	r2,0(r3)
   8afdc:	e0bff717 	ldw	r2,-36(fp)
   8afe0:	10800104 	addi	r2,r2,4
   8afe4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
   8afe8:	00800044 	movi	r2,1
   8afec:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   8aff0:	e0bff817 	ldw	r2,-32(fp)
   8aff4:	10000015 	stw	zero,0(r2)
   8aff8:	e0bff817 	ldw	r2,-32(fp)
   8affc:	10800104 	addi	r2,r2,4
   8b000:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
   8b004:	e0bff18b 	ldhu	r2,-58(fp)
   8b008:	10800044 	addi	r2,r2,1
   8b00c:	e0bff18d 	sth	r2,-58(fp)
   8b010:	00005f06 	br	8b190 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   8b014:	e0bff103 	ldbu	r2,-60(fp)
   8b018:	10800054 	ori	r2,r2,1
   8b01c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8b020:	00005b06 	br	8b190 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   8b024:	e0bff417 	ldw	r2,-48(fp)
   8b028:	10800117 	ldw	r2,4(r2)
   8b02c:	1005003a 	cmpeq	r2,r2,zero
   8b030:	1000151e 	bne	r2,zero,8b088 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   8b034:	e0bff417 	ldw	r2,-48(fp)
   8b038:	10c00117 	ldw	r3,4(r2)
   8b03c:	e0bff817 	ldw	r2,-32(fp)
   8b040:	10c00015 	stw	r3,0(r2)
   8b044:	e0bff817 	ldw	r2,-32(fp)
   8b048:	10800104 	addi	r2,r2,4
   8b04c:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
   8b050:	e0bff417 	ldw	r2,-48(fp)
   8b054:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   8b058:	e0fff717 	ldw	r3,-36(fp)
   8b05c:	e0bff417 	ldw	r2,-48(fp)
   8b060:	18800015 	stw	r2,0(r3)
   8b064:	e0bff717 	ldw	r2,-36(fp)
   8b068:	10800104 	addi	r2,r2,4
   8b06c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
   8b070:	00800044 	movi	r2,1
   8b074:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   8b078:	e0bff18b 	ldhu	r2,-58(fp)
   8b07c:	10800044 	addi	r2,r2,1
   8b080:	e0bff18d 	sth	r2,-58(fp)
   8b084:	00004206 	br	8b190 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   8b088:	e0bff103 	ldbu	r2,-60(fp)
   8b08c:	10800094 	ori	r2,r2,2
   8b090:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8b094:	00003e06 	br	8b190 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   8b098:	e0bff417 	ldw	r2,-48(fp)
   8b09c:	10800117 	ldw	r2,4(r2)
   8b0a0:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   8b0a4:	e0bff317 	ldw	r2,-52(fp)
   8b0a8:	1080058b 	ldhu	r2,22(r2)
   8b0ac:	10bfffcc 	andi	r2,r2,65535
   8b0b0:	1005003a 	cmpeq	r2,r2,zero
   8b0b4:	1000261e 	bne	r2,zero,8b150 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   8b0b8:	e0bff317 	ldw	r2,-52(fp)
   8b0bc:	11000417 	ldw	r4,16(r2)
   8b0c0:	20c00017 	ldw	r3,0(r4)
   8b0c4:	e0bff817 	ldw	r2,-32(fp)
   8b0c8:	10c00015 	stw	r3,0(r2)
   8b0cc:	e0bff817 	ldw	r2,-32(fp)
   8b0d0:	10800104 	addi	r2,r2,4
   8b0d4:	e0bff815 	stw	r2,-32(fp)
   8b0d8:	20c00104 	addi	r3,r4,4
   8b0dc:	e0bff317 	ldw	r2,-52(fp)
   8b0e0:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   8b0e4:	e0bff317 	ldw	r2,-52(fp)
   8b0e8:	10c00417 	ldw	r3,16(r2)
   8b0ec:	e0bff317 	ldw	r2,-52(fp)
   8b0f0:	10800217 	ldw	r2,8(r2)
   8b0f4:	1880041e 	bne	r3,r2,8b108 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   8b0f8:	e0bff317 	ldw	r2,-52(fp)
   8b0fc:	10c00117 	ldw	r3,4(r2)
   8b100:	e0bff317 	ldw	r2,-52(fp)
   8b104:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   8b108:	e0bff317 	ldw	r2,-52(fp)
   8b10c:	1080058b 	ldhu	r2,22(r2)
   8b110:	10bfffc4 	addi	r2,r2,-1
   8b114:	1007883a 	mov	r3,r2
   8b118:	e0bff317 	ldw	r2,-52(fp)
   8b11c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   8b120:	e0fff717 	ldw	r3,-36(fp)
   8b124:	e0bff417 	ldw	r2,-48(fp)
   8b128:	18800015 	stw	r2,0(r3)
   8b12c:	e0bff717 	ldw	r2,-36(fp)
   8b130:	10800104 	addi	r2,r2,4
   8b134:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
   8b138:	00800044 	movi	r2,1
   8b13c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   8b140:	e0bff18b 	ldhu	r2,-58(fp)
   8b144:	10800044 	addi	r2,r2,1
   8b148:	e0bff18d 	sth	r2,-58(fp)
   8b14c:	00001006 	br	8b190 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   8b150:	e0bff103 	ldbu	r2,-60(fp)
   8b154:	10800114 	ori	r2,r2,4
   8b158:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8b15c:	00000c06 	br	8b190 <OSEventPendMulti+0x3d4>
   8b160:	e0bff017 	ldw	r2,-64(fp)
   8b164:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b168:	e0bfee17 	ldw	r2,-72(fp)
   8b16c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   8b170:	e0bff717 	ldw	r2,-36(fp)
   8b174:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   8b178:	e0c00217 	ldw	r3,8(fp)
   8b17c:	00800044 	movi	r2,1
   8b180:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
   8b184:	e0bff18b 	ldhu	r2,-58(fp)
   8b188:	e0bfff15 	stw	r2,-4(fp)
   8b18c:	0000b206 	br	8b458 <OSEventPendMulti+0x69c>
        }
        pevents++;
   8b190:	e0bff517 	ldw	r2,-44(fp)
   8b194:	10800104 	addi	r2,r2,4
   8b198:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   8b19c:	e0bff517 	ldw	r2,-44(fp)
   8b1a0:	10800017 	ldw	r2,0(r2)
   8b1a4:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8b1a8:	e0bff417 	ldw	r2,-48(fp)
   8b1ac:	1004c03a 	cmpne	r2,r2,zero
   8b1b0:	103f6e1e 	bne	r2,zero,8af6c <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   8b1b4:	e0bff203 	ldbu	r2,-56(fp)
   8b1b8:	10800058 	cmpnei	r2,r2,1
   8b1bc:	10000b1e 	bne	r2,zero,8b1ec <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   8b1c0:	e0bff717 	ldw	r2,-36(fp)
   8b1c4:	10000015 	stw	zero,0(r2)
   8b1c8:	e0bff017 	ldw	r2,-64(fp)
   8b1cc:	e0bfed15 	stw	r2,-76(fp)
   8b1d0:	e0bfed17 	ldw	r2,-76(fp)
   8b1d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   8b1d8:	e0800217 	ldw	r2,8(fp)
   8b1dc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   8b1e0:	e0fff18b 	ldhu	r3,-58(fp)
   8b1e4:	e0ffff15 	stw	r3,-4(fp)
   8b1e8:	00009b06 	br	8b458 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   8b1ec:	d1270617 	ldw	r4,-25576(gp)
   8b1f0:	d0a70617 	ldw	r2,-25576(gp)
   8b1f4:	10c00c03 	ldbu	r3,48(r2)
   8b1f8:	e0bff103 	ldbu	r2,-60(fp)
   8b1fc:	1884b03a 	or	r2,r3,r2
   8b200:	1007883a 	mov	r3,r2
   8b204:	00bfe004 	movi	r2,-128
   8b208:	1884b03a 	or	r2,r3,r2
   8b20c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8b210:	d0a70617 	ldw	r2,-25576(gp)
   8b214:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   8b218:	d0e70617 	ldw	r3,-25576(gp)
   8b21c:	e0bff90b 	ldhu	r2,-28(fp)
   8b220:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   8b224:	e13ff617 	ldw	r4,-40(fp)
   8b228:	008bdec0 	call	8bdec <OS_EventTaskWaitMulti>
   8b22c:	e0bff017 	ldw	r2,-64(fp)
   8b230:	e0bfec15 	stw	r2,-80(fp)
   8b234:	e0bfec17 	ldw	r2,-80(fp)
   8b238:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   8b23c:	008c5880 	call	8c588 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b240:	0005303a 	rdctl	r2,status
   8b244:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b248:	e0ffeb17 	ldw	r3,-84(fp)
   8b24c:	00bfff84 	movi	r2,-2
   8b250:	1884703a 	and	r2,r3,r2
   8b254:	1001703a 	wrctl	status,r2
  
  return context;
   8b258:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
   8b25c:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   8b260:	d0a70617 	ldw	r2,-25576(gp)
   8b264:	10800c43 	ldbu	r2,49(r2)
   8b268:	10803fcc 	andi	r2,r2,255
   8b26c:	e0bffc15 	stw	r2,-16(fp)
   8b270:	e0fffc17 	ldw	r3,-16(fp)
   8b274:	1805003a 	cmpeq	r2,r3,zero
   8b278:	1000041e 	bne	r2,zero,8b28c <OSEventPendMulti+0x4d0>
   8b27c:	e0fffc17 	ldw	r3,-16(fp)
   8b280:	188000a0 	cmpeqi	r2,r3,2
   8b284:	1000011e 	bne	r2,zero,8b28c <OSEventPendMulti+0x4d0>
   8b288:	00001906 	br	8b2f0 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   8b28c:	d0a70617 	ldw	r2,-25576(gp)
   8b290:	10800717 	ldw	r2,28(r2)
   8b294:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   8b298:	e0bff417 	ldw	r2,-48(fp)
   8b29c:	1005003a 	cmpeq	r2,r2,zero
   8b2a0:	10000c1e 	bne	r2,zero,8b2d4 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   8b2a4:	e0fff717 	ldw	r3,-36(fp)
   8b2a8:	e0bff417 	ldw	r2,-48(fp)
   8b2ac:	18800015 	stw	r2,0(r3)
   8b2b0:	e0bff717 	ldw	r2,-36(fp)
   8b2b4:	10800104 	addi	r2,r2,4
   8b2b8:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   8b2bc:	e0bff717 	ldw	r2,-36(fp)
   8b2c0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   8b2c4:	e0bff18b 	ldhu	r2,-58(fp)
   8b2c8:	10800044 	addi	r2,r2,1
   8b2cc:	e0bff18d 	sth	r2,-58(fp)
   8b2d0:	00000a06 	br	8b2fc <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   8b2d4:	d0a70617 	ldw	r2,-25576(gp)
   8b2d8:	00c00044 	movi	r3,1
   8b2dc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8b2e0:	d1270617 	ldw	r4,-25576(gp)
   8b2e4:	e17ff617 	ldw	r5,-40(fp)
   8b2e8:	008bff80 	call	8bff8 <OS_EventTaskRemoveMulti>
             }
			 break;
   8b2ec:	00000306 	br	8b2fc <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8b2f0:	d1270617 	ldw	r4,-25576(gp)
   8b2f4:	e17ff617 	ldw	r5,-40(fp)
   8b2f8:	008bff80 	call	8bff8 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
   8b2fc:	d0a70617 	ldw	r2,-25576(gp)
   8b300:	10800c43 	ldbu	r2,49(r2)
   8b304:	10803fcc 	andi	r2,r2,255
   8b308:	e0bffb15 	stw	r2,-20(fp)
   8b30c:	e0fffb17 	ldw	r3,-20(fp)
   8b310:	1805003a 	cmpeq	r2,r3,zero
   8b314:	1000041e 	bne	r2,zero,8b328 <OSEventPendMulti+0x56c>
   8b318:	e0fffb17 	ldw	r3,-20(fp)
   8b31c:	188000a0 	cmpeqi	r2,r3,2
   8b320:	10002c1e 	bne	r2,zero,8b3d4 <OSEventPendMulti+0x618>
   8b324:	00003406 	br	8b3f8 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   8b328:	e0bff417 	ldw	r2,-48(fp)
   8b32c:	10800003 	ldbu	r2,0(r2)
   8b330:	10803fcc 	andi	r2,r2,255
   8b334:	e0bffa15 	stw	r2,-24(fp)
   8b338:	e0fffa17 	ldw	r3,-24(fp)
   8b33c:	18800050 	cmplti	r2,r3,1
   8b340:	1000151e 	bne	r2,zero,8b398 <OSEventPendMulti+0x5dc>
   8b344:	e0fffa17 	ldw	r3,-24(fp)
   8b348:	188000d0 	cmplti	r2,r3,3
   8b34c:	10000a1e 	bne	r2,zero,8b378 <OSEventPendMulti+0x5bc>
   8b350:	e0fffa17 	ldw	r3,-24(fp)
   8b354:	188000e0 	cmpeqi	r2,r3,3
   8b358:	1000011e 	bne	r2,zero,8b360 <OSEventPendMulti+0x5a4>
   8b35c:	00000e06 	br	8b398 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   8b360:	e0bff817 	ldw	r2,-32(fp)
   8b364:	10000015 	stw	zero,0(r2)
   8b368:	e0bff817 	ldw	r2,-32(fp)
   8b36c:	10800104 	addi	r2,r2,4
   8b370:	e0bff815 	stw	r2,-32(fp)
                      break;
   8b374:	00001406 	br	8b3c8 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   8b378:	d0a70617 	ldw	r2,-25576(gp)
   8b37c:	10c00917 	ldw	r3,36(r2)
   8b380:	e0bff817 	ldw	r2,-32(fp)
   8b384:	10c00015 	stw	r3,0(r2)
   8b388:	e0bff817 	ldw	r2,-32(fp)
   8b38c:	10800104 	addi	r2,r2,4
   8b390:	e0bff815 	stw	r2,-32(fp)
                      break;
   8b394:	00000c06 	br	8b3c8 <OSEventPendMulti+0x60c>
   8b398:	e0bff017 	ldw	r2,-64(fp)
   8b39c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b3a0:	e0bfea17 	ldw	r2,-88(fp)
   8b3a4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   8b3a8:	e0bff717 	ldw	r2,-36(fp)
   8b3ac:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   8b3b0:	e0c00217 	ldw	r3,8(fp)
   8b3b4:	00800044 	movi	r2,1
   8b3b8:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
   8b3bc:	e0bff18b 	ldhu	r2,-58(fp)
   8b3c0:	e0bfff15 	stw	r2,-4(fp)
   8b3c4:	00002406 	br	8b458 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
   8b3c8:	e0800217 	ldw	r2,8(fp)
   8b3cc:	10000005 	stb	zero,0(r2)
             break;
   8b3d0:	00001106 	br	8b418 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   8b3d4:	e0bff817 	ldw	r2,-32(fp)
   8b3d8:	10000015 	stw	zero,0(r2)
   8b3dc:	e0bff817 	ldw	r2,-32(fp)
   8b3e0:	10800104 	addi	r2,r2,4
   8b3e4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   8b3e8:	e0c00217 	ldw	r3,8(fp)
   8b3ec:	00800384 	movi	r2,14
   8b3f0:	18800005 	stb	r2,0(r3)
             break;
   8b3f4:	00000806 	br	8b418 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   8b3f8:	e0bff817 	ldw	r2,-32(fp)
   8b3fc:	10000015 	stw	zero,0(r2)
   8b400:	e0bff817 	ldw	r2,-32(fp)
   8b404:	10800104 	addi	r2,r2,4
   8b408:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   8b40c:	e0c00217 	ldw	r3,8(fp)
   8b410:	00800284 	movi	r2,10
   8b414:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   8b418:	d0a70617 	ldw	r2,-25576(gp)
   8b41c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   8b420:	d0a70617 	ldw	r2,-25576(gp)
   8b424:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   8b428:	d0a70617 	ldw	r2,-25576(gp)
   8b42c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8b430:	d0a70617 	ldw	r2,-25576(gp)
   8b434:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   8b438:	d0a70617 	ldw	r2,-25576(gp)
   8b43c:	10000915 	stw	zero,36(r2)
   8b440:	e0bff017 	ldw	r2,-64(fp)
   8b444:	e0bfe915 	stw	r2,-92(fp)
   8b448:	e0bfe917 	ldw	r2,-92(fp)
   8b44c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   8b450:	e0fff18b 	ldhu	r3,-58(fp)
   8b454:	e0ffff15 	stw	r3,-4(fp)
   8b458:	e0bfff17 	ldw	r2,-4(fp)
}
   8b45c:	e037883a 	mov	sp,fp
   8b460:	dfc00117 	ldw	ra,4(sp)
   8b464:	df000017 	ldw	fp,0(sp)
   8b468:	dec00204 	addi	sp,sp,8
   8b46c:	f800283a 	ret

0008b470 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   8b470:	defffe04 	addi	sp,sp,-8
   8b474:	dfc00115 	stw	ra,4(sp)
   8b478:	df000015 	stw	fp,0(sp)
   8b47c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   8b480:	0094dfc0 	call	94dfc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   8b484:	008c2400 	call	8c240 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   8b488:	008c2840 	call	8c284 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   8b48c:	008c3e80 	call	8c3e8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   8b490:	008c1640 	call	8c164 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   8b494:	008e4980 	call	8e498 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   8b498:	008ee700 	call	8ee70 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   8b49c:	00901cc0 	call	901cc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   8b4a0:	008c2f00 	call	8c2f0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   8b4a4:	008c36c0 	call	8c36c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   8b4a8:	0094e180 	call	94e18 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   8b4ac:	008cc700 	call	8cc70 <OSDebugInit>
#endif
}
   8b4b0:	e037883a 	mov	sp,fp
   8b4b4:	dfc00117 	ldw	ra,4(sp)
   8b4b8:	df000017 	ldw	fp,0(sp)
   8b4bc:	dec00204 	addi	sp,sp,8
   8b4c0:	f800283a 	ret

0008b4c4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   8b4c4:	defffc04 	addi	sp,sp,-16
   8b4c8:	df000315 	stw	fp,12(sp)
   8b4cc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8b4d0:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
   8b4d4:	d0a6f743 	ldbu	r2,-25635(gp)
   8b4d8:	10803fcc 	andi	r2,r2,255
   8b4dc:	10800058 	cmpnei	r2,r2,1
   8b4e0:	1000131e 	bne	r2,zero,8b530 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b4e4:	0005303a 	rdctl	r2,status
   8b4e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b4ec:	e0fffe17 	ldw	r3,-8(fp)
   8b4f0:	00bfff84 	movi	r2,-2
   8b4f4:	1884703a 	and	r2,r3,r2
   8b4f8:	1001703a 	wrctl	status,r2
  
  return context;
   8b4fc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8b500:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
   8b504:	d0a70503 	ldbu	r2,-25580(gp)
   8b508:	10803fcc 	andi	r2,r2,255
   8b50c:	10803fe0 	cmpeqi	r2,r2,255
   8b510:	1000031e 	bne	r2,zero,8b520 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   8b514:	d0a70503 	ldbu	r2,-25580(gp)
   8b518:	10800044 	addi	r2,r2,1
   8b51c:	d0a70505 	stb	r2,-25580(gp)
   8b520:	e0bfff17 	ldw	r2,-4(fp)
   8b524:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b528:	e0bffd17 	ldw	r2,-12(fp)
   8b52c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   8b530:	e037883a 	mov	sp,fp
   8b534:	df000017 	ldw	fp,0(sp)
   8b538:	dec00104 	addi	sp,sp,4
   8b53c:	f800283a 	ret

0008b540 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   8b540:	defffb04 	addi	sp,sp,-20
   8b544:	dfc00415 	stw	ra,16(sp)
   8b548:	df000315 	stw	fp,12(sp)
   8b54c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8b550:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
   8b554:	d0a6f743 	ldbu	r2,-25635(gp)
   8b558:	10803fcc 	andi	r2,r2,255
   8b55c:	10800058 	cmpnei	r2,r2,1
   8b560:	1000321e 	bne	r2,zero,8b62c <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b564:	0005303a 	rdctl	r2,status
   8b568:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b56c:	e0fffe17 	ldw	r3,-8(fp)
   8b570:	00bfff84 	movi	r2,-2
   8b574:	1884703a 	and	r2,r3,r2
   8b578:	1001703a 	wrctl	status,r2
  
  return context;
   8b57c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8b580:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   8b584:	d0a70503 	ldbu	r2,-25580(gp)
   8b588:	10803fcc 	andi	r2,r2,255
   8b58c:	1005003a 	cmpeq	r2,r2,zero
   8b590:	1000031e 	bne	r2,zero,8b5a0 <OSIntExit+0x60>
            OSIntNesting--;
   8b594:	d0a70503 	ldbu	r2,-25580(gp)
   8b598:	10bfffc4 	addi	r2,r2,-1
   8b59c:	d0a70505 	stb	r2,-25580(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   8b5a0:	d0a70503 	ldbu	r2,-25580(gp)
   8b5a4:	10803fcc 	andi	r2,r2,255
   8b5a8:	1004c03a 	cmpne	r2,r2,zero
   8b5ac:	10001b1e 	bne	r2,zero,8b61c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   8b5b0:	d0a6f703 	ldbu	r2,-25636(gp)
   8b5b4:	10803fcc 	andi	r2,r2,255
   8b5b8:	1004c03a 	cmpne	r2,r2,zero
   8b5bc:	1000171e 	bne	r2,zero,8b61c <OSIntExit+0xdc>
                OS_SchedNew();
   8b5c0:	008c65c0 	call	8c65c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   8b5c4:	d0a6f903 	ldbu	r2,-25628(gp)
   8b5c8:	d0e6f943 	ldbu	r3,-25627(gp)
   8b5cc:	11003fcc 	andi	r4,r2,255
   8b5d0:	18803fcc 	andi	r2,r3,255
   8b5d4:	20801126 	beq	r4,r2,8b61c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   8b5d8:	d0a6f903 	ldbu	r2,-25628(gp)
   8b5dc:	10803fcc 	andi	r2,r2,255
   8b5e0:	00c002b4 	movhi	r3,10
   8b5e4:	18f89304 	addi	r3,r3,-7604
   8b5e8:	1085883a 	add	r2,r2,r2
   8b5ec:	1085883a 	add	r2,r2,r2
   8b5f0:	10c5883a 	add	r2,r2,r3
   8b5f4:	10800017 	ldw	r2,0(r2)
   8b5f8:	d0a70115 	stw	r2,-25596(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   8b5fc:	d0e70117 	ldw	r3,-25596(gp)
   8b600:	18800e17 	ldw	r2,56(r3)
   8b604:	10800044 	addi	r2,r2,1
   8b608:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   8b60c:	d0a6fc17 	ldw	r2,-25616(gp)
   8b610:	10800044 	addi	r2,r2,1
   8b614:	d0a6fc15 	stw	r2,-25616(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   8b618:	00949880 	call	94988 <OSCtxSw>
   8b61c:	e0bfff17 	ldw	r2,-4(fp)
   8b620:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b624:	e0bffd17 	ldw	r2,-12(fp)
   8b628:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8b62c:	e037883a 	mov	sp,fp
   8b630:	dfc00117 	ldw	ra,4(sp)
   8b634:	df000017 	ldw	fp,0(sp)
   8b638:	dec00204 	addi	sp,sp,8
   8b63c:	f800283a 	ret

0008b640 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   8b640:	defffc04 	addi	sp,sp,-16
   8b644:	df000315 	stw	fp,12(sp)
   8b648:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8b64c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   8b650:	d0a6f743 	ldbu	r2,-25635(gp)
   8b654:	10803fcc 	andi	r2,r2,255
   8b658:	10800058 	cmpnei	r2,r2,1
   8b65c:	1000171e 	bne	r2,zero,8b6bc <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b660:	0005303a 	rdctl	r2,status
   8b664:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b668:	e0fffe17 	ldw	r3,-8(fp)
   8b66c:	00bfff84 	movi	r2,-2
   8b670:	1884703a 	and	r2,r3,r2
   8b674:	1001703a 	wrctl	status,r2
  
  return context;
   8b678:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8b67c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   8b680:	d0a70503 	ldbu	r2,-25580(gp)
   8b684:	10803fcc 	andi	r2,r2,255
   8b688:	1004c03a 	cmpne	r2,r2,zero
   8b68c:	1000071e 	bne	r2,zero,8b6ac <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   8b690:	d0a6f703 	ldbu	r2,-25636(gp)
   8b694:	10803fcc 	andi	r2,r2,255
   8b698:	10803fe0 	cmpeqi	r2,r2,255
   8b69c:	1000031e 	bne	r2,zero,8b6ac <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   8b6a0:	d0a6f703 	ldbu	r2,-25636(gp)
   8b6a4:	10800044 	addi	r2,r2,1
   8b6a8:	d0a6f705 	stb	r2,-25636(gp)
   8b6ac:	e0bfff17 	ldw	r2,-4(fp)
   8b6b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b6b4:	e0bffd17 	ldw	r2,-12(fp)
   8b6b8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8b6bc:	e037883a 	mov	sp,fp
   8b6c0:	df000017 	ldw	fp,0(sp)
   8b6c4:	dec00104 	addi	sp,sp,4
   8b6c8:	f800283a 	ret

0008b6cc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   8b6cc:	defff804 	addi	sp,sp,-32
   8b6d0:	dfc00715 	stw	ra,28(sp)
   8b6d4:	df000615 	stw	fp,24(sp)
   8b6d8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8b6dc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   8b6e0:	d0a6f743 	ldbu	r2,-25635(gp)
   8b6e4:	10803fcc 	andi	r2,r2,255
   8b6e8:	10800058 	cmpnei	r2,r2,1
   8b6ec:	10002b1e 	bne	r2,zero,8b79c <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b6f0:	0005303a 	rdctl	r2,status
   8b6f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b6f8:	e0fffe17 	ldw	r3,-8(fp)
   8b6fc:	00bfff84 	movi	r2,-2
   8b700:	1884703a 	and	r2,r3,r2
   8b704:	1001703a 	wrctl	status,r2
  
  return context;
   8b708:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8b70c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   8b710:	d0a6f703 	ldbu	r2,-25636(gp)
   8b714:	10803fcc 	andi	r2,r2,255
   8b718:	1005003a 	cmpeq	r2,r2,zero
   8b71c:	10001b1e 	bne	r2,zero,8b78c <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   8b720:	d0a6f703 	ldbu	r2,-25636(gp)
   8b724:	10bfffc4 	addi	r2,r2,-1
   8b728:	d0a6f705 	stb	r2,-25636(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   8b72c:	d0a6f703 	ldbu	r2,-25636(gp)
   8b730:	10803fcc 	andi	r2,r2,255
   8b734:	1004c03a 	cmpne	r2,r2,zero
   8b738:	10000f1e 	bne	r2,zero,8b778 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   8b73c:	d0a70503 	ldbu	r2,-25580(gp)
   8b740:	10803fcc 	andi	r2,r2,255
   8b744:	1004c03a 	cmpne	r2,r2,zero
   8b748:	1000061e 	bne	r2,zero,8b764 <OSSchedUnlock+0x98>
   8b74c:	e0bfff17 	ldw	r2,-4(fp)
   8b750:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b754:	e0bffd17 	ldw	r2,-12(fp)
   8b758:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   8b75c:	008c5880 	call	8c588 <OS_Sched>
   8b760:	00000e06 	br	8b79c <OSSchedUnlock+0xd0>
   8b764:	e0bfff17 	ldw	r2,-4(fp)
   8b768:	e0bffc15 	stw	r2,-16(fp)
   8b76c:	e0bffc17 	ldw	r2,-16(fp)
   8b770:	1001703a 	wrctl	status,r2
   8b774:	00000906 	br	8b79c <OSSchedUnlock+0xd0>
   8b778:	e0bfff17 	ldw	r2,-4(fp)
   8b77c:	e0bffb15 	stw	r2,-20(fp)
   8b780:	e0bffb17 	ldw	r2,-20(fp)
   8b784:	1001703a 	wrctl	status,r2
   8b788:	00000406 	br	8b79c <OSSchedUnlock+0xd0>
   8b78c:	e0bfff17 	ldw	r2,-4(fp)
   8b790:	e0bffa15 	stw	r2,-24(fp)
   8b794:	e0bffa17 	ldw	r2,-24(fp)
   8b798:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   8b79c:	e037883a 	mov	sp,fp
   8b7a0:	dfc00117 	ldw	ra,4(sp)
   8b7a4:	df000017 	ldw	fp,0(sp)
   8b7a8:	dec00204 	addi	sp,sp,8
   8b7ac:	f800283a 	ret

0008b7b0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   8b7b0:	defffe04 	addi	sp,sp,-8
   8b7b4:	dfc00115 	stw	ra,4(sp)
   8b7b8:	df000015 	stw	fp,0(sp)
   8b7bc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   8b7c0:	d0a6f743 	ldbu	r2,-25635(gp)
   8b7c4:	10803fcc 	andi	r2,r2,255
   8b7c8:	1004c03a 	cmpne	r2,r2,zero
   8b7cc:	10000f1e 	bne	r2,zero,8b80c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   8b7d0:	008c65c0 	call	8c65c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   8b7d4:	d0a6f903 	ldbu	r2,-25628(gp)
   8b7d8:	d0a6f945 	stb	r2,-25627(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   8b7dc:	d0a6f903 	ldbu	r2,-25628(gp)
   8b7e0:	10803fcc 	andi	r2,r2,255
   8b7e4:	00c002b4 	movhi	r3,10
   8b7e8:	18f89304 	addi	r3,r3,-7604
   8b7ec:	1085883a 	add	r2,r2,r2
   8b7f0:	1085883a 	add	r2,r2,r2
   8b7f4:	10c5883a 	add	r2,r2,r3
   8b7f8:	10800017 	ldw	r2,0(r2)
   8b7fc:	d0a70115 	stw	r2,-25596(gp)
        OSTCBCur      = OSTCBHighRdy;
   8b800:	d0a70117 	ldw	r2,-25596(gp)
   8b804:	d0a70615 	stw	r2,-25576(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   8b808:	0094a140 	call	94a14 <OSStartHighRdy>
    }
}
   8b80c:	e037883a 	mov	sp,fp
   8b810:	dfc00117 	ldw	ra,4(sp)
   8b814:	df000017 	ldw	fp,0(sp)
   8b818:	dec00204 	addi	sp,sp,8
   8b81c:	f800283a 	ret

0008b820 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   8b820:	defff904 	addi	sp,sp,-28
   8b824:	dfc00615 	stw	ra,24(sp)
   8b828:	df000515 	stw	fp,20(sp)
   8b82c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8b830:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   8b834:	01000084 	movi	r4,2
   8b838:	00928800 	call	92880 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b83c:	0005303a 	rdctl	r2,status
   8b840:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b844:	e0fffe17 	ldw	r3,-8(fp)
   8b848:	00bfff84 	movi	r2,-2
   8b84c:	1884703a 	and	r2,r3,r2
   8b850:	1001703a 	wrctl	status,r2
  
  return context;
   8b854:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   8b858:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   8b85c:	d026f815 	stw	zero,-25632(gp)
   8b860:	e0bfff17 	ldw	r2,-4(fp)
   8b864:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b868:	e0bffd17 	ldw	r2,-12(fp)
   8b86c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   8b870:	01001904 	movi	r4,100
   8b874:	00928800 	call	92880 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b878:	0005303a 	rdctl	r2,status
   8b87c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b880:	e0fffc17 	ldw	r3,-16(fp)
   8b884:	00bfff84 	movi	r2,-2
   8b888:	1884703a 	and	r2,r3,r2
   8b88c:	1001703a 	wrctl	status,r2
  
  return context;
   8b890:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   8b894:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   8b898:	d0a6f817 	ldw	r2,-25632(gp)
   8b89c:	d0a6fd15 	stw	r2,-25612(gp)
    OSStatRdy    = OS_TRUE;
   8b8a0:	00800044 	movi	r2,1
   8b8a4:	d0a70905 	stb	r2,-25564(gp)
   8b8a8:	e0bfff17 	ldw	r2,-4(fp)
   8b8ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b8b0:	e0bffb17 	ldw	r2,-20(fp)
   8b8b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   8b8b8:	e037883a 	mov	sp,fp
   8b8bc:	dfc00117 	ldw	ra,4(sp)
   8b8c0:	df000017 	ldw	fp,0(sp)
   8b8c4:	dec00204 	addi	sp,sp,8
   8b8c8:	f800283a 	ret

0008b8cc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   8b8cc:	defff604 	addi	sp,sp,-40
   8b8d0:	dfc00915 	stw	ra,36(sp)
   8b8d4:	df000815 	stw	fp,32(sp)
   8b8d8:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8b8dc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   8b8e0:	0094de00 	call	94de0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b8e4:	0005303a 	rdctl	r2,status
   8b8e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b8ec:	e0fffb17 	ldw	r3,-20(fp)
   8b8f0:	00bfff84 	movi	r2,-2
   8b8f4:	1884703a 	and	r2,r3,r2
   8b8f8:	1001703a 	wrctl	status,r2
  
  return context;
   8b8fc:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   8b900:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
   8b904:	d0a70717 	ldw	r2,-25572(gp)
   8b908:	10800044 	addi	r2,r2,1
   8b90c:	d0a70715 	stw	r2,-25572(gp)
   8b910:	e0bffc17 	ldw	r2,-16(fp)
   8b914:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b918:	e0bffa17 	ldw	r2,-24(fp)
   8b91c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   8b920:	d0a6f743 	ldbu	r2,-25635(gp)
   8b924:	10803fcc 	andi	r2,r2,255
   8b928:	10800058 	cmpnei	r2,r2,1
   8b92c:	1000721e 	bne	r2,zero,8baf8 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   8b930:	d0a6fb03 	ldbu	r2,-25620(gp)
   8b934:	10803fcc 	andi	r2,r2,255
   8b938:	e0bfff15 	stw	r2,-4(fp)
   8b93c:	e0ffff17 	ldw	r3,-4(fp)
   8b940:	18800060 	cmpeqi	r2,r3,1
   8b944:	10000a1e 	bne	r2,zero,8b970 <OSTimeTick+0xa4>
   8b948:	e0ffff17 	ldw	r3,-4(fp)
   8b94c:	188000a0 	cmpeqi	r2,r3,2
   8b950:	1000091e 	bne	r2,zero,8b978 <OSTimeTick+0xac>
   8b954:	e0ffff17 	ldw	r3,-4(fp)
   8b958:	1805003a 	cmpeq	r2,r3,zero
   8b95c:	1000011e 	bne	r2,zero,8b964 <OSTimeTick+0x98>
   8b960:	00000a06 	br	8b98c <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   8b964:	00800044 	movi	r2,1
   8b968:	e0bffd05 	stb	r2,-12(fp)
                 break;
   8b96c:	00000a06 	br	8b998 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   8b970:	e03ffd05 	stb	zero,-12(fp)
                 break;
   8b974:	00000806 	br	8b998 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   8b978:	00800044 	movi	r2,1
   8b97c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   8b980:	00800044 	movi	r2,1
   8b984:	d0a6fb05 	stb	r2,-25620(gp)
                 break;
   8b988:	00000306 	br	8b998 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   8b98c:	00800044 	movi	r2,1
   8b990:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   8b994:	d026fb05 	stb	zero,-25620(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   8b998:	e0bffd03 	ldbu	r2,-12(fp)
   8b99c:	1005003a 	cmpeq	r2,r2,zero
   8b9a0:	1000551e 	bne	r2,zero,8baf8 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   8b9a4:	d0a6fa17 	ldw	r2,-25624(gp)
   8b9a8:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8b9ac:	00004d06 	br	8bae4 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b9b0:	0005303a 	rdctl	r2,status
   8b9b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b9b8:	e0fff917 	ldw	r3,-28(fp)
   8b9bc:	00bfff84 	movi	r2,-2
   8b9c0:	1884703a 	and	r2,r3,r2
   8b9c4:	1001703a 	wrctl	status,r2
  
  return context;
   8b9c8:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
   8b9cc:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   8b9d0:	e0bffe17 	ldw	r2,-8(fp)
   8b9d4:	10800b8b 	ldhu	r2,46(r2)
   8b9d8:	10bfffcc 	andi	r2,r2,65535
   8b9dc:	1005003a 	cmpeq	r2,r2,zero
   8b9e0:	1000391e 	bne	r2,zero,8bac8 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   8b9e4:	e0bffe17 	ldw	r2,-8(fp)
   8b9e8:	10800b8b 	ldhu	r2,46(r2)
   8b9ec:	10bfffc4 	addi	r2,r2,-1
   8b9f0:	1007883a 	mov	r3,r2
   8b9f4:	e0bffe17 	ldw	r2,-8(fp)
   8b9f8:	10c00b8d 	sth	r3,46(r2)
   8b9fc:	e0bffe17 	ldw	r2,-8(fp)
   8ba00:	10800b8b 	ldhu	r2,46(r2)
   8ba04:	10bfffcc 	andi	r2,r2,65535
   8ba08:	1004c03a 	cmpne	r2,r2,zero
   8ba0c:	10002e1e 	bne	r2,zero,8bac8 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   8ba10:	e0bffe17 	ldw	r2,-8(fp)
   8ba14:	10800c03 	ldbu	r2,48(r2)
   8ba18:	10803fcc 	andi	r2,r2,255
   8ba1c:	10800dcc 	andi	r2,r2,55
   8ba20:	1005003a 	cmpeq	r2,r2,zero
   8ba24:	10000b1e 	bne	r2,zero,8ba54 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   8ba28:	e0bffe17 	ldw	r2,-8(fp)
   8ba2c:	10c00c03 	ldbu	r3,48(r2)
   8ba30:	00bff204 	movi	r2,-56
   8ba34:	1884703a 	and	r2,r3,r2
   8ba38:	1007883a 	mov	r3,r2
   8ba3c:	e0bffe17 	ldw	r2,-8(fp)
   8ba40:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   8ba44:	e0fffe17 	ldw	r3,-8(fp)
   8ba48:	00800044 	movi	r2,1
   8ba4c:	18800c45 	stb	r2,49(r3)
   8ba50:	00000206 	br	8ba5c <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   8ba54:	e0bffe17 	ldw	r2,-8(fp)
   8ba58:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   8ba5c:	e0bffe17 	ldw	r2,-8(fp)
   8ba60:	10800c03 	ldbu	r2,48(r2)
   8ba64:	10803fcc 	andi	r2,r2,255
   8ba68:	1080020c 	andi	r2,r2,8
   8ba6c:	1004c03a 	cmpne	r2,r2,zero
   8ba70:	1000151e 	bne	r2,zero,8bac8 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   8ba74:	e0bffe17 	ldw	r2,-8(fp)
   8ba78:	10c00d83 	ldbu	r3,54(r2)
   8ba7c:	d0a70303 	ldbu	r2,-25588(gp)
   8ba80:	1884b03a 	or	r2,r3,r2
   8ba84:	d0a70305 	stb	r2,-25588(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8ba88:	e0bffe17 	ldw	r2,-8(fp)
   8ba8c:	10800d03 	ldbu	r2,52(r2)
   8ba90:	11003fcc 	andi	r4,r2,255
   8ba94:	e0bffe17 	ldw	r2,-8(fp)
   8ba98:	10800d03 	ldbu	r2,52(r2)
   8ba9c:	10c03fcc 	andi	r3,r2,255
   8baa0:	d0a70344 	addi	r2,gp,-25587
   8baa4:	1885883a 	add	r2,r3,r2
   8baa8:	10c00003 	ldbu	r3,0(r2)
   8baac:	e0bffe17 	ldw	r2,-8(fp)
   8bab0:	10800d43 	ldbu	r2,53(r2)
   8bab4:	1884b03a 	or	r2,r3,r2
   8bab8:	1007883a 	mov	r3,r2
   8babc:	d0a70344 	addi	r2,gp,-25587
   8bac0:	2085883a 	add	r2,r4,r2
   8bac4:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   8bac8:	e0bffe17 	ldw	r2,-8(fp)
   8bacc:	10800517 	ldw	r2,20(r2)
   8bad0:	e0bffe15 	stw	r2,-8(fp)
   8bad4:	e0bffc17 	ldw	r2,-16(fp)
   8bad8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8badc:	e0bff817 	ldw	r2,-32(fp)
   8bae0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8bae4:	e0bffe17 	ldw	r2,-8(fp)
   8bae8:	10800c83 	ldbu	r2,50(r2)
   8baec:	10803fcc 	andi	r2,r2,255
   8baf0:	10800518 	cmpnei	r2,r2,20
   8baf4:	103fae1e 	bne	r2,zero,8b9b0 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   8baf8:	e037883a 	mov	sp,fp
   8bafc:	dfc00117 	ldw	ra,4(sp)
   8bb00:	df000017 	ldw	fp,0(sp)
   8bb04:	dec00204 	addi	sp,sp,8
   8bb08:	f800283a 	ret

0008bb0c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   8bb0c:	deffff04 	addi	sp,sp,-4
   8bb10:	df000015 	stw	fp,0(sp)
   8bb14:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   8bb18:	00804784 	movi	r2,286
}
   8bb1c:	e037883a 	mov	sp,fp
   8bb20:	df000017 	ldw	fp,0(sp)
   8bb24:	dec00104 	addi	sp,sp,4
   8bb28:	f800283a 	ret

0008bb2c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   8bb2c:	deffff04 	addi	sp,sp,-4
   8bb30:	df000015 	stw	fp,0(sp)
   8bb34:	d839883a 	mov	fp,sp
}
   8bb38:	e037883a 	mov	sp,fp
   8bb3c:	df000017 	ldw	fp,0(sp)
   8bb40:	dec00104 	addi	sp,sp,4
   8bb44:	f800283a 	ret

0008bb48 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   8bb48:	defff804 	addi	sp,sp,-32
   8bb4c:	dfc00715 	stw	ra,28(sp)
   8bb50:	df000615 	stw	fp,24(sp)
   8bb54:	df000604 	addi	fp,sp,24
   8bb58:	e13ffc15 	stw	r4,-16(fp)
   8bb5c:	e17ffd15 	stw	r5,-12(fp)
   8bb60:	e1bffe05 	stb	r6,-8(fp)
   8bb64:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   8bb68:	e0bffc17 	ldw	r2,-16(fp)
   8bb6c:	10800283 	ldbu	r2,10(r2)
   8bb70:	10c03fcc 	andi	r3,r2,255
   8bb74:	00800274 	movhi	r2,9
   8bb78:	10962f04 	addi	r2,r2,22716
   8bb7c:	10c5883a 	add	r2,r2,r3
   8bb80:	10800003 	ldbu	r2,0(r2)
   8bb84:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   8bb88:	e0fffa83 	ldbu	r3,-22(fp)
   8bb8c:	e0bffc17 	ldw	r2,-16(fp)
   8bb90:	1885883a 	add	r2,r3,r2
   8bb94:	10800204 	addi	r2,r2,8
   8bb98:	108000c3 	ldbu	r2,3(r2)
   8bb9c:	10c03fcc 	andi	r3,r2,255
   8bba0:	00800274 	movhi	r2,9
   8bba4:	10962f04 	addi	r2,r2,22716
   8bba8:	10c5883a 	add	r2,r2,r3
   8bbac:	10800003 	ldbu	r2,0(r2)
   8bbb0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   8bbb4:	e0bffa83 	ldbu	r2,-22(fp)
   8bbb8:	100490fa 	slli	r2,r2,3
   8bbbc:	1007883a 	mov	r3,r2
   8bbc0:	e0bffa43 	ldbu	r2,-23(fp)
   8bbc4:	1885883a 	add	r2,r3,r2
   8bbc8:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   8bbcc:	e0bffa03 	ldbu	r2,-24(fp)
   8bbd0:	00c002b4 	movhi	r3,10
   8bbd4:	18f89304 	addi	r3,r3,-7604
   8bbd8:	1085883a 	add	r2,r2,r2
   8bbdc:	1085883a 	add	r2,r2,r2
   8bbe0:	10c5883a 	add	r2,r2,r3
   8bbe4:	10800017 	ldw	r2,0(r2)
   8bbe8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   8bbec:	e0bffb17 	ldw	r2,-20(fp)
   8bbf0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   8bbf4:	e0fffb17 	ldw	r3,-20(fp)
   8bbf8:	e0bffd17 	ldw	r2,-12(fp)
   8bbfc:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   8bc00:	e0bffb17 	ldw	r2,-20(fp)
   8bc04:	10800c03 	ldbu	r2,48(r2)
   8bc08:	1007883a 	mov	r3,r2
   8bc0c:	e0bffe03 	ldbu	r2,-8(fp)
   8bc10:	0084303a 	nor	r2,zero,r2
   8bc14:	1884703a 	and	r2,r3,r2
   8bc18:	1007883a 	mov	r3,r2
   8bc1c:	e0bffb17 	ldw	r2,-20(fp)
   8bc20:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   8bc24:	e0fffb17 	ldw	r3,-20(fp)
   8bc28:	e0bfff03 	ldbu	r2,-4(fp)
   8bc2c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   8bc30:	e0bffb17 	ldw	r2,-20(fp)
   8bc34:	10800c03 	ldbu	r2,48(r2)
   8bc38:	10803fcc 	andi	r2,r2,255
   8bc3c:	1080020c 	andi	r2,r2,8
   8bc40:	1004c03a 	cmpne	r2,r2,zero
   8bc44:	1000111e 	bne	r2,zero,8bc8c <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   8bc48:	e0bffb17 	ldw	r2,-20(fp)
   8bc4c:	10c00d83 	ldbu	r3,54(r2)
   8bc50:	d0a70303 	ldbu	r2,-25588(gp)
   8bc54:	1884b03a 	or	r2,r3,r2
   8bc58:	d0a70305 	stb	r2,-25588(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   8bc5c:	e13ffa83 	ldbu	r4,-22(fp)
   8bc60:	e0fffa83 	ldbu	r3,-22(fp)
   8bc64:	d0a70344 	addi	r2,gp,-25587
   8bc68:	1885883a 	add	r2,r3,r2
   8bc6c:	10c00003 	ldbu	r3,0(r2)
   8bc70:	e0bffb17 	ldw	r2,-20(fp)
   8bc74:	10800d43 	ldbu	r2,53(r2)
   8bc78:	1884b03a 	or	r2,r3,r2
   8bc7c:	1007883a 	mov	r3,r2
   8bc80:	d0a70344 	addi	r2,gp,-25587
   8bc84:	2085883a 	add	r2,r4,r2
   8bc88:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   8bc8c:	e13ffb17 	ldw	r4,-20(fp)
   8bc90:	e17ffc17 	ldw	r5,-16(fp)
   8bc94:	008bf400 	call	8bf40 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   8bc98:	e0bffb17 	ldw	r2,-20(fp)
   8bc9c:	10800817 	ldw	r2,32(r2)
   8bca0:	1005003a 	cmpeq	r2,r2,zero
   8bca4:	1000071e 	bne	r2,zero,8bcc4 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   8bca8:	e0bffb17 	ldw	r2,-20(fp)
   8bcac:	11400817 	ldw	r5,32(r2)
   8bcb0:	e13ffb17 	ldw	r4,-20(fp)
   8bcb4:	008bff80 	call	8bff8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   8bcb8:	e0fffb17 	ldw	r3,-20(fp)
   8bcbc:	e0bffc17 	ldw	r2,-16(fp)
   8bcc0:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
   8bcc4:	e0bffa03 	ldbu	r2,-24(fp)
}
   8bcc8:	e037883a 	mov	sp,fp
   8bccc:	dfc00117 	ldw	ra,4(sp)
   8bcd0:	df000017 	ldw	fp,0(sp)
   8bcd4:	dec00204 	addi	sp,sp,8
   8bcd8:	f800283a 	ret

0008bcdc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   8bcdc:	defffd04 	addi	sp,sp,-12
   8bce0:	df000215 	stw	fp,8(sp)
   8bce4:	df000204 	addi	fp,sp,8
   8bce8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   8bcec:	d0e70617 	ldw	r3,-25576(gp)
   8bcf0:	e0bfff17 	ldw	r2,-4(fp)
   8bcf4:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   8bcf8:	d0a70617 	ldw	r2,-25576(gp)
   8bcfc:	10800d03 	ldbu	r2,52(r2)
   8bd00:	11003fcc 	andi	r4,r2,255
   8bd04:	d0a70617 	ldw	r2,-25576(gp)
   8bd08:	10800d03 	ldbu	r2,52(r2)
   8bd0c:	10c03fcc 	andi	r3,r2,255
   8bd10:	e0bfff17 	ldw	r2,-4(fp)
   8bd14:	1885883a 	add	r2,r3,r2
   8bd18:	10800204 	addi	r2,r2,8
   8bd1c:	10c000c3 	ldbu	r3,3(r2)
   8bd20:	d0a70617 	ldw	r2,-25576(gp)
   8bd24:	10800d43 	ldbu	r2,53(r2)
   8bd28:	1884b03a 	or	r2,r3,r2
   8bd2c:	1007883a 	mov	r3,r2
   8bd30:	e0bfff17 	ldw	r2,-4(fp)
   8bd34:	2085883a 	add	r2,r4,r2
   8bd38:	10800204 	addi	r2,r2,8
   8bd3c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8bd40:	e0bfff17 	ldw	r2,-4(fp)
   8bd44:	10c00283 	ldbu	r3,10(r2)
   8bd48:	d0a70617 	ldw	r2,-25576(gp)
   8bd4c:	10800d83 	ldbu	r2,54(r2)
   8bd50:	1884b03a 	or	r2,r3,r2
   8bd54:	1007883a 	mov	r3,r2
   8bd58:	e0bfff17 	ldw	r2,-4(fp)
   8bd5c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8bd60:	d0a70617 	ldw	r2,-25576(gp)
   8bd64:	10800d03 	ldbu	r2,52(r2)
   8bd68:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8bd6c:	e13ffe03 	ldbu	r4,-8(fp)
   8bd70:	e0fffe03 	ldbu	r3,-8(fp)
   8bd74:	d0a70344 	addi	r2,gp,-25587
   8bd78:	1885883a 	add	r2,r3,r2
   8bd7c:	10800003 	ldbu	r2,0(r2)
   8bd80:	1007883a 	mov	r3,r2
   8bd84:	d0a70617 	ldw	r2,-25576(gp)
   8bd88:	10800d43 	ldbu	r2,53(r2)
   8bd8c:	0084303a 	nor	r2,zero,r2
   8bd90:	1884703a 	and	r2,r3,r2
   8bd94:	1007883a 	mov	r3,r2
   8bd98:	d0a70344 	addi	r2,gp,-25587
   8bd9c:	2085883a 	add	r2,r4,r2
   8bda0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8bda4:	e0fffe03 	ldbu	r3,-8(fp)
   8bda8:	d0a70344 	addi	r2,gp,-25587
   8bdac:	1885883a 	add	r2,r3,r2
   8bdb0:	10800003 	ldbu	r2,0(r2)
   8bdb4:	10803fcc 	andi	r2,r2,255
   8bdb8:	1004c03a 	cmpne	r2,r2,zero
   8bdbc:	1000071e 	bne	r2,zero,8bddc <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8bdc0:	d0a70617 	ldw	r2,-25576(gp)
   8bdc4:	10800d83 	ldbu	r2,54(r2)
   8bdc8:	0084303a 	nor	r2,zero,r2
   8bdcc:	1007883a 	mov	r3,r2
   8bdd0:	d0a70303 	ldbu	r2,-25588(gp)
   8bdd4:	1884703a 	and	r2,r3,r2
   8bdd8:	d0a70305 	stb	r2,-25588(gp)
    }
}
   8bddc:	e037883a 	mov	sp,fp
   8bde0:	df000017 	ldw	fp,0(sp)
   8bde4:	dec00104 	addi	sp,sp,4
   8bde8:	f800283a 	ret

0008bdec <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   8bdec:	defffb04 	addi	sp,sp,-20
   8bdf0:	df000415 	stw	fp,16(sp)
   8bdf4:	df000404 	addi	fp,sp,16
   8bdf8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   8bdfc:	d0a70617 	ldw	r2,-25576(gp)
   8be00:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   8be04:	d0e70617 	ldw	r3,-25576(gp)
   8be08:	e0bfff17 	ldw	r2,-4(fp)
   8be0c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
   8be10:	e0bfff17 	ldw	r2,-4(fp)
   8be14:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
   8be18:	e0bffe17 	ldw	r2,-8(fp)
   8be1c:	10800017 	ldw	r2,0(r2)
   8be20:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8be24:	00002006 	br	8bea8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   8be28:	d0a70617 	ldw	r2,-25576(gp)
   8be2c:	10800d03 	ldbu	r2,52(r2)
   8be30:	11003fcc 	andi	r4,r2,255
   8be34:	d0a70617 	ldw	r2,-25576(gp)
   8be38:	10800d03 	ldbu	r2,52(r2)
   8be3c:	10c03fcc 	andi	r3,r2,255
   8be40:	e0bffd17 	ldw	r2,-12(fp)
   8be44:	1885883a 	add	r2,r3,r2
   8be48:	10800204 	addi	r2,r2,8
   8be4c:	10c000c3 	ldbu	r3,3(r2)
   8be50:	d0a70617 	ldw	r2,-25576(gp)
   8be54:	10800d43 	ldbu	r2,53(r2)
   8be58:	1884b03a 	or	r2,r3,r2
   8be5c:	1007883a 	mov	r3,r2
   8be60:	e0bffd17 	ldw	r2,-12(fp)
   8be64:	2085883a 	add	r2,r4,r2
   8be68:	10800204 	addi	r2,r2,8
   8be6c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8be70:	e0bffd17 	ldw	r2,-12(fp)
   8be74:	10c00283 	ldbu	r3,10(r2)
   8be78:	d0a70617 	ldw	r2,-25576(gp)
   8be7c:	10800d83 	ldbu	r2,54(r2)
   8be80:	1884b03a 	or	r2,r3,r2
   8be84:	1007883a 	mov	r3,r2
   8be88:	e0bffd17 	ldw	r2,-12(fp)
   8be8c:	10c00285 	stb	r3,10(r2)
        pevents++;
   8be90:	e0bffe17 	ldw	r2,-8(fp)
   8be94:	10800104 	addi	r2,r2,4
   8be98:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
   8be9c:	e0bffe17 	ldw	r2,-8(fp)
   8bea0:	10800017 	ldw	r2,0(r2)
   8bea4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8bea8:	e0bffd17 	ldw	r2,-12(fp)
   8beac:	1004c03a 	cmpne	r2,r2,zero
   8beb0:	103fdd1e 	bne	r2,zero,8be28 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8beb4:	d0a70617 	ldw	r2,-25576(gp)
   8beb8:	10800d03 	ldbu	r2,52(r2)
   8bebc:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8bec0:	e13ffc03 	ldbu	r4,-16(fp)
   8bec4:	e0fffc03 	ldbu	r3,-16(fp)
   8bec8:	d0a70344 	addi	r2,gp,-25587
   8becc:	1885883a 	add	r2,r3,r2
   8bed0:	10800003 	ldbu	r2,0(r2)
   8bed4:	1007883a 	mov	r3,r2
   8bed8:	d0a70617 	ldw	r2,-25576(gp)
   8bedc:	10800d43 	ldbu	r2,53(r2)
   8bee0:	0084303a 	nor	r2,zero,r2
   8bee4:	1884703a 	and	r2,r3,r2
   8bee8:	1007883a 	mov	r3,r2
   8beec:	d0a70344 	addi	r2,gp,-25587
   8bef0:	2085883a 	add	r2,r4,r2
   8bef4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8bef8:	e0fffc03 	ldbu	r3,-16(fp)
   8befc:	d0a70344 	addi	r2,gp,-25587
   8bf00:	1885883a 	add	r2,r3,r2
   8bf04:	10800003 	ldbu	r2,0(r2)
   8bf08:	10803fcc 	andi	r2,r2,255
   8bf0c:	1004c03a 	cmpne	r2,r2,zero
   8bf10:	1000071e 	bne	r2,zero,8bf30 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8bf14:	d0a70617 	ldw	r2,-25576(gp)
   8bf18:	10800d83 	ldbu	r2,54(r2)
   8bf1c:	0084303a 	nor	r2,zero,r2
   8bf20:	1007883a 	mov	r3,r2
   8bf24:	d0a70303 	ldbu	r2,-25588(gp)
   8bf28:	1884703a 	and	r2,r3,r2
   8bf2c:	d0a70305 	stb	r2,-25588(gp)
    }
}
   8bf30:	e037883a 	mov	sp,fp
   8bf34:	df000017 	ldw	fp,0(sp)
   8bf38:	dec00104 	addi	sp,sp,4
   8bf3c:	f800283a 	ret

0008bf40 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   8bf40:	defffc04 	addi	sp,sp,-16
   8bf44:	df000315 	stw	fp,12(sp)
   8bf48:	df000304 	addi	fp,sp,12
   8bf4c:	e13ffe15 	stw	r4,-8(fp)
   8bf50:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   8bf54:	e0bffe17 	ldw	r2,-8(fp)
   8bf58:	10800d03 	ldbu	r2,52(r2)
   8bf5c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   8bf60:	e13ffd03 	ldbu	r4,-12(fp)
   8bf64:	e0fffd03 	ldbu	r3,-12(fp)
   8bf68:	e0bfff17 	ldw	r2,-4(fp)
   8bf6c:	1885883a 	add	r2,r3,r2
   8bf70:	10800204 	addi	r2,r2,8
   8bf74:	108000c3 	ldbu	r2,3(r2)
   8bf78:	1007883a 	mov	r3,r2
   8bf7c:	e0bffe17 	ldw	r2,-8(fp)
   8bf80:	10800d43 	ldbu	r2,53(r2)
   8bf84:	0084303a 	nor	r2,zero,r2
   8bf88:	1884703a 	and	r2,r3,r2
   8bf8c:	1007883a 	mov	r3,r2
   8bf90:	e0bfff17 	ldw	r2,-4(fp)
   8bf94:	2085883a 	add	r2,r4,r2
   8bf98:	10800204 	addi	r2,r2,8
   8bf9c:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   8bfa0:	e0fffd03 	ldbu	r3,-12(fp)
   8bfa4:	e0bfff17 	ldw	r2,-4(fp)
   8bfa8:	1885883a 	add	r2,r3,r2
   8bfac:	10800204 	addi	r2,r2,8
   8bfb0:	108000c3 	ldbu	r2,3(r2)
   8bfb4:	10803fcc 	andi	r2,r2,255
   8bfb8:	1004c03a 	cmpne	r2,r2,zero
   8bfbc:	10000a1e 	bne	r2,zero,8bfe8 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   8bfc0:	e0bfff17 	ldw	r2,-4(fp)
   8bfc4:	10800283 	ldbu	r2,10(r2)
   8bfc8:	1007883a 	mov	r3,r2
   8bfcc:	e0bffe17 	ldw	r2,-8(fp)
   8bfd0:	10800d83 	ldbu	r2,54(r2)
   8bfd4:	0084303a 	nor	r2,zero,r2
   8bfd8:	1884703a 	and	r2,r3,r2
   8bfdc:	1007883a 	mov	r3,r2
   8bfe0:	e0bfff17 	ldw	r2,-4(fp)
   8bfe4:	10c00285 	stb	r3,10(r2)
    }
}
   8bfe8:	e037883a 	mov	sp,fp
   8bfec:	df000017 	ldw	fp,0(sp)
   8bff0:	dec00104 	addi	sp,sp,4
   8bff4:	f800283a 	ret

0008bff8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   8bff8:	defffa04 	addi	sp,sp,-24
   8bffc:	df000515 	stw	fp,20(sp)
   8c000:	df000504 	addi	fp,sp,20
   8c004:	e13ffe15 	stw	r4,-8(fp)
   8c008:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   8c00c:	e0bffe17 	ldw	r2,-8(fp)
   8c010:	10800d03 	ldbu	r2,52(r2)
   8c014:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
   8c018:	e0bffe17 	ldw	r2,-8(fp)
   8c01c:	10800d83 	ldbu	r2,54(r2)
   8c020:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
   8c024:	e0bffe17 	ldw	r2,-8(fp)
   8c028:	10800d43 	ldbu	r2,53(r2)
   8c02c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
   8c030:	e0bfff17 	ldw	r2,-4(fp)
   8c034:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
   8c038:	e0bffd17 	ldw	r2,-12(fp)
   8c03c:	10800017 	ldw	r2,0(r2)
   8c040:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8c044:	00002606 	br	8c0e0 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
   8c048:	e13ffb83 	ldbu	r4,-18(fp)
   8c04c:	e0fffb83 	ldbu	r3,-18(fp)
   8c050:	e0bffc17 	ldw	r2,-16(fp)
   8c054:	1885883a 	add	r2,r3,r2
   8c058:	10800204 	addi	r2,r2,8
   8c05c:	108000c3 	ldbu	r2,3(r2)
   8c060:	1007883a 	mov	r3,r2
   8c064:	e0bffb03 	ldbu	r2,-20(fp)
   8c068:	0084303a 	nor	r2,zero,r2
   8c06c:	1884703a 	and	r2,r3,r2
   8c070:	1007883a 	mov	r3,r2
   8c074:	e0bffc17 	ldw	r2,-16(fp)
   8c078:	2085883a 	add	r2,r4,r2
   8c07c:	10800204 	addi	r2,r2,8
   8c080:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   8c084:	e0fffb83 	ldbu	r3,-18(fp)
   8c088:	e0bffc17 	ldw	r2,-16(fp)
   8c08c:	1885883a 	add	r2,r3,r2
   8c090:	10800204 	addi	r2,r2,8
   8c094:	108000c3 	ldbu	r2,3(r2)
   8c098:	10803fcc 	andi	r2,r2,255
   8c09c:	1004c03a 	cmpne	r2,r2,zero
   8c0a0:	1000091e 	bne	r2,zero,8c0c8 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
   8c0a4:	e0bffc17 	ldw	r2,-16(fp)
   8c0a8:	10800283 	ldbu	r2,10(r2)
   8c0ac:	1007883a 	mov	r3,r2
   8c0b0:	e0bffb43 	ldbu	r2,-19(fp)
   8c0b4:	0084303a 	nor	r2,zero,r2
   8c0b8:	1884703a 	and	r2,r3,r2
   8c0bc:	1007883a 	mov	r3,r2
   8c0c0:	e0bffc17 	ldw	r2,-16(fp)
   8c0c4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   8c0c8:	e0bffd17 	ldw	r2,-12(fp)
   8c0cc:	10800104 	addi	r2,r2,4
   8c0d0:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
   8c0d4:	e0bffd17 	ldw	r2,-12(fp)
   8c0d8:	10800017 	ldw	r2,0(r2)
   8c0dc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8c0e0:	e0bffc17 	ldw	r2,-16(fp)
   8c0e4:	1004c03a 	cmpne	r2,r2,zero
   8c0e8:	103fd71e 	bne	r2,zero,8c048 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   8c0ec:	e037883a 	mov	sp,fp
   8c0f0:	df000017 	ldw	fp,0(sp)
   8c0f4:	dec00104 	addi	sp,sp,4
   8c0f8:	f800283a 	ret

0008c0fc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   8c0fc:	defffc04 	addi	sp,sp,-16
   8c100:	df000315 	stw	fp,12(sp)
   8c104:	df000304 	addi	fp,sp,12
   8c108:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   8c10c:	e0bfff17 	ldw	r2,-4(fp)
   8c110:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   8c114:	e0bfff17 	ldw	r2,-4(fp)
   8c118:	108002c4 	addi	r2,r2,11
   8c11c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8c120:	e03ffd05 	stb	zero,-12(fp)
   8c124:	00000806 	br	8c148 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
   8c128:	e0bffe17 	ldw	r2,-8(fp)
   8c12c:	10000005 	stb	zero,0(r2)
   8c130:	e0bffe17 	ldw	r2,-8(fp)
   8c134:	10800044 	addi	r2,r2,1
   8c138:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8c13c:	e0bffd03 	ldbu	r2,-12(fp)
   8c140:	10800044 	addi	r2,r2,1
   8c144:	e0bffd05 	stb	r2,-12(fp)
   8c148:	e0bffd03 	ldbu	r2,-12(fp)
   8c14c:	108000f0 	cmpltui	r2,r2,3
   8c150:	103ff51e 	bne	r2,zero,8c128 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   8c154:	e037883a 	mov	sp,fp
   8c158:	df000017 	ldw	fp,0(sp)
   8c15c:	dec00104 	addi	sp,sp,4
   8c160:	f800283a 	ret

0008c164 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   8c164:	defffb04 	addi	sp,sp,-20
   8c168:	dfc00415 	stw	ra,16(sp)
   8c16c:	df000315 	stw	fp,12(sp)
   8c170:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   8c174:	010002b4 	movhi	r4,10
   8c178:	21347f04 	addi	r4,r4,-11780
   8c17c:	0142d004 	movi	r5,2880
   8c180:	008c4c80 	call	8c4c8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   8c184:	008002b4 	movhi	r2,10
   8c188:	10b47f04 	addi	r2,r2,-11780
   8c18c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   8c190:	008002b4 	movhi	r2,10
   8c194:	10b48b04 	addi	r2,r2,-11732
   8c198:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8c19c:	e03fff0d 	sth	zero,-4(fp)
   8c1a0:	00001306 	br	8c1f0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8c1a4:	e0bffe17 	ldw	r2,-8(fp)
   8c1a8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   8c1ac:	e0fffe17 	ldw	r3,-8(fp)
   8c1b0:	e0bffd17 	ldw	r2,-12(fp)
   8c1b4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   8c1b8:	e0fffe17 	ldw	r3,-8(fp)
   8c1bc:	00800fc4 	movi	r2,63
   8c1c0:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   8c1c4:	e0bffe17 	ldw	r2,-8(fp)
   8c1c8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   8c1cc:	e0bffe17 	ldw	r2,-8(fp)
   8c1d0:	10800c04 	addi	r2,r2,48
   8c1d4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   8c1d8:	e0bffd17 	ldw	r2,-12(fp)
   8c1dc:	10800c04 	addi	r2,r2,48
   8c1e0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8c1e4:	e0bfff0b 	ldhu	r2,-4(fp)
   8c1e8:	10800044 	addi	r2,r2,1
   8c1ec:	e0bfff0d 	sth	r2,-4(fp)
   8c1f0:	e0bfff0b 	ldhu	r2,-4(fp)
   8c1f4:	10800ef0 	cmpltui	r2,r2,59
   8c1f8:	103fea1e 	bne	r2,zero,8c1a4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   8c1fc:	e0bffe17 	ldw	r2,-8(fp)
   8c200:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   8c204:	e0bffe17 	ldw	r2,-8(fp)
   8c208:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   8c20c:	e0fffe17 	ldw	r3,-8(fp)
   8c210:	00800fc4 	movi	r2,63
   8c214:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   8c218:	e0bffe17 	ldw	r2,-8(fp)
   8c21c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   8c220:	008002b4 	movhi	r2,10
   8c224:	10b47f04 	addi	r2,r2,-11780
   8c228:	d0a70415 	stw	r2,-25584(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   8c22c:	e037883a 	mov	sp,fp
   8c230:	dfc00117 	ldw	ra,4(sp)
   8c234:	df000017 	ldw	fp,0(sp)
   8c238:	dec00204 	addi	sp,sp,8
   8c23c:	f800283a 	ret

0008c240 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   8c240:	deffff04 	addi	sp,sp,-4
   8c244:	df000015 	stw	fp,0(sp)
   8c248:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   8c24c:	d0270715 	stw	zero,-25572(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   8c250:	d0270505 	stb	zero,-25580(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   8c254:	d026f705 	stb	zero,-25636(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   8c258:	d026ff45 	stb	zero,-25603(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   8c25c:	d026f745 	stb	zero,-25635(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   8c260:	d026fc15 	stw	zero,-25616(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   8c264:	d026f815 	stw	zero,-25632(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   8c268:	d0270a15 	stw	zero,-25560(gp)
    OSIdleCtrMax  = 0L;
   8c26c:	d026fd15 	stw	zero,-25612(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   8c270:	d0270905 	stb	zero,-25564(gp)
#endif
}
   8c274:	e037883a 	mov	sp,fp
   8c278:	df000017 	ldw	fp,0(sp)
   8c27c:	dec00104 	addi	sp,sp,4
   8c280:	f800283a 	ret

0008c284 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   8c284:	defffd04 	addi	sp,sp,-12
   8c288:	df000215 	stw	fp,8(sp)
   8c28c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   8c290:	d0270305 	stb	zero,-25588(gp)
    prdytbl       = &OSRdyTbl[0];
   8c294:	d0a70344 	addi	r2,gp,-25587
   8c298:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8c29c:	e03fff05 	stb	zero,-4(fp)
   8c2a0:	00000806 	br	8c2c4 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
   8c2a4:	e0bffe17 	ldw	r2,-8(fp)
   8c2a8:	10000005 	stb	zero,0(r2)
   8c2ac:	e0bffe17 	ldw	r2,-8(fp)
   8c2b0:	10800044 	addi	r2,r2,1
   8c2b4:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8c2b8:	e0bfff03 	ldbu	r2,-4(fp)
   8c2bc:	10800044 	addi	r2,r2,1
   8c2c0:	e0bfff05 	stb	r2,-4(fp)
   8c2c4:	e0bfff03 	ldbu	r2,-4(fp)
   8c2c8:	108000f0 	cmpltui	r2,r2,3
   8c2cc:	103ff51e 	bne	r2,zero,8c2a4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   8c2d0:	d026f945 	stb	zero,-25627(gp)
    OSPrioHighRdy = 0;
   8c2d4:	d026f905 	stb	zero,-25628(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   8c2d8:	d0270115 	stw	zero,-25596(gp)
    OSTCBCur      = (OS_TCB *)0;
   8c2dc:	d0270615 	stw	zero,-25576(gp)
}
   8c2e0:	e037883a 	mov	sp,fp
   8c2e4:	df000017 	ldw	fp,0(sp)
   8c2e8:	dec00104 	addi	sp,sp,4
   8c2ec:	f800283a 	ret

0008c2f0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   8c2f0:	defff804 	addi	sp,sp,-32
   8c2f4:	dfc00715 	stw	ra,28(sp)
   8c2f8:	df000615 	stw	fp,24(sp)
   8c2fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   8c300:	018002b4 	movhi	r6,10
   8c304:	31b47e04 	addi	r6,r6,-11784
   8c308:	00bfffd4 	movui	r2,65535
   8c30c:	d8800015 	stw	r2,0(sp)
   8c310:	008002b4 	movhi	r2,10
   8c314:	10b27f04 	addi	r2,r2,-13828
   8c318:	d8800115 	stw	r2,4(sp)
   8c31c:	00808004 	movi	r2,512
   8c320:	d8800215 	stw	r2,8(sp)
   8c324:	d8000315 	stw	zero,12(sp)
   8c328:	008000c4 	movi	r2,3
   8c32c:	d8800415 	stw	r2,16(sp)
   8c330:	01000274 	movhi	r4,9
   8c334:	2131e904 	addi	r4,r4,-14428
   8c338:	000b883a 	mov	r5,zero
   8c33c:	01c00504 	movi	r7,20
   8c340:	00915880 	call	91588 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   8c344:	01400274 	movhi	r5,9
   8c348:	29566f04 	addi	r5,r5,22972
   8c34c:	01000504 	movi	r4,20
   8c350:	e1bfff04 	addi	r6,fp,-4
   8c354:	0091ebc0 	call	91ebc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   8c358:	e037883a 	mov	sp,fp
   8c35c:	dfc00117 	ldw	ra,4(sp)
   8c360:	df000017 	ldw	fp,0(sp)
   8c364:	dec00204 	addi	sp,sp,8
   8c368:	f800283a 	ret

0008c36c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   8c36c:	defff804 	addi	sp,sp,-32
   8c370:	dfc00715 	stw	ra,28(sp)
   8c374:	df000615 	stw	fp,24(sp)
   8c378:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   8c37c:	018002b4 	movhi	r6,10
   8c380:	31b20604 	addi	r6,r6,-14312
   8c384:	00bfff94 	movui	r2,65534
   8c388:	d8800015 	stw	r2,0(sp)
   8c38c:	008002b4 	movhi	r2,10
   8c390:	10b00704 	addi	r2,r2,-16356
   8c394:	d8800115 	stw	r2,4(sp)
   8c398:	00808004 	movi	r2,512
   8c39c:	d8800215 	stw	r2,8(sp)
   8c3a0:	d8000315 	stw	zero,12(sp)
   8c3a4:	008000c4 	movi	r2,3
   8c3a8:	d8800415 	stw	r2,16(sp)
   8c3ac:	01000274 	movhi	r4,9
   8c3b0:	21320004 	addi	r4,r4,-14336
   8c3b4:	000b883a 	mov	r5,zero
   8c3b8:	01c004c4 	movi	r7,19
   8c3bc:	00915880 	call	91588 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   8c3c0:	01400274 	movhi	r5,9
   8c3c4:	29567304 	addi	r5,r5,22988
   8c3c8:	010004c4 	movi	r4,19
   8c3cc:	e1bfff04 	addi	r6,fp,-4
   8c3d0:	0091ebc0 	call	91ebc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   8c3d4:	e037883a 	mov	sp,fp
   8c3d8:	dfc00117 	ldw	ra,4(sp)
   8c3dc:	df000017 	ldw	fp,0(sp)
   8c3e0:	dec00204 	addi	sp,sp,8
   8c3e4:	f800283a 	ret

0008c3e8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   8c3e8:	defffb04 	addi	sp,sp,-20
   8c3ec:	dfc00415 	stw	ra,16(sp)
   8c3f0:	df000315 	stw	fp,12(sp)
   8c3f4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   8c3f8:	010002b4 	movhi	r4,10
   8c3fc:	21374f04 	addi	r4,r4,-8900
   8c400:	01414404 	movi	r5,1296
   8c404:	008c4c80 	call	8c4c8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   8c408:	010002b4 	movhi	r4,10
   8c40c:	21389304 	addi	r4,r4,-7604
   8c410:	01401504 	movi	r5,84
   8c414:	008c4c80 	call	8c4c8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   8c418:	008002b4 	movhi	r2,10
   8c41c:	10b74f04 	addi	r2,r2,-8900
   8c420:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   8c424:	008002b4 	movhi	r2,10
   8c428:	10b76a04 	addi	r2,r2,-8792
   8c42c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   8c430:	e03fff05 	stb	zero,-4(fp)
   8c434:	00001106 	br	8c47c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   8c438:	e0fffe17 	ldw	r3,-8(fp)
   8c43c:	e0bffd17 	ldw	r2,-12(fp)
   8c440:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   8c444:	e0fffe17 	ldw	r3,-8(fp)
   8c448:	00800fc4 	movi	r2,63
   8c44c:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   8c450:	e0bffe17 	ldw	r2,-8(fp)
   8c454:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   8c458:	e0bffe17 	ldw	r2,-8(fp)
   8c45c:	10801b04 	addi	r2,r2,108
   8c460:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   8c464:	e0bffd17 	ldw	r2,-12(fp)
   8c468:	10801b04 	addi	r2,r2,108
   8c46c:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   8c470:	e0bfff03 	ldbu	r2,-4(fp)
   8c474:	10800044 	addi	r2,r2,1
   8c478:	e0bfff05 	stb	r2,-4(fp)
   8c47c:	e0bfff03 	ldbu	r2,-4(fp)
   8c480:	108002f0 	cmpltui	r2,r2,11
   8c484:	103fec1e 	bne	r2,zero,8c438 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   8c488:	e0bffe17 	ldw	r2,-8(fp)
   8c48c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   8c490:	e0fffe17 	ldw	r3,-8(fp)
   8c494:	00800fc4 	movi	r2,63
   8c498:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   8c49c:	e0bffe17 	ldw	r2,-8(fp)
   8c4a0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   8c4a4:	d026fa15 	stw	zero,-25624(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   8c4a8:	008002b4 	movhi	r2,10
   8c4ac:	10b74f04 	addi	r2,r2,-8900
   8c4b0:	d0a6fe15 	stw	r2,-25608(gp)
}
   8c4b4:	e037883a 	mov	sp,fp
   8c4b8:	dfc00117 	ldw	ra,4(sp)
   8c4bc:	df000017 	ldw	fp,0(sp)
   8c4c0:	dec00204 	addi	sp,sp,8
   8c4c4:	f800283a 	ret

0008c4c8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   8c4c8:	defffd04 	addi	sp,sp,-12
   8c4cc:	df000215 	stw	fp,8(sp)
   8c4d0:	df000204 	addi	fp,sp,8
   8c4d4:	e13ffe15 	stw	r4,-8(fp)
   8c4d8:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
   8c4dc:	00000806 	br	8c500 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   8c4e0:	e0bffe17 	ldw	r2,-8(fp)
   8c4e4:	10000005 	stb	zero,0(r2)
   8c4e8:	e0bffe17 	ldw	r2,-8(fp)
   8c4ec:	10800044 	addi	r2,r2,1
   8c4f0:	e0bffe15 	stw	r2,-8(fp)
        size--;
   8c4f4:	e0bfff0b 	ldhu	r2,-4(fp)
   8c4f8:	10bfffc4 	addi	r2,r2,-1
   8c4fc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   8c500:	e0bfff0b 	ldhu	r2,-4(fp)
   8c504:	1004c03a 	cmpne	r2,r2,zero
   8c508:	103ff51e 	bne	r2,zero,8c4e0 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   8c50c:	e037883a 	mov	sp,fp
   8c510:	df000017 	ldw	fp,0(sp)
   8c514:	dec00104 	addi	sp,sp,4
   8c518:	f800283a 	ret

0008c51c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   8c51c:	defffc04 	addi	sp,sp,-16
   8c520:	df000315 	stw	fp,12(sp)
   8c524:	df000304 	addi	fp,sp,12
   8c528:	e13ffd15 	stw	r4,-12(fp)
   8c52c:	e17ffe15 	stw	r5,-8(fp)
   8c530:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
   8c534:	00000d06 	br	8c56c <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
   8c538:	e0bffe17 	ldw	r2,-8(fp)
   8c53c:	10c00003 	ldbu	r3,0(r2)
   8c540:	e0bffd17 	ldw	r2,-12(fp)
   8c544:	10c00005 	stb	r3,0(r2)
   8c548:	e0bffd17 	ldw	r2,-12(fp)
   8c54c:	10800044 	addi	r2,r2,1
   8c550:	e0bffd15 	stw	r2,-12(fp)
   8c554:	e0bffe17 	ldw	r2,-8(fp)
   8c558:	10800044 	addi	r2,r2,1
   8c55c:	e0bffe15 	stw	r2,-8(fp)
        size--;
   8c560:	e0bfff0b 	ldhu	r2,-4(fp)
   8c564:	10bfffc4 	addi	r2,r2,-1
   8c568:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   8c56c:	e0bfff0b 	ldhu	r2,-4(fp)
   8c570:	1004c03a 	cmpne	r2,r2,zero
   8c574:	103ff01e 	bne	r2,zero,8c538 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
   8c578:	e037883a 	mov	sp,fp
   8c57c:	df000017 	ldw	fp,0(sp)
   8c580:	dec00104 	addi	sp,sp,4
   8c584:	f800283a 	ret

0008c588 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   8c588:	defffb04 	addi	sp,sp,-20
   8c58c:	dfc00415 	stw	ra,16(sp)
   8c590:	df000315 	stw	fp,12(sp)
   8c594:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8c598:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c59c:	0005303a 	rdctl	r2,status
   8c5a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c5a4:	e0fffe17 	ldw	r3,-8(fp)
   8c5a8:	00bfff84 	movi	r2,-2
   8c5ac:	1884703a 	and	r2,r3,r2
   8c5b0:	1001703a 	wrctl	status,r2
  
  return context;
   8c5b4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   8c5b8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   8c5bc:	d0a70503 	ldbu	r2,-25580(gp)
   8c5c0:	10803fcc 	andi	r2,r2,255
   8c5c4:	1004c03a 	cmpne	r2,r2,zero
   8c5c8:	10001b1e 	bne	r2,zero,8c638 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   8c5cc:	d0a6f703 	ldbu	r2,-25636(gp)
   8c5d0:	10803fcc 	andi	r2,r2,255
   8c5d4:	1004c03a 	cmpne	r2,r2,zero
   8c5d8:	1000171e 	bne	r2,zero,8c638 <OS_Sched+0xb0>
            OS_SchedNew();
   8c5dc:	008c65c0 	call	8c65c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   8c5e0:	d0a6f903 	ldbu	r2,-25628(gp)
   8c5e4:	d0e6f943 	ldbu	r3,-25627(gp)
   8c5e8:	11003fcc 	andi	r4,r2,255
   8c5ec:	18803fcc 	andi	r2,r3,255
   8c5f0:	20801126 	beq	r4,r2,8c638 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   8c5f4:	d0a6f903 	ldbu	r2,-25628(gp)
   8c5f8:	10803fcc 	andi	r2,r2,255
   8c5fc:	00c002b4 	movhi	r3,10
   8c600:	18f89304 	addi	r3,r3,-7604
   8c604:	1085883a 	add	r2,r2,r2
   8c608:	1085883a 	add	r2,r2,r2
   8c60c:	10c5883a 	add	r2,r2,r3
   8c610:	10800017 	ldw	r2,0(r2)
   8c614:	d0a70115 	stw	r2,-25596(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   8c618:	d0e70117 	ldw	r3,-25596(gp)
   8c61c:	18800e17 	ldw	r2,56(r3)
   8c620:	10800044 	addi	r2,r2,1
   8c624:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   8c628:	d0a6fc17 	ldw	r2,-25616(gp)
   8c62c:	10800044 	addi	r2,r2,1
   8c630:	d0a6fc15 	stw	r2,-25616(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   8c634:	00949880 	call	94988 <OSCtxSw>
   8c638:	e0bfff17 	ldw	r2,-4(fp)
   8c63c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c640:	e0bffd17 	ldw	r2,-12(fp)
   8c644:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   8c648:	e037883a 	mov	sp,fp
   8c64c:	dfc00117 	ldw	ra,4(sp)
   8c650:	df000017 	ldw	fp,0(sp)
   8c654:	dec00204 	addi	sp,sp,8
   8c658:	f800283a 	ret

0008c65c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   8c65c:	defffe04 	addi	sp,sp,-8
   8c660:	df000115 	stw	fp,4(sp)
   8c664:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   8c668:	d0a70303 	ldbu	r2,-25588(gp)
   8c66c:	10c03fcc 	andi	r3,r2,255
   8c670:	00800274 	movhi	r2,9
   8c674:	10962f04 	addi	r2,r2,22716
   8c678:	10c5883a 	add	r2,r2,r3
   8c67c:	10800003 	ldbu	r2,0(r2)
   8c680:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   8c684:	e0bfff03 	ldbu	r2,-4(fp)
   8c688:	100490fa 	slli	r2,r2,3
   8c68c:	1009883a 	mov	r4,r2
   8c690:	e0ffff03 	ldbu	r3,-4(fp)
   8c694:	d0a70344 	addi	r2,gp,-25587
   8c698:	1885883a 	add	r2,r3,r2
   8c69c:	10800003 	ldbu	r2,0(r2)
   8c6a0:	10c03fcc 	andi	r3,r2,255
   8c6a4:	00800274 	movhi	r2,9
   8c6a8:	10962f04 	addi	r2,r2,22716
   8c6ac:	10c5883a 	add	r2,r2,r3
   8c6b0:	10800003 	ldbu	r2,0(r2)
   8c6b4:	2085883a 	add	r2,r4,r2
   8c6b8:	d0a6f905 	stb	r2,-25628(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   8c6bc:	e037883a 	mov	sp,fp
   8c6c0:	df000017 	ldw	fp,0(sp)
   8c6c4:	dec00104 	addi	sp,sp,4
   8c6c8:	f800283a 	ret

0008c6cc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   8c6cc:	defffc04 	addi	sp,sp,-16
   8c6d0:	df000315 	stw	fp,12(sp)
   8c6d4:	df000304 	addi	fp,sp,12
   8c6d8:	e13ffe15 	stw	r4,-8(fp)
   8c6dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   8c6e0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   8c6e4:	00000d06 	br	8c71c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
   8c6e8:	e0bfff17 	ldw	r2,-4(fp)
   8c6ec:	10c00003 	ldbu	r3,0(r2)
   8c6f0:	e0bffe17 	ldw	r2,-8(fp)
   8c6f4:	10c00005 	stb	r3,0(r2)
   8c6f8:	e0bffe17 	ldw	r2,-8(fp)
   8c6fc:	10800044 	addi	r2,r2,1
   8c700:	e0bffe15 	stw	r2,-8(fp)
   8c704:	e0bfff17 	ldw	r2,-4(fp)
   8c708:	10800044 	addi	r2,r2,1
   8c70c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   8c710:	e0bffd03 	ldbu	r2,-12(fp)
   8c714:	10800044 	addi	r2,r2,1
   8c718:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   8c71c:	e0bfff17 	ldw	r2,-4(fp)
   8c720:	10800003 	ldbu	r2,0(r2)
   8c724:	10803fcc 	andi	r2,r2,255
   8c728:	1004c03a 	cmpne	r2,r2,zero
   8c72c:	103fee1e 	bne	r2,zero,8c6e8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   8c730:	e0bffe17 	ldw	r2,-8(fp)
   8c734:	10000005 	stb	zero,0(r2)
    return (len);
   8c738:	e0bffd03 	ldbu	r2,-12(fp)
}
   8c73c:	e037883a 	mov	sp,fp
   8c740:	df000017 	ldw	fp,0(sp)
   8c744:	dec00104 	addi	sp,sp,4
   8c748:	f800283a 	ret

0008c74c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   8c74c:	defffd04 	addi	sp,sp,-12
   8c750:	df000215 	stw	fp,8(sp)
   8c754:	df000204 	addi	fp,sp,8
   8c758:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   8c75c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   8c760:	00000606 	br	8c77c <OS_StrLen+0x30>
        psrc++;
   8c764:	e0bfff17 	ldw	r2,-4(fp)
   8c768:	10800044 	addi	r2,r2,1
   8c76c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   8c770:	e0bffe03 	ldbu	r2,-8(fp)
   8c774:	10800044 	addi	r2,r2,1
   8c778:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   8c77c:	e0bfff17 	ldw	r2,-4(fp)
   8c780:	10800003 	ldbu	r2,0(r2)
   8c784:	10803fcc 	andi	r2,r2,255
   8c788:	1004c03a 	cmpne	r2,r2,zero
   8c78c:	103ff51e 	bne	r2,zero,8c764 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   8c790:	e0bffe03 	ldbu	r2,-8(fp)
}
   8c794:	e037883a 	mov	sp,fp
   8c798:	df000017 	ldw	fp,0(sp)
   8c79c:	dec00104 	addi	sp,sp,4
   8c7a0:	f800283a 	ret

0008c7a4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   8c7a4:	defffa04 	addi	sp,sp,-24
   8c7a8:	dfc00515 	stw	ra,20(sp)
   8c7ac:	df000415 	stw	fp,16(sp)
   8c7b0:	df000404 	addi	fp,sp,16
   8c7b4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8c7b8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c7bc:	0005303a 	rdctl	r2,status
   8c7c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c7c4:	e0fffd17 	ldw	r3,-12(fp)
   8c7c8:	00bfff84 	movi	r2,-2
   8c7cc:	1884703a 	and	r2,r3,r2
   8c7d0:	1001703a 	wrctl	status,r2
  
  return context;
   8c7d4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   8c7d8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
   8c7dc:	d0a6f817 	ldw	r2,-25632(gp)
   8c7e0:	10800044 	addi	r2,r2,1
   8c7e4:	d0a6f815 	stw	r2,-25632(gp)
   8c7e8:	e0bffe17 	ldw	r2,-8(fp)
   8c7ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c7f0:	e0bffc17 	ldw	r2,-16(fp)
   8c7f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   8c7f8:	0094e340 	call	94e34 <OSTaskIdleHook>
    }
   8c7fc:	003fef06 	br	8c7bc <OS_TaskIdle+0x18>

0008c800 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   8c800:	defffa04 	addi	sp,sp,-24
   8c804:	dfc00515 	stw	ra,20(sp)
   8c808:	df000415 	stw	fp,16(sp)
   8c80c:	df000404 	addi	fp,sp,16
   8c810:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8c814:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   8c818:	00000206 	br	8c824 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   8c81c:	01003204 	movi	r4,200
   8c820:	00928800 	call	92880 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   8c824:	d0a70903 	ldbu	r2,-25564(gp)
   8c828:	10803fcc 	andi	r2,r2,255
   8c82c:	1005003a 	cmpeq	r2,r2,zero
   8c830:	103ffa1e 	bne	r2,zero,8c81c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   8c834:	d126fd17 	ldw	r4,-25612(gp)
   8c838:	01401904 	movi	r5,100
   8c83c:	008963c0 	call	8963c <__udivsi3>
   8c840:	d0a6fd15 	stw	r2,-25612(gp)
    if (OSIdleCtrMax == 0L) {
   8c844:	d0a6fd17 	ldw	r2,-25612(gp)
   8c848:	1004c03a 	cmpne	r2,r2,zero
   8c84c:	1000031e 	bne	r2,zero,8c85c <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
   8c850:	d026ff05 	stb	zero,-25604(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   8c854:	01003fc4 	movi	r4,255
   8c858:	00924940 	call	92494 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c85c:	0005303a 	rdctl	r2,status
   8c860:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c864:	e0fffd17 	ldw	r3,-12(fp)
   8c868:	00bfff84 	movi	r2,-2
   8c86c:	1884703a 	and	r2,r3,r2
   8c870:	1001703a 	wrctl	status,r2
  
  return context;
   8c874:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   8c878:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   8c87c:	d0a6f817 	ldw	r2,-25632(gp)
   8c880:	d0a70a15 	stw	r2,-25560(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   8c884:	d026f815 	stw	zero,-25632(gp)
   8c888:	e0bffe17 	ldw	r2,-8(fp)
   8c88c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c890:	e0bffc17 	ldw	r2,-16(fp)
   8c894:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   8c898:	d1270a17 	ldw	r4,-25560(gp)
   8c89c:	d166fd17 	ldw	r5,-25612(gp)
   8c8a0:	008963c0 	call	8963c <__udivsi3>
   8c8a4:	1007883a 	mov	r3,r2
   8c8a8:	00801904 	movi	r2,100
   8c8ac:	10c5c83a 	sub	r2,r2,r3
   8c8b0:	d0a6ff05 	stb	r2,-25604(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   8c8b4:	0094dc40 	call	94dc4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   8c8b8:	008c8c80 	call	8c8c8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   8c8bc:	01001904 	movi	r4,100
   8c8c0:	00928800 	call	92880 <OSTimeDly>
    }
   8c8c4:	003fe506 	br	8c85c <OS_TaskStat+0x5c>

0008c8c8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   8c8c8:	defffa04 	addi	sp,sp,-24
   8c8cc:	dfc00515 	stw	ra,20(sp)
   8c8d0:	df000415 	stw	fp,16(sp)
   8c8d4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   8c8d8:	e03ffc05 	stb	zero,-16(fp)
   8c8dc:	00002406 	br	8c970 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   8c8e0:	e13ffc03 	ldbu	r4,-16(fp)
   8c8e4:	e17ffe04 	addi	r5,fp,-8
   8c8e8:	00922980 	call	92298 <OSTaskStkChk>
   8c8ec:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   8c8f0:	e0bffc43 	ldbu	r2,-15(fp)
   8c8f4:	1004c03a 	cmpne	r2,r2,zero
   8c8f8:	10001a1e 	bne	r2,zero,8c964 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   8c8fc:	e0bffc03 	ldbu	r2,-16(fp)
   8c900:	00c002b4 	movhi	r3,10
   8c904:	18f89304 	addi	r3,r3,-7604
   8c908:	1085883a 	add	r2,r2,r2
   8c90c:	1085883a 	add	r2,r2,r2
   8c910:	10c5883a 	add	r2,r2,r3
   8c914:	10800017 	ldw	r2,0(r2)
   8c918:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   8c91c:	e0bffd17 	ldw	r2,-12(fp)
   8c920:	1005003a 	cmpeq	r2,r2,zero
   8c924:	10000f1e 	bne	r2,zero,8c964 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   8c928:	e0bffd17 	ldw	r2,-12(fp)
   8c92c:	10800060 	cmpeqi	r2,r2,1
   8c930:	10000c1e 	bne	r2,zero,8c964 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   8c934:	e0bffd17 	ldw	r2,-12(fp)
   8c938:	10c00217 	ldw	r3,8(r2)
   8c93c:	e0bffd17 	ldw	r2,-12(fp)
   8c940:	10800317 	ldw	r2,12(r2)
   8c944:	1085883a 	add	r2,r2,r2
   8c948:	1085883a 	add	r2,r2,r2
   8c94c:	1887883a 	add	r3,r3,r2
   8c950:	e0bffd17 	ldw	r2,-12(fp)
   8c954:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   8c958:	e0ffff17 	ldw	r3,-4(fp)
   8c95c:	e0bffd17 	ldw	r2,-12(fp)
   8c960:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   8c964:	e0bffc03 	ldbu	r2,-16(fp)
   8c968:	10800044 	addi	r2,r2,1
   8c96c:	e0bffc05 	stb	r2,-16(fp)
   8c970:	e0bffc03 	ldbu	r2,-16(fp)
   8c974:	10800570 	cmpltui	r2,r2,21
   8c978:	103fd91e 	bne	r2,zero,8c8e0 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   8c97c:	e037883a 	mov	sp,fp
   8c980:	dfc00117 	ldw	ra,4(sp)
   8c984:	df000017 	ldw	fp,0(sp)
   8c988:	dec00204 	addi	sp,sp,8
   8c98c:	f800283a 	ret

0008c990 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   8c990:	defff104 	addi	sp,sp,-60
   8c994:	dfc00e15 	stw	ra,56(sp)
   8c998:	df000d15 	stw	fp,52(sp)
   8c99c:	df000d04 	addi	fp,sp,52
   8c9a0:	e17ffb15 	stw	r5,-20(fp)
   8c9a4:	e1bffc15 	stw	r6,-16(fp)
   8c9a8:	e0800417 	ldw	r2,16(fp)
   8c9ac:	e13ffa05 	stb	r4,-24(fp)
   8c9b0:	e1fffd0d 	sth	r7,-12(fp)
   8c9b4:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8c9b8:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c9bc:	0005303a 	rdctl	r2,status
   8c9c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c9c4:	e0fff717 	ldw	r3,-36(fp)
   8c9c8:	00bfff84 	movi	r2,-2
   8c9cc:	1884703a 	and	r2,r3,r2
   8c9d0:	1001703a 	wrctl	status,r2
  
  return context;
   8c9d4:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
   8c9d8:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   8c9dc:	d0a6fe17 	ldw	r2,-25608(gp)
   8c9e0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
   8c9e4:	e0bff917 	ldw	r2,-28(fp)
   8c9e8:	1005003a 	cmpeq	r2,r2,zero
   8c9ec:	1000941e 	bne	r2,zero,8cc40 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   8c9f0:	e0bff917 	ldw	r2,-28(fp)
   8c9f4:	10800517 	ldw	r2,20(r2)
   8c9f8:	d0a6fe15 	stw	r2,-25608(gp)
   8c9fc:	e0bff817 	ldw	r2,-32(fp)
   8ca00:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ca04:	e0bff617 	ldw	r2,-40(fp)
   8ca08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   8ca0c:	e0fff917 	ldw	r3,-28(fp)
   8ca10:	e0bffb17 	ldw	r2,-20(fp)
   8ca14:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   8ca18:	e0fff917 	ldw	r3,-28(fp)
   8ca1c:	e0bffa03 	ldbu	r2,-24(fp)
   8ca20:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   8ca24:	e0bff917 	ldw	r2,-28(fp)
   8ca28:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   8ca2c:	e0bff917 	ldw	r2,-28(fp)
   8ca30:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   8ca34:	e0bff917 	ldw	r2,-28(fp)
   8ca38:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   8ca3c:	e0fff917 	ldw	r3,-28(fp)
   8ca40:	e0800317 	ldw	r2,12(fp)
   8ca44:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   8ca48:	e0fff917 	ldw	r3,-28(fp)
   8ca4c:	e0800217 	ldw	r2,8(fp)
   8ca50:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   8ca54:	e0fff917 	ldw	r3,-28(fp)
   8ca58:	e0bffc17 	ldw	r2,-16(fp)
   8ca5c:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   8ca60:	e0fff917 	ldw	r3,-28(fp)
   8ca64:	e0bffe0b 	ldhu	r2,-8(fp)
   8ca68:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   8ca6c:	e0fff917 	ldw	r3,-28(fp)
   8ca70:	e0bffd0b 	ldhu	r2,-12(fp)
   8ca74:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   8ca78:	e0bff917 	ldw	r2,-28(fp)
   8ca7c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   8ca80:	e0bffa03 	ldbu	r2,-24(fp)
   8ca84:	1004d0fa 	srli	r2,r2,3
   8ca88:	1007883a 	mov	r3,r2
   8ca8c:	e0bff917 	ldw	r2,-28(fp)
   8ca90:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   8ca94:	e0bffa03 	ldbu	r2,-24(fp)
   8ca98:	108001cc 	andi	r2,r2,7
   8ca9c:	1007883a 	mov	r3,r2
   8caa0:	e0bff917 	ldw	r2,-28(fp)
   8caa4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   8caa8:	e0bff917 	ldw	r2,-28(fp)
   8caac:	10800d03 	ldbu	r2,52(r2)
   8cab0:	10c03fcc 	andi	r3,r2,255
   8cab4:	00800044 	movi	r2,1
   8cab8:	10c4983a 	sll	r2,r2,r3
   8cabc:	1007883a 	mov	r3,r2
   8cac0:	e0bff917 	ldw	r2,-28(fp)
   8cac4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   8cac8:	e0bff917 	ldw	r2,-28(fp)
   8cacc:	10800cc3 	ldbu	r2,51(r2)
   8cad0:	10c03fcc 	andi	r3,r2,255
   8cad4:	00800044 	movi	r2,1
   8cad8:	10c4983a 	sll	r2,r2,r3
   8cadc:	1007883a 	mov	r3,r2
   8cae0:	e0bff917 	ldw	r2,-28(fp)
   8cae4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   8cae8:	e0bff917 	ldw	r2,-28(fp)
   8caec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   8caf0:	e0bff917 	ldw	r2,-28(fp)
   8caf4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   8caf8:	e0bff917 	ldw	r2,-28(fp)
   8cafc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   8cb00:	e0bff917 	ldw	r2,-28(fp)
   8cb04:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   8cb08:	e0bff917 	ldw	r2,-28(fp)
   8cb0c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   8cb10:	e0bff917 	ldw	r2,-28(fp)
   8cb14:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   8cb18:	e0bff917 	ldw	r2,-28(fp)
   8cb1c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   8cb20:	e0bff917 	ldw	r2,-28(fp)
   8cb24:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   8cb28:	e0bff917 	ldw	r2,-28(fp)
   8cb2c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   8cb30:	e0fff917 	ldw	r3,-28(fp)
   8cb34:	00800fc4 	movi	r2,63
   8cb38:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   8cb3c:	e0bff917 	ldw	r2,-28(fp)
   8cb40:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   8cb44:	e13ff917 	ldw	r4,-28(fp)
   8cb48:	0094e500 	call	94e50 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   8cb4c:	e13ff917 	ldw	r4,-28(fp)
   8cb50:	0094d680 	call	94d68 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cb54:	0005303a 	rdctl	r2,status
   8cb58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cb5c:	e0fff517 	ldw	r3,-44(fp)
   8cb60:	00bfff84 	movi	r2,-2
   8cb64:	1884703a 	and	r2,r3,r2
   8cb68:	1001703a 	wrctl	status,r2
  
  return context;
   8cb6c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   8cb70:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
   8cb74:	e0bffa03 	ldbu	r2,-24(fp)
   8cb78:	00c002b4 	movhi	r3,10
   8cb7c:	18f89304 	addi	r3,r3,-7604
   8cb80:	1085883a 	add	r2,r2,r2
   8cb84:	1085883a 	add	r2,r2,r2
   8cb88:	10c7883a 	add	r3,r2,r3
   8cb8c:	e0bff917 	ldw	r2,-28(fp)
   8cb90:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   8cb94:	d0e6fa17 	ldw	r3,-25624(gp)
   8cb98:	e0bff917 	ldw	r2,-28(fp)
   8cb9c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   8cba0:	e0bff917 	ldw	r2,-28(fp)
   8cba4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   8cba8:	d0a6fa17 	ldw	r2,-25624(gp)
   8cbac:	1005003a 	cmpeq	r2,r2,zero
   8cbb0:	1000031e 	bne	r2,zero,8cbc0 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
   8cbb4:	d0e6fa17 	ldw	r3,-25624(gp)
   8cbb8:	e0bff917 	ldw	r2,-28(fp)
   8cbbc:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
   8cbc0:	e0bff917 	ldw	r2,-28(fp)
   8cbc4:	d0a6fa15 	stw	r2,-25624(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   8cbc8:	e0bff917 	ldw	r2,-28(fp)
   8cbcc:	10c00d83 	ldbu	r3,54(r2)
   8cbd0:	d0a70303 	ldbu	r2,-25588(gp)
   8cbd4:	1884b03a 	or	r2,r3,r2
   8cbd8:	d0a70305 	stb	r2,-25588(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8cbdc:	e0bff917 	ldw	r2,-28(fp)
   8cbe0:	10800d03 	ldbu	r2,52(r2)
   8cbe4:	11003fcc 	andi	r4,r2,255
   8cbe8:	e0bff917 	ldw	r2,-28(fp)
   8cbec:	10800d03 	ldbu	r2,52(r2)
   8cbf0:	10c03fcc 	andi	r3,r2,255
   8cbf4:	d0a70344 	addi	r2,gp,-25587
   8cbf8:	1885883a 	add	r2,r3,r2
   8cbfc:	10c00003 	ldbu	r3,0(r2)
   8cc00:	e0bff917 	ldw	r2,-28(fp)
   8cc04:	10800d43 	ldbu	r2,53(r2)
   8cc08:	1884b03a 	or	r2,r3,r2
   8cc0c:	1007883a 	mov	r3,r2
   8cc10:	d0a70344 	addi	r2,gp,-25587
   8cc14:	2085883a 	add	r2,r4,r2
   8cc18:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   8cc1c:	d0a6ff43 	ldbu	r2,-25603(gp)
   8cc20:	10800044 	addi	r2,r2,1
   8cc24:	d0a6ff45 	stb	r2,-25603(gp)
   8cc28:	e0bff817 	ldw	r2,-32(fp)
   8cc2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cc30:	e0bff417 	ldw	r2,-48(fp)
   8cc34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   8cc38:	e03fff15 	stw	zero,-4(fp)
   8cc3c:	00000606 	br	8cc58 <OS_TCBInit+0x2c8>
   8cc40:	e0bff817 	ldw	r2,-32(fp)
   8cc44:	e0bff315 	stw	r2,-52(fp)
   8cc48:	e0bff317 	ldw	r2,-52(fp)
   8cc4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   8cc50:	00801084 	movi	r2,66
   8cc54:	e0bfff15 	stw	r2,-4(fp)
   8cc58:	e0bfff17 	ldw	r2,-4(fp)
}
   8cc5c:	e037883a 	mov	sp,fp
   8cc60:	dfc00117 	ldw	ra,4(sp)
   8cc64:	df000017 	ldw	fp,0(sp)
   8cc68:	dec00204 	addi	sp,sp,8
   8cc6c:	f800283a 	ret

0008cc70 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   8cc70:	defffe04 	addi	sp,sp,-8
   8cc74:	df000115 	stw	fp,4(sp)
   8cc78:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   8cc7c:	d0a00f04 	addi	r2,gp,-32708
   8cc80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   8cc84:	d0a01004 	addi	r2,gp,-32704
   8cc88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   8cc8c:	d0a01184 	addi	r2,gp,-32698
   8cc90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   8cc94:	d0a01204 	addi	r2,gp,-32696
   8cc98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   8cc9c:	d0a01104 	addi	r2,gp,-32700
   8cca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   8cca4:	d0a01284 	addi	r2,gp,-32694
   8cca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   8ccac:	d0a01304 	addi	r2,gp,-32692
   8ccb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   8ccb4:	d0a01384 	addi	r2,gp,-32690
   8ccb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   8ccbc:	d0a01404 	addi	r2,gp,-32688
   8ccc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   8ccc4:	d0a01484 	addi	r2,gp,-32686
   8ccc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   8cccc:	d0a01504 	addi	r2,gp,-32684
   8ccd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   8ccd4:	d0a01584 	addi	r2,gp,-32682
   8ccd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   8ccdc:	d0a01604 	addi	r2,gp,-32680
   8cce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   8cce4:	d0a01684 	addi	r2,gp,-32678
   8cce8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   8ccec:	d0a01704 	addi	r2,gp,-32676
   8ccf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   8ccf4:	d0a01784 	addi	r2,gp,-32674
   8ccf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   8ccfc:	d0a01804 	addi	r2,gp,-32672
   8cd00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   8cd04:	d0a01884 	addi	r2,gp,-32670
   8cd08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   8cd0c:	d0a01904 	addi	r2,gp,-32668
   8cd10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   8cd14:	d0a01984 	addi	r2,gp,-32666
   8cd18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   8cd1c:	d0a01a04 	addi	r2,gp,-32664
   8cd20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   8cd24:	d0a01a84 	addi	r2,gp,-32662
   8cd28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   8cd2c:	d0a01b04 	addi	r2,gp,-32660
   8cd30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   8cd34:	d0a01b84 	addi	r2,gp,-32658
   8cd38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   8cd3c:	d0a01c04 	addi	r2,gp,-32656
   8cd40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   8cd44:	d0a01c84 	addi	r2,gp,-32654
   8cd48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   8cd4c:	d0a01d04 	addi	r2,gp,-32652
   8cd50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   8cd54:	d0a01d84 	addi	r2,gp,-32650
   8cd58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   8cd5c:	d0a01e04 	addi	r2,gp,-32648
   8cd60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   8cd64:	d0a01e84 	addi	r2,gp,-32646
   8cd68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   8cd6c:	d0a01f04 	addi	r2,gp,-32644
   8cd70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   8cd74:	d0a01f84 	addi	r2,gp,-32642
   8cd78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   8cd7c:	d0a02004 	addi	r2,gp,-32640
   8cd80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   8cd84:	d0a02084 	addi	r2,gp,-32638
   8cd88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   8cd8c:	d0a02104 	addi	r2,gp,-32636
   8cd90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   8cd94:	d0a02184 	addi	r2,gp,-32634
   8cd98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   8cd9c:	d0a02204 	addi	r2,gp,-32632
   8cda0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   8cda4:	d0a02284 	addi	r2,gp,-32630
   8cda8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   8cdac:	d0a02304 	addi	r2,gp,-32628
   8cdb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   8cdb4:	d0a02384 	addi	r2,gp,-32626
   8cdb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   8cdbc:	d0a02404 	addi	r2,gp,-32624
   8cdc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   8cdc4:	d0a02484 	addi	r2,gp,-32622
   8cdc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   8cdcc:	d0a02504 	addi	r2,gp,-32620
   8cdd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   8cdd4:	d0a02584 	addi	r2,gp,-32618
   8cdd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   8cddc:	d0a02604 	addi	r2,gp,-32616
   8cde0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   8cde4:	d0a02b04 	addi	r2,gp,-32596
   8cde8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   8cdec:	e037883a 	mov	sp,fp
   8cdf0:	df000017 	ldw	fp,0(sp)
   8cdf4:	dec00104 	addi	sp,sp,4
   8cdf8:	f800283a 	ret

0008cdfc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   8cdfc:	defff104 	addi	sp,sp,-60
   8ce00:	df000e15 	stw	fp,56(sp)
   8ce04:	df000e04 	addi	fp,sp,56
   8ce08:	e13ffa15 	stw	r4,-24(fp)
   8ce0c:	e1fffd15 	stw	r7,-12(fp)
   8ce10:	e17ffb0d 	sth	r5,-20(fp)
   8ce14:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8ce18:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8ce1c:	e0bffd17 	ldw	r2,-12(fp)
   8ce20:	1004c03a 	cmpne	r2,r2,zero
   8ce24:	1000021e 	bne	r2,zero,8ce30 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
   8ce28:	e03fff15 	stw	zero,-4(fp)
   8ce2c:	0000bb06 	br	8d11c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8ce30:	e0bffa17 	ldw	r2,-24(fp)
   8ce34:	1004c03a 	cmpne	r2,r2,zero
   8ce38:	1000051e 	bne	r2,zero,8ce50 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8ce3c:	e0fffd17 	ldw	r3,-12(fp)
   8ce40:	00801b84 	movi	r2,110
   8ce44:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8ce48:	e03fff15 	stw	zero,-4(fp)
   8ce4c:	0000b306 	br	8d11c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   8ce50:	e0bffa17 	ldw	r2,-24(fp)
   8ce54:	10800003 	ldbu	r2,0(r2)
   8ce58:	10803fcc 	andi	r2,r2,255
   8ce5c:	10800160 	cmpeqi	r2,r2,5
   8ce60:	1000051e 	bne	r2,zero,8ce78 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   8ce64:	e0fffd17 	ldw	r3,-12(fp)
   8ce68:	00800044 	movi	r2,1
   8ce6c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8ce70:	e03fff15 	stw	zero,-4(fp)
   8ce74:	0000a906 	br	8d11c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   8ce78:	e0fffc03 	ldbu	r3,-16(fp)
   8ce7c:	00bfe004 	movi	r2,-128
   8ce80:	1884703a 	and	r2,r3,r2
   8ce84:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   8ce88:	e0bff943 	ldbu	r2,-27(fp)
   8ce8c:	1005003a 	cmpeq	r2,r2,zero
   8ce90:	1000061e 	bne	r2,zero,8ceac <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
   8ce94:	e0bffc03 	ldbu	r2,-16(fp)
   8ce98:	10801fcc 	andi	r2,r2,127
   8ce9c:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
   8cea0:	00800044 	movi	r2,1
   8cea4:	e0bff905 	stb	r2,-28(fp)
   8cea8:	00000106 	br	8ceb0 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
   8ceac:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   8ceb0:	e0bffd17 	ldw	r2,-12(fp)
   8ceb4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ceb8:	0005303a 	rdctl	r2,status
   8cebc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cec0:	e0fff717 	ldw	r3,-36(fp)
   8cec4:	00bfff84 	movi	r2,-2
   8cec8:	1884703a 	and	r2,r3,r2
   8cecc:	1001703a 	wrctl	status,r2
  
  return context;
   8ced0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8ced4:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
   8ced8:	e0bffc03 	ldbu	r2,-16(fp)
   8cedc:	e0bffe15 	stw	r2,-8(fp)
   8cee0:	e0fffe17 	ldw	r3,-8(fp)
   8cee4:	18800060 	cmpeqi	r2,r3,1
   8cee8:	1000651e 	bne	r2,zero,8d080 <OSFlagAccept+0x284>
   8ceec:	e0fffe17 	ldw	r3,-8(fp)
   8cef0:	18800088 	cmpgei	r2,r3,2
   8cef4:	1000041e 	bne	r2,zero,8cf08 <OSFlagAccept+0x10c>
   8cef8:	e0fffe17 	ldw	r3,-8(fp)
   8cefc:	1805003a 	cmpeq	r2,r3,zero
   8cf00:	1000421e 	bne	r2,zero,8d00c <OSFlagAccept+0x210>
   8cf04:	00007b06 	br	8d0f4 <OSFlagAccept+0x2f8>
   8cf08:	e0fffe17 	ldw	r3,-8(fp)
   8cf0c:	188000a0 	cmpeqi	r2,r3,2
   8cf10:	1000041e 	bne	r2,zero,8cf24 <OSFlagAccept+0x128>
   8cf14:	e0fffe17 	ldw	r3,-8(fp)
   8cf18:	188000e0 	cmpeqi	r2,r3,3
   8cf1c:	10001e1e 	bne	r2,zero,8cf98 <OSFlagAccept+0x19c>
   8cf20:	00007406 	br	8d0f4 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   8cf24:	e0bffa17 	ldw	r2,-24(fp)
   8cf28:	10c0020b 	ldhu	r3,8(r2)
   8cf2c:	e0bffb0b 	ldhu	r2,-20(fp)
   8cf30:	1884703a 	and	r2,r3,r2
   8cf34:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8cf38:	e0fff98b 	ldhu	r3,-26(fp)
   8cf3c:	e0bffb0b 	ldhu	r2,-20(fp)
   8cf40:	18800d1e 	bne	r3,r2,8cf78 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8cf44:	e0bff903 	ldbu	r2,-28(fp)
   8cf48:	10800058 	cmpnei	r2,r2,1
   8cf4c:	10000d1e 	bne	r2,zero,8cf84 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   8cf50:	e0bffa17 	ldw	r2,-24(fp)
   8cf54:	1080020b 	ldhu	r2,8(r2)
   8cf58:	1007883a 	mov	r3,r2
   8cf5c:	e0bff98b 	ldhu	r2,-26(fp)
   8cf60:	0084303a 	nor	r2,zero,r2
   8cf64:	1884703a 	and	r2,r3,r2
   8cf68:	1007883a 	mov	r3,r2
   8cf6c:	e0bffa17 	ldw	r2,-24(fp)
   8cf70:	10c0020d 	sth	r3,8(r2)
   8cf74:	00000306 	br	8cf84 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8cf78:	e0fffd17 	ldw	r3,-12(fp)
   8cf7c:	00801c04 	movi	r2,112
   8cf80:	18800005 	stb	r2,0(r3)
   8cf84:	e0bff817 	ldw	r2,-32(fp)
   8cf88:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cf8c:	e0bff617 	ldw	r2,-40(fp)
   8cf90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8cf94:	00005f06 	br	8d114 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   8cf98:	e0bffa17 	ldw	r2,-24(fp)
   8cf9c:	10c0020b 	ldhu	r3,8(r2)
   8cfa0:	e0bffb0b 	ldhu	r2,-20(fp)
   8cfa4:	1884703a 	and	r2,r3,r2
   8cfa8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   8cfac:	e0bff98b 	ldhu	r2,-26(fp)
   8cfb0:	1005003a 	cmpeq	r2,r2,zero
   8cfb4:	10000d1e 	bne	r2,zero,8cfec <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8cfb8:	e0bff903 	ldbu	r2,-28(fp)
   8cfbc:	10800058 	cmpnei	r2,r2,1
   8cfc0:	10000d1e 	bne	r2,zero,8cff8 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   8cfc4:	e0bffa17 	ldw	r2,-24(fp)
   8cfc8:	1080020b 	ldhu	r2,8(r2)
   8cfcc:	1007883a 	mov	r3,r2
   8cfd0:	e0bff98b 	ldhu	r2,-26(fp)
   8cfd4:	0084303a 	nor	r2,zero,r2
   8cfd8:	1884703a 	and	r2,r3,r2
   8cfdc:	1007883a 	mov	r3,r2
   8cfe0:	e0bffa17 	ldw	r2,-24(fp)
   8cfe4:	10c0020d 	sth	r3,8(r2)
   8cfe8:	00000306 	br	8cff8 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8cfec:	e0fffd17 	ldw	r3,-12(fp)
   8cff0:	00801c04 	movi	r2,112
   8cff4:	18800005 	stb	r2,0(r3)
   8cff8:	e0bff817 	ldw	r2,-32(fp)
   8cffc:	e0bff515 	stw	r2,-44(fp)
   8d000:	e0bff517 	ldw	r2,-44(fp)
   8d004:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8d008:	00004206 	br	8d114 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   8d00c:	e0bffa17 	ldw	r2,-24(fp)
   8d010:	1080020b 	ldhu	r2,8(r2)
   8d014:	0084303a 	nor	r2,zero,r2
   8d018:	1007883a 	mov	r3,r2
   8d01c:	e0bffb0b 	ldhu	r2,-20(fp)
   8d020:	1884703a 	and	r2,r3,r2
   8d024:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8d028:	e0fff98b 	ldhu	r3,-26(fp)
   8d02c:	e0bffb0b 	ldhu	r2,-20(fp)
   8d030:	18800b1e 	bne	r3,r2,8d060 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8d034:	e0bff903 	ldbu	r2,-28(fp)
   8d038:	10800058 	cmpnei	r2,r2,1
   8d03c:	10000b1e 	bne	r2,zero,8d06c <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   8d040:	e0bffa17 	ldw	r2,-24(fp)
   8d044:	10c0020b 	ldhu	r3,8(r2)
   8d048:	e0bff98b 	ldhu	r2,-26(fp)
   8d04c:	1884b03a 	or	r2,r3,r2
   8d050:	1007883a 	mov	r3,r2
   8d054:	e0bffa17 	ldw	r2,-24(fp)
   8d058:	10c0020d 	sth	r3,8(r2)
   8d05c:	00000306 	br	8d06c <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8d060:	e0fffd17 	ldw	r3,-12(fp)
   8d064:	00801c04 	movi	r2,112
   8d068:	18800005 	stb	r2,0(r3)
   8d06c:	e0bff817 	ldw	r2,-32(fp)
   8d070:	e0bff415 	stw	r2,-48(fp)
   8d074:	e0bff417 	ldw	r2,-48(fp)
   8d078:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8d07c:	00002506 	br	8d114 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   8d080:	e0bffa17 	ldw	r2,-24(fp)
   8d084:	1080020b 	ldhu	r2,8(r2)
   8d088:	0084303a 	nor	r2,zero,r2
   8d08c:	1007883a 	mov	r3,r2
   8d090:	e0bffb0b 	ldhu	r2,-20(fp)
   8d094:	1884703a 	and	r2,r3,r2
   8d098:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   8d09c:	e0bff98b 	ldhu	r2,-26(fp)
   8d0a0:	1005003a 	cmpeq	r2,r2,zero
   8d0a4:	10000b1e 	bne	r2,zero,8d0d4 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8d0a8:	e0bff903 	ldbu	r2,-28(fp)
   8d0ac:	10800058 	cmpnei	r2,r2,1
   8d0b0:	10000b1e 	bne	r2,zero,8d0e0 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   8d0b4:	e0bffa17 	ldw	r2,-24(fp)
   8d0b8:	10c0020b 	ldhu	r3,8(r2)
   8d0bc:	e0bff98b 	ldhu	r2,-26(fp)
   8d0c0:	1884b03a 	or	r2,r3,r2
   8d0c4:	1007883a 	mov	r3,r2
   8d0c8:	e0bffa17 	ldw	r2,-24(fp)
   8d0cc:	10c0020d 	sth	r3,8(r2)
   8d0d0:	00000306 	br	8d0e0 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8d0d4:	e0fffd17 	ldw	r3,-12(fp)
   8d0d8:	00801c04 	movi	r2,112
   8d0dc:	18800005 	stb	r2,0(r3)
   8d0e0:	e0bff817 	ldw	r2,-32(fp)
   8d0e4:	e0bff315 	stw	r2,-52(fp)
   8d0e8:	e0bff317 	ldw	r2,-52(fp)
   8d0ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8d0f0:	00000806 	br	8d114 <OSFlagAccept+0x318>
   8d0f4:	e0bff817 	ldw	r2,-32(fp)
   8d0f8:	e0bff215 	stw	r2,-56(fp)
   8d0fc:	e0bff217 	ldw	r2,-56(fp)
   8d100:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   8d104:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   8d108:	e0fffd17 	ldw	r3,-12(fp)
   8d10c:	00801bc4 	movi	r2,111
   8d110:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
   8d114:	e0bff98b 	ldhu	r2,-26(fp)
   8d118:	e0bfff15 	stw	r2,-4(fp)
   8d11c:	e0bfff17 	ldw	r2,-4(fp)
}
   8d120:	e037883a 	mov	sp,fp
   8d124:	df000017 	ldw	fp,0(sp)
   8d128:	dec00104 	addi	sp,sp,4
   8d12c:	f800283a 	ret

0008d130 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   8d130:	defff704 	addi	sp,sp,-36
   8d134:	df000815 	stw	fp,32(sp)
   8d138:	df000804 	addi	fp,sp,32
   8d13c:	e17ffe15 	stw	r5,-8(fp)
   8d140:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   8d144:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   8d148:	e0bffe17 	ldw	r2,-8(fp)
   8d14c:	1004c03a 	cmpne	r2,r2,zero
   8d150:	1000021e 	bne	r2,zero,8d15c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   8d154:	e03fff15 	stw	zero,-4(fp)
   8d158:	00003f06 	br	8d258 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   8d15c:	008002b4 	movhi	r2,10
   8d160:	10a40c04 	addi	r2,r2,-28624
   8d164:	10800003 	ldbu	r2,0(r2)
   8d168:	10803fcc 	andi	r2,r2,255
   8d16c:	1005003a 	cmpeq	r2,r2,zero
   8d170:	1000051e 	bne	r2,zero,8d188 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   8d174:	e0fffe17 	ldw	r3,-8(fp)
   8d178:	00800404 	movi	r2,16
   8d17c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
   8d180:	e03fff15 	stw	zero,-4(fp)
   8d184:	00003406 	br	8d258 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d188:	0005303a 	rdctl	r2,status
   8d18c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d190:	e0fffa17 	ldw	r3,-24(fp)
   8d194:	00bfff84 	movi	r2,-2
   8d198:	1884703a 	and	r2,r3,r2
   8d19c:	1001703a 	wrctl	status,r2
  
  return context;
   8d1a0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8d1a4:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   8d1a8:	008002b4 	movhi	r2,10
   8d1ac:	10a40f04 	addi	r2,r2,-28612
   8d1b0:	10800017 	ldw	r2,0(r2)
   8d1b4:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   8d1b8:	e0bffc17 	ldw	r2,-16(fp)
   8d1bc:	1005003a 	cmpeq	r2,r2,zero
   8d1c0:	10001c1e 	bne	r2,zero,8d234 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   8d1c4:	008002b4 	movhi	r2,10
   8d1c8:	10a40f04 	addi	r2,r2,-28612
   8d1cc:	10800017 	ldw	r2,0(r2)
   8d1d0:	10800117 	ldw	r2,4(r2)
   8d1d4:	1007883a 	mov	r3,r2
   8d1d8:	008002b4 	movhi	r2,10
   8d1dc:	10a40f04 	addi	r2,r2,-28612
   8d1e0:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   8d1e4:	e0fffc17 	ldw	r3,-16(fp)
   8d1e8:	00800144 	movi	r2,5
   8d1ec:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   8d1f0:	e0fffc17 	ldw	r3,-16(fp)
   8d1f4:	e0bffd0b 	ldhu	r2,-12(fp)
   8d1f8:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   8d1fc:	e0bffc17 	ldw	r2,-16(fp)
   8d200:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   8d204:	e0fffc17 	ldw	r3,-16(fp)
   8d208:	00800fc4 	movi	r2,63
   8d20c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8d210:	e0bffc17 	ldw	r2,-16(fp)
   8d214:	100002c5 	stb	zero,11(r2)
   8d218:	e0bffb17 	ldw	r2,-20(fp)
   8d21c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d220:	e0bff917 	ldw	r2,-28(fp)
   8d224:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   8d228:	e0bffe17 	ldw	r2,-8(fp)
   8d22c:	10000005 	stb	zero,0(r2)
   8d230:	00000706 	br	8d250 <OSFlagCreate+0x120>
   8d234:	e0bffb17 	ldw	r2,-20(fp)
   8d238:	e0bff815 	stw	r2,-32(fp)
   8d23c:	e0bff817 	ldw	r2,-32(fp)
   8d240:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   8d244:	e0fffe17 	ldw	r3,-8(fp)
   8d248:	00801c84 	movi	r2,114
   8d24c:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   8d250:	e0bffc17 	ldw	r2,-16(fp)
   8d254:	e0bfff15 	stw	r2,-4(fp)
   8d258:	e0bfff17 	ldw	r2,-4(fp)
}
   8d25c:	e037883a 	mov	sp,fp
   8d260:	df000017 	ldw	fp,0(sp)
   8d264:	dec00104 	addi	sp,sp,4
   8d268:	f800283a 	ret

0008d26c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   8d26c:	defff004 	addi	sp,sp,-64
   8d270:	dfc00f15 	stw	ra,60(sp)
   8d274:	df000e15 	stw	fp,56(sp)
   8d278:	df000e04 	addi	fp,sp,56
   8d27c:	e13ffb15 	stw	r4,-20(fp)
   8d280:	e1bffd15 	stw	r6,-12(fp)
   8d284:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8d288:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8d28c:	e0bffd17 	ldw	r2,-12(fp)
   8d290:	1004c03a 	cmpne	r2,r2,zero
   8d294:	1000031e 	bne	r2,zero,8d2a4 <OSFlagDel+0x38>
        return (pgrp);
   8d298:	e0bffb17 	ldw	r2,-20(fp)
   8d29c:	e0bfff15 	stw	r2,-4(fp)
   8d2a0:	00009606 	br	8d4fc <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8d2a4:	e0bffb17 	ldw	r2,-20(fp)
   8d2a8:	1004c03a 	cmpne	r2,r2,zero
   8d2ac:	1000061e 	bne	r2,zero,8d2c8 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8d2b0:	e0fffd17 	ldw	r3,-12(fp)
   8d2b4:	00801b84 	movi	r2,110
   8d2b8:	18800005 	stb	r2,0(r3)
        return (pgrp);
   8d2bc:	e0fffb17 	ldw	r3,-20(fp)
   8d2c0:	e0ffff15 	stw	r3,-4(fp)
   8d2c4:	00008d06 	br	8d4fc <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8d2c8:	008002b4 	movhi	r2,10
   8d2cc:	10a40c04 	addi	r2,r2,-28624
   8d2d0:	10800003 	ldbu	r2,0(r2)
   8d2d4:	10803fcc 	andi	r2,r2,255
   8d2d8:	1005003a 	cmpeq	r2,r2,zero
   8d2dc:	1000061e 	bne	r2,zero,8d2f8 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   8d2e0:	e0fffd17 	ldw	r3,-12(fp)
   8d2e4:	008003c4 	movi	r2,15
   8d2e8:	18800005 	stb	r2,0(r3)
        return (pgrp);
   8d2ec:	e0bffb17 	ldw	r2,-20(fp)
   8d2f0:	e0bfff15 	stw	r2,-4(fp)
   8d2f4:	00008106 	br	8d4fc <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   8d2f8:	e0bffb17 	ldw	r2,-20(fp)
   8d2fc:	10800003 	ldbu	r2,0(r2)
   8d300:	10803fcc 	andi	r2,r2,255
   8d304:	10800160 	cmpeqi	r2,r2,5
   8d308:	1000061e 	bne	r2,zero,8d324 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
   8d30c:	e0fffd17 	ldw	r3,-12(fp)
   8d310:	00800044 	movi	r2,1
   8d314:	18800005 	stb	r2,0(r3)
        return (pgrp);
   8d318:	e0fffb17 	ldw	r3,-20(fp)
   8d31c:	e0ffff15 	stw	r3,-4(fp)
   8d320:	00007606 	br	8d4fc <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d324:	0005303a 	rdctl	r2,status
   8d328:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d32c:	e0fff617 	ldw	r3,-40(fp)
   8d330:	00bfff84 	movi	r2,-2
   8d334:	1884703a 	and	r2,r3,r2
   8d338:	1001703a 	wrctl	status,r2
  
  return context;
   8d33c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   8d340:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   8d344:	e0bffb17 	ldw	r2,-20(fp)
   8d348:	10800117 	ldw	r2,4(r2)
   8d34c:	1005003a 	cmpeq	r2,r2,zero
   8d350:	1000031e 	bne	r2,zero,8d360 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   8d354:	00800044 	movi	r2,1
   8d358:	e0bffa05 	stb	r2,-24(fp)
   8d35c:	00000106 	br	8d364 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   8d360:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   8d364:	e0bffc03 	ldbu	r2,-16(fp)
   8d368:	e0bffe15 	stw	r2,-8(fp)
   8d36c:	e0fffe17 	ldw	r3,-8(fp)
   8d370:	1805003a 	cmpeq	r2,r3,zero
   8d374:	1000041e 	bne	r2,zero,8d388 <OSFlagDel+0x11c>
   8d378:	e0fffe17 	ldw	r3,-8(fp)
   8d37c:	18800060 	cmpeqi	r2,r3,1
   8d380:	1000281e 	bne	r2,zero,8d424 <OSFlagDel+0x1b8>
   8d384:	00005206 	br	8d4d0 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   8d388:	e0bffa03 	ldbu	r2,-24(fp)
   8d38c:	1004c03a 	cmpne	r2,r2,zero
   8d390:	10001a1e 	bne	r2,zero,8d3fc <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   8d394:	e0fffb17 	ldw	r3,-20(fp)
   8d398:	00800fc4 	movi	r2,63
   8d39c:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8d3a0:	e0bffb17 	ldw	r2,-20(fp)
   8d3a4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8d3a8:	e0bffb17 	ldw	r2,-20(fp)
   8d3ac:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   8d3b0:	008002b4 	movhi	r2,10
   8d3b4:	10a40f04 	addi	r2,r2,-28612
   8d3b8:	10c00017 	ldw	r3,0(r2)
   8d3bc:	e0bffb17 	ldw	r2,-20(fp)
   8d3c0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   8d3c4:	e0bffb17 	ldw	r2,-20(fp)
   8d3c8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   8d3cc:	00c002b4 	movhi	r3,10
   8d3d0:	18e40f04 	addi	r3,r3,-28612
   8d3d4:	e0bffb17 	ldw	r2,-20(fp)
   8d3d8:	18800015 	stw	r2,0(r3)
   8d3dc:	e0bff717 	ldw	r2,-36(fp)
   8d3e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d3e4:	e0bff517 	ldw	r2,-44(fp)
   8d3e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   8d3ec:	e0bffd17 	ldw	r2,-12(fp)
   8d3f0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   8d3f4:	e03ff815 	stw	zero,-32(fp)
   8d3f8:	00003e06 	br	8d4f4 <OSFlagDel+0x288>
   8d3fc:	e0bff717 	ldw	r2,-36(fp)
   8d400:	e0bff415 	stw	r2,-48(fp)
   8d404:	e0bff417 	ldw	r2,-48(fp)
   8d408:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   8d40c:	e0fffd17 	ldw	r3,-12(fp)
   8d410:	00801244 	movi	r2,73
   8d414:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
   8d418:	e0bffb17 	ldw	r2,-20(fp)
   8d41c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
   8d420:	00003406 	br	8d4f4 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   8d424:	e0bffb17 	ldw	r2,-20(fp)
   8d428:	10800117 	ldw	r2,4(r2)
   8d42c:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   8d430:	00000606 	br	8d44c <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   8d434:	e13ff917 	ldw	r4,-28(fp)
   8d438:	000b883a 	mov	r5,zero
   8d43c:	008e57c0 	call	8e57c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   8d440:	e0bff917 	ldw	r2,-28(fp)
   8d444:	10800017 	ldw	r2,0(r2)
   8d448:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   8d44c:	e0bff917 	ldw	r2,-28(fp)
   8d450:	1004c03a 	cmpne	r2,r2,zero
   8d454:	103ff71e 	bne	r2,zero,8d434 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   8d458:	e0fffb17 	ldw	r3,-20(fp)
   8d45c:	00800fc4 	movi	r2,63
   8d460:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8d464:	e0bffb17 	ldw	r2,-20(fp)
   8d468:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8d46c:	e0bffb17 	ldw	r2,-20(fp)
   8d470:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   8d474:	008002b4 	movhi	r2,10
   8d478:	10a40f04 	addi	r2,r2,-28612
   8d47c:	10c00017 	ldw	r3,0(r2)
   8d480:	e0bffb17 	ldw	r2,-20(fp)
   8d484:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   8d488:	e0bffb17 	ldw	r2,-20(fp)
   8d48c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   8d490:	00c002b4 	movhi	r3,10
   8d494:	18e40f04 	addi	r3,r3,-28612
   8d498:	e0bffb17 	ldw	r2,-20(fp)
   8d49c:	18800015 	stw	r2,0(r3)
   8d4a0:	e0bff717 	ldw	r2,-36(fp)
   8d4a4:	e0bff315 	stw	r2,-52(fp)
   8d4a8:	e0bff317 	ldw	r2,-52(fp)
   8d4ac:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   8d4b0:	e0bffa03 	ldbu	r2,-24(fp)
   8d4b4:	10800058 	cmpnei	r2,r2,1
   8d4b8:	1000011e 	bne	r2,zero,8d4c0 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   8d4bc:	008c5880 	call	8c588 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   8d4c0:	e0bffd17 	ldw	r2,-12(fp)
   8d4c4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   8d4c8:	e03ff815 	stw	zero,-32(fp)
             break;
   8d4cc:	00000906 	br	8d4f4 <OSFlagDel+0x288>
   8d4d0:	e0bff717 	ldw	r2,-36(fp)
   8d4d4:	e0bff215 	stw	r2,-56(fp)
   8d4d8:	e0bff217 	ldw	r2,-56(fp)
   8d4dc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   8d4e0:	e0fffd17 	ldw	r3,-12(fp)
   8d4e4:	008001c4 	movi	r2,7
   8d4e8:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
   8d4ec:	e0bffb17 	ldw	r2,-20(fp)
   8d4f0:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
   8d4f4:	e0bff817 	ldw	r2,-32(fp)
   8d4f8:	e0bfff15 	stw	r2,-4(fp)
   8d4fc:	e0bfff17 	ldw	r2,-4(fp)
}
   8d500:	e037883a 	mov	sp,fp
   8d504:	dfc00117 	ldw	ra,4(sp)
   8d508:	df000017 	ldw	fp,0(sp)
   8d50c:	dec00204 	addi	sp,sp,8
   8d510:	f800283a 	ret

0008d514 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   8d514:	defff504 	addi	sp,sp,-44
   8d518:	dfc00a15 	stw	ra,40(sp)
   8d51c:	df000915 	stw	fp,36(sp)
   8d520:	df000904 	addi	fp,sp,36
   8d524:	e13ffc15 	stw	r4,-16(fp)
   8d528:	e17ffd15 	stw	r5,-12(fp)
   8d52c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8d530:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8d534:	e0bffe17 	ldw	r2,-8(fp)
   8d538:	1004c03a 	cmpne	r2,r2,zero
   8d53c:	1000021e 	bne	r2,zero,8d548 <OSFlagNameGet+0x34>
        return (0);
   8d540:	e03fff15 	stw	zero,-4(fp)
   8d544:	00003e06 	br	8d640 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   8d548:	e0bffc17 	ldw	r2,-16(fp)
   8d54c:	1004c03a 	cmpne	r2,r2,zero
   8d550:	1000051e 	bne	r2,zero,8d568 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8d554:	e0fffe17 	ldw	r3,-8(fp)
   8d558:	00801b84 	movi	r2,110
   8d55c:	18800005 	stb	r2,0(r3)
        return (0);
   8d560:	e03fff15 	stw	zero,-4(fp)
   8d564:	00003606 	br	8d640 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8d568:	e0bffd17 	ldw	r2,-12(fp)
   8d56c:	1004c03a 	cmpne	r2,r2,zero
   8d570:	1000051e 	bne	r2,zero,8d588 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8d574:	e0fffe17 	ldw	r3,-8(fp)
   8d578:	00800304 	movi	r2,12
   8d57c:	18800005 	stb	r2,0(r3)
        return (0);
   8d580:	e03fff15 	stw	zero,-4(fp)
   8d584:	00002e06 	br	8d640 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8d588:	008002b4 	movhi	r2,10
   8d58c:	10a40c04 	addi	r2,r2,-28624
   8d590:	10800003 	ldbu	r2,0(r2)
   8d594:	10803fcc 	andi	r2,r2,255
   8d598:	1005003a 	cmpeq	r2,r2,zero
   8d59c:	1000051e 	bne	r2,zero,8d5b4 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   8d5a0:	e0fffe17 	ldw	r3,-8(fp)
   8d5a4:	00800444 	movi	r2,17
   8d5a8:	18800005 	stb	r2,0(r3)
        return (0);
   8d5ac:	e03fff15 	stw	zero,-4(fp)
   8d5b0:	00002306 	br	8d640 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d5b4:	0005303a 	rdctl	r2,status
   8d5b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d5bc:	e0fff917 	ldw	r3,-28(fp)
   8d5c0:	00bfff84 	movi	r2,-2
   8d5c4:	1884703a 	and	r2,r3,r2
   8d5c8:	1001703a 	wrctl	status,r2
  
  return context;
   8d5cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8d5d0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   8d5d4:	e0bffc17 	ldw	r2,-16(fp)
   8d5d8:	10800003 	ldbu	r2,0(r2)
   8d5dc:	10803fcc 	andi	r2,r2,255
   8d5e0:	10800160 	cmpeqi	r2,r2,5
   8d5e4:	1000091e 	bne	r2,zero,8d60c <OSFlagNameGet+0xf8>
   8d5e8:	e0bffa17 	ldw	r2,-24(fp)
   8d5ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d5f0:	e0bff817 	ldw	r2,-32(fp)
   8d5f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   8d5f8:	e0fffe17 	ldw	r3,-8(fp)
   8d5fc:	00800044 	movi	r2,1
   8d600:	18800005 	stb	r2,0(r3)
        return (0);
   8d604:	e03fff15 	stw	zero,-4(fp)
   8d608:	00000d06 	br	8d640 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   8d60c:	e0bffc17 	ldw	r2,-16(fp)
   8d610:	11400284 	addi	r5,r2,10
   8d614:	e13ffd17 	ldw	r4,-12(fp)
   8d618:	008c6cc0 	call	8c6cc <OS_StrCopy>
   8d61c:	e0bffb05 	stb	r2,-20(fp)
   8d620:	e0bffa17 	ldw	r2,-24(fp)
   8d624:	e0bff715 	stw	r2,-36(fp)
   8d628:	e0bff717 	ldw	r2,-36(fp)
   8d62c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8d630:	e0bffe17 	ldw	r2,-8(fp)
   8d634:	10000005 	stb	zero,0(r2)
    return (len);
   8d638:	e0bffb03 	ldbu	r2,-20(fp)
   8d63c:	e0bfff15 	stw	r2,-4(fp)
   8d640:	e0bfff17 	ldw	r2,-4(fp)
}
   8d644:	e037883a 	mov	sp,fp
   8d648:	dfc00117 	ldw	ra,4(sp)
   8d64c:	df000017 	ldw	fp,0(sp)
   8d650:	dec00204 	addi	sp,sp,8
   8d654:	f800283a 	ret

0008d658 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   8d658:	defff504 	addi	sp,sp,-44
   8d65c:	dfc00a15 	stw	ra,40(sp)
   8d660:	df000915 	stw	fp,36(sp)
   8d664:	df000904 	addi	fp,sp,36
   8d668:	e13ffd15 	stw	r4,-12(fp)
   8d66c:	e17ffe15 	stw	r5,-8(fp)
   8d670:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8d674:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8d678:	e0bfff17 	ldw	r2,-4(fp)
   8d67c:	1005003a 	cmpeq	r2,r2,zero
   8d680:	1000451e 	bne	r2,zero,8d798 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   8d684:	e0bffd17 	ldw	r2,-12(fp)
   8d688:	1004c03a 	cmpne	r2,r2,zero
   8d68c:	1000041e 	bne	r2,zero,8d6a0 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8d690:	e0ffff17 	ldw	r3,-4(fp)
   8d694:	00801b84 	movi	r2,110
   8d698:	18800005 	stb	r2,0(r3)
        return;
   8d69c:	00003e06 	br	8d798 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8d6a0:	e0bffe17 	ldw	r2,-8(fp)
   8d6a4:	1004c03a 	cmpne	r2,r2,zero
   8d6a8:	1000041e 	bne	r2,zero,8d6bc <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   8d6ac:	e0ffff17 	ldw	r3,-4(fp)
   8d6b0:	00800304 	movi	r2,12
   8d6b4:	18800005 	stb	r2,0(r3)
        return;
   8d6b8:	00003706 	br	8d798 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8d6bc:	008002b4 	movhi	r2,10
   8d6c0:	10a40c04 	addi	r2,r2,-28624
   8d6c4:	10800003 	ldbu	r2,0(r2)
   8d6c8:	10803fcc 	andi	r2,r2,255
   8d6cc:	1005003a 	cmpeq	r2,r2,zero
   8d6d0:	1000041e 	bne	r2,zero,8d6e4 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   8d6d4:	e0ffff17 	ldw	r3,-4(fp)
   8d6d8:	00800484 	movi	r2,18
   8d6dc:	18800005 	stb	r2,0(r3)
        return;
   8d6e0:	00002d06 	br	8d798 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d6e4:	0005303a 	rdctl	r2,status
   8d6e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d6ec:	e0fffa17 	ldw	r3,-24(fp)
   8d6f0:	00bfff84 	movi	r2,-2
   8d6f4:	1884703a 	and	r2,r3,r2
   8d6f8:	1001703a 	wrctl	status,r2
  
  return context;
   8d6fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8d700:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   8d704:	e0bffd17 	ldw	r2,-12(fp)
   8d708:	10800003 	ldbu	r2,0(r2)
   8d70c:	10803fcc 	andi	r2,r2,255
   8d710:	10800160 	cmpeqi	r2,r2,5
   8d714:	1000081e 	bne	r2,zero,8d738 <OSFlagNameSet+0xe0>
   8d718:	e0bffb17 	ldw	r2,-20(fp)
   8d71c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d720:	e0bff917 	ldw	r2,-28(fp)
   8d724:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   8d728:	e0ffff17 	ldw	r3,-4(fp)
   8d72c:	00800044 	movi	r2,1
   8d730:	18800005 	stb	r2,0(r3)
        return;
   8d734:	00001806 	br	8d798 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   8d738:	e13ffe17 	ldw	r4,-8(fp)
   8d73c:	008c74c0 	call	8c74c <OS_StrLen>
   8d740:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   8d744:	e0bffc03 	ldbu	r2,-16(fp)
   8d748:	10800830 	cmpltui	r2,r2,32
   8d74c:	1000081e 	bne	r2,zero,8d770 <OSFlagNameSet+0x118>
   8d750:	e0bffb17 	ldw	r2,-20(fp)
   8d754:	e0bff815 	stw	r2,-32(fp)
   8d758:	e0bff817 	ldw	r2,-32(fp)
   8d75c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   8d760:	e0ffff17 	ldw	r3,-4(fp)
   8d764:	00801cc4 	movi	r2,115
   8d768:	18800005 	stb	r2,0(r3)
        return;
   8d76c:	00000a06 	br	8d798 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   8d770:	e0bffd17 	ldw	r2,-12(fp)
   8d774:	11000284 	addi	r4,r2,10
   8d778:	e17ffe17 	ldw	r5,-8(fp)
   8d77c:	008c6cc0 	call	8c6cc <OS_StrCopy>
   8d780:	e0bffb17 	ldw	r2,-20(fp)
   8d784:	e0bff715 	stw	r2,-36(fp)
   8d788:	e0bff717 	ldw	r2,-36(fp)
   8d78c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8d790:	e0bfff17 	ldw	r2,-4(fp)
   8d794:	10000005 	stb	zero,0(r2)
    return;
}
   8d798:	e037883a 	mov	sp,fp
   8d79c:	dfc00117 	ldw	ra,4(sp)
   8d7a0:	df000017 	ldw	fp,0(sp)
   8d7a4:	dec00204 	addi	sp,sp,8
   8d7a8:	f800283a 	ret

0008d7ac <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   8d7ac:	deffe004 	addi	sp,sp,-128
   8d7b0:	dfc01f15 	stw	ra,124(sp)
   8d7b4:	df001e15 	stw	fp,120(sp)
   8d7b8:	df001e04 	addi	fp,sp,120
   8d7bc:	e13ff915 	stw	r4,-28(fp)
   8d7c0:	e17ffa0d 	sth	r5,-24(fp)
   8d7c4:	e1bffb05 	stb	r6,-20(fp)
   8d7c8:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8d7cc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8d7d0:	e0800217 	ldw	r2,8(fp)
   8d7d4:	1004c03a 	cmpne	r2,r2,zero
   8d7d8:	1000021e 	bne	r2,zero,8d7e4 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
   8d7dc:	e03fff15 	stw	zero,-4(fp)
   8d7e0:	00017d06 	br	8ddd8 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8d7e4:	e0bff917 	ldw	r2,-28(fp)
   8d7e8:	1004c03a 	cmpne	r2,r2,zero
   8d7ec:	1000051e 	bne	r2,zero,8d804 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8d7f0:	e0c00217 	ldw	r3,8(fp)
   8d7f4:	00801b84 	movi	r2,110
   8d7f8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8d7fc:	e03fff15 	stw	zero,-4(fp)
   8d800:	00017506 	br	8ddd8 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8d804:	008002b4 	movhi	r2,10
   8d808:	10a40c04 	addi	r2,r2,-28624
   8d80c:	10800003 	ldbu	r2,0(r2)
   8d810:	10803fcc 	andi	r2,r2,255
   8d814:	1005003a 	cmpeq	r2,r2,zero
   8d818:	1000051e 	bne	r2,zero,8d830 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   8d81c:	e0c00217 	ldw	r3,8(fp)
   8d820:	00800084 	movi	r2,2
   8d824:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8d828:	e03fff15 	stw	zero,-4(fp)
   8d82c:	00016a06 	br	8ddd8 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   8d830:	008002b4 	movhi	r2,10
   8d834:	10a3fe04 	addi	r2,r2,-28680
   8d838:	10800003 	ldbu	r2,0(r2)
   8d83c:	10803fcc 	andi	r2,r2,255
   8d840:	1005003a 	cmpeq	r2,r2,zero
   8d844:	1000051e 	bne	r2,zero,8d85c <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   8d848:	e0c00217 	ldw	r3,8(fp)
   8d84c:	00800344 	movi	r2,13
   8d850:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8d854:	e03fff15 	stw	zero,-4(fp)
   8d858:	00015f06 	br	8ddd8 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   8d85c:	e0bff917 	ldw	r2,-28(fp)
   8d860:	10800003 	ldbu	r2,0(r2)
   8d864:	10803fcc 	andi	r2,r2,255
   8d868:	10800160 	cmpeqi	r2,r2,5
   8d86c:	1000051e 	bne	r2,zero,8d884 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
   8d870:	e0c00217 	ldw	r3,8(fp)
   8d874:	00800044 	movi	r2,1
   8d878:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8d87c:	e03fff15 	stw	zero,-4(fp)
   8d880:	00015506 	br	8ddd8 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   8d884:	e0fffb03 	ldbu	r3,-20(fp)
   8d888:	00bfe004 	movi	r2,-128
   8d88c:	1884703a 	and	r2,r3,r2
   8d890:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   8d894:	e0bff283 	ldbu	r2,-54(fp)
   8d898:	1005003a 	cmpeq	r2,r2,zero
   8d89c:	1000071e 	bne	r2,zero,8d8bc <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   8d8a0:	00c01fc4 	movi	r3,127
   8d8a4:	e0bffb03 	ldbu	r2,-20(fp)
   8d8a8:	10c4703a 	and	r2,r2,r3
   8d8ac:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
   8d8b0:	00800044 	movi	r2,1
   8d8b4:	e0bff205 	stb	r2,-56(fp)
   8d8b8:	00000106 	br	8d8c0 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
   8d8bc:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d8c0:	0005303a 	rdctl	r2,status
   8d8c4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d8c8:	e0fff017 	ldw	r3,-64(fp)
   8d8cc:	00bfff84 	movi	r2,-2
   8d8d0:	1884703a 	and	r2,r3,r2
   8d8d4:	1001703a 	wrctl	status,r2
  
  return context;
   8d8d8:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   8d8dc:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
   8d8e0:	e0bffb03 	ldbu	r2,-20(fp)
   8d8e4:	e0bffe15 	stw	r2,-8(fp)
   8d8e8:	e0fffe17 	ldw	r3,-8(fp)
   8d8ec:	18800060 	cmpeqi	r2,r3,1
   8d8f0:	1000981e 	bne	r2,zero,8db54 <OSFlagPend+0x3a8>
   8d8f4:	e0fffe17 	ldw	r3,-8(fp)
   8d8f8:	18800088 	cmpgei	r2,r3,2
   8d8fc:	1000041e 	bne	r2,zero,8d910 <OSFlagPend+0x164>
   8d900:	e0fffe17 	ldw	r3,-8(fp)
   8d904:	1805003a 	cmpeq	r2,r3,zero
   8d908:	1000641e 	bne	r2,zero,8da9c <OSFlagPend+0x2f0>
   8d90c:	0000bf06 	br	8dc0c <OSFlagPend+0x460>
   8d910:	e0fffe17 	ldw	r3,-8(fp)
   8d914:	188000a0 	cmpeqi	r2,r3,2
   8d918:	1000041e 	bne	r2,zero,8d92c <OSFlagPend+0x180>
   8d91c:	e0fffe17 	ldw	r3,-8(fp)
   8d920:	188000e0 	cmpeqi	r2,r3,3
   8d924:	10002f1e 	bne	r2,zero,8d9e4 <OSFlagPend+0x238>
   8d928:	0000b806 	br	8dc0c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   8d92c:	e0bff917 	ldw	r2,-28(fp)
   8d930:	10c0020b 	ldhu	r3,8(r2)
   8d934:	e0bffa0b 	ldhu	r2,-24(fp)
   8d938:	1884703a 	and	r2,r3,r2
   8d93c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8d940:	e0fff30b 	ldhu	r3,-52(fp)
   8d944:	e0bffa0b 	ldhu	r2,-24(fp)
   8d948:	18801a1e 	bne	r3,r2,8d9b4 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8d94c:	e0bff203 	ldbu	r2,-56(fp)
   8d950:	10800058 	cmpnei	r2,r2,1
   8d954:	1000091e 	bne	r2,zero,8d97c <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   8d958:	e0bff917 	ldw	r2,-28(fp)
   8d95c:	1080020b 	ldhu	r2,8(r2)
   8d960:	1007883a 	mov	r3,r2
   8d964:	e0bff30b 	ldhu	r2,-52(fp)
   8d968:	0084303a 	nor	r2,zero,r2
   8d96c:	1884703a 	and	r2,r3,r2
   8d970:	1007883a 	mov	r3,r2
   8d974:	e0bff917 	ldw	r2,-28(fp)
   8d978:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8d97c:	008002b4 	movhi	r2,10
   8d980:	10a40d04 	addi	r2,r2,-28620
   8d984:	10c00017 	ldw	r3,0(r2)
   8d988:	e0bff30b 	ldhu	r2,-52(fp)
   8d98c:	18800b0d 	sth	r2,44(r3)
   8d990:	e0bff117 	ldw	r2,-60(fp)
   8d994:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d998:	e0bfef17 	ldw	r2,-68(fp)
   8d99c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8d9a0:	e0800217 	ldw	r2,8(fp)
   8d9a4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8d9a8:	e0bff30b 	ldhu	r2,-52(fp)
   8d9ac:	e0bfff15 	stw	r2,-4(fp)
   8d9b0:	00010906 	br	8ddd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8d9b4:	e1bffa0b 	ldhu	r6,-24(fp)
   8d9b8:	e1fffb03 	ldbu	r7,-20(fp)
   8d9bc:	e0bffc0b 	ldhu	r2,-16(fp)
   8d9c0:	e17ff404 	addi	r5,fp,-48
   8d9c4:	d8800015 	stw	r2,0(sp)
   8d9c8:	e13ff917 	ldw	r4,-28(fp)
   8d9cc:	008e2d40 	call	8e2d4 <OS_FlagBlock>
   8d9d0:	e0bff117 	ldw	r2,-60(fp)
   8d9d4:	e0bfee15 	stw	r2,-72(fp)
   8d9d8:	e0bfee17 	ldw	r2,-72(fp)
   8d9dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8d9e0:	00009506 	br	8dc38 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   8d9e4:	e0bff917 	ldw	r2,-28(fp)
   8d9e8:	10c0020b 	ldhu	r3,8(r2)
   8d9ec:	e0bffa0b 	ldhu	r2,-24(fp)
   8d9f0:	1884703a 	and	r2,r3,r2
   8d9f4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   8d9f8:	e0bff30b 	ldhu	r2,-52(fp)
   8d9fc:	1005003a 	cmpeq	r2,r2,zero
   8da00:	10001a1e 	bne	r2,zero,8da6c <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8da04:	e0bff203 	ldbu	r2,-56(fp)
   8da08:	10800058 	cmpnei	r2,r2,1
   8da0c:	1000091e 	bne	r2,zero,8da34 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   8da10:	e0bff917 	ldw	r2,-28(fp)
   8da14:	1080020b 	ldhu	r2,8(r2)
   8da18:	1007883a 	mov	r3,r2
   8da1c:	e0bff30b 	ldhu	r2,-52(fp)
   8da20:	0084303a 	nor	r2,zero,r2
   8da24:	1884703a 	and	r2,r3,r2
   8da28:	1007883a 	mov	r3,r2
   8da2c:	e0bff917 	ldw	r2,-28(fp)
   8da30:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8da34:	008002b4 	movhi	r2,10
   8da38:	10a40d04 	addi	r2,r2,-28620
   8da3c:	10c00017 	ldw	r3,0(r2)
   8da40:	e0bff30b 	ldhu	r2,-52(fp)
   8da44:	18800b0d 	sth	r2,44(r3)
   8da48:	e0bff117 	ldw	r2,-60(fp)
   8da4c:	e0bfed15 	stw	r2,-76(fp)
   8da50:	e0bfed17 	ldw	r2,-76(fp)
   8da54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8da58:	e0800217 	ldw	r2,8(fp)
   8da5c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8da60:	e0fff30b 	ldhu	r3,-52(fp)
   8da64:	e0ffff15 	stw	r3,-4(fp)
   8da68:	0000db06 	br	8ddd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8da6c:	e1bffa0b 	ldhu	r6,-24(fp)
   8da70:	e1fffb03 	ldbu	r7,-20(fp)
   8da74:	e0bffc0b 	ldhu	r2,-16(fp)
   8da78:	e17ff404 	addi	r5,fp,-48
   8da7c:	d8800015 	stw	r2,0(sp)
   8da80:	e13ff917 	ldw	r4,-28(fp)
   8da84:	008e2d40 	call	8e2d4 <OS_FlagBlock>
   8da88:	e0bff117 	ldw	r2,-60(fp)
   8da8c:	e0bfec15 	stw	r2,-80(fp)
   8da90:	e0bfec17 	ldw	r2,-80(fp)
   8da94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8da98:	00006706 	br	8dc38 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   8da9c:	e0bff917 	ldw	r2,-28(fp)
   8daa0:	1080020b 	ldhu	r2,8(r2)
   8daa4:	0084303a 	nor	r2,zero,r2
   8daa8:	1007883a 	mov	r3,r2
   8daac:	e0bffa0b 	ldhu	r2,-24(fp)
   8dab0:	1884703a 	and	r2,r3,r2
   8dab4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8dab8:	e0fff30b 	ldhu	r3,-52(fp)
   8dabc:	e0bffa0b 	ldhu	r2,-24(fp)
   8dac0:	1880181e 	bne	r3,r2,8db24 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8dac4:	e0bff203 	ldbu	r2,-56(fp)
   8dac8:	10800058 	cmpnei	r2,r2,1
   8dacc:	1000071e 	bne	r2,zero,8daec <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   8dad0:	e0bff917 	ldw	r2,-28(fp)
   8dad4:	10c0020b 	ldhu	r3,8(r2)
   8dad8:	e0bff30b 	ldhu	r2,-52(fp)
   8dadc:	1884b03a 	or	r2,r3,r2
   8dae0:	1007883a 	mov	r3,r2
   8dae4:	e0bff917 	ldw	r2,-28(fp)
   8dae8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8daec:	008002b4 	movhi	r2,10
   8daf0:	10a40d04 	addi	r2,r2,-28620
   8daf4:	10c00017 	ldw	r3,0(r2)
   8daf8:	e0bff30b 	ldhu	r2,-52(fp)
   8dafc:	18800b0d 	sth	r2,44(r3)
   8db00:	e0bff117 	ldw	r2,-60(fp)
   8db04:	e0bfeb15 	stw	r2,-84(fp)
   8db08:	e0bfeb17 	ldw	r2,-84(fp)
   8db0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8db10:	e0800217 	ldw	r2,8(fp)
   8db14:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8db18:	e0bff30b 	ldhu	r2,-52(fp)
   8db1c:	e0bfff15 	stw	r2,-4(fp)
   8db20:	0000ad06 	br	8ddd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8db24:	e1bffa0b 	ldhu	r6,-24(fp)
   8db28:	e1fffb03 	ldbu	r7,-20(fp)
   8db2c:	e0bffc0b 	ldhu	r2,-16(fp)
   8db30:	e17ff404 	addi	r5,fp,-48
   8db34:	d8800015 	stw	r2,0(sp)
   8db38:	e13ff917 	ldw	r4,-28(fp)
   8db3c:	008e2d40 	call	8e2d4 <OS_FlagBlock>
   8db40:	e0bff117 	ldw	r2,-60(fp)
   8db44:	e0bfea15 	stw	r2,-88(fp)
   8db48:	e0bfea17 	ldw	r2,-88(fp)
   8db4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8db50:	00003906 	br	8dc38 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   8db54:	e0bff917 	ldw	r2,-28(fp)
   8db58:	1080020b 	ldhu	r2,8(r2)
   8db5c:	0084303a 	nor	r2,zero,r2
   8db60:	1007883a 	mov	r3,r2
   8db64:	e0bffa0b 	ldhu	r2,-24(fp)
   8db68:	1884703a 	and	r2,r3,r2
   8db6c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   8db70:	e0bff30b 	ldhu	r2,-52(fp)
   8db74:	1005003a 	cmpeq	r2,r2,zero
   8db78:	1000181e 	bne	r2,zero,8dbdc <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8db7c:	e0bff203 	ldbu	r2,-56(fp)
   8db80:	10800058 	cmpnei	r2,r2,1
   8db84:	1000071e 	bne	r2,zero,8dba4 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   8db88:	e0bff917 	ldw	r2,-28(fp)
   8db8c:	10c0020b 	ldhu	r3,8(r2)
   8db90:	e0bff30b 	ldhu	r2,-52(fp)
   8db94:	1884b03a 	or	r2,r3,r2
   8db98:	1007883a 	mov	r3,r2
   8db9c:	e0bff917 	ldw	r2,-28(fp)
   8dba0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8dba4:	008002b4 	movhi	r2,10
   8dba8:	10a40d04 	addi	r2,r2,-28620
   8dbac:	10c00017 	ldw	r3,0(r2)
   8dbb0:	e0bff30b 	ldhu	r2,-52(fp)
   8dbb4:	18800b0d 	sth	r2,44(r3)
   8dbb8:	e0bff117 	ldw	r2,-60(fp)
   8dbbc:	e0bfe915 	stw	r2,-92(fp)
   8dbc0:	e0bfe917 	ldw	r2,-92(fp)
   8dbc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8dbc8:	e0800217 	ldw	r2,8(fp)
   8dbcc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8dbd0:	e0fff30b 	ldhu	r3,-52(fp)
   8dbd4:	e0ffff15 	stw	r3,-4(fp)
   8dbd8:	00007f06 	br	8ddd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8dbdc:	e1bffa0b 	ldhu	r6,-24(fp)
   8dbe0:	e1fffb03 	ldbu	r7,-20(fp)
   8dbe4:	e0bffc0b 	ldhu	r2,-16(fp)
   8dbe8:	e17ff404 	addi	r5,fp,-48
   8dbec:	d8800015 	stw	r2,0(sp)
   8dbf0:	e13ff917 	ldw	r4,-28(fp)
   8dbf4:	008e2d40 	call	8e2d4 <OS_FlagBlock>
   8dbf8:	e0bff117 	ldw	r2,-60(fp)
   8dbfc:	e0bfe815 	stw	r2,-96(fp)
   8dc00:	e0bfe817 	ldw	r2,-96(fp)
   8dc04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8dc08:	00000b06 	br	8dc38 <OSFlagPend+0x48c>
   8dc0c:	e0bff117 	ldw	r2,-60(fp)
   8dc10:	e0bfe715 	stw	r2,-100(fp)
   8dc14:	e0bfe717 	ldw	r2,-100(fp)
   8dc18:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   8dc1c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   8dc20:	e0c00217 	ldw	r3,8(fp)
   8dc24:	00801bc4 	movi	r2,111
   8dc28:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
   8dc2c:	e0bff30b 	ldhu	r2,-52(fp)
   8dc30:	e0bfff15 	stw	r2,-4(fp)
   8dc34:	00006806 	br	8ddd8 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   8dc38:	008c5880 	call	8c588 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dc3c:	0005303a 	rdctl	r2,status
   8dc40:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dc44:	e0ffe617 	ldw	r3,-104(fp)
   8dc48:	00bfff84 	movi	r2,-2
   8dc4c:	1884703a 	and	r2,r3,r2
   8dc50:	1001703a 	wrctl	status,r2
  
  return context;
   8dc54:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
   8dc58:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   8dc5c:	008002b4 	movhi	r2,10
   8dc60:	10a40d04 	addi	r2,r2,-28620
   8dc64:	10800017 	ldw	r2,0(r2)
   8dc68:	10800c43 	ldbu	r2,49(r2)
   8dc6c:	10803fcc 	andi	r2,r2,255
   8dc70:	1005003a 	cmpeq	r2,r2,zero
   8dc74:	1000221e 	bne	r2,zero,8dd00 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   8dc78:	008002b4 	movhi	r2,10
   8dc7c:	10a40d04 	addi	r2,r2,-28620
   8dc80:	10800017 	ldw	r2,0(r2)
   8dc84:	10800c43 	ldbu	r2,49(r2)
   8dc88:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8dc8c:	008002b4 	movhi	r2,10
   8dc90:	10a40d04 	addi	r2,r2,-28620
   8dc94:	10800017 	ldw	r2,0(r2)
   8dc98:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   8dc9c:	e13ff404 	addi	r4,fp,-48
   8dca0:	008e68c0 	call	8e68c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   8dca4:	008002b4 	movhi	r2,10
   8dca8:	10a40d04 	addi	r2,r2,-28620
   8dcac:	10800017 	ldw	r2,0(r2)
   8dcb0:	10000c05 	stb	zero,48(r2)
   8dcb4:	e0bff117 	ldw	r2,-60(fp)
   8dcb8:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dcbc:	e0bfe517 	ldw	r2,-108(fp)
   8dcc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   8dcc4:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
   8dcc8:	e0bff243 	ldbu	r2,-55(fp)
   8dccc:	108000a0 	cmpeqi	r2,r2,2
   8dcd0:	1000011e 	bne	r2,zero,8dcd8 <OSFlagPend+0x52c>
   8dcd4:	00000406 	br	8dce8 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   8dcd8:	e0c00217 	ldw	r3,8(fp)
   8dcdc:	00800384 	movi	r2,14
   8dce0:	18800005 	stb	r2,0(r3)
                 break;
   8dce4:	00000306 	br	8dcf4 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   8dce8:	e0c00217 	ldw	r3,8(fp)
   8dcec:	00800284 	movi	r2,10
   8dcf0:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
   8dcf4:	e0fff30b 	ldhu	r3,-52(fp)
   8dcf8:	e0ffff15 	stw	r3,-4(fp)
   8dcfc:	00003606 	br	8ddd8 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   8dd00:	008002b4 	movhi	r2,10
   8dd04:	10a40d04 	addi	r2,r2,-28620
   8dd08:	10800017 	ldw	r2,0(r2)
   8dd0c:	10800b0b 	ldhu	r2,44(r2)
   8dd10:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   8dd14:	e0bff203 	ldbu	r2,-56(fp)
   8dd18:	10800058 	cmpnei	r2,r2,1
   8dd1c:	1000261e 	bne	r2,zero,8ddb8 <OSFlagPend+0x60c>
        switch (wait_type) {
   8dd20:	e0bffb03 	ldbu	r2,-20(fp)
   8dd24:	e0bffd15 	stw	r2,-12(fp)
   8dd28:	e0fffd17 	ldw	r3,-12(fp)
   8dd2c:	1804803a 	cmplt	r2,r3,zero
   8dd30:	1000181e 	bne	r2,zero,8dd94 <OSFlagPend+0x5e8>
   8dd34:	e0fffd17 	ldw	r3,-12(fp)
   8dd38:	18800090 	cmplti	r2,r3,2
   8dd3c:	10000d1e 	bne	r2,zero,8dd74 <OSFlagPend+0x5c8>
   8dd40:	e0fffd17 	ldw	r3,-12(fp)
   8dd44:	18800108 	cmpgei	r2,r3,4
   8dd48:	1000121e 	bne	r2,zero,8dd94 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   8dd4c:	e0bff917 	ldw	r2,-28(fp)
   8dd50:	1080020b 	ldhu	r2,8(r2)
   8dd54:	1007883a 	mov	r3,r2
   8dd58:	e0bff30b 	ldhu	r2,-52(fp)
   8dd5c:	0084303a 	nor	r2,zero,r2
   8dd60:	1884703a 	and	r2,r3,r2
   8dd64:	1007883a 	mov	r3,r2
   8dd68:	e0bff917 	ldw	r2,-28(fp)
   8dd6c:	10c0020d 	sth	r3,8(r2)
                 break;
   8dd70:	00001106 	br	8ddb8 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   8dd74:	e0bff917 	ldw	r2,-28(fp)
   8dd78:	10c0020b 	ldhu	r3,8(r2)
   8dd7c:	e0bff30b 	ldhu	r2,-52(fp)
   8dd80:	1884b03a 	or	r2,r3,r2
   8dd84:	1007883a 	mov	r3,r2
   8dd88:	e0bff917 	ldw	r2,-28(fp)
   8dd8c:	10c0020d 	sth	r3,8(r2)
                 break;
   8dd90:	00000906 	br	8ddb8 <OSFlagPend+0x60c>
   8dd94:	e0bff117 	ldw	r2,-60(fp)
   8dd98:	e0bfe415 	stw	r2,-112(fp)
   8dd9c:	e0bfe417 	ldw	r2,-112(fp)
   8dda0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   8dda4:	e0c00217 	ldw	r3,8(fp)
   8dda8:	00801bc4 	movi	r2,111
   8ddac:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   8ddb0:	e03fff15 	stw	zero,-4(fp)
   8ddb4:	00000806 	br	8ddd8 <OSFlagPend+0x62c>
   8ddb8:	e0bff117 	ldw	r2,-60(fp)
   8ddbc:	e0bfe315 	stw	r2,-116(fp)
   8ddc0:	e0bfe317 	ldw	r2,-116(fp)
   8ddc4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   8ddc8:	e0800217 	ldw	r2,8(fp)
   8ddcc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   8ddd0:	e0bff30b 	ldhu	r2,-52(fp)
   8ddd4:	e0bfff15 	stw	r2,-4(fp)
   8ddd8:	e0bfff17 	ldw	r2,-4(fp)
}
   8dddc:	e037883a 	mov	sp,fp
   8dde0:	dfc00117 	ldw	ra,4(sp)
   8dde4:	df000017 	ldw	fp,0(sp)
   8dde8:	dec00204 	addi	sp,sp,8
   8ddec:	f800283a 	ret

0008ddf0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   8ddf0:	defffb04 	addi	sp,sp,-20
   8ddf4:	df000415 	stw	fp,16(sp)
   8ddf8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8ddfc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8de00:	0005303a 	rdctl	r2,status
   8de04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8de08:	e0fffd17 	ldw	r3,-12(fp)
   8de0c:	00bfff84 	movi	r2,-2
   8de10:	1884703a 	and	r2,r3,r2
   8de14:	1001703a 	wrctl	status,r2
  
  return context;
   8de18:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   8de1c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   8de20:	008002b4 	movhi	r2,10
   8de24:	10a40d04 	addi	r2,r2,-28620
   8de28:	10800017 	ldw	r2,0(r2)
   8de2c:	10800b0b 	ldhu	r2,44(r2)
   8de30:	e0bfff0d 	sth	r2,-4(fp)
   8de34:	e0bffe17 	ldw	r2,-8(fp)
   8de38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8de3c:	e0bffc17 	ldw	r2,-16(fp)
   8de40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   8de44:	e0bfff0b 	ldhu	r2,-4(fp)
}
   8de48:	e037883a 	mov	sp,fp
   8de4c:	df000017 	ldw	fp,0(sp)
   8de50:	dec00104 	addi	sp,sp,4
   8de54:	f800283a 	ret

0008de58 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   8de58:	deffed04 	addi	sp,sp,-76
   8de5c:	dfc01215 	stw	ra,72(sp)
   8de60:	df001115 	stw	fp,68(sp)
   8de64:	df001104 	addi	fp,sp,68
   8de68:	e13ff915 	stw	r4,-28(fp)
   8de6c:	e1fffc15 	stw	r7,-16(fp)
   8de70:	e17ffa0d 	sth	r5,-24(fp)
   8de74:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   8de78:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   8de7c:	e0bffc17 	ldw	r2,-16(fp)
   8de80:	1004c03a 	cmpne	r2,r2,zero
   8de84:	1000021e 	bne	r2,zero,8de90 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
   8de88:	e03fff15 	stw	zero,-4(fp)
   8de8c:	0000d606 	br	8e1e8 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   8de90:	e0bff917 	ldw	r2,-28(fp)
   8de94:	1004c03a 	cmpne	r2,r2,zero
   8de98:	1000051e 	bne	r2,zero,8deb0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8de9c:	e0fffc17 	ldw	r3,-16(fp)
   8dea0:	00801b84 	movi	r2,110
   8dea4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8dea8:	e03fff15 	stw	zero,-4(fp)
   8deac:	0000ce06 	br	8e1e8 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   8deb0:	e0bff917 	ldw	r2,-28(fp)
   8deb4:	10800003 	ldbu	r2,0(r2)
   8deb8:	10803fcc 	andi	r2,r2,255
   8debc:	10800160 	cmpeqi	r2,r2,5
   8dec0:	1000051e 	bne	r2,zero,8ded8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   8dec4:	e0fffc17 	ldw	r3,-16(fp)
   8dec8:	00800044 	movi	r2,1
   8decc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8ded0:	e03fff15 	stw	zero,-4(fp)
   8ded4:	0000c406 	br	8e1e8 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ded8:	0005303a 	rdctl	r2,status
   8dedc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dee0:	e0fff417 	ldw	r3,-48(fp)
   8dee4:	00bfff84 	movi	r2,-2
   8dee8:	1884703a 	and	r2,r3,r2
   8deec:	1001703a 	wrctl	status,r2
  
  return context;
   8def0:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   8def4:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
   8def8:	e0bffb03 	ldbu	r2,-20(fp)
   8defc:	e0bffe15 	stw	r2,-8(fp)
   8df00:	e0fffe17 	ldw	r3,-8(fp)
   8df04:	1805003a 	cmpeq	r2,r3,zero
   8df08:	1000041e 	bne	r2,zero,8df1c <OSFlagPost+0xc4>
   8df0c:	e0fffe17 	ldw	r3,-8(fp)
   8df10:	18800060 	cmpeqi	r2,r3,1
   8df14:	10000b1e 	bne	r2,zero,8df44 <OSFlagPost+0xec>
   8df18:	00001206 	br	8df64 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   8df1c:	e0bff917 	ldw	r2,-28(fp)
   8df20:	1080020b 	ldhu	r2,8(r2)
   8df24:	1007883a 	mov	r3,r2
   8df28:	e0bffa0b 	ldhu	r2,-24(fp)
   8df2c:	0084303a 	nor	r2,zero,r2
   8df30:	1884703a 	and	r2,r3,r2
   8df34:	1007883a 	mov	r3,r2
   8df38:	e0bff917 	ldw	r2,-28(fp)
   8df3c:	10c0020d 	sth	r3,8(r2)
             break;
   8df40:	00001106 	br	8df88 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   8df44:	e0bff917 	ldw	r2,-28(fp)
   8df48:	10c0020b 	ldhu	r3,8(r2)
   8df4c:	e0bffa0b 	ldhu	r2,-24(fp)
   8df50:	1884b03a 	or	r2,r3,r2
   8df54:	1007883a 	mov	r3,r2
   8df58:	e0bff917 	ldw	r2,-28(fp)
   8df5c:	10c0020d 	sth	r3,8(r2)
             break;
   8df60:	00000906 	br	8df88 <OSFlagPost+0x130>
   8df64:	e0bff517 	ldw	r2,-44(fp)
   8df68:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8df6c:	e0bff317 	ldw	r2,-52(fp)
   8df70:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   8df74:	e0fffc17 	ldw	r3,-16(fp)
   8df78:	00801c44 	movi	r2,113
   8df7c:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
   8df80:	e03fff15 	stw	zero,-4(fp)
   8df84:	00009806 	br	8e1e8 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   8df88:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   8df8c:	e0bff917 	ldw	r2,-28(fp)
   8df90:	10800117 	ldw	r2,4(r2)
   8df94:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   8df98:	00007506 	br	8e170 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
   8df9c:	e0bff817 	ldw	r2,-32(fp)
   8dfa0:	10800483 	ldbu	r2,18(r2)
   8dfa4:	10803fcc 	andi	r2,r2,255
   8dfa8:	e0bffd15 	stw	r2,-12(fp)
   8dfac:	e0fffd17 	ldw	r3,-12(fp)
   8dfb0:	18800060 	cmpeqi	r2,r3,1
   8dfb4:	10004d1e 	bne	r2,zero,8e0ec <OSFlagPost+0x294>
   8dfb8:	e0fffd17 	ldw	r3,-12(fp)
   8dfbc:	18800088 	cmpgei	r2,r3,2
   8dfc0:	1000041e 	bne	r2,zero,8dfd4 <OSFlagPost+0x17c>
   8dfc4:	e0fffd17 	ldw	r3,-12(fp)
   8dfc8:	1805003a 	cmpeq	r2,r3,zero
   8dfcc:	1000301e 	bne	r2,zero,8e090 <OSFlagPost+0x238>
   8dfd0:	00005b06 	br	8e140 <OSFlagPost+0x2e8>
   8dfd4:	e0fffd17 	ldw	r3,-12(fp)
   8dfd8:	188000a0 	cmpeqi	r2,r3,2
   8dfdc:	1000041e 	bne	r2,zero,8dff0 <OSFlagPost+0x198>
   8dfe0:	e0fffd17 	ldw	r3,-12(fp)
   8dfe4:	188000e0 	cmpeqi	r2,r3,3
   8dfe8:	1000161e 	bne	r2,zero,8e044 <OSFlagPost+0x1ec>
   8dfec:	00005406 	br	8e140 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8dff0:	e0bff917 	ldw	r2,-28(fp)
   8dff4:	10c0020b 	ldhu	r3,8(r2)
   8dff8:	e0bff817 	ldw	r2,-32(fp)
   8dffc:	1080040b 	ldhu	r2,16(r2)
   8e000:	1884703a 	and	r2,r3,r2
   8e004:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   8e008:	e0bff817 	ldw	r2,-32(fp)
   8e00c:	1080040b 	ldhu	r2,16(r2)
   8e010:	10ffffcc 	andi	r3,r2,65535
   8e014:	e0bff68b 	ldhu	r2,-38(fp)
   8e018:	1880521e 	bne	r3,r2,8e164 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8e01c:	e17ff68b 	ldhu	r5,-38(fp)
   8e020:	e13ff817 	ldw	r4,-32(fp)
   8e024:	008e57c0 	call	8e57c <OS_FlagTaskRdy>
   8e028:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8e02c:	e0bff603 	ldbu	r2,-40(fp)
   8e030:	10800058 	cmpnei	r2,r2,1
   8e034:	10004b1e 	bne	r2,zero,8e164 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8e038:	00800044 	movi	r2,1
   8e03c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8e040:	00004806 	br	8e164 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8e044:	e0bff917 	ldw	r2,-28(fp)
   8e048:	10c0020b 	ldhu	r3,8(r2)
   8e04c:	e0bff817 	ldw	r2,-32(fp)
   8e050:	1080040b 	ldhu	r2,16(r2)
   8e054:	1884703a 	and	r2,r3,r2
   8e058:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   8e05c:	e0bff68b 	ldhu	r2,-38(fp)
   8e060:	1005003a 	cmpeq	r2,r2,zero
   8e064:	10003f1e 	bne	r2,zero,8e164 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8e068:	e17ff68b 	ldhu	r5,-38(fp)
   8e06c:	e13ff817 	ldw	r4,-32(fp)
   8e070:	008e57c0 	call	8e57c <OS_FlagTaskRdy>
   8e074:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8e078:	e0bff603 	ldbu	r2,-40(fp)
   8e07c:	10800058 	cmpnei	r2,r2,1
   8e080:	1000381e 	bne	r2,zero,8e164 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8e084:	00800044 	movi	r2,1
   8e088:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8e08c:	00003506 	br	8e164 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8e090:	e0bff917 	ldw	r2,-28(fp)
   8e094:	1080020b 	ldhu	r2,8(r2)
   8e098:	0084303a 	nor	r2,zero,r2
   8e09c:	1007883a 	mov	r3,r2
   8e0a0:	e0bff817 	ldw	r2,-32(fp)
   8e0a4:	1080040b 	ldhu	r2,16(r2)
   8e0a8:	1884703a 	and	r2,r3,r2
   8e0ac:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   8e0b0:	e0bff817 	ldw	r2,-32(fp)
   8e0b4:	1080040b 	ldhu	r2,16(r2)
   8e0b8:	10ffffcc 	andi	r3,r2,65535
   8e0bc:	e0bff68b 	ldhu	r2,-38(fp)
   8e0c0:	1880281e 	bne	r3,r2,8e164 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8e0c4:	e17ff68b 	ldhu	r5,-38(fp)
   8e0c8:	e13ff817 	ldw	r4,-32(fp)
   8e0cc:	008e57c0 	call	8e57c <OS_FlagTaskRdy>
   8e0d0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8e0d4:	e0bff603 	ldbu	r2,-40(fp)
   8e0d8:	10800058 	cmpnei	r2,r2,1
   8e0dc:	1000211e 	bne	r2,zero,8e164 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8e0e0:	00800044 	movi	r2,1
   8e0e4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8e0e8:	00001e06 	br	8e164 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8e0ec:	e0bff917 	ldw	r2,-28(fp)
   8e0f0:	1080020b 	ldhu	r2,8(r2)
   8e0f4:	0084303a 	nor	r2,zero,r2
   8e0f8:	1007883a 	mov	r3,r2
   8e0fc:	e0bff817 	ldw	r2,-32(fp)
   8e100:	1080040b 	ldhu	r2,16(r2)
   8e104:	1884703a 	and	r2,r3,r2
   8e108:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   8e10c:	e0bff68b 	ldhu	r2,-38(fp)
   8e110:	1005003a 	cmpeq	r2,r2,zero
   8e114:	1000131e 	bne	r2,zero,8e164 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8e118:	e17ff68b 	ldhu	r5,-38(fp)
   8e11c:	e13ff817 	ldw	r4,-32(fp)
   8e120:	008e57c0 	call	8e57c <OS_FlagTaskRdy>
   8e124:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8e128:	e0bff603 	ldbu	r2,-40(fp)
   8e12c:	10800058 	cmpnei	r2,r2,1
   8e130:	10000c1e 	bne	r2,zero,8e164 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8e134:	00800044 	movi	r2,1
   8e138:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8e13c:	00000906 	br	8e164 <OSFlagPost+0x30c>
   8e140:	e0bff517 	ldw	r2,-44(fp)
   8e144:	e0bff215 	stw	r2,-56(fp)
   8e148:	e0bff217 	ldw	r2,-56(fp)
   8e14c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   8e150:	e0fffc17 	ldw	r3,-16(fp)
   8e154:	00801bc4 	movi	r2,111
   8e158:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   8e15c:	e03fff15 	stw	zero,-4(fp)
   8e160:	00002106 	br	8e1e8 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   8e164:	e0bff817 	ldw	r2,-32(fp)
   8e168:	10800017 	ldw	r2,0(r2)
   8e16c:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   8e170:	e0bff817 	ldw	r2,-32(fp)
   8e174:	1004c03a 	cmpne	r2,r2,zero
   8e178:	103f881e 	bne	r2,zero,8df9c <OSFlagPost+0x144>
   8e17c:	e0bff517 	ldw	r2,-44(fp)
   8e180:	e0bff115 	stw	r2,-60(fp)
   8e184:	e0bff117 	ldw	r2,-60(fp)
   8e188:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   8e18c:	e0bff783 	ldbu	r2,-34(fp)
   8e190:	10800058 	cmpnei	r2,r2,1
   8e194:	1000011e 	bne	r2,zero,8e19c <OSFlagPost+0x344>
        OS_Sched();
   8e198:	008c5880 	call	8c588 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e19c:	0005303a 	rdctl	r2,status
   8e1a0:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e1a4:	e0fff017 	ldw	r3,-64(fp)
   8e1a8:	00bfff84 	movi	r2,-2
   8e1ac:	1884703a 	and	r2,r3,r2
   8e1b0:	1001703a 	wrctl	status,r2
  
  return context;
   8e1b4:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
   8e1b8:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
   8e1bc:	e0bff917 	ldw	r2,-28(fp)
   8e1c0:	1080020b 	ldhu	r2,8(r2)
   8e1c4:	e0bff70d 	sth	r2,-36(fp)
   8e1c8:	e0bff517 	ldw	r2,-44(fp)
   8e1cc:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e1d0:	e0bfef17 	ldw	r2,-68(fp)
   8e1d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   8e1d8:	e0bffc17 	ldw	r2,-16(fp)
   8e1dc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   8e1e0:	e0bff70b 	ldhu	r2,-36(fp)
   8e1e4:	e0bfff15 	stw	r2,-4(fp)
   8e1e8:	e0bfff17 	ldw	r2,-4(fp)
}
   8e1ec:	e037883a 	mov	sp,fp
   8e1f0:	dfc00117 	ldw	ra,4(sp)
   8e1f4:	df000017 	ldw	fp,0(sp)
   8e1f8:	dec00204 	addi	sp,sp,8
   8e1fc:	f800283a 	ret

0008e200 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   8e200:	defff804 	addi	sp,sp,-32
   8e204:	df000715 	stw	fp,28(sp)
   8e208:	df000704 	addi	fp,sp,28
   8e20c:	e13ffd15 	stw	r4,-12(fp)
   8e210:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   8e214:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   8e218:	e0bffe17 	ldw	r2,-8(fp)
   8e21c:	1004c03a 	cmpne	r2,r2,zero
   8e220:	1000021e 	bne	r2,zero,8e22c <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
   8e224:	e03fff15 	stw	zero,-4(fp)
   8e228:	00002506 	br	8e2c0 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   8e22c:	e0bffd17 	ldw	r2,-12(fp)
   8e230:	1004c03a 	cmpne	r2,r2,zero
   8e234:	1000051e 	bne	r2,zero,8e24c <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8e238:	e0fffe17 	ldw	r3,-8(fp)
   8e23c:	00801b84 	movi	r2,110
   8e240:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8e244:	e03fff15 	stw	zero,-4(fp)
   8e248:	00001d06 	br	8e2c0 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   8e24c:	e0bffd17 	ldw	r2,-12(fp)
   8e250:	10800003 	ldbu	r2,0(r2)
   8e254:	10803fcc 	andi	r2,r2,255
   8e258:	10800160 	cmpeqi	r2,r2,5
   8e25c:	1000051e 	bne	r2,zero,8e274 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   8e260:	e0fffe17 	ldw	r3,-8(fp)
   8e264:	00800044 	movi	r2,1
   8e268:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8e26c:	e03fff15 	stw	zero,-4(fp)
   8e270:	00001306 	br	8e2c0 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e274:	0005303a 	rdctl	r2,status
   8e278:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e27c:	e0fffa17 	ldw	r3,-24(fp)
   8e280:	00bfff84 	movi	r2,-2
   8e284:	1884703a 	and	r2,r3,r2
   8e288:	1001703a 	wrctl	status,r2
  
  return context;
   8e28c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8e290:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
   8e294:	e0bffd17 	ldw	r2,-12(fp)
   8e298:	1080020b 	ldhu	r2,8(r2)
   8e29c:	e0bffc0d 	sth	r2,-16(fp)
   8e2a0:	e0bffb17 	ldw	r2,-20(fp)
   8e2a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e2a8:	e0bff917 	ldw	r2,-28(fp)
   8e2ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8e2b0:	e0bffe17 	ldw	r2,-8(fp)
   8e2b4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   8e2b8:	e0bffc0b 	ldhu	r2,-16(fp)
   8e2bc:	e0bfff15 	stw	r2,-4(fp)
   8e2c0:	e0bfff17 	ldw	r2,-4(fp)
}
   8e2c4:	e037883a 	mov	sp,fp
   8e2c8:	df000017 	ldw	fp,0(sp)
   8e2cc:	dec00104 	addi	sp,sp,4
   8e2d0:	f800283a 	ret

0008e2d4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   8e2d4:	defff804 	addi	sp,sp,-32
   8e2d8:	df000715 	stw	fp,28(sp)
   8e2dc:	df000704 	addi	fp,sp,28
   8e2e0:	e13ffb15 	stw	r4,-20(fp)
   8e2e4:	e17ffc15 	stw	r5,-16(fp)
   8e2e8:	e0800117 	ldw	r2,4(fp)
   8e2ec:	e1bffd0d 	sth	r6,-12(fp)
   8e2f0:	e1fffe05 	stb	r7,-8(fp)
   8e2f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   8e2f8:	008002b4 	movhi	r2,10
   8e2fc:	10a40d04 	addi	r2,r2,-28620
   8e300:	10c00017 	ldw	r3,0(r2)
   8e304:	008002b4 	movhi	r2,10
   8e308:	10a40d04 	addi	r2,r2,-28620
   8e30c:	10800017 	ldw	r2,0(r2)
   8e310:	10800c03 	ldbu	r2,48(r2)
   8e314:	10800814 	ori	r2,r2,32
   8e318:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   8e31c:	008002b4 	movhi	r2,10
   8e320:	10a40d04 	addi	r2,r2,-28620
   8e324:	10800017 	ldw	r2,0(r2)
   8e328:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   8e32c:	008002b4 	movhi	r2,10
   8e330:	10a40d04 	addi	r2,r2,-28620
   8e334:	10c00017 	ldw	r3,0(r2)
   8e338:	e0bfff0b 	ldhu	r2,-4(fp)
   8e33c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   8e340:	008002b4 	movhi	r2,10
   8e344:	10a40d04 	addi	r2,r2,-28620
   8e348:	10c00017 	ldw	r3,0(r2)
   8e34c:	e0bffc17 	ldw	r2,-16(fp)
   8e350:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   8e354:	e0fffc17 	ldw	r3,-16(fp)
   8e358:	e0bffd0b 	ldhu	r2,-12(fp)
   8e35c:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   8e360:	e0fffc17 	ldw	r3,-16(fp)
   8e364:	e0bffe03 	ldbu	r2,-8(fp)
   8e368:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   8e36c:	008002b4 	movhi	r2,10
   8e370:	10a40d04 	addi	r2,r2,-28620
   8e374:	10c00017 	ldw	r3,0(r2)
   8e378:	e0bffc17 	ldw	r2,-16(fp)
   8e37c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   8e380:	e0bffb17 	ldw	r2,-20(fp)
   8e384:	10c00117 	ldw	r3,4(r2)
   8e388:	e0bffc17 	ldw	r2,-16(fp)
   8e38c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   8e390:	e0bffc17 	ldw	r2,-16(fp)
   8e394:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   8e398:	e0fffc17 	ldw	r3,-16(fp)
   8e39c:	e0bffb17 	ldw	r2,-20(fp)
   8e3a0:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   8e3a4:	e0bffb17 	ldw	r2,-20(fp)
   8e3a8:	10800117 	ldw	r2,4(r2)
   8e3ac:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   8e3b0:	e0bffa17 	ldw	r2,-24(fp)
   8e3b4:	1005003a 	cmpeq	r2,r2,zero
   8e3b8:	1000031e 	bne	r2,zero,8e3c8 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   8e3bc:	e0fffa17 	ldw	r3,-24(fp)
   8e3c0:	e0bffc17 	ldw	r2,-16(fp)
   8e3c4:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   8e3c8:	e0fffb17 	ldw	r3,-20(fp)
   8e3cc:	e0bffc17 	ldw	r2,-16(fp)
   8e3d0:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   8e3d4:	008002b4 	movhi	r2,10
   8e3d8:	10a40d04 	addi	r2,r2,-28620
   8e3dc:	10800017 	ldw	r2,0(r2)
   8e3e0:	10800d03 	ldbu	r2,52(r2)
   8e3e4:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   8e3e8:	e13ff903 	ldbu	r4,-28(fp)
   8e3ec:	e0fff903 	ldbu	r3,-28(fp)
   8e3f0:	008002b4 	movhi	r2,10
   8e3f4:	10a40a44 	addi	r2,r2,-28631
   8e3f8:	10c5883a 	add	r2,r2,r3
   8e3fc:	10800003 	ldbu	r2,0(r2)
   8e400:	1007883a 	mov	r3,r2
   8e404:	008002b4 	movhi	r2,10
   8e408:	10a40d04 	addi	r2,r2,-28620
   8e40c:	10800017 	ldw	r2,0(r2)
   8e410:	10800d43 	ldbu	r2,53(r2)
   8e414:	0084303a 	nor	r2,zero,r2
   8e418:	1884703a 	and	r2,r3,r2
   8e41c:	1007883a 	mov	r3,r2
   8e420:	008002b4 	movhi	r2,10
   8e424:	10a40a44 	addi	r2,r2,-28631
   8e428:	1105883a 	add	r2,r2,r4
   8e42c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   8e430:	e0fff903 	ldbu	r3,-28(fp)
   8e434:	008002b4 	movhi	r2,10
   8e438:	10a40a44 	addi	r2,r2,-28631
   8e43c:	10c5883a 	add	r2,r2,r3
   8e440:	10800003 	ldbu	r2,0(r2)
   8e444:	10803fcc 	andi	r2,r2,255
   8e448:	1004c03a 	cmpne	r2,r2,zero
   8e44c:	10000e1e 	bne	r2,zero,8e488 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   8e450:	008002b4 	movhi	r2,10
   8e454:	10a40d04 	addi	r2,r2,-28620
   8e458:	10800017 	ldw	r2,0(r2)
   8e45c:	10800d83 	ldbu	r2,54(r2)
   8e460:	0084303a 	nor	r2,zero,r2
   8e464:	1007883a 	mov	r3,r2
   8e468:	008002b4 	movhi	r2,10
   8e46c:	10a40a04 	addi	r2,r2,-28632
   8e470:	10800003 	ldbu	r2,0(r2)
   8e474:	1884703a 	and	r2,r3,r2
   8e478:	1007883a 	mov	r3,r2
   8e47c:	008002b4 	movhi	r2,10
   8e480:	10a40a04 	addi	r2,r2,-28632
   8e484:	10c00005 	stb	r3,0(r2)
    }
}
   8e488:	e037883a 	mov	sp,fp
   8e48c:	df000017 	ldw	fp,0(sp)
   8e490:	dec00104 	addi	sp,sp,4
   8e494:	f800283a 	ret

0008e498 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   8e498:	defffb04 	addi	sp,sp,-20
   8e49c:	dfc00415 	stw	ra,16(sp)
   8e4a0:	df000315 	stw	fp,12(sp)
   8e4a4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   8e4a8:	010002b4 	movhi	r4,10
   8e4ac:	212c1f04 	addi	r4,r4,-20356
   8e4b0:	0140dc04 	movi	r5,880
   8e4b4:	008c4c80 	call	8c4c8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   8e4b8:	008002b4 	movhi	r2,10
   8e4bc:	10ac1f04 	addi	r2,r2,-20356
   8e4c0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   8e4c4:	008002b4 	movhi	r2,10
   8e4c8:	10ac2a04 	addi	r2,r2,-20312
   8e4cc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   8e4d0:	e03fff0d 	sth	zero,-4(fp)
   8e4d4:	00001306 	br	8e524 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8e4d8:	e0bffe17 	ldw	r2,-8(fp)
   8e4dc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   8e4e0:	e0fffe17 	ldw	r3,-8(fp)
   8e4e4:	e0bffd17 	ldw	r2,-12(fp)
   8e4e8:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   8e4ec:	e0fffe17 	ldw	r3,-8(fp)
   8e4f0:	00800fc4 	movi	r2,63
   8e4f4:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   8e4f8:	e0bffe17 	ldw	r2,-8(fp)
   8e4fc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   8e500:	e0bffe17 	ldw	r2,-8(fp)
   8e504:	10800b04 	addi	r2,r2,44
   8e508:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   8e50c:	e0bffd17 	ldw	r2,-12(fp)
   8e510:	10800b04 	addi	r2,r2,44
   8e514:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   8e518:	e0bfff0b 	ldhu	r2,-4(fp)
   8e51c:	10800044 	addi	r2,r2,1
   8e520:	e0bfff0d 	sth	r2,-4(fp)
   8e524:	e0bfff0b 	ldhu	r2,-4(fp)
   8e528:	108004f0 	cmpltui	r2,r2,19
   8e52c:	103fea1e 	bne	r2,zero,8e4d8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8e530:	e0bffe17 	ldw	r2,-8(fp)
   8e534:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   8e538:	e0bffe17 	ldw	r2,-8(fp)
   8e53c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   8e540:	e0fffe17 	ldw	r3,-8(fp)
   8e544:	00800fc4 	movi	r2,63
   8e548:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   8e54c:	e0bffe17 	ldw	r2,-8(fp)
   8e550:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   8e554:	00c002b4 	movhi	r3,10
   8e558:	18e40f04 	addi	r3,r3,-28612
   8e55c:	008002b4 	movhi	r2,10
   8e560:	10ac1f04 	addi	r2,r2,-20356
   8e564:	18800015 	stw	r2,0(r3)
#endif
}
   8e568:	e037883a 	mov	sp,fp
   8e56c:	dfc00117 	ldw	ra,4(sp)
   8e570:	df000017 	ldw	fp,0(sp)
   8e574:	dec00204 	addi	sp,sp,8
   8e578:	f800283a 	ret

0008e57c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   8e57c:	defffa04 	addi	sp,sp,-24
   8e580:	dfc00515 	stw	ra,20(sp)
   8e584:	df000415 	stw	fp,16(sp)
   8e588:	df000404 	addi	fp,sp,16
   8e58c:	e13ffe15 	stw	r4,-8(fp)
   8e590:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   8e594:	e0bffe17 	ldw	r2,-8(fp)
   8e598:	10800217 	ldw	r2,8(r2)
   8e59c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   8e5a0:	e0bffd17 	ldw	r2,-12(fp)
   8e5a4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   8e5a8:	e0fffd17 	ldw	r3,-12(fp)
   8e5ac:	e0bfff0b 	ldhu	r2,-4(fp)
   8e5b0:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   8e5b4:	e0bffd17 	ldw	r2,-12(fp)
   8e5b8:	10c00c03 	ldbu	r3,48(r2)
   8e5bc:	00bff7c4 	movi	r2,-33
   8e5c0:	1884703a 	and	r2,r3,r2
   8e5c4:	1007883a 	mov	r3,r2
   8e5c8:	e0bffd17 	ldw	r2,-12(fp)
   8e5cc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   8e5d0:	e0bffd17 	ldw	r2,-12(fp)
   8e5d4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   8e5d8:	e0bffd17 	ldw	r2,-12(fp)
   8e5dc:	10800c03 	ldbu	r2,48(r2)
   8e5e0:	10803fcc 	andi	r2,r2,255
   8e5e4:	1004c03a 	cmpne	r2,r2,zero
   8e5e8:	10001f1e 	bne	r2,zero,8e668 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   8e5ec:	e0bffd17 	ldw	r2,-12(fp)
   8e5f0:	10c00d83 	ldbu	r3,54(r2)
   8e5f4:	008002b4 	movhi	r2,10
   8e5f8:	10a40a04 	addi	r2,r2,-28632
   8e5fc:	10800003 	ldbu	r2,0(r2)
   8e600:	1884b03a 	or	r2,r3,r2
   8e604:	1007883a 	mov	r3,r2
   8e608:	008002b4 	movhi	r2,10
   8e60c:	10a40a04 	addi	r2,r2,-28632
   8e610:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8e614:	e0bffd17 	ldw	r2,-12(fp)
   8e618:	10800d03 	ldbu	r2,52(r2)
   8e61c:	11003fcc 	andi	r4,r2,255
   8e620:	e0bffd17 	ldw	r2,-12(fp)
   8e624:	10800d03 	ldbu	r2,52(r2)
   8e628:	10c03fcc 	andi	r3,r2,255
   8e62c:	008002b4 	movhi	r2,10
   8e630:	10a40a44 	addi	r2,r2,-28631
   8e634:	10c5883a 	add	r2,r2,r3
   8e638:	10c00003 	ldbu	r3,0(r2)
   8e63c:	e0bffd17 	ldw	r2,-12(fp)
   8e640:	10800d43 	ldbu	r2,53(r2)
   8e644:	1884b03a 	or	r2,r3,r2
   8e648:	1007883a 	mov	r3,r2
   8e64c:	008002b4 	movhi	r2,10
   8e650:	10a40a44 	addi	r2,r2,-28631
   8e654:	1105883a 	add	r2,r2,r4
   8e658:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
   8e65c:	00800044 	movi	r2,1
   8e660:	e0bffc05 	stb	r2,-16(fp)
   8e664:	00000106 	br	8e66c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   8e668:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   8e66c:	e13ffe17 	ldw	r4,-8(fp)
   8e670:	008e68c0 	call	8e68c <OS_FlagUnlink>
    return (sched);
   8e674:	e0bffc03 	ldbu	r2,-16(fp)
}
   8e678:	e037883a 	mov	sp,fp
   8e67c:	dfc00117 	ldw	ra,4(sp)
   8e680:	df000017 	ldw	fp,0(sp)
   8e684:	dec00204 	addi	sp,sp,8
   8e688:	f800283a 	ret

0008e68c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   8e68c:	defffa04 	addi	sp,sp,-24
   8e690:	df000515 	stw	fp,20(sp)
   8e694:	df000504 	addi	fp,sp,20
   8e698:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   8e69c:	e0bfff17 	ldw	r2,-4(fp)
   8e6a0:	10800117 	ldw	r2,4(r2)
   8e6a4:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   8e6a8:	e0bfff17 	ldw	r2,-4(fp)
   8e6ac:	10800017 	ldw	r2,0(r2)
   8e6b0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   8e6b4:	e0bffc17 	ldw	r2,-16(fp)
   8e6b8:	1004c03a 	cmpne	r2,r2,zero
   8e6bc:	10000c1e 	bne	r2,zero,8e6f0 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   8e6c0:	e0bfff17 	ldw	r2,-4(fp)
   8e6c4:	10800317 	ldw	r2,12(r2)
   8e6c8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   8e6cc:	e0fffd17 	ldw	r3,-12(fp)
   8e6d0:	e0bffb17 	ldw	r2,-20(fp)
   8e6d4:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   8e6d8:	e0bffb17 	ldw	r2,-20(fp)
   8e6dc:	1005003a 	cmpeq	r2,r2,zero
   8e6e0:	10000c1e 	bne	r2,zero,8e714 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   8e6e4:	e0bffb17 	ldw	r2,-20(fp)
   8e6e8:	10000115 	stw	zero,4(r2)
   8e6ec:	00000906 	br	8e714 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   8e6f0:	e0fffc17 	ldw	r3,-16(fp)
   8e6f4:	e0bffb17 	ldw	r2,-20(fp)
   8e6f8:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   8e6fc:	e0bffb17 	ldw	r2,-20(fp)
   8e700:	1005003a 	cmpeq	r2,r2,zero
   8e704:	1000031e 	bne	r2,zero,8e714 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   8e708:	e0fffb17 	ldw	r3,-20(fp)
   8e70c:	e0bffc17 	ldw	r2,-16(fp)
   8e710:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   8e714:	e0bfff17 	ldw	r2,-4(fp)
   8e718:	10800217 	ldw	r2,8(r2)
   8e71c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   8e720:	e0bffe17 	ldw	r2,-8(fp)
   8e724:	10000a15 	stw	zero,40(r2)
#endif
}
   8e728:	e037883a 	mov	sp,fp
   8e72c:	df000017 	ldw	fp,0(sp)
   8e730:	dec00104 	addi	sp,sp,4
   8e734:	f800283a 	ret

0008e738 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   8e738:	defff304 	addi	sp,sp,-52
   8e73c:	df000c15 	stw	fp,48(sp)
   8e740:	df000c04 	addi	fp,sp,48
   8e744:	e13ffb15 	stw	r4,-20(fp)
   8e748:	e17ffc15 	stw	r5,-16(fp)
   8e74c:	e1bffd15 	stw	r6,-12(fp)
   8e750:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8e754:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   8e758:	e0bffe17 	ldw	r2,-8(fp)
   8e75c:	1004c03a 	cmpne	r2,r2,zero
   8e760:	1000021e 	bne	r2,zero,8e76c <OSMemCreate+0x34>
        return ((OS_MEM *)0);
   8e764:	e03fff15 	stw	zero,-4(fp)
   8e768:	00007506 	br	8e940 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   8e76c:	e0bffb17 	ldw	r2,-20(fp)
   8e770:	1004c03a 	cmpne	r2,r2,zero
   8e774:	1000051e 	bne	r2,zero,8e78c <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   8e778:	e0fffe17 	ldw	r3,-8(fp)
   8e77c:	00801884 	movi	r2,98
   8e780:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8e784:	e03fff15 	stw	zero,-4(fp)
   8e788:	00006d06 	br	8e940 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   8e78c:	e0bffb17 	ldw	r2,-20(fp)
   8e790:	108000cc 	andi	r2,r2,3
   8e794:	1005003a 	cmpeq	r2,r2,zero
   8e798:	1000051e 	bne	r2,zero,8e7b0 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   8e79c:	e0fffe17 	ldw	r3,-8(fp)
   8e7a0:	00801884 	movi	r2,98
   8e7a4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8e7a8:	e03fff15 	stw	zero,-4(fp)
   8e7ac:	00006406 	br	8e940 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   8e7b0:	e0bffc17 	ldw	r2,-16(fp)
   8e7b4:	108000a8 	cmpgeui	r2,r2,2
   8e7b8:	1000051e 	bne	r2,zero,8e7d0 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   8e7bc:	e0fffe17 	ldw	r3,-8(fp)
   8e7c0:	008016c4 	movi	r2,91
   8e7c4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8e7c8:	e03fff15 	stw	zero,-4(fp)
   8e7cc:	00005c06 	br	8e940 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   8e7d0:	e0bffd17 	ldw	r2,-12(fp)
   8e7d4:	10800128 	cmpgeui	r2,r2,4
   8e7d8:	1000051e 	bne	r2,zero,8e7f0 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   8e7dc:	e0fffe17 	ldw	r3,-8(fp)
   8e7e0:	00801704 	movi	r2,92
   8e7e4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8e7e8:	e03fff15 	stw	zero,-4(fp)
   8e7ec:	00005406 	br	8e940 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e7f0:	0005303a 	rdctl	r2,status
   8e7f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e7f8:	e0fff517 	ldw	r3,-44(fp)
   8e7fc:	00bfff84 	movi	r2,-2
   8e800:	1884703a 	and	r2,r3,r2
   8e804:	1001703a 	wrctl	status,r2
  
  return context;
   8e808:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8e80c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   8e810:	008002b4 	movhi	r2,10
   8e814:	10a40704 	addi	r2,r2,-28644
   8e818:	10800017 	ldw	r2,0(r2)
   8e81c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   8e820:	008002b4 	movhi	r2,10
   8e824:	10a40704 	addi	r2,r2,-28644
   8e828:	10800017 	ldw	r2,0(r2)
   8e82c:	1005003a 	cmpeq	r2,r2,zero
   8e830:	1000081e 	bne	r2,zero,8e854 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   8e834:	008002b4 	movhi	r2,10
   8e838:	10a40704 	addi	r2,r2,-28644
   8e83c:	10800017 	ldw	r2,0(r2)
   8e840:	10800117 	ldw	r2,4(r2)
   8e844:	1007883a 	mov	r3,r2
   8e848:	008002b4 	movhi	r2,10
   8e84c:	10a40704 	addi	r2,r2,-28644
   8e850:	10c00015 	stw	r3,0(r2)
   8e854:	e0bff617 	ldw	r2,-40(fp)
   8e858:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e85c:	e0bff417 	ldw	r2,-48(fp)
   8e860:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   8e864:	e0bffa17 	ldw	r2,-24(fp)
   8e868:	1004c03a 	cmpne	r2,r2,zero
   8e86c:	1000051e 	bne	r2,zero,8e884 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
   8e870:	e0fffe17 	ldw	r3,-8(fp)
   8e874:	00801684 	movi	r2,90
   8e878:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8e87c:	e03fff15 	stw	zero,-4(fp)
   8e880:	00002f06 	br	8e940 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   8e884:	e0bffb17 	ldw	r2,-20(fp)
   8e888:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   8e88c:	e0bffb17 	ldw	r2,-20(fp)
   8e890:	1007883a 	mov	r3,r2
   8e894:	e0bffd17 	ldw	r2,-12(fp)
   8e898:	1885883a 	add	r2,r3,r2
   8e89c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
   8e8a0:	e03ff715 	stw	zero,-36(fp)
   8e8a4:	00000d06 	br	8e8dc <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   8e8a8:	e0fff817 	ldw	r3,-32(fp)
   8e8ac:	e0bff917 	ldw	r2,-28(fp)
   8e8b0:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   8e8b4:	e0bff917 	ldw	r2,-28(fp)
   8e8b8:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   8e8bc:	e0bff917 	ldw	r2,-28(fp)
   8e8c0:	1007883a 	mov	r3,r2
   8e8c4:	e0bffd17 	ldw	r2,-12(fp)
   8e8c8:	1885883a 	add	r2,r3,r2
   8e8cc:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   8e8d0:	e0bff717 	ldw	r2,-36(fp)
   8e8d4:	10800044 	addi	r2,r2,1
   8e8d8:	e0bff715 	stw	r2,-36(fp)
   8e8dc:	e0bffc17 	ldw	r2,-16(fp)
   8e8e0:	10ffffc4 	addi	r3,r2,-1
   8e8e4:	e0bff717 	ldw	r2,-36(fp)
   8e8e8:	10ffef36 	bltu	r2,r3,8e8a8 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   8e8ec:	e0bff817 	ldw	r2,-32(fp)
   8e8f0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   8e8f4:	e0fffa17 	ldw	r3,-24(fp)
   8e8f8:	e0bffb17 	ldw	r2,-20(fp)
   8e8fc:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   8e900:	e0fffa17 	ldw	r3,-24(fp)
   8e904:	e0bffb17 	ldw	r2,-20(fp)
   8e908:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   8e90c:	e0fffa17 	ldw	r3,-24(fp)
   8e910:	e0bffc17 	ldw	r2,-16(fp)
   8e914:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
   8e918:	e0fffa17 	ldw	r3,-24(fp)
   8e91c:	e0bffc17 	ldw	r2,-16(fp)
   8e920:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   8e924:	e0fffa17 	ldw	r3,-24(fp)
   8e928:	e0bffd17 	ldw	r2,-12(fp)
   8e92c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
   8e930:	e0bffe17 	ldw	r2,-8(fp)
   8e934:	10000005 	stb	zero,0(r2)
    return (pmem);
   8e938:	e0bffa17 	ldw	r2,-24(fp)
   8e93c:	e0bfff15 	stw	r2,-4(fp)
   8e940:	e0bfff17 	ldw	r2,-4(fp)
}
   8e944:	e037883a 	mov	sp,fp
   8e948:	df000017 	ldw	fp,0(sp)
   8e94c:	dec00104 	addi	sp,sp,4
   8e950:	f800283a 	ret

0008e954 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   8e954:	defff704 	addi	sp,sp,-36
   8e958:	df000815 	stw	fp,32(sp)
   8e95c:	df000804 	addi	fp,sp,32
   8e960:	e13ffd15 	stw	r4,-12(fp)
   8e964:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8e968:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   8e96c:	e0bffe17 	ldw	r2,-8(fp)
   8e970:	1004c03a 	cmpne	r2,r2,zero
   8e974:	1000021e 	bne	r2,zero,8e980 <OSMemGet+0x2c>
        return ((void *)0);
   8e978:	e03fff15 	stw	zero,-4(fp)
   8e97c:	00003106 	br	8ea44 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   8e980:	e0bffd17 	ldw	r2,-12(fp)
   8e984:	1004c03a 	cmpne	r2,r2,zero
   8e988:	1000051e 	bne	r2,zero,8e9a0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   8e98c:	e0fffe17 	ldw	r3,-8(fp)
   8e990:	00801804 	movi	r2,96
   8e994:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8e998:	e03fff15 	stw	zero,-4(fp)
   8e99c:	00002906 	br	8ea44 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e9a0:	0005303a 	rdctl	r2,status
   8e9a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e9a8:	e0fffa17 	ldw	r3,-24(fp)
   8e9ac:	00bfff84 	movi	r2,-2
   8e9b0:	1884703a 	and	r2,r3,r2
   8e9b4:	1001703a 	wrctl	status,r2
  
  return context;
   8e9b8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8e9bc:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   8e9c0:	e0bffd17 	ldw	r2,-12(fp)
   8e9c4:	10800417 	ldw	r2,16(r2)
   8e9c8:	1005003a 	cmpeq	r2,r2,zero
   8e9cc:	1000151e 	bne	r2,zero,8ea24 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   8e9d0:	e0bffd17 	ldw	r2,-12(fp)
   8e9d4:	10800117 	ldw	r2,4(r2)
   8e9d8:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   8e9dc:	e0bffc17 	ldw	r2,-16(fp)
   8e9e0:	10c00017 	ldw	r3,0(r2)
   8e9e4:	e0bffd17 	ldw	r2,-12(fp)
   8e9e8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   8e9ec:	e0bffd17 	ldw	r2,-12(fp)
   8e9f0:	10800417 	ldw	r2,16(r2)
   8e9f4:	10ffffc4 	addi	r3,r2,-1
   8e9f8:	e0bffd17 	ldw	r2,-12(fp)
   8e9fc:	10c00415 	stw	r3,16(r2)
   8ea00:	e0bffb17 	ldw	r2,-20(fp)
   8ea04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ea08:	e0bff917 	ldw	r2,-28(fp)
   8ea0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   8ea10:	e0bffe17 	ldw	r2,-8(fp)
   8ea14:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   8ea18:	e0bffc17 	ldw	r2,-16(fp)
   8ea1c:	e0bfff15 	stw	r2,-4(fp)
   8ea20:	00000806 	br	8ea44 <OSMemGet+0xf0>
   8ea24:	e0bffb17 	ldw	r2,-20(fp)
   8ea28:	e0bff815 	stw	r2,-32(fp)
   8ea2c:	e0bff817 	ldw	r2,-32(fp)
   8ea30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   8ea34:	e0fffe17 	ldw	r3,-8(fp)
   8ea38:	00801744 	movi	r2,93
   8ea3c:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   8ea40:	e03fff15 	stw	zero,-4(fp)
   8ea44:	e0bfff17 	ldw	r2,-4(fp)
}
   8ea48:	e037883a 	mov	sp,fp
   8ea4c:	df000017 	ldw	fp,0(sp)
   8ea50:	dec00104 	addi	sp,sp,4
   8ea54:	f800283a 	ret

0008ea58 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   8ea58:	defff604 	addi	sp,sp,-40
   8ea5c:	dfc00915 	stw	ra,36(sp)
   8ea60:	df000815 	stw	fp,32(sp)
   8ea64:	df000804 	addi	fp,sp,32
   8ea68:	e13ffc15 	stw	r4,-16(fp)
   8ea6c:	e17ffd15 	stw	r5,-12(fp)
   8ea70:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ea74:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8ea78:	e0bffe17 	ldw	r2,-8(fp)
   8ea7c:	1004c03a 	cmpne	r2,r2,zero
   8ea80:	1000021e 	bne	r2,zero,8ea8c <OSMemNameGet+0x34>
        return (0);
   8ea84:	e03fff15 	stw	zero,-4(fp)
   8ea88:	00003006 	br	8eb4c <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   8ea8c:	e0bffc17 	ldw	r2,-16(fp)
   8ea90:	1004c03a 	cmpne	r2,r2,zero
   8ea94:	1000051e 	bne	r2,zero,8eaac <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   8ea98:	e0fffe17 	ldw	r3,-8(fp)
   8ea9c:	00801804 	movi	r2,96
   8eaa0:	18800005 	stb	r2,0(r3)
        return (0);
   8eaa4:	e03fff15 	stw	zero,-4(fp)
   8eaa8:	00002806 	br	8eb4c <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8eaac:	e0bffd17 	ldw	r2,-12(fp)
   8eab0:	1004c03a 	cmpne	r2,r2,zero
   8eab4:	1000051e 	bne	r2,zero,8eacc <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8eab8:	e0fffe17 	ldw	r3,-8(fp)
   8eabc:	00800304 	movi	r2,12
   8eac0:	18800005 	stb	r2,0(r3)
        return (0);
   8eac4:	e03fff15 	stw	zero,-4(fp)
   8eac8:	00002006 	br	8eb4c <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8eacc:	008002b4 	movhi	r2,10
   8ead0:	10a40c04 	addi	r2,r2,-28624
   8ead4:	10800003 	ldbu	r2,0(r2)
   8ead8:	10803fcc 	andi	r2,r2,255
   8eadc:	1005003a 	cmpeq	r2,r2,zero
   8eae0:	1000051e 	bne	r2,zero,8eaf8 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   8eae4:	e0fffe17 	ldw	r3,-8(fp)
   8eae8:	00800444 	movi	r2,17
   8eaec:	18800005 	stb	r2,0(r3)
        return (0);
   8eaf0:	e03fff15 	stw	zero,-4(fp)
   8eaf4:	00001506 	br	8eb4c <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eaf8:	0005303a 	rdctl	r2,status
   8eafc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8eb00:	e0fff917 	ldw	r3,-28(fp)
   8eb04:	00bfff84 	movi	r2,-2
   8eb08:	1884703a 	and	r2,r3,r2
   8eb0c:	1001703a 	wrctl	status,r2
  
  return context;
   8eb10:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8eb14:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   8eb18:	e0bffc17 	ldw	r2,-16(fp)
   8eb1c:	11400504 	addi	r5,r2,20
   8eb20:	e13ffd17 	ldw	r4,-12(fp)
   8eb24:	008c6cc0 	call	8c6cc <OS_StrCopy>
   8eb28:	e0bffb05 	stb	r2,-20(fp)
   8eb2c:	e0bffa17 	ldw	r2,-24(fp)
   8eb30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8eb34:	e0bff817 	ldw	r2,-32(fp)
   8eb38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8eb3c:	e0bffe17 	ldw	r2,-8(fp)
   8eb40:	10000005 	stb	zero,0(r2)
    return (len);
   8eb44:	e0bffb03 	ldbu	r2,-20(fp)
   8eb48:	e0bfff15 	stw	r2,-4(fp)
   8eb4c:	e0bfff17 	ldw	r2,-4(fp)
}
   8eb50:	e037883a 	mov	sp,fp
   8eb54:	dfc00117 	ldw	ra,4(sp)
   8eb58:	df000017 	ldw	fp,0(sp)
   8eb5c:	dec00204 	addi	sp,sp,8
   8eb60:	f800283a 	ret

0008eb64 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   8eb64:	defff604 	addi	sp,sp,-40
   8eb68:	dfc00915 	stw	ra,36(sp)
   8eb6c:	df000815 	stw	fp,32(sp)
   8eb70:	df000804 	addi	fp,sp,32
   8eb74:	e13ffd15 	stw	r4,-12(fp)
   8eb78:	e17ffe15 	stw	r5,-8(fp)
   8eb7c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8eb80:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8eb84:	e0bfff17 	ldw	r2,-4(fp)
   8eb88:	1005003a 	cmpeq	r2,r2,zero
   8eb8c:	1000381e 	bne	r2,zero,8ec70 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   8eb90:	e0bffd17 	ldw	r2,-12(fp)
   8eb94:	1004c03a 	cmpne	r2,r2,zero
   8eb98:	1000041e 	bne	r2,zero,8ebac <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   8eb9c:	e0ffff17 	ldw	r3,-4(fp)
   8eba0:	00801804 	movi	r2,96
   8eba4:	18800005 	stb	r2,0(r3)
        return;
   8eba8:	00003106 	br	8ec70 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8ebac:	e0bffe17 	ldw	r2,-8(fp)
   8ebb0:	1004c03a 	cmpne	r2,r2,zero
   8ebb4:	1000041e 	bne	r2,zero,8ebc8 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   8ebb8:	e0ffff17 	ldw	r3,-4(fp)
   8ebbc:	00800304 	movi	r2,12
   8ebc0:	18800005 	stb	r2,0(r3)
        return;
   8ebc4:	00002a06 	br	8ec70 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8ebc8:	008002b4 	movhi	r2,10
   8ebcc:	10a40c04 	addi	r2,r2,-28624
   8ebd0:	10800003 	ldbu	r2,0(r2)
   8ebd4:	10803fcc 	andi	r2,r2,255
   8ebd8:	1005003a 	cmpeq	r2,r2,zero
   8ebdc:	1000041e 	bne	r2,zero,8ebf0 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   8ebe0:	e0ffff17 	ldw	r3,-4(fp)
   8ebe4:	00800484 	movi	r2,18
   8ebe8:	18800005 	stb	r2,0(r3)
        return;
   8ebec:	00002006 	br	8ec70 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ebf0:	0005303a 	rdctl	r2,status
   8ebf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ebf8:	e0fffa17 	ldw	r3,-24(fp)
   8ebfc:	00bfff84 	movi	r2,-2
   8ec00:	1884703a 	and	r2,r3,r2
   8ec04:	1001703a 	wrctl	status,r2
  
  return context;
   8ec08:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8ec0c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   8ec10:	e13ffe17 	ldw	r4,-8(fp)
   8ec14:	008c74c0 	call	8c74c <OS_StrLen>
   8ec18:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   8ec1c:	e0bffc03 	ldbu	r2,-16(fp)
   8ec20:	10800830 	cmpltui	r2,r2,32
   8ec24:	1000081e 	bne	r2,zero,8ec48 <OSMemNameSet+0xe4>
   8ec28:	e0bffb17 	ldw	r2,-20(fp)
   8ec2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ec30:	e0bff917 	ldw	r2,-28(fp)
   8ec34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   8ec38:	e0ffff17 	ldw	r3,-4(fp)
   8ec3c:	008018c4 	movi	r2,99
   8ec40:	18800005 	stb	r2,0(r3)
        return;
   8ec44:	00000a06 	br	8ec70 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   8ec48:	e0bffd17 	ldw	r2,-12(fp)
   8ec4c:	11000504 	addi	r4,r2,20
   8ec50:	e17ffe17 	ldw	r5,-8(fp)
   8ec54:	008c6cc0 	call	8c6cc <OS_StrCopy>
   8ec58:	e0bffb17 	ldw	r2,-20(fp)
   8ec5c:	e0bff815 	stw	r2,-32(fp)
   8ec60:	e0bff817 	ldw	r2,-32(fp)
   8ec64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ec68:	e0bfff17 	ldw	r2,-4(fp)
   8ec6c:	10000005 	stb	zero,0(r2)
}
   8ec70:	e037883a 	mov	sp,fp
   8ec74:	dfc00117 	ldw	ra,4(sp)
   8ec78:	df000017 	ldw	fp,0(sp)
   8ec7c:	dec00204 	addi	sp,sp,8
   8ec80:	f800283a 	ret

0008ec84 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   8ec84:	defff804 	addi	sp,sp,-32
   8ec88:	df000715 	stw	fp,28(sp)
   8ec8c:	df000704 	addi	fp,sp,28
   8ec90:	e13ffd15 	stw	r4,-12(fp)
   8ec94:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ec98:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   8ec9c:	e0bffd17 	ldw	r2,-12(fp)
   8eca0:	1004c03a 	cmpne	r2,r2,zero
   8eca4:	1000031e 	bne	r2,zero,8ecb4 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   8eca8:	00801804 	movi	r2,96
   8ecac:	e0bfff15 	stw	r2,-4(fp)
   8ecb0:	00002b06 	br	8ed60 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   8ecb4:	e0bffe17 	ldw	r2,-8(fp)
   8ecb8:	1004c03a 	cmpne	r2,r2,zero
   8ecbc:	1000031e 	bne	r2,zero,8eccc <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
   8ecc0:	008017c4 	movi	r2,95
   8ecc4:	e0bfff15 	stw	r2,-4(fp)
   8ecc8:	00002506 	br	8ed60 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eccc:	0005303a 	rdctl	r2,status
   8ecd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ecd4:	e0fffb17 	ldw	r3,-20(fp)
   8ecd8:	00bfff84 	movi	r2,-2
   8ecdc:	1884703a 	and	r2,r3,r2
   8ece0:	1001703a 	wrctl	status,r2
  
  return context;
   8ece4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8ece8:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   8ecec:	e0bffd17 	ldw	r2,-12(fp)
   8ecf0:	10c00417 	ldw	r3,16(r2)
   8ecf4:	e0bffd17 	ldw	r2,-12(fp)
   8ecf8:	10800317 	ldw	r2,12(r2)
   8ecfc:	18800736 	bltu	r3,r2,8ed1c <OSMemPut+0x98>
   8ed00:	e0bffc17 	ldw	r2,-16(fp)
   8ed04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ed08:	e0bffa17 	ldw	r2,-24(fp)
   8ed0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   8ed10:	00801784 	movi	r2,94
   8ed14:	e0bfff15 	stw	r2,-4(fp)
   8ed18:	00001106 	br	8ed60 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   8ed1c:	e0fffe17 	ldw	r3,-8(fp)
   8ed20:	e0bffd17 	ldw	r2,-12(fp)
   8ed24:	10800117 	ldw	r2,4(r2)
   8ed28:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
   8ed2c:	e0fffd17 	ldw	r3,-12(fp)
   8ed30:	e0bffe17 	ldw	r2,-8(fp)
   8ed34:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   8ed38:	e0bffd17 	ldw	r2,-12(fp)
   8ed3c:	10800417 	ldw	r2,16(r2)
   8ed40:	10c00044 	addi	r3,r2,1
   8ed44:	e0bffd17 	ldw	r2,-12(fp)
   8ed48:	10c00415 	stw	r3,16(r2)
   8ed4c:	e0bffc17 	ldw	r2,-16(fp)
   8ed50:	e0bff915 	stw	r2,-28(fp)
   8ed54:	e0bff917 	ldw	r2,-28(fp)
   8ed58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   8ed5c:	e03fff15 	stw	zero,-4(fp)
   8ed60:	e0bfff17 	ldw	r2,-4(fp)
}
   8ed64:	e037883a 	mov	sp,fp
   8ed68:	df000017 	ldw	fp,0(sp)
   8ed6c:	dec00104 	addi	sp,sp,4
   8ed70:	f800283a 	ret

0008ed74 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   8ed74:	defff904 	addi	sp,sp,-28
   8ed78:	df000615 	stw	fp,24(sp)
   8ed7c:	df000604 	addi	fp,sp,24
   8ed80:	e13ffd15 	stw	r4,-12(fp)
   8ed84:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ed88:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   8ed8c:	e0bffd17 	ldw	r2,-12(fp)
   8ed90:	1004c03a 	cmpne	r2,r2,zero
   8ed94:	1000031e 	bne	r2,zero,8eda4 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   8ed98:	00801804 	movi	r2,96
   8ed9c:	e0bfff15 	stw	r2,-4(fp)
   8eda0:	00002e06 	br	8ee5c <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   8eda4:	e0bffe17 	ldw	r2,-8(fp)
   8eda8:	1004c03a 	cmpne	r2,r2,zero
   8edac:	1000031e 	bne	r2,zero,8edbc <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
   8edb0:	00801844 	movi	r2,97
   8edb4:	e0bfff15 	stw	r2,-4(fp)
   8edb8:	00002806 	br	8ee5c <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8edbc:	0005303a 	rdctl	r2,status
   8edc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8edc4:	e0fffb17 	ldw	r3,-20(fp)
   8edc8:	00bfff84 	movi	r2,-2
   8edcc:	1884703a 	and	r2,r3,r2
   8edd0:	1001703a 	wrctl	status,r2
  
  return context;
   8edd4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8edd8:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   8eddc:	e0bffd17 	ldw	r2,-12(fp)
   8ede0:	10c00017 	ldw	r3,0(r2)
   8ede4:	e0bffe17 	ldw	r2,-8(fp)
   8ede8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   8edec:	e0bffd17 	ldw	r2,-12(fp)
   8edf0:	10c00117 	ldw	r3,4(r2)
   8edf4:	e0bffe17 	ldw	r2,-8(fp)
   8edf8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   8edfc:	e0bffd17 	ldw	r2,-12(fp)
   8ee00:	10c00217 	ldw	r3,8(r2)
   8ee04:	e0bffe17 	ldw	r2,-8(fp)
   8ee08:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   8ee0c:	e0bffd17 	ldw	r2,-12(fp)
   8ee10:	10c00317 	ldw	r3,12(r2)
   8ee14:	e0bffe17 	ldw	r2,-8(fp)
   8ee18:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   8ee1c:	e0bffd17 	ldw	r2,-12(fp)
   8ee20:	10c00417 	ldw	r3,16(r2)
   8ee24:	e0bffe17 	ldw	r2,-8(fp)
   8ee28:	10c00415 	stw	r3,16(r2)
   8ee2c:	e0bffc17 	ldw	r2,-16(fp)
   8ee30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ee34:	e0bffa17 	ldw	r2,-24(fp)
   8ee38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   8ee3c:	e0bffe17 	ldw	r2,-8(fp)
   8ee40:	10c00317 	ldw	r3,12(r2)
   8ee44:	e0bffe17 	ldw	r2,-8(fp)
   8ee48:	10800417 	ldw	r2,16(r2)
   8ee4c:	1887c83a 	sub	r3,r3,r2
   8ee50:	e0bffe17 	ldw	r2,-8(fp)
   8ee54:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   8ee58:	e03fff15 	stw	zero,-4(fp)
   8ee5c:	e0bfff17 	ldw	r2,-4(fp)
}
   8ee60:	e037883a 	mov	sp,fp
   8ee64:	df000017 	ldw	fp,0(sp)
   8ee68:	dec00104 	addi	sp,sp,4
   8ee6c:	f800283a 	ret

0008ee70 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   8ee70:	defffc04 	addi	sp,sp,-16
   8ee74:	dfc00315 	stw	ra,12(sp)
   8ee78:	df000215 	stw	fp,8(sp)
   8ee7c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   8ee80:	010002b4 	movhi	r4,10
   8ee84:	212cfb04 	addi	r4,r4,-19476
   8ee88:	01430c04 	movi	r5,3120
   8ee8c:	008c4c80 	call	8c4c8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   8ee90:	008002b4 	movhi	r2,10
   8ee94:	10acfb04 	addi	r2,r2,-19476
   8ee98:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   8ee9c:	e03ffe0d 	sth	zero,-8(fp)
   8eea0:	00001406 	br	8eef4 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   8eea4:	e13ffe0b 	ldhu	r4,-8(fp)
   8eea8:	01400d04 	movi	r5,52
   8eeac:	008964c0 	call	8964c <__mulsi3>
   8eeb0:	1007883a 	mov	r3,r2
   8eeb4:	008002b4 	movhi	r2,10
   8eeb8:	10ad0804 	addi	r2,r2,-19424
   8eebc:	1887883a 	add	r3,r3,r2
   8eec0:	e0bfff17 	ldw	r2,-4(fp)
   8eec4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   8eec8:	e0ffff17 	ldw	r3,-4(fp)
   8eecc:	00800fc4 	movi	r2,63
   8eed0:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   8eed4:	e0bfff17 	ldw	r2,-4(fp)
   8eed8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   8eedc:	e0bfff17 	ldw	r2,-4(fp)
   8eee0:	10800d04 	addi	r2,r2,52
   8eee4:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   8eee8:	e0bffe0b 	ldhu	r2,-8(fp)
   8eeec:	10800044 	addi	r2,r2,1
   8eef0:	e0bffe0d 	sth	r2,-8(fp)
   8eef4:	e0bffe0b 	ldhu	r2,-8(fp)
   8eef8:	10800ef0 	cmpltui	r2,r2,59
   8eefc:	103fe91e 	bne	r2,zero,8eea4 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   8ef00:	e0bfff17 	ldw	r2,-4(fp)
   8ef04:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   8ef08:	e0ffff17 	ldw	r3,-4(fp)
   8ef0c:	00800fc4 	movi	r2,63
   8ef10:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   8ef14:	e0bfff17 	ldw	r2,-4(fp)
   8ef18:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   8ef1c:	00c002b4 	movhi	r3,10
   8ef20:	18e40704 	addi	r3,r3,-28644
   8ef24:	008002b4 	movhi	r2,10
   8ef28:	10acfb04 	addi	r2,r2,-19476
   8ef2c:	18800015 	stw	r2,0(r3)
#endif
}
   8ef30:	e037883a 	mov	sp,fp
   8ef34:	dfc00117 	ldw	ra,4(sp)
   8ef38:	df000017 	ldw	fp,0(sp)
   8ef3c:	dec00204 	addi	sp,sp,8
   8ef40:	f800283a 	ret

0008ef44 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   8ef44:	defff704 	addi	sp,sp,-36
   8ef48:	df000815 	stw	fp,32(sp)
   8ef4c:	df000804 	addi	fp,sp,32
   8ef50:	e13ffd15 	stw	r4,-12(fp)
   8ef54:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ef58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8ef5c:	e0bffe17 	ldw	r2,-8(fp)
   8ef60:	1004c03a 	cmpne	r2,r2,zero
   8ef64:	1000021e 	bne	r2,zero,8ef70 <OSQAccept+0x2c>
        return ((void *)0);
   8ef68:	e03fff15 	stw	zero,-4(fp)
   8ef6c:	00004506 	br	8f084 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   8ef70:	e0bffd17 	ldw	r2,-12(fp)
   8ef74:	1004c03a 	cmpne	r2,r2,zero
   8ef78:	1000051e 	bne	r2,zero,8ef90 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   8ef7c:	e0fffe17 	ldw	r3,-8(fp)
   8ef80:	00800104 	movi	r2,4
   8ef84:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8ef88:	e03fff15 	stw	zero,-4(fp)
   8ef8c:	00003d06 	br	8f084 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   8ef90:	e0bffd17 	ldw	r2,-12(fp)
   8ef94:	10800003 	ldbu	r2,0(r2)
   8ef98:	10803fcc 	andi	r2,r2,255
   8ef9c:	108000a0 	cmpeqi	r2,r2,2
   8efa0:	1000051e 	bne	r2,zero,8efb8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   8efa4:	e0fffe17 	ldw	r3,-8(fp)
   8efa8:	00800044 	movi	r2,1
   8efac:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8efb0:	e03fff15 	stw	zero,-4(fp)
   8efb4:	00003306 	br	8f084 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8efb8:	0005303a 	rdctl	r2,status
   8efbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8efc0:	e0fff917 	ldw	r3,-28(fp)
   8efc4:	00bfff84 	movi	r2,-2
   8efc8:	1884703a 	and	r2,r3,r2
   8efcc:	1001703a 	wrctl	status,r2
  
  return context;
   8efd0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8efd4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   8efd8:	e0bffd17 	ldw	r2,-12(fp)
   8efdc:	10800117 	ldw	r2,4(r2)
   8efe0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   8efe4:	e0bffb17 	ldw	r2,-20(fp)
   8efe8:	1080058b 	ldhu	r2,22(r2)
   8efec:	10bfffcc 	andi	r2,r2,65535
   8eff0:	1005003a 	cmpeq	r2,r2,zero
   8eff4:	1000191e 	bne	r2,zero,8f05c <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   8eff8:	e0bffb17 	ldw	r2,-20(fp)
   8effc:	10c00417 	ldw	r3,16(r2)
   8f000:	18800017 	ldw	r2,0(r3)
   8f004:	e0bffc15 	stw	r2,-16(fp)
   8f008:	18c00104 	addi	r3,r3,4
   8f00c:	e0bffb17 	ldw	r2,-20(fp)
   8f010:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   8f014:	e0bffb17 	ldw	r2,-20(fp)
   8f018:	1080058b 	ldhu	r2,22(r2)
   8f01c:	10bfffc4 	addi	r2,r2,-1
   8f020:	1007883a 	mov	r3,r2
   8f024:	e0bffb17 	ldw	r2,-20(fp)
   8f028:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   8f02c:	e0bffb17 	ldw	r2,-20(fp)
   8f030:	10c00417 	ldw	r3,16(r2)
   8f034:	e0bffb17 	ldw	r2,-20(fp)
   8f038:	10800217 	ldw	r2,8(r2)
   8f03c:	1880041e 	bne	r3,r2,8f050 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
   8f040:	e0bffb17 	ldw	r2,-20(fp)
   8f044:	10c00117 	ldw	r3,4(r2)
   8f048:	e0bffb17 	ldw	r2,-20(fp)
   8f04c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   8f050:	e0bffe17 	ldw	r2,-8(fp)
   8f054:	10000005 	stb	zero,0(r2)
   8f058:	00000406 	br	8f06c <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   8f05c:	e0fffe17 	ldw	r3,-8(fp)
   8f060:	008007c4 	movi	r2,31
   8f064:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   8f068:	e03ffc15 	stw	zero,-16(fp)
   8f06c:	e0bffa17 	ldw	r2,-24(fp)
   8f070:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f074:	e0bff817 	ldw	r2,-32(fp)
   8f078:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   8f07c:	e0bffc17 	ldw	r2,-16(fp)
   8f080:	e0bfff15 	stw	r2,-4(fp)
   8f084:	e0bfff17 	ldw	r2,-4(fp)
}
   8f088:	e037883a 	mov	sp,fp
   8f08c:	df000017 	ldw	fp,0(sp)
   8f090:	dec00104 	addi	sp,sp,4
   8f094:	f800283a 	ret

0008f098 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   8f098:	defff304 	addi	sp,sp,-52
   8f09c:	dfc00c15 	stw	ra,48(sp)
   8f0a0:	df000b15 	stw	fp,44(sp)
   8f0a4:	df000b04 	addi	fp,sp,44
   8f0a8:	e13ffd15 	stw	r4,-12(fp)
   8f0ac:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f0b0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   8f0b4:	008002b4 	movhi	r2,10
   8f0b8:	10a40c04 	addi	r2,r2,-28624
   8f0bc:	10800003 	ldbu	r2,0(r2)
   8f0c0:	10803fcc 	andi	r2,r2,255
   8f0c4:	1005003a 	cmpeq	r2,r2,zero
   8f0c8:	1000021e 	bne	r2,zero,8f0d4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   8f0cc:	e03fff15 	stw	zero,-4(fp)
   8f0d0:	00007006 	br	8f294 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f0d4:	0005303a 	rdctl	r2,status
   8f0d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f0dc:	e0fff917 	ldw	r3,-28(fp)
   8f0e0:	00bfff84 	movi	r2,-2
   8f0e4:	1884703a 	and	r2,r3,r2
   8f0e8:	1001703a 	wrctl	status,r2
  
  return context;
   8f0ec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8f0f0:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   8f0f4:	008002b4 	movhi	r2,10
   8f0f8:	10a40b04 	addi	r2,r2,-28628
   8f0fc:	10800017 	ldw	r2,0(r2)
   8f100:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   8f104:	008002b4 	movhi	r2,10
   8f108:	10a40b04 	addi	r2,r2,-28628
   8f10c:	10800017 	ldw	r2,0(r2)
   8f110:	1005003a 	cmpeq	r2,r2,zero
   8f114:	1000081e 	bne	r2,zero,8f138 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   8f118:	008002b4 	movhi	r2,10
   8f11c:	10a40b04 	addi	r2,r2,-28628
   8f120:	10800017 	ldw	r2,0(r2)
   8f124:	10800117 	ldw	r2,4(r2)
   8f128:	1007883a 	mov	r3,r2
   8f12c:	008002b4 	movhi	r2,10
   8f130:	10a40b04 	addi	r2,r2,-28628
   8f134:	10c00015 	stw	r3,0(r2)
   8f138:	e0bffa17 	ldw	r2,-24(fp)
   8f13c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f140:	e0bff817 	ldw	r2,-32(fp)
   8f144:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   8f148:	e0bffc17 	ldw	r2,-16(fp)
   8f14c:	1005003a 	cmpeq	r2,r2,zero
   8f150:	10004e1e 	bne	r2,zero,8f28c <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f154:	0005303a 	rdctl	r2,status
   8f158:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f15c:	e0fff717 	ldw	r3,-36(fp)
   8f160:	00bfff84 	movi	r2,-2
   8f164:	1884703a 	and	r2,r3,r2
   8f168:	1001703a 	wrctl	status,r2
  
  return context;
   8f16c:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
   8f170:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   8f174:	008002b4 	movhi	r2,10
   8f178:	10a40904 	addi	r2,r2,-28636
   8f17c:	10800017 	ldw	r2,0(r2)
   8f180:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   8f184:	e0bffb17 	ldw	r2,-20(fp)
   8f188:	1005003a 	cmpeq	r2,r2,zero
   8f18c:	1000311e 	bne	r2,zero,8f254 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   8f190:	008002b4 	movhi	r2,10
   8f194:	10a40904 	addi	r2,r2,-28636
   8f198:	10800017 	ldw	r2,0(r2)
   8f19c:	10c00017 	ldw	r3,0(r2)
   8f1a0:	008002b4 	movhi	r2,10
   8f1a4:	10a40904 	addi	r2,r2,-28636
   8f1a8:	10c00015 	stw	r3,0(r2)
   8f1ac:	e0bffa17 	ldw	r2,-24(fp)
   8f1b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f1b4:	e0bff617 	ldw	r2,-40(fp)
   8f1b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   8f1bc:	e0fffb17 	ldw	r3,-20(fp)
   8f1c0:	e0bffd17 	ldw	r2,-12(fp)
   8f1c4:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
   8f1c8:	e0bffe0b 	ldhu	r2,-8(fp)
   8f1cc:	1085883a 	add	r2,r2,r2
   8f1d0:	1085883a 	add	r2,r2,r2
   8f1d4:	1007883a 	mov	r3,r2
   8f1d8:	e0bffd17 	ldw	r2,-12(fp)
   8f1dc:	1887883a 	add	r3,r3,r2
   8f1e0:	e0bffb17 	ldw	r2,-20(fp)
   8f1e4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   8f1e8:	e0fffb17 	ldw	r3,-20(fp)
   8f1ec:	e0bffd17 	ldw	r2,-12(fp)
   8f1f0:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
   8f1f4:	e0fffb17 	ldw	r3,-20(fp)
   8f1f8:	e0bffd17 	ldw	r2,-12(fp)
   8f1fc:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
   8f200:	e0fffb17 	ldw	r3,-20(fp)
   8f204:	e0bffe0b 	ldhu	r2,-8(fp)
   8f208:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
   8f20c:	e0bffb17 	ldw	r2,-20(fp)
   8f210:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   8f214:	e0fffc17 	ldw	r3,-16(fp)
   8f218:	00800084 	movi	r2,2
   8f21c:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
   8f220:	e0bffc17 	ldw	r2,-16(fp)
   8f224:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   8f228:	e0fffc17 	ldw	r3,-16(fp)
   8f22c:	e0bffb17 	ldw	r2,-20(fp)
   8f230:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   8f234:	e0fffc17 	ldw	r3,-16(fp)
   8f238:	00800fc4 	movi	r2,63
   8f23c:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   8f240:	e0bffc17 	ldw	r2,-16(fp)
   8f244:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   8f248:	e13ffc17 	ldw	r4,-16(fp)
   8f24c:	008c0fc0 	call	8c0fc <OS_EventWaitListInit>
   8f250:	00000e06 	br	8f28c <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   8f254:	008002b4 	movhi	r2,10
   8f258:	10a40b04 	addi	r2,r2,-28628
   8f25c:	10c00017 	ldw	r3,0(r2)
   8f260:	e0bffc17 	ldw	r2,-16(fp)
   8f264:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   8f268:	00c002b4 	movhi	r3,10
   8f26c:	18e40b04 	addi	r3,r3,-28628
   8f270:	e0bffc17 	ldw	r2,-16(fp)
   8f274:	18800015 	stw	r2,0(r3)
   8f278:	e0bffa17 	ldw	r2,-24(fp)
   8f27c:	e0bff515 	stw	r2,-44(fp)
   8f280:	e0bff517 	ldw	r2,-44(fp)
   8f284:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   8f288:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
   8f28c:	e0bffc17 	ldw	r2,-16(fp)
   8f290:	e0bfff15 	stw	r2,-4(fp)
   8f294:	e0bfff17 	ldw	r2,-4(fp)
}
   8f298:	e037883a 	mov	sp,fp
   8f29c:	dfc00117 	ldw	ra,4(sp)
   8f2a0:	df000017 	ldw	fp,0(sp)
   8f2a4:	dec00204 	addi	sp,sp,8
   8f2a8:	f800283a 	ret

0008f2ac <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   8f2ac:	defff004 	addi	sp,sp,-64
   8f2b0:	dfc00f15 	stw	ra,60(sp)
   8f2b4:	df000e15 	stw	fp,56(sp)
   8f2b8:	df000e04 	addi	fp,sp,56
   8f2bc:	e13ffb15 	stw	r4,-20(fp)
   8f2c0:	e1bffd15 	stw	r6,-12(fp)
   8f2c4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8f2c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8f2cc:	e0bffd17 	ldw	r2,-12(fp)
   8f2d0:	1004c03a 	cmpne	r2,r2,zero
   8f2d4:	1000031e 	bne	r2,zero,8f2e4 <OSQDel+0x38>
        return (pevent);
   8f2d8:	e0bffb17 	ldw	r2,-20(fp)
   8f2dc:	e0bfff15 	stw	r2,-4(fp)
   8f2e0:	0000ac06 	br	8f594 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   8f2e4:	e0bffb17 	ldw	r2,-20(fp)
   8f2e8:	1004c03a 	cmpne	r2,r2,zero
   8f2ec:	1000061e 	bne	r2,zero,8f308 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   8f2f0:	e0fffd17 	ldw	r3,-12(fp)
   8f2f4:	00800104 	movi	r2,4
   8f2f8:	18800005 	stb	r2,0(r3)
        return (pevent);
   8f2fc:	e0fffb17 	ldw	r3,-20(fp)
   8f300:	e0ffff15 	stw	r3,-4(fp)
   8f304:	0000a306 	br	8f594 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   8f308:	e0bffb17 	ldw	r2,-20(fp)
   8f30c:	10800003 	ldbu	r2,0(r2)
   8f310:	10803fcc 	andi	r2,r2,255
   8f314:	108000a0 	cmpeqi	r2,r2,2
   8f318:	1000061e 	bne	r2,zero,8f334 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   8f31c:	e0fffd17 	ldw	r3,-12(fp)
   8f320:	00800044 	movi	r2,1
   8f324:	18800005 	stb	r2,0(r3)
        return (pevent);
   8f328:	e0bffb17 	ldw	r2,-20(fp)
   8f32c:	e0bfff15 	stw	r2,-4(fp)
   8f330:	00009806 	br	8f594 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8f334:	008002b4 	movhi	r2,10
   8f338:	10a40c04 	addi	r2,r2,-28624
   8f33c:	10800003 	ldbu	r2,0(r2)
   8f340:	10803fcc 	andi	r2,r2,255
   8f344:	1005003a 	cmpeq	r2,r2,zero
   8f348:	1000061e 	bne	r2,zero,8f364 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   8f34c:	e0fffd17 	ldw	r3,-12(fp)
   8f350:	008003c4 	movi	r2,15
   8f354:	18800005 	stb	r2,0(r3)
        return (pevent);
   8f358:	e0fffb17 	ldw	r3,-20(fp)
   8f35c:	e0ffff15 	stw	r3,-4(fp)
   8f360:	00008c06 	br	8f594 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f364:	0005303a 	rdctl	r2,status
   8f368:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f36c:	e0fff617 	ldw	r3,-40(fp)
   8f370:	00bfff84 	movi	r2,-2
   8f374:	1884703a 	and	r2,r3,r2
   8f378:	1001703a 	wrctl	status,r2
  
  return context;
   8f37c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   8f380:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   8f384:	e0bffb17 	ldw	r2,-20(fp)
   8f388:	10800283 	ldbu	r2,10(r2)
   8f38c:	10803fcc 	andi	r2,r2,255
   8f390:	1005003a 	cmpeq	r2,r2,zero
   8f394:	1000031e 	bne	r2,zero,8f3a4 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   8f398:	00800044 	movi	r2,1
   8f39c:	e0bffa05 	stb	r2,-24(fp)
   8f3a0:	00000106 	br	8f3a8 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   8f3a4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   8f3a8:	e0bffc03 	ldbu	r2,-16(fp)
   8f3ac:	e0bffe15 	stw	r2,-8(fp)
   8f3b0:	e0fffe17 	ldw	r3,-8(fp)
   8f3b4:	1805003a 	cmpeq	r2,r3,zero
   8f3b8:	1000041e 	bne	r2,zero,8f3cc <OSQDel+0x120>
   8f3bc:	e0fffe17 	ldw	r3,-8(fp)
   8f3c0:	18800060 	cmpeqi	r2,r3,1
   8f3c4:	1000391e 	bne	r2,zero,8f4ac <OSQDel+0x200>
   8f3c8:	00006706 	br	8f568 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   8f3cc:	e0bffa03 	ldbu	r2,-24(fp)
   8f3d0:	1004c03a 	cmpne	r2,r2,zero
   8f3d4:	1000261e 	bne	r2,zero,8f470 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   8f3d8:	e0fffb17 	ldw	r3,-20(fp)
   8f3dc:	00800fc4 	movi	r2,63
   8f3e0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   8f3e4:	e0bffb17 	ldw	r2,-20(fp)
   8f3e8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   8f3ec:	e0bffb17 	ldw	r2,-20(fp)
   8f3f0:	10800117 	ldw	r2,4(r2)
   8f3f4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   8f3f8:	008002b4 	movhi	r2,10
   8f3fc:	10a40904 	addi	r2,r2,-28636
   8f400:	10c00017 	ldw	r3,0(r2)
   8f404:	e0bff817 	ldw	r2,-32(fp)
   8f408:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   8f40c:	00c002b4 	movhi	r3,10
   8f410:	18e40904 	addi	r3,r3,-28636
   8f414:	e0bff817 	ldw	r2,-32(fp)
   8f418:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8f41c:	e0bffb17 	ldw	r2,-20(fp)
   8f420:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   8f424:	008002b4 	movhi	r2,10
   8f428:	10a40b04 	addi	r2,r2,-28628
   8f42c:	10c00017 	ldw	r3,0(r2)
   8f430:	e0bffb17 	ldw	r2,-20(fp)
   8f434:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   8f438:	e0bffb17 	ldw	r2,-20(fp)
   8f43c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   8f440:	00c002b4 	movhi	r3,10
   8f444:	18e40b04 	addi	r3,r3,-28628
   8f448:	e0bffb17 	ldw	r2,-20(fp)
   8f44c:	18800015 	stw	r2,0(r3)
   8f450:	e0bff717 	ldw	r2,-36(fp)
   8f454:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f458:	e0bff517 	ldw	r2,-44(fp)
   8f45c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   8f460:	e0bffd17 	ldw	r2,-12(fp)
   8f464:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   8f468:	e03ff915 	stw	zero,-28(fp)
   8f46c:	00004706 	br	8f58c <OSQDel+0x2e0>
   8f470:	e0bff717 	ldw	r2,-36(fp)
   8f474:	e0bff415 	stw	r2,-48(fp)
   8f478:	e0bff417 	ldw	r2,-48(fp)
   8f47c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   8f480:	e0fffd17 	ldw	r3,-12(fp)
   8f484:	00801244 	movi	r2,73
   8f488:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   8f48c:	e0bffb17 	ldw	r2,-20(fp)
   8f490:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   8f494:	00003d06 	br	8f58c <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   8f498:	e13ffb17 	ldw	r4,-20(fp)
   8f49c:	000b883a 	mov	r5,zero
   8f4a0:	01800104 	movi	r6,4
   8f4a4:	000f883a 	mov	r7,zero
   8f4a8:	008bb480 	call	8bb48 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   8f4ac:	e0bffb17 	ldw	r2,-20(fp)
   8f4b0:	10800283 	ldbu	r2,10(r2)
   8f4b4:	10803fcc 	andi	r2,r2,255
   8f4b8:	1004c03a 	cmpne	r2,r2,zero
   8f4bc:	103ff61e 	bne	r2,zero,8f498 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   8f4c0:	e0fffb17 	ldw	r3,-20(fp)
   8f4c4:	00800fc4 	movi	r2,63
   8f4c8:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   8f4cc:	e0bffb17 	ldw	r2,-20(fp)
   8f4d0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   8f4d4:	e0bffb17 	ldw	r2,-20(fp)
   8f4d8:	10800117 	ldw	r2,4(r2)
   8f4dc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   8f4e0:	008002b4 	movhi	r2,10
   8f4e4:	10a40904 	addi	r2,r2,-28636
   8f4e8:	10c00017 	ldw	r3,0(r2)
   8f4ec:	e0bff817 	ldw	r2,-32(fp)
   8f4f0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   8f4f4:	00c002b4 	movhi	r3,10
   8f4f8:	18e40904 	addi	r3,r3,-28636
   8f4fc:	e0bff817 	ldw	r2,-32(fp)
   8f500:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8f504:	e0bffb17 	ldw	r2,-20(fp)
   8f508:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   8f50c:	008002b4 	movhi	r2,10
   8f510:	10a40b04 	addi	r2,r2,-28628
   8f514:	10c00017 	ldw	r3,0(r2)
   8f518:	e0bffb17 	ldw	r2,-20(fp)
   8f51c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   8f520:	e0bffb17 	ldw	r2,-20(fp)
   8f524:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   8f528:	00c002b4 	movhi	r3,10
   8f52c:	18e40b04 	addi	r3,r3,-28628
   8f530:	e0bffb17 	ldw	r2,-20(fp)
   8f534:	18800015 	stw	r2,0(r3)
   8f538:	e0bff717 	ldw	r2,-36(fp)
   8f53c:	e0bff315 	stw	r2,-52(fp)
   8f540:	e0bff317 	ldw	r2,-52(fp)
   8f544:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   8f548:	e0bffa03 	ldbu	r2,-24(fp)
   8f54c:	10800058 	cmpnei	r2,r2,1
   8f550:	1000011e 	bne	r2,zero,8f558 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   8f554:	008c5880 	call	8c588 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   8f558:	e0bffd17 	ldw	r2,-12(fp)
   8f55c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   8f560:	e03ff915 	stw	zero,-28(fp)
             break;
   8f564:	00000906 	br	8f58c <OSQDel+0x2e0>
   8f568:	e0bff717 	ldw	r2,-36(fp)
   8f56c:	e0bff215 	stw	r2,-56(fp)
   8f570:	e0bff217 	ldw	r2,-56(fp)
   8f574:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   8f578:	e0fffd17 	ldw	r3,-12(fp)
   8f57c:	008001c4 	movi	r2,7
   8f580:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   8f584:	e0bffb17 	ldw	r2,-20(fp)
   8f588:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   8f58c:	e0bff917 	ldw	r2,-28(fp)
   8f590:	e0bfff15 	stw	r2,-4(fp)
   8f594:	e0bfff17 	ldw	r2,-4(fp)
}
   8f598:	e037883a 	mov	sp,fp
   8f59c:	dfc00117 	ldw	ra,4(sp)
   8f5a0:	df000017 	ldw	fp,0(sp)
   8f5a4:	dec00204 	addi	sp,sp,8
   8f5a8:	f800283a 	ret

0008f5ac <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   8f5ac:	defff904 	addi	sp,sp,-28
   8f5b0:	df000615 	stw	fp,24(sp)
   8f5b4:	df000604 	addi	fp,sp,24
   8f5b8:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8f5bc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   8f5c0:	e0bffe17 	ldw	r2,-8(fp)
   8f5c4:	1004c03a 	cmpne	r2,r2,zero
   8f5c8:	1000031e 	bne	r2,zero,8f5d8 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
   8f5cc:	00800104 	movi	r2,4
   8f5d0:	e0bfff15 	stw	r2,-4(fp)
   8f5d4:	00002206 	br	8f660 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   8f5d8:	e0bffe17 	ldw	r2,-8(fp)
   8f5dc:	10800003 	ldbu	r2,0(r2)
   8f5e0:	10803fcc 	andi	r2,r2,255
   8f5e4:	108000a0 	cmpeqi	r2,r2,2
   8f5e8:	1000031e 	bne	r2,zero,8f5f8 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
   8f5ec:	00800044 	movi	r2,1
   8f5f0:	e0bfff15 	stw	r2,-4(fp)
   8f5f4:	00001a06 	br	8f660 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f5f8:	0005303a 	rdctl	r2,status
   8f5fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f600:	e0fffb17 	ldw	r3,-20(fp)
   8f604:	00bfff84 	movi	r2,-2
   8f608:	1884703a 	and	r2,r3,r2
   8f60c:	1001703a 	wrctl	status,r2
  
  return context;
   8f610:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8f614:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   8f618:	e0bffe17 	ldw	r2,-8(fp)
   8f61c:	10800117 	ldw	r2,4(r2)
   8f620:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
   8f624:	e0bffd17 	ldw	r2,-12(fp)
   8f628:	10c00117 	ldw	r3,4(r2)
   8f62c:	e0bffd17 	ldw	r2,-12(fp)
   8f630:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   8f634:	e0bffd17 	ldw	r2,-12(fp)
   8f638:	10c00117 	ldw	r3,4(r2)
   8f63c:	e0bffd17 	ldw	r2,-12(fp)
   8f640:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   8f644:	e0bffd17 	ldw	r2,-12(fp)
   8f648:	1000058d 	sth	zero,22(r2)
   8f64c:	e0bffc17 	ldw	r2,-16(fp)
   8f650:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f654:	e0bffa17 	ldw	r2,-24(fp)
   8f658:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8f65c:	e03fff15 	stw	zero,-4(fp)
   8f660:	e0bfff17 	ldw	r2,-4(fp)
}
   8f664:	e037883a 	mov	sp,fp
   8f668:	df000017 	ldw	fp,0(sp)
   8f66c:	dec00104 	addi	sp,sp,4
   8f670:	f800283a 	ret

0008f674 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   8f674:	defff104 	addi	sp,sp,-60
   8f678:	dfc00e15 	stw	ra,56(sp)
   8f67c:	df000d15 	stw	fp,52(sp)
   8f680:	df000d04 	addi	fp,sp,52
   8f684:	e13ffb15 	stw	r4,-20(fp)
   8f688:	e1bffd15 	stw	r6,-12(fp)
   8f68c:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f690:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8f694:	e0bffd17 	ldw	r2,-12(fp)
   8f698:	1004c03a 	cmpne	r2,r2,zero
   8f69c:	1000021e 	bne	r2,zero,8f6a8 <OSQPend+0x34>
        return ((void *)0);
   8f6a0:	e03fff15 	stw	zero,-4(fp)
   8f6a4:	0000b506 	br	8f97c <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   8f6a8:	e0bffb17 	ldw	r2,-20(fp)
   8f6ac:	1004c03a 	cmpne	r2,r2,zero
   8f6b0:	1000051e 	bne	r2,zero,8f6c8 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   8f6b4:	e0fffd17 	ldw	r3,-12(fp)
   8f6b8:	00800104 	movi	r2,4
   8f6bc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8f6c0:	e03fff15 	stw	zero,-4(fp)
   8f6c4:	0000ad06 	br	8f97c <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   8f6c8:	e0bffb17 	ldw	r2,-20(fp)
   8f6cc:	10800003 	ldbu	r2,0(r2)
   8f6d0:	10803fcc 	andi	r2,r2,255
   8f6d4:	108000a0 	cmpeqi	r2,r2,2
   8f6d8:	1000051e 	bne	r2,zero,8f6f0 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   8f6dc:	e0fffd17 	ldw	r3,-12(fp)
   8f6e0:	00800044 	movi	r2,1
   8f6e4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8f6e8:	e03fff15 	stw	zero,-4(fp)
   8f6ec:	0000a306 	br	8f97c <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   8f6f0:	008002b4 	movhi	r2,10
   8f6f4:	10a40c04 	addi	r2,r2,-28624
   8f6f8:	10800003 	ldbu	r2,0(r2)
   8f6fc:	10803fcc 	andi	r2,r2,255
   8f700:	1005003a 	cmpeq	r2,r2,zero
   8f704:	1000051e 	bne	r2,zero,8f71c <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   8f708:	e0fffd17 	ldw	r3,-12(fp)
   8f70c:	00800084 	movi	r2,2
   8f710:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8f714:	e03fff15 	stw	zero,-4(fp)
   8f718:	00009806 	br	8f97c <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   8f71c:	008002b4 	movhi	r2,10
   8f720:	10a3fe04 	addi	r2,r2,-28680
   8f724:	10800003 	ldbu	r2,0(r2)
   8f728:	10803fcc 	andi	r2,r2,255
   8f72c:	1005003a 	cmpeq	r2,r2,zero
   8f730:	1000051e 	bne	r2,zero,8f748 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   8f734:	e0fffd17 	ldw	r3,-12(fp)
   8f738:	00800344 	movi	r2,13
   8f73c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8f740:	e03fff15 	stw	zero,-4(fp)
   8f744:	00008d06 	br	8f97c <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f748:	0005303a 	rdctl	r2,status
   8f74c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f750:	e0fff717 	ldw	r3,-36(fp)
   8f754:	00bfff84 	movi	r2,-2
   8f758:	1884703a 	and	r2,r3,r2
   8f75c:	1001703a 	wrctl	status,r2
  
  return context;
   8f760:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   8f764:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   8f768:	e0bffb17 	ldw	r2,-20(fp)
   8f76c:	10800117 	ldw	r2,4(r2)
   8f770:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   8f774:	e0bff917 	ldw	r2,-28(fp)
   8f778:	1080058b 	ldhu	r2,22(r2)
   8f77c:	10bfffcc 	andi	r2,r2,65535
   8f780:	1005003a 	cmpeq	r2,r2,zero
   8f784:	10001f1e 	bne	r2,zero,8f804 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   8f788:	e0bff917 	ldw	r2,-28(fp)
   8f78c:	10c00417 	ldw	r3,16(r2)
   8f790:	18800017 	ldw	r2,0(r3)
   8f794:	e0bffa15 	stw	r2,-24(fp)
   8f798:	18c00104 	addi	r3,r3,4
   8f79c:	e0bff917 	ldw	r2,-28(fp)
   8f7a0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   8f7a4:	e0bff917 	ldw	r2,-28(fp)
   8f7a8:	1080058b 	ldhu	r2,22(r2)
   8f7ac:	10bfffc4 	addi	r2,r2,-1
   8f7b0:	1007883a 	mov	r3,r2
   8f7b4:	e0bff917 	ldw	r2,-28(fp)
   8f7b8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   8f7bc:	e0bff917 	ldw	r2,-28(fp)
   8f7c0:	10c00417 	ldw	r3,16(r2)
   8f7c4:	e0bff917 	ldw	r2,-28(fp)
   8f7c8:	10800217 	ldw	r2,8(r2)
   8f7cc:	1880041e 	bne	r3,r2,8f7e0 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
   8f7d0:	e0bff917 	ldw	r2,-28(fp)
   8f7d4:	10c00117 	ldw	r3,4(r2)
   8f7d8:	e0bff917 	ldw	r2,-28(fp)
   8f7dc:	10c00415 	stw	r3,16(r2)
   8f7e0:	e0bff817 	ldw	r2,-32(fp)
   8f7e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f7e8:	e0bff617 	ldw	r2,-40(fp)
   8f7ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   8f7f0:	e0bffd17 	ldw	r2,-12(fp)
   8f7f4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   8f7f8:	e0bffa17 	ldw	r2,-24(fp)
   8f7fc:	e0bfff15 	stw	r2,-4(fp)
   8f800:	00005e06 	br	8f97c <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   8f804:	008002b4 	movhi	r2,10
   8f808:	10a40d04 	addi	r2,r2,-28620
   8f80c:	10c00017 	ldw	r3,0(r2)
   8f810:	008002b4 	movhi	r2,10
   8f814:	10a40d04 	addi	r2,r2,-28620
   8f818:	10800017 	ldw	r2,0(r2)
   8f81c:	10800c03 	ldbu	r2,48(r2)
   8f820:	10800114 	ori	r2,r2,4
   8f824:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8f828:	008002b4 	movhi	r2,10
   8f82c:	10a40d04 	addi	r2,r2,-28620
   8f830:	10800017 	ldw	r2,0(r2)
   8f834:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   8f838:	008002b4 	movhi	r2,10
   8f83c:	10a40d04 	addi	r2,r2,-28620
   8f840:	10c00017 	ldw	r3,0(r2)
   8f844:	e0bffc0b 	ldhu	r2,-16(fp)
   8f848:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   8f84c:	e13ffb17 	ldw	r4,-20(fp)
   8f850:	008bcdc0 	call	8bcdc <OS_EventTaskWait>
   8f854:	e0bff817 	ldw	r2,-32(fp)
   8f858:	e0bff515 	stw	r2,-44(fp)
   8f85c:	e0bff517 	ldw	r2,-44(fp)
   8f860:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   8f864:	008c5880 	call	8c588 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f868:	0005303a 	rdctl	r2,status
   8f86c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f870:	e0fff417 	ldw	r3,-48(fp)
   8f874:	00bfff84 	movi	r2,-2
   8f878:	1884703a 	and	r2,r3,r2
   8f87c:	1001703a 	wrctl	status,r2
  
  return context;
   8f880:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
   8f884:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   8f888:	008002b4 	movhi	r2,10
   8f88c:	10a40d04 	addi	r2,r2,-28620
   8f890:	10800017 	ldw	r2,0(r2)
   8f894:	10800c43 	ldbu	r2,49(r2)
   8f898:	10803fcc 	andi	r2,r2,255
   8f89c:	e0bffe15 	stw	r2,-8(fp)
   8f8a0:	e0fffe17 	ldw	r3,-8(fp)
   8f8a4:	1805003a 	cmpeq	r2,r3,zero
   8f8a8:	1000041e 	bne	r2,zero,8f8bc <OSQPend+0x248>
   8f8ac:	e0fffe17 	ldw	r3,-8(fp)
   8f8b0:	188000a0 	cmpeqi	r2,r3,2
   8f8b4:	1000091e 	bne	r2,zero,8f8dc <OSQPend+0x268>
   8f8b8:	00000d06 	br	8f8f0 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   8f8bc:	008002b4 	movhi	r2,10
   8f8c0:	10a40d04 	addi	r2,r2,-28620
   8f8c4:	10800017 	ldw	r2,0(r2)
   8f8c8:	10800917 	ldw	r2,36(r2)
   8f8cc:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   8f8d0:	e0bffd17 	ldw	r2,-12(fp)
   8f8d4:	10000005 	stb	zero,0(r2)
             break;
   8f8d8:	00000e06 	br	8f914 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   8f8dc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   8f8e0:	e0fffd17 	ldw	r3,-12(fp)
   8f8e4:	00800384 	movi	r2,14
   8f8e8:	18800005 	stb	r2,0(r3)
             break;
   8f8ec:	00000906 	br	8f914 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   8f8f0:	008002b4 	movhi	r2,10
   8f8f4:	10a40d04 	addi	r2,r2,-28620
   8f8f8:	11000017 	ldw	r4,0(r2)
   8f8fc:	e17ffb17 	ldw	r5,-20(fp)
   8f900:	008bf400 	call	8bf40 <OS_EventTaskRemove>
             pmsg = (void *)0;
   8f904:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   8f908:	e0fffd17 	ldw	r3,-12(fp)
   8f90c:	00800284 	movi	r2,10
   8f910:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   8f914:	008002b4 	movhi	r2,10
   8f918:	10a40d04 	addi	r2,r2,-28620
   8f91c:	10800017 	ldw	r2,0(r2)
   8f920:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   8f924:	008002b4 	movhi	r2,10
   8f928:	10a40d04 	addi	r2,r2,-28620
   8f92c:	10800017 	ldw	r2,0(r2)
   8f930:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   8f934:	008002b4 	movhi	r2,10
   8f938:	10a40d04 	addi	r2,r2,-28620
   8f93c:	10800017 	ldw	r2,0(r2)
   8f940:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8f944:	008002b4 	movhi	r2,10
   8f948:	10a40d04 	addi	r2,r2,-28620
   8f94c:	10800017 	ldw	r2,0(r2)
   8f950:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   8f954:	008002b4 	movhi	r2,10
   8f958:	10a40d04 	addi	r2,r2,-28620
   8f95c:	10800017 	ldw	r2,0(r2)
   8f960:	10000915 	stw	zero,36(r2)
   8f964:	e0bff817 	ldw	r2,-32(fp)
   8f968:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f96c:	e0bff317 	ldw	r2,-52(fp)
   8f970:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   8f974:	e0bffa17 	ldw	r2,-24(fp)
   8f978:	e0bfff15 	stw	r2,-4(fp)
   8f97c:	e0bfff17 	ldw	r2,-4(fp)
}
   8f980:	e037883a 	mov	sp,fp
   8f984:	dfc00117 	ldw	ra,4(sp)
   8f988:	df000017 	ldw	fp,0(sp)
   8f98c:	dec00204 	addi	sp,sp,8
   8f990:	f800283a 	ret

0008f994 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   8f994:	defff504 	addi	sp,sp,-44
   8f998:	dfc00a15 	stw	ra,40(sp)
   8f99c:	df000915 	stw	fp,36(sp)
   8f9a0:	df000904 	addi	fp,sp,36
   8f9a4:	e13ffc15 	stw	r4,-16(fp)
   8f9a8:	e1bffe15 	stw	r6,-8(fp)
   8f9ac:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8f9b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8f9b4:	e0bffe17 	ldw	r2,-8(fp)
   8f9b8:	1004c03a 	cmpne	r2,r2,zero
   8f9bc:	1000021e 	bne	r2,zero,8f9c8 <OSQPendAbort+0x34>
        return (0);
   8f9c0:	e03fff15 	stw	zero,-4(fp)
   8f9c4:	00004c06 	br	8faf8 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   8f9c8:	e0bffc17 	ldw	r2,-16(fp)
   8f9cc:	1004c03a 	cmpne	r2,r2,zero
   8f9d0:	1000051e 	bne	r2,zero,8f9e8 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   8f9d4:	e0fffe17 	ldw	r3,-8(fp)
   8f9d8:	00800104 	movi	r2,4
   8f9dc:	18800005 	stb	r2,0(r3)
        return (0);
   8f9e0:	e03fff15 	stw	zero,-4(fp)
   8f9e4:	00004406 	br	8faf8 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   8f9e8:	e0bffc17 	ldw	r2,-16(fp)
   8f9ec:	10800003 	ldbu	r2,0(r2)
   8f9f0:	10803fcc 	andi	r2,r2,255
   8f9f4:	108000a0 	cmpeqi	r2,r2,2
   8f9f8:	1000051e 	bne	r2,zero,8fa10 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   8f9fc:	e0fffe17 	ldw	r3,-8(fp)
   8fa00:	00800044 	movi	r2,1
   8fa04:	18800005 	stb	r2,0(r3)
        return (0);
   8fa08:	e03fff15 	stw	zero,-4(fp)
   8fa0c:	00003a06 	br	8faf8 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fa10:	0005303a 	rdctl	r2,status
   8fa14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fa18:	e0fff917 	ldw	r3,-28(fp)
   8fa1c:	00bfff84 	movi	r2,-2
   8fa20:	1884703a 	and	r2,r3,r2
   8fa24:	1001703a 	wrctl	status,r2
  
  return context;
   8fa28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8fa2c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   8fa30:	e0bffc17 	ldw	r2,-16(fp)
   8fa34:	10800283 	ldbu	r2,10(r2)
   8fa38:	10803fcc 	andi	r2,r2,255
   8fa3c:	1005003a 	cmpeq	r2,r2,zero
   8fa40:	1000261e 	bne	r2,zero,8fadc <OSQPendAbort+0x148>
        nbr_tasks = 0;
   8fa44:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   8fa48:	e0bffd03 	ldbu	r2,-12(fp)
   8fa4c:	10800060 	cmpeqi	r2,r2,1
   8fa50:	1000091e 	bne	r2,zero,8fa78 <OSQPendAbort+0xe4>
   8fa54:	00000e06 	br	8fa90 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   8fa58:	e13ffc17 	ldw	r4,-16(fp)
   8fa5c:	000b883a 	mov	r5,zero
   8fa60:	01800104 	movi	r6,4
   8fa64:	01c00084 	movi	r7,2
   8fa68:	008bb480 	call	8bb48 <OS_EventTaskRdy>
                     nbr_tasks++;
   8fa6c:	e0bffb03 	ldbu	r2,-20(fp)
   8fa70:	10800044 	addi	r2,r2,1
   8fa74:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   8fa78:	e0bffc17 	ldw	r2,-16(fp)
   8fa7c:	10800283 	ldbu	r2,10(r2)
   8fa80:	10803fcc 	andi	r2,r2,255
   8fa84:	1004c03a 	cmpne	r2,r2,zero
   8fa88:	103ff31e 	bne	r2,zero,8fa58 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   8fa8c:	00000806 	br	8fab0 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   8fa90:	e13ffc17 	ldw	r4,-16(fp)
   8fa94:	000b883a 	mov	r5,zero
   8fa98:	01800104 	movi	r6,4
   8fa9c:	01c00084 	movi	r7,2
   8faa0:	008bb480 	call	8bb48 <OS_EventTaskRdy>
                 nbr_tasks++;
   8faa4:	e0bffb03 	ldbu	r2,-20(fp)
   8faa8:	10800044 	addi	r2,r2,1
   8faac:	e0bffb05 	stb	r2,-20(fp)
   8fab0:	e0bffa17 	ldw	r2,-24(fp)
   8fab4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fab8:	e0bff817 	ldw	r2,-32(fp)
   8fabc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   8fac0:	008c5880 	call	8c588 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   8fac4:	e0fffe17 	ldw	r3,-8(fp)
   8fac8:	00800384 	movi	r2,14
   8facc:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   8fad0:	e0bffb03 	ldbu	r2,-20(fp)
   8fad4:	e0bfff15 	stw	r2,-4(fp)
   8fad8:	00000706 	br	8faf8 <OSQPendAbort+0x164>
   8fadc:	e0bffa17 	ldw	r2,-24(fp)
   8fae0:	e0bff715 	stw	r2,-36(fp)
   8fae4:	e0bff717 	ldw	r2,-36(fp)
   8fae8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8faec:	e0bffe17 	ldw	r2,-8(fp)
   8faf0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   8faf4:	e03fff15 	stw	zero,-4(fp)
   8faf8:	e0bfff17 	ldw	r2,-4(fp)
}
   8fafc:	e037883a 	mov	sp,fp
   8fb00:	dfc00117 	ldw	ra,4(sp)
   8fb04:	df000017 	ldw	fp,0(sp)
   8fb08:	dec00204 	addi	sp,sp,8
   8fb0c:	f800283a 	ret

0008fb10 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   8fb10:	defff504 	addi	sp,sp,-44
   8fb14:	dfc00a15 	stw	ra,40(sp)
   8fb18:	df000915 	stw	fp,36(sp)
   8fb1c:	df000904 	addi	fp,sp,36
   8fb20:	e13ffd15 	stw	r4,-12(fp)
   8fb24:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8fb28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   8fb2c:	e0bffd17 	ldw	r2,-12(fp)
   8fb30:	1004c03a 	cmpne	r2,r2,zero
   8fb34:	1000031e 	bne	r2,zero,8fb44 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   8fb38:	00800104 	movi	r2,4
   8fb3c:	e0bfff15 	stw	r2,-4(fp)
   8fb40:	00004d06 	br	8fc78 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   8fb44:	e0bffd17 	ldw	r2,-12(fp)
   8fb48:	10800003 	ldbu	r2,0(r2)
   8fb4c:	10803fcc 	andi	r2,r2,255
   8fb50:	108000a0 	cmpeqi	r2,r2,2
   8fb54:	1000031e 	bne	r2,zero,8fb64 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
   8fb58:	00800044 	movi	r2,1
   8fb5c:	e0bfff15 	stw	r2,-4(fp)
   8fb60:	00004506 	br	8fc78 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fb64:	0005303a 	rdctl	r2,status
   8fb68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fb6c:	e0fffa17 	ldw	r3,-24(fp)
   8fb70:	00bfff84 	movi	r2,-2
   8fb74:	1884703a 	and	r2,r3,r2
   8fb78:	1001703a 	wrctl	status,r2
  
  return context;
   8fb7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8fb80:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   8fb84:	e0bffd17 	ldw	r2,-12(fp)
   8fb88:	10800283 	ldbu	r2,10(r2)
   8fb8c:	10803fcc 	andi	r2,r2,255
   8fb90:	1005003a 	cmpeq	r2,r2,zero
   8fb94:	10000c1e 	bne	r2,zero,8fbc8 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   8fb98:	e13ffd17 	ldw	r4,-12(fp)
   8fb9c:	e17ffe17 	ldw	r5,-8(fp)
   8fba0:	01800104 	movi	r6,4
   8fba4:	000f883a 	mov	r7,zero
   8fba8:	008bb480 	call	8bb48 <OS_EventTaskRdy>
   8fbac:	e0bffb17 	ldw	r2,-20(fp)
   8fbb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fbb4:	e0bff917 	ldw	r2,-28(fp)
   8fbb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   8fbbc:	008c5880 	call	8c588 <OS_Sched>
        return (OS_ERR_NONE);
   8fbc0:	e03fff15 	stw	zero,-4(fp)
   8fbc4:	00002c06 	br	8fc78 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   8fbc8:	e0bffd17 	ldw	r2,-12(fp)
   8fbcc:	10800117 	ldw	r2,4(r2)
   8fbd0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   8fbd4:	e0bffc17 	ldw	r2,-16(fp)
   8fbd8:	10c0058b 	ldhu	r3,22(r2)
   8fbdc:	e0bffc17 	ldw	r2,-16(fp)
   8fbe0:	1080050b 	ldhu	r2,20(r2)
   8fbe4:	18ffffcc 	andi	r3,r3,65535
   8fbe8:	10bfffcc 	andi	r2,r2,65535
   8fbec:	18800736 	bltu	r3,r2,8fc0c <OSQPost+0xfc>
   8fbf0:	e0bffb17 	ldw	r2,-20(fp)
   8fbf4:	e0bff815 	stw	r2,-32(fp)
   8fbf8:	e0bff817 	ldw	r2,-32(fp)
   8fbfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   8fc00:	00800784 	movi	r2,30
   8fc04:	e0bfff15 	stw	r2,-4(fp)
   8fc08:	00001b06 	br	8fc78 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   8fc0c:	e0bffc17 	ldw	r2,-16(fp)
   8fc10:	10c00317 	ldw	r3,12(r2)
   8fc14:	e0bffe17 	ldw	r2,-8(fp)
   8fc18:	18800015 	stw	r2,0(r3)
   8fc1c:	18c00104 	addi	r3,r3,4
   8fc20:	e0bffc17 	ldw	r2,-16(fp)
   8fc24:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   8fc28:	e0bffc17 	ldw	r2,-16(fp)
   8fc2c:	1080058b 	ldhu	r2,22(r2)
   8fc30:	10800044 	addi	r2,r2,1
   8fc34:	1007883a 	mov	r3,r2
   8fc38:	e0bffc17 	ldw	r2,-16(fp)
   8fc3c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   8fc40:	e0bffc17 	ldw	r2,-16(fp)
   8fc44:	10c00317 	ldw	r3,12(r2)
   8fc48:	e0bffc17 	ldw	r2,-16(fp)
   8fc4c:	10800217 	ldw	r2,8(r2)
   8fc50:	1880041e 	bne	r3,r2,8fc64 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
   8fc54:	e0bffc17 	ldw	r2,-16(fp)
   8fc58:	10c00117 	ldw	r3,4(r2)
   8fc5c:	e0bffc17 	ldw	r2,-16(fp)
   8fc60:	10c00315 	stw	r3,12(r2)
   8fc64:	e0bffb17 	ldw	r2,-20(fp)
   8fc68:	e0bff715 	stw	r2,-36(fp)
   8fc6c:	e0bff717 	ldw	r2,-36(fp)
   8fc70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8fc74:	e03fff15 	stw	zero,-4(fp)
   8fc78:	e0bfff17 	ldw	r2,-4(fp)
}
   8fc7c:	e037883a 	mov	sp,fp
   8fc80:	dfc00117 	ldw	ra,4(sp)
   8fc84:	df000017 	ldw	fp,0(sp)
   8fc88:	dec00204 	addi	sp,sp,8
   8fc8c:	f800283a 	ret

0008fc90 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   8fc90:	defff504 	addi	sp,sp,-44
   8fc94:	dfc00a15 	stw	ra,40(sp)
   8fc98:	df000915 	stw	fp,36(sp)
   8fc9c:	df000904 	addi	fp,sp,36
   8fca0:	e13ffd15 	stw	r4,-12(fp)
   8fca4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8fca8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   8fcac:	e0bffd17 	ldw	r2,-12(fp)
   8fcb0:	1004c03a 	cmpne	r2,r2,zero
   8fcb4:	1000031e 	bne	r2,zero,8fcc4 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
   8fcb8:	00800104 	movi	r2,4
   8fcbc:	e0bfff15 	stw	r2,-4(fp)
   8fcc0:	00004f06 	br	8fe00 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   8fcc4:	e0bffd17 	ldw	r2,-12(fp)
   8fcc8:	10800003 	ldbu	r2,0(r2)
   8fccc:	10803fcc 	andi	r2,r2,255
   8fcd0:	108000a0 	cmpeqi	r2,r2,2
   8fcd4:	1000031e 	bne	r2,zero,8fce4 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
   8fcd8:	00800044 	movi	r2,1
   8fcdc:	e0bfff15 	stw	r2,-4(fp)
   8fce0:	00004706 	br	8fe00 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fce4:	0005303a 	rdctl	r2,status
   8fce8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fcec:	e0fffa17 	ldw	r3,-24(fp)
   8fcf0:	00bfff84 	movi	r2,-2
   8fcf4:	1884703a 	and	r2,r3,r2
   8fcf8:	1001703a 	wrctl	status,r2
  
  return context;
   8fcfc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8fd00:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   8fd04:	e0bffd17 	ldw	r2,-12(fp)
   8fd08:	10800283 	ldbu	r2,10(r2)
   8fd0c:	10803fcc 	andi	r2,r2,255
   8fd10:	1005003a 	cmpeq	r2,r2,zero
   8fd14:	10000c1e 	bne	r2,zero,8fd48 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   8fd18:	e13ffd17 	ldw	r4,-12(fp)
   8fd1c:	e17ffe17 	ldw	r5,-8(fp)
   8fd20:	01800104 	movi	r6,4
   8fd24:	000f883a 	mov	r7,zero
   8fd28:	008bb480 	call	8bb48 <OS_EventTaskRdy>
   8fd2c:	e0bffb17 	ldw	r2,-20(fp)
   8fd30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fd34:	e0bff917 	ldw	r2,-28(fp)
   8fd38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   8fd3c:	008c5880 	call	8c588 <OS_Sched>
        return (OS_ERR_NONE);
   8fd40:	e03fff15 	stw	zero,-4(fp)
   8fd44:	00002e06 	br	8fe00 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   8fd48:	e0bffd17 	ldw	r2,-12(fp)
   8fd4c:	10800117 	ldw	r2,4(r2)
   8fd50:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   8fd54:	e0bffc17 	ldw	r2,-16(fp)
   8fd58:	10c0058b 	ldhu	r3,22(r2)
   8fd5c:	e0bffc17 	ldw	r2,-16(fp)
   8fd60:	1080050b 	ldhu	r2,20(r2)
   8fd64:	18ffffcc 	andi	r3,r3,65535
   8fd68:	10bfffcc 	andi	r2,r2,65535
   8fd6c:	18800736 	bltu	r3,r2,8fd8c <OSQPostFront+0xfc>
   8fd70:	e0bffb17 	ldw	r2,-20(fp)
   8fd74:	e0bff815 	stw	r2,-32(fp)
   8fd78:	e0bff817 	ldw	r2,-32(fp)
   8fd7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   8fd80:	00800784 	movi	r2,30
   8fd84:	e0bfff15 	stw	r2,-4(fp)
   8fd88:	00001d06 	br	8fe00 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   8fd8c:	e0bffc17 	ldw	r2,-16(fp)
   8fd90:	10c00417 	ldw	r3,16(r2)
   8fd94:	e0bffc17 	ldw	r2,-16(fp)
   8fd98:	10800117 	ldw	r2,4(r2)
   8fd9c:	1880041e 	bne	r3,r2,8fdb0 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
   8fda0:	e0bffc17 	ldw	r2,-16(fp)
   8fda4:	10c00217 	ldw	r3,8(r2)
   8fda8:	e0bffc17 	ldw	r2,-16(fp)
   8fdac:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   8fdb0:	e0bffc17 	ldw	r2,-16(fp)
   8fdb4:	10800417 	ldw	r2,16(r2)
   8fdb8:	10ffff04 	addi	r3,r2,-4
   8fdbc:	e0bffc17 	ldw	r2,-16(fp)
   8fdc0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   8fdc4:	e0bffc17 	ldw	r2,-16(fp)
   8fdc8:	10c00417 	ldw	r3,16(r2)
   8fdcc:	e0bffe17 	ldw	r2,-8(fp)
   8fdd0:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   8fdd4:	e0bffc17 	ldw	r2,-16(fp)
   8fdd8:	1080058b 	ldhu	r2,22(r2)
   8fddc:	10800044 	addi	r2,r2,1
   8fde0:	1007883a 	mov	r3,r2
   8fde4:	e0bffc17 	ldw	r2,-16(fp)
   8fde8:	10c0058d 	sth	r3,22(r2)
   8fdec:	e0bffb17 	ldw	r2,-20(fp)
   8fdf0:	e0bff715 	stw	r2,-36(fp)
   8fdf4:	e0bff717 	ldw	r2,-36(fp)
   8fdf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8fdfc:	e03fff15 	stw	zero,-4(fp)
   8fe00:	e0bfff17 	ldw	r2,-4(fp)
}
   8fe04:	e037883a 	mov	sp,fp
   8fe08:	dfc00117 	ldw	ra,4(sp)
   8fe0c:	df000017 	ldw	fp,0(sp)
   8fe10:	dec00204 	addi	sp,sp,8
   8fe14:	f800283a 	ret

0008fe18 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   8fe18:	defff404 	addi	sp,sp,-48
   8fe1c:	dfc00b15 	stw	ra,44(sp)
   8fe20:	df000a15 	stw	fp,40(sp)
   8fe24:	df000a04 	addi	fp,sp,40
   8fe28:	e13ffc15 	stw	r4,-16(fp)
   8fe2c:	e17ffd15 	stw	r5,-12(fp)
   8fe30:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8fe34:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   8fe38:	e0bffc17 	ldw	r2,-16(fp)
   8fe3c:	1004c03a 	cmpne	r2,r2,zero
   8fe40:	1000031e 	bne	r2,zero,8fe50 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   8fe44:	00800104 	movi	r2,4
   8fe48:	e0bfff15 	stw	r2,-4(fp)
   8fe4c:	00007906 	br	90034 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   8fe50:	e0bffc17 	ldw	r2,-16(fp)
   8fe54:	10800003 	ldbu	r2,0(r2)
   8fe58:	10803fcc 	andi	r2,r2,255
   8fe5c:	108000a0 	cmpeqi	r2,r2,2
   8fe60:	1000031e 	bne	r2,zero,8fe70 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
   8fe64:	00800044 	movi	r2,1
   8fe68:	e0bfff15 	stw	r2,-4(fp)
   8fe6c:	00007106 	br	90034 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fe70:	0005303a 	rdctl	r2,status
   8fe74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fe78:	e0fff917 	ldw	r3,-28(fp)
   8fe7c:	00bfff84 	movi	r2,-2
   8fe80:	1884703a 	and	r2,r3,r2
   8fe84:	1001703a 	wrctl	status,r2
  
  return context;
   8fe88:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8fe8c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   8fe90:	e0bffc17 	ldw	r2,-16(fp)
   8fe94:	10800283 	ldbu	r2,10(r2)
   8fe98:	10803fcc 	andi	r2,r2,255
   8fe9c:	1005003a 	cmpeq	r2,r2,zero
   8fea0:	1000211e 	bne	r2,zero,8ff28 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   8fea4:	e0bffe03 	ldbu	r2,-8(fp)
   8fea8:	1080004c 	andi	r2,r2,1
   8feac:	10803fcc 	andi	r2,r2,255
   8feb0:	1005003a 	cmpeq	r2,r2,zero
   8feb4:	10000c1e 	bne	r2,zero,8fee8 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   8feb8:	00000506 	br	8fed0 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   8febc:	e13ffc17 	ldw	r4,-16(fp)
   8fec0:	e17ffd17 	ldw	r5,-12(fp)
   8fec4:	01800104 	movi	r6,4
   8fec8:	000f883a 	mov	r7,zero
   8fecc:	008bb480 	call	8bb48 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   8fed0:	e0bffc17 	ldw	r2,-16(fp)
   8fed4:	10800283 	ldbu	r2,10(r2)
   8fed8:	10803fcc 	andi	r2,r2,255
   8fedc:	1004c03a 	cmpne	r2,r2,zero
   8fee0:	103ff61e 	bne	r2,zero,8febc <OSQPostOpt+0xa4>
   8fee4:	00000506 	br	8fefc <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   8fee8:	e13ffc17 	ldw	r4,-16(fp)
   8feec:	e17ffd17 	ldw	r5,-12(fp)
   8fef0:	01800104 	movi	r6,4
   8fef4:	000f883a 	mov	r7,zero
   8fef8:	008bb480 	call	8bb48 <OS_EventTaskRdy>
   8fefc:	e0bffa17 	ldw	r2,-24(fp)
   8ff00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ff04:	e0bff817 	ldw	r2,-32(fp)
   8ff08:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   8ff0c:	e0bffe03 	ldbu	r2,-8(fp)
   8ff10:	1080010c 	andi	r2,r2,4
   8ff14:	1004c03a 	cmpne	r2,r2,zero
   8ff18:	1000011e 	bne	r2,zero,8ff20 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
   8ff1c:	008c5880 	call	8c588 <OS_Sched>
        }
        return (OS_ERR_NONE);
   8ff20:	e03fff15 	stw	zero,-4(fp)
   8ff24:	00004306 	br	90034 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   8ff28:	e0bffc17 	ldw	r2,-16(fp)
   8ff2c:	10800117 	ldw	r2,4(r2)
   8ff30:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   8ff34:	e0bffb17 	ldw	r2,-20(fp)
   8ff38:	10c0058b 	ldhu	r3,22(r2)
   8ff3c:	e0bffb17 	ldw	r2,-20(fp)
   8ff40:	1080050b 	ldhu	r2,20(r2)
   8ff44:	18ffffcc 	andi	r3,r3,65535
   8ff48:	10bfffcc 	andi	r2,r2,65535
   8ff4c:	18800736 	bltu	r3,r2,8ff6c <OSQPostOpt+0x154>
   8ff50:	e0bffa17 	ldw	r2,-24(fp)
   8ff54:	e0bff715 	stw	r2,-36(fp)
   8ff58:	e0bff717 	ldw	r2,-36(fp)
   8ff5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   8ff60:	00800784 	movi	r2,30
   8ff64:	e0bfff15 	stw	r2,-4(fp)
   8ff68:	00003206 	br	90034 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   8ff6c:	e0bffe03 	ldbu	r2,-8(fp)
   8ff70:	1080008c 	andi	r2,r2,2
   8ff74:	1005003a 	cmpeq	r2,r2,zero
   8ff78:	1000131e 	bne	r2,zero,8ffc8 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   8ff7c:	e0bffb17 	ldw	r2,-20(fp)
   8ff80:	10c00417 	ldw	r3,16(r2)
   8ff84:	e0bffb17 	ldw	r2,-20(fp)
   8ff88:	10800117 	ldw	r2,4(r2)
   8ff8c:	1880041e 	bne	r3,r2,8ffa0 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   8ff90:	e0bffb17 	ldw	r2,-20(fp)
   8ff94:	10c00217 	ldw	r3,8(r2)
   8ff98:	e0bffb17 	ldw	r2,-20(fp)
   8ff9c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   8ffa0:	e0bffb17 	ldw	r2,-20(fp)
   8ffa4:	10800417 	ldw	r2,16(r2)
   8ffa8:	10ffff04 	addi	r3,r2,-4
   8ffac:	e0bffb17 	ldw	r2,-20(fp)
   8ffb0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   8ffb4:	e0bffb17 	ldw	r2,-20(fp)
   8ffb8:	10c00417 	ldw	r3,16(r2)
   8ffbc:	e0bffd17 	ldw	r2,-12(fp)
   8ffc0:	18800015 	stw	r2,0(r3)
   8ffc4:	00001006 	br	90008 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   8ffc8:	e0bffb17 	ldw	r2,-20(fp)
   8ffcc:	10c00317 	ldw	r3,12(r2)
   8ffd0:	e0bffd17 	ldw	r2,-12(fp)
   8ffd4:	18800015 	stw	r2,0(r3)
   8ffd8:	18c00104 	addi	r3,r3,4
   8ffdc:	e0bffb17 	ldw	r2,-20(fp)
   8ffe0:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   8ffe4:	e0bffb17 	ldw	r2,-20(fp)
   8ffe8:	10c00317 	ldw	r3,12(r2)
   8ffec:	e0bffb17 	ldw	r2,-20(fp)
   8fff0:	10800217 	ldw	r2,8(r2)
   8fff4:	1880041e 	bne	r3,r2,90008 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
   8fff8:	e0bffb17 	ldw	r2,-20(fp)
   8fffc:	10c00117 	ldw	r3,4(r2)
   90000:	e0bffb17 	ldw	r2,-20(fp)
   90004:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   90008:	e0bffb17 	ldw	r2,-20(fp)
   9000c:	1080058b 	ldhu	r2,22(r2)
   90010:	10800044 	addi	r2,r2,1
   90014:	1007883a 	mov	r3,r2
   90018:	e0bffb17 	ldw	r2,-20(fp)
   9001c:	10c0058d 	sth	r3,22(r2)
   90020:	e0bffa17 	ldw	r2,-24(fp)
   90024:	e0bff615 	stw	r2,-40(fp)
   90028:	e0bff617 	ldw	r2,-40(fp)
   9002c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   90030:	e03fff15 	stw	zero,-4(fp)
   90034:	e0bfff17 	ldw	r2,-4(fp)
}
   90038:	e037883a 	mov	sp,fp
   9003c:	dfc00117 	ldw	ra,4(sp)
   90040:	df000017 	ldw	fp,0(sp)
   90044:	dec00204 	addi	sp,sp,8
   90048:	f800283a 	ret

0009004c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   9004c:	defff504 	addi	sp,sp,-44
   90050:	df000a15 	stw	fp,40(sp)
   90054:	df000a04 	addi	fp,sp,40
   90058:	e13ffd15 	stw	r4,-12(fp)
   9005c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   90060:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   90064:	e0bffd17 	ldw	r2,-12(fp)
   90068:	1004c03a 	cmpne	r2,r2,zero
   9006c:	1000031e 	bne	r2,zero,9007c <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   90070:	00800104 	movi	r2,4
   90074:	e0bfff15 	stw	r2,-4(fp)
   90078:	00004f06 	br	901b8 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   9007c:	e0bffe17 	ldw	r2,-8(fp)
   90080:	1004c03a 	cmpne	r2,r2,zero
   90084:	1000031e 	bne	r2,zero,90094 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   90088:	00800244 	movi	r2,9
   9008c:	e0bfff15 	stw	r2,-4(fp)
   90090:	00004906 	br	901b8 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   90094:	e0bffd17 	ldw	r2,-12(fp)
   90098:	10800003 	ldbu	r2,0(r2)
   9009c:	10803fcc 	andi	r2,r2,255
   900a0:	108000a0 	cmpeqi	r2,r2,2
   900a4:	1000031e 	bne	r2,zero,900b4 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   900a8:	00800044 	movi	r2,1
   900ac:	e0bfff15 	stw	r2,-4(fp)
   900b0:	00004106 	br	901b8 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   900b4:	0005303a 	rdctl	r2,status
   900b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   900bc:	e0fff717 	ldw	r3,-36(fp)
   900c0:	00bfff84 	movi	r2,-2
   900c4:	1884703a 	and	r2,r3,r2
   900c8:	1001703a 	wrctl	status,r2
  
  return context;
   900cc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   900d0:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   900d4:	e0bffd17 	ldw	r2,-12(fp)
   900d8:	10c00283 	ldbu	r3,10(r2)
   900dc:	e0bffe17 	ldw	r2,-8(fp)
   900e0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   900e4:	e0bffd17 	ldw	r2,-12(fp)
   900e8:	108002c4 	addi	r2,r2,11
   900ec:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   900f0:	e0bffe17 	ldw	r2,-8(fp)
   900f4:	10800204 	addi	r2,r2,8
   900f8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   900fc:	e03ffb05 	stb	zero,-20(fp)
   90100:	00000d06 	br	90138 <OSQQuery+0xec>
        *pdest++ = *psrc++;
   90104:	e0bffa17 	ldw	r2,-24(fp)
   90108:	10c00003 	ldbu	r3,0(r2)
   9010c:	e0bff917 	ldw	r2,-28(fp)
   90110:	10c00005 	stb	r3,0(r2)
   90114:	e0bff917 	ldw	r2,-28(fp)
   90118:	10800044 	addi	r2,r2,1
   9011c:	e0bff915 	stw	r2,-28(fp)
   90120:	e0bffa17 	ldw	r2,-24(fp)
   90124:	10800044 	addi	r2,r2,1
   90128:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   9012c:	e0bffb03 	ldbu	r2,-20(fp)
   90130:	10800044 	addi	r2,r2,1
   90134:	e0bffb05 	stb	r2,-20(fp)
   90138:	e0bffb03 	ldbu	r2,-20(fp)
   9013c:	108000f0 	cmpltui	r2,r2,3
   90140:	103ff01e 	bne	r2,zero,90104 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   90144:	e0bffd17 	ldw	r2,-12(fp)
   90148:	10800117 	ldw	r2,4(r2)
   9014c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   90150:	e0bffc17 	ldw	r2,-16(fp)
   90154:	1080058b 	ldhu	r2,22(r2)
   90158:	10bfffcc 	andi	r2,r2,65535
   9015c:	1005003a 	cmpeq	r2,r2,zero
   90160:	1000061e 	bne	r2,zero,9017c <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   90164:	e0bffc17 	ldw	r2,-16(fp)
   90168:	10800417 	ldw	r2,16(r2)
   9016c:	10c00017 	ldw	r3,0(r2)
   90170:	e0bffe17 	ldw	r2,-8(fp)
   90174:	10c00015 	stw	r3,0(r2)
   90178:	00000206 	br	90184 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
   9017c:	e0bffe17 	ldw	r2,-8(fp)
   90180:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   90184:	e0bffc17 	ldw	r2,-16(fp)
   90188:	10c0058b 	ldhu	r3,22(r2)
   9018c:	e0bffe17 	ldw	r2,-8(fp)
   90190:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   90194:	e0bffc17 	ldw	r2,-16(fp)
   90198:	10c0050b 	ldhu	r3,20(r2)
   9019c:	e0bffe17 	ldw	r2,-8(fp)
   901a0:	10c0018d 	sth	r3,6(r2)
   901a4:	e0bff817 	ldw	r2,-32(fp)
   901a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   901ac:	e0bff617 	ldw	r2,-40(fp)
   901b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   901b4:	e03fff15 	stw	zero,-4(fp)
   901b8:	e0bfff17 	ldw	r2,-4(fp)
}
   901bc:	e037883a 	mov	sp,fp
   901c0:	df000017 	ldw	fp,0(sp)
   901c4:	dec00104 	addi	sp,sp,4
   901c8:	f800283a 	ret

000901cc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   901cc:	defffb04 	addi	sp,sp,-20
   901d0:	dfc00415 	stw	ra,16(sp)
   901d4:	df000315 	stw	fp,12(sp)
   901d8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   901dc:	010002b4 	movhi	r4,10
   901e0:	21320704 	addi	r4,r4,-14308
   901e4:	01407804 	movi	r5,480
   901e8:	008c4c80 	call	8c4c8 <OS_MemClr>
    pq1 = &OSQTbl[0];
   901ec:	008002b4 	movhi	r2,10
   901f0:	10b20704 	addi	r2,r2,-14308
   901f4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   901f8:	008002b4 	movhi	r2,10
   901fc:	10b20d04 	addi	r2,r2,-14284
   90200:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   90204:	e03fff0d 	sth	zero,-4(fp)
   90208:	00000c06 	br	9023c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   9020c:	e0fffe17 	ldw	r3,-8(fp)
   90210:	e0bffd17 	ldw	r2,-12(fp)
   90214:	18800015 	stw	r2,0(r3)
        pq1++;
   90218:	e0bffe17 	ldw	r2,-8(fp)
   9021c:	10800604 	addi	r2,r2,24
   90220:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   90224:	e0bffd17 	ldw	r2,-12(fp)
   90228:	10800604 	addi	r2,r2,24
   9022c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   90230:	e0bfff0b 	ldhu	r2,-4(fp)
   90234:	10800044 	addi	r2,r2,1
   90238:	e0bfff0d 	sth	r2,-4(fp)
   9023c:	e0bfff0b 	ldhu	r2,-4(fp)
   90240:	108004f0 	cmpltui	r2,r2,19
   90244:	103ff11e 	bne	r2,zero,9020c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   90248:	e0bffe17 	ldw	r2,-8(fp)
   9024c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   90250:	00c002b4 	movhi	r3,10
   90254:	18e40904 	addi	r3,r3,-28636
   90258:	008002b4 	movhi	r2,10
   9025c:	10b20704 	addi	r2,r2,-14308
   90260:	18800015 	stw	r2,0(r3)
#endif
}
   90264:	e037883a 	mov	sp,fp
   90268:	dfc00117 	ldw	ra,4(sp)
   9026c:	df000017 	ldw	fp,0(sp)
   90270:	dec00204 	addi	sp,sp,8
   90274:	f800283a 	ret

00090278 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   90278:	defff904 	addi	sp,sp,-28
   9027c:	df000615 	stw	fp,24(sp)
   90280:	df000604 	addi	fp,sp,24
   90284:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   90288:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9028c:	e0bffe17 	ldw	r2,-8(fp)
   90290:	1004c03a 	cmpne	r2,r2,zero
   90294:	1000021e 	bne	r2,zero,902a0 <OSSemAccept+0x28>
        return (0);
   90298:	e03fff15 	stw	zero,-4(fp)
   9029c:	00002106 	br	90324 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   902a0:	e0bffe17 	ldw	r2,-8(fp)
   902a4:	10800003 	ldbu	r2,0(r2)
   902a8:	10803fcc 	andi	r2,r2,255
   902ac:	108000e0 	cmpeqi	r2,r2,3
   902b0:	1000021e 	bne	r2,zero,902bc <OSSemAccept+0x44>
        return (0);
   902b4:	e03fff15 	stw	zero,-4(fp)
   902b8:	00001a06 	br	90324 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   902bc:	0005303a 	rdctl	r2,status
   902c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   902c4:	e0fffb17 	ldw	r3,-20(fp)
   902c8:	00bfff84 	movi	r2,-2
   902cc:	1884703a 	and	r2,r3,r2
   902d0:	1001703a 	wrctl	status,r2
  
  return context;
   902d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   902d8:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
   902dc:	e0bffe17 	ldw	r2,-8(fp)
   902e0:	1080020b 	ldhu	r2,8(r2)
   902e4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   902e8:	e0bffd0b 	ldhu	r2,-12(fp)
   902ec:	1005003a 	cmpeq	r2,r2,zero
   902f0:	1000061e 	bne	r2,zero,9030c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   902f4:	e0bffe17 	ldw	r2,-8(fp)
   902f8:	1080020b 	ldhu	r2,8(r2)
   902fc:	10bfffc4 	addi	r2,r2,-1
   90300:	1007883a 	mov	r3,r2
   90304:	e0bffe17 	ldw	r2,-8(fp)
   90308:	10c0020d 	sth	r3,8(r2)
   9030c:	e0bffc17 	ldw	r2,-16(fp)
   90310:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90314:	e0bffa17 	ldw	r2,-24(fp)
   90318:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   9031c:	e0bffd0b 	ldhu	r2,-12(fp)
   90320:	e0bfff15 	stw	r2,-4(fp)
   90324:	e0bfff17 	ldw	r2,-4(fp)
}
   90328:	e037883a 	mov	sp,fp
   9032c:	df000017 	ldw	fp,0(sp)
   90330:	dec00104 	addi	sp,sp,4
   90334:	f800283a 	ret

00090338 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   90338:	defff804 	addi	sp,sp,-32
   9033c:	dfc00715 	stw	ra,28(sp)
   90340:	df000615 	stw	fp,24(sp)
   90344:	df000604 	addi	fp,sp,24
   90348:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   9034c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   90350:	008002b4 	movhi	r2,10
   90354:	10a40c04 	addi	r2,r2,-28624
   90358:	10800003 	ldbu	r2,0(r2)
   9035c:	10803fcc 	andi	r2,r2,255
   90360:	1005003a 	cmpeq	r2,r2,zero
   90364:	1000021e 	bne	r2,zero,90370 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   90368:	e03fff15 	stw	zero,-4(fp)
   9036c:	00003106 	br	90434 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90370:	0005303a 	rdctl	r2,status
   90374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90378:	e0fffb17 	ldw	r3,-20(fp)
   9037c:	00bfff84 	movi	r2,-2
   90380:	1884703a 	and	r2,r3,r2
   90384:	1001703a 	wrctl	status,r2
  
  return context;
   90388:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   9038c:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   90390:	008002b4 	movhi	r2,10
   90394:	10a40b04 	addi	r2,r2,-28628
   90398:	10800017 	ldw	r2,0(r2)
   9039c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   903a0:	008002b4 	movhi	r2,10
   903a4:	10a40b04 	addi	r2,r2,-28628
   903a8:	10800017 	ldw	r2,0(r2)
   903ac:	1005003a 	cmpeq	r2,r2,zero
   903b0:	1000081e 	bne	r2,zero,903d4 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   903b4:	008002b4 	movhi	r2,10
   903b8:	10a40b04 	addi	r2,r2,-28628
   903bc:	10800017 	ldw	r2,0(r2)
   903c0:	10800117 	ldw	r2,4(r2)
   903c4:	1007883a 	mov	r3,r2
   903c8:	008002b4 	movhi	r2,10
   903cc:	10a40b04 	addi	r2,r2,-28628
   903d0:	10c00015 	stw	r3,0(r2)
   903d4:	e0bffc17 	ldw	r2,-16(fp)
   903d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   903dc:	e0bffa17 	ldw	r2,-24(fp)
   903e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   903e4:	e0bffd17 	ldw	r2,-12(fp)
   903e8:	1005003a 	cmpeq	r2,r2,zero
   903ec:	10000f1e 	bne	r2,zero,9042c <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   903f0:	e0fffd17 	ldw	r3,-12(fp)
   903f4:	008000c4 	movi	r2,3
   903f8:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   903fc:	e0fffd17 	ldw	r3,-12(fp)
   90400:	e0bffe0b 	ldhu	r2,-8(fp)
   90404:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   90408:	e0bffd17 	ldw	r2,-12(fp)
   9040c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   90410:	e0fffd17 	ldw	r3,-12(fp)
   90414:	00800fc4 	movi	r2,63
   90418:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   9041c:	e0bffd17 	ldw	r2,-12(fp)
   90420:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   90424:	e13ffd17 	ldw	r4,-12(fp)
   90428:	008c0fc0 	call	8c0fc <OS_EventWaitListInit>
    }
    return (pevent);
   9042c:	e0bffd17 	ldw	r2,-12(fp)
   90430:	e0bfff15 	stw	r2,-4(fp)
   90434:	e0bfff17 	ldw	r2,-4(fp)
}
   90438:	e037883a 	mov	sp,fp
   9043c:	dfc00117 	ldw	ra,4(sp)
   90440:	df000017 	ldw	fp,0(sp)
   90444:	dec00204 	addi	sp,sp,8
   90448:	f800283a 	ret

0009044c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   9044c:	defff104 	addi	sp,sp,-60
   90450:	dfc00e15 	stw	ra,56(sp)
   90454:	df000d15 	stw	fp,52(sp)
   90458:	df000d04 	addi	fp,sp,52
   9045c:	e13ffb15 	stw	r4,-20(fp)
   90460:	e1bffd15 	stw	r6,-12(fp)
   90464:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   90468:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   9046c:	e0bffd17 	ldw	r2,-12(fp)
   90470:	1004c03a 	cmpne	r2,r2,zero
   90474:	1000031e 	bne	r2,zero,90484 <OSSemDel+0x38>
        return (pevent);
   90478:	e0bffb17 	ldw	r2,-20(fp)
   9047c:	e0bfff15 	stw	r2,-4(fp)
   90480:	00009406 	br	906d4 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   90484:	e0bffb17 	ldw	r2,-20(fp)
   90488:	1004c03a 	cmpne	r2,r2,zero
   9048c:	1000061e 	bne	r2,zero,904a8 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   90490:	e0fffd17 	ldw	r3,-12(fp)
   90494:	00800104 	movi	r2,4
   90498:	18800005 	stb	r2,0(r3)
        return (pevent);
   9049c:	e0fffb17 	ldw	r3,-20(fp)
   904a0:	e0ffff15 	stw	r3,-4(fp)
   904a4:	00008b06 	br	906d4 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   904a8:	e0bffb17 	ldw	r2,-20(fp)
   904ac:	10800003 	ldbu	r2,0(r2)
   904b0:	10803fcc 	andi	r2,r2,255
   904b4:	108000e0 	cmpeqi	r2,r2,3
   904b8:	1000061e 	bne	r2,zero,904d4 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   904bc:	e0fffd17 	ldw	r3,-12(fp)
   904c0:	00800044 	movi	r2,1
   904c4:	18800005 	stb	r2,0(r3)
        return (pevent);
   904c8:	e0bffb17 	ldw	r2,-20(fp)
   904cc:	e0bfff15 	stw	r2,-4(fp)
   904d0:	00008006 	br	906d4 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   904d4:	008002b4 	movhi	r2,10
   904d8:	10a40c04 	addi	r2,r2,-28624
   904dc:	10800003 	ldbu	r2,0(r2)
   904e0:	10803fcc 	andi	r2,r2,255
   904e4:	1005003a 	cmpeq	r2,r2,zero
   904e8:	1000061e 	bne	r2,zero,90504 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   904ec:	e0fffd17 	ldw	r3,-12(fp)
   904f0:	008003c4 	movi	r2,15
   904f4:	18800005 	stb	r2,0(r3)
        return (pevent);
   904f8:	e0fffb17 	ldw	r3,-20(fp)
   904fc:	e0ffff15 	stw	r3,-4(fp)
   90500:	00007406 	br	906d4 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90504:	0005303a 	rdctl	r2,status
   90508:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9050c:	e0fff717 	ldw	r3,-36(fp)
   90510:	00bfff84 	movi	r2,-2
   90514:	1884703a 	and	r2,r3,r2
   90518:	1001703a 	wrctl	status,r2
  
  return context;
   9051c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   90520:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   90524:	e0bffb17 	ldw	r2,-20(fp)
   90528:	10800283 	ldbu	r2,10(r2)
   9052c:	10803fcc 	andi	r2,r2,255
   90530:	1005003a 	cmpeq	r2,r2,zero
   90534:	1000031e 	bne	r2,zero,90544 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   90538:	00800044 	movi	r2,1
   9053c:	e0bffa05 	stb	r2,-24(fp)
   90540:	00000106 	br	90548 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   90544:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   90548:	e0bffc03 	ldbu	r2,-16(fp)
   9054c:	e0bffe15 	stw	r2,-8(fp)
   90550:	e0fffe17 	ldw	r3,-8(fp)
   90554:	1805003a 	cmpeq	r2,r3,zero
   90558:	1000041e 	bne	r2,zero,9056c <OSSemDel+0x120>
   9055c:	e0fffe17 	ldw	r3,-8(fp)
   90560:	18800060 	cmpeqi	r2,r3,1
   90564:	10002d1e 	bne	r2,zero,9061c <OSSemDel+0x1d0>
   90568:	00004f06 	br	906a8 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   9056c:	e0bffa03 	ldbu	r2,-24(fp)
   90570:	1004c03a 	cmpne	r2,r2,zero
   90574:	10001a1e 	bne	r2,zero,905e0 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   90578:	e0fffb17 	ldw	r3,-20(fp)
   9057c:	00800fc4 	movi	r2,63
   90580:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   90584:	e0bffb17 	ldw	r2,-20(fp)
   90588:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   9058c:	e0bffb17 	ldw	r2,-20(fp)
   90590:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   90594:	008002b4 	movhi	r2,10
   90598:	10a40b04 	addi	r2,r2,-28628
   9059c:	10c00017 	ldw	r3,0(r2)
   905a0:	e0bffb17 	ldw	r2,-20(fp)
   905a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   905a8:	e0bffb17 	ldw	r2,-20(fp)
   905ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   905b0:	00c002b4 	movhi	r3,10
   905b4:	18e40b04 	addi	r3,r3,-28628
   905b8:	e0bffb17 	ldw	r2,-20(fp)
   905bc:	18800015 	stw	r2,0(r3)
   905c0:	e0bff817 	ldw	r2,-32(fp)
   905c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   905c8:	e0bff617 	ldw	r2,-40(fp)
   905cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   905d0:	e0bffd17 	ldw	r2,-12(fp)
   905d4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   905d8:	e03ff915 	stw	zero,-28(fp)
   905dc:	00003b06 	br	906cc <OSSemDel+0x280>
   905e0:	e0bff817 	ldw	r2,-32(fp)
   905e4:	e0bff515 	stw	r2,-44(fp)
   905e8:	e0bff517 	ldw	r2,-44(fp)
   905ec:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   905f0:	e0fffd17 	ldw	r3,-12(fp)
   905f4:	00801244 	movi	r2,73
   905f8:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   905fc:	e0bffb17 	ldw	r2,-20(fp)
   90600:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   90604:	00003106 	br	906cc <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   90608:	e13ffb17 	ldw	r4,-20(fp)
   9060c:	000b883a 	mov	r5,zero
   90610:	01800044 	movi	r6,1
   90614:	000f883a 	mov	r7,zero
   90618:	008bb480 	call	8bb48 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   9061c:	e0bffb17 	ldw	r2,-20(fp)
   90620:	10800283 	ldbu	r2,10(r2)
   90624:	10803fcc 	andi	r2,r2,255
   90628:	1004c03a 	cmpne	r2,r2,zero
   9062c:	103ff61e 	bne	r2,zero,90608 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   90630:	e0fffb17 	ldw	r3,-20(fp)
   90634:	00800fc4 	movi	r2,63
   90638:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   9063c:	e0bffb17 	ldw	r2,-20(fp)
   90640:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   90644:	e0bffb17 	ldw	r2,-20(fp)
   90648:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   9064c:	008002b4 	movhi	r2,10
   90650:	10a40b04 	addi	r2,r2,-28628
   90654:	10c00017 	ldw	r3,0(r2)
   90658:	e0bffb17 	ldw	r2,-20(fp)
   9065c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   90660:	e0bffb17 	ldw	r2,-20(fp)
   90664:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   90668:	00c002b4 	movhi	r3,10
   9066c:	18e40b04 	addi	r3,r3,-28628
   90670:	e0bffb17 	ldw	r2,-20(fp)
   90674:	18800015 	stw	r2,0(r3)
   90678:	e0bff817 	ldw	r2,-32(fp)
   9067c:	e0bff415 	stw	r2,-48(fp)
   90680:	e0bff417 	ldw	r2,-48(fp)
   90684:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   90688:	e0bffa03 	ldbu	r2,-24(fp)
   9068c:	10800058 	cmpnei	r2,r2,1
   90690:	1000011e 	bne	r2,zero,90698 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   90694:	008c5880 	call	8c588 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   90698:	e0bffd17 	ldw	r2,-12(fp)
   9069c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   906a0:	e03ff915 	stw	zero,-28(fp)
             break;
   906a4:	00000906 	br	906cc <OSSemDel+0x280>
   906a8:	e0bff817 	ldw	r2,-32(fp)
   906ac:	e0bff315 	stw	r2,-52(fp)
   906b0:	e0bff317 	ldw	r2,-52(fp)
   906b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   906b8:	e0fffd17 	ldw	r3,-12(fp)
   906bc:	008001c4 	movi	r2,7
   906c0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   906c4:	e0bffb17 	ldw	r2,-20(fp)
   906c8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   906cc:	e0bff917 	ldw	r2,-28(fp)
   906d0:	e0bfff15 	stw	r2,-4(fp)
   906d4:	e0bfff17 	ldw	r2,-4(fp)
}
   906d8:	e037883a 	mov	sp,fp
   906dc:	dfc00117 	ldw	ra,4(sp)
   906e0:	df000017 	ldw	fp,0(sp)
   906e4:	dec00204 	addi	sp,sp,8
   906e8:	f800283a 	ret

000906ec <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   906ec:	defff404 	addi	sp,sp,-48
   906f0:	dfc00b15 	stw	ra,44(sp)
   906f4:	df000a15 	stw	fp,40(sp)
   906f8:	df000a04 	addi	fp,sp,40
   906fc:	e13ffc15 	stw	r4,-16(fp)
   90700:	e1bffe15 	stw	r6,-8(fp)
   90704:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   90708:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9070c:	e0bffe17 	ldw	r2,-8(fp)
   90710:	1005003a 	cmpeq	r2,r2,zero
   90714:	10008f1e 	bne	r2,zero,90954 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   90718:	e0bffc17 	ldw	r2,-16(fp)
   9071c:	1004c03a 	cmpne	r2,r2,zero
   90720:	1000041e 	bne	r2,zero,90734 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   90724:	e0fffe17 	ldw	r3,-8(fp)
   90728:	00800104 	movi	r2,4
   9072c:	18800005 	stb	r2,0(r3)
        return;
   90730:	00008806 	br	90954 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   90734:	e0bffc17 	ldw	r2,-16(fp)
   90738:	10800003 	ldbu	r2,0(r2)
   9073c:	10803fcc 	andi	r2,r2,255
   90740:	108000e0 	cmpeqi	r2,r2,3
   90744:	1000041e 	bne	r2,zero,90758 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   90748:	e0fffe17 	ldw	r3,-8(fp)
   9074c:	00800044 	movi	r2,1
   90750:	18800005 	stb	r2,0(r3)
        return;
   90754:	00007f06 	br	90954 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   90758:	008002b4 	movhi	r2,10
   9075c:	10a40c04 	addi	r2,r2,-28624
   90760:	10800003 	ldbu	r2,0(r2)
   90764:	10803fcc 	andi	r2,r2,255
   90768:	1005003a 	cmpeq	r2,r2,zero
   9076c:	1000041e 	bne	r2,zero,90780 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   90770:	e0fffe17 	ldw	r3,-8(fp)
   90774:	00800084 	movi	r2,2
   90778:	18800005 	stb	r2,0(r3)
        return;
   9077c:	00007506 	br	90954 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   90780:	008002b4 	movhi	r2,10
   90784:	10a3fe04 	addi	r2,r2,-28680
   90788:	10800003 	ldbu	r2,0(r2)
   9078c:	10803fcc 	andi	r2,r2,255
   90790:	1005003a 	cmpeq	r2,r2,zero
   90794:	1000041e 	bne	r2,zero,907a8 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   90798:	e0fffe17 	ldw	r3,-8(fp)
   9079c:	00800344 	movi	r2,13
   907a0:	18800005 	stb	r2,0(r3)
        return;
   907a4:	00006b06 	br	90954 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   907a8:	0005303a 	rdctl	r2,status
   907ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   907b0:	e0fffa17 	ldw	r3,-24(fp)
   907b4:	00bfff84 	movi	r2,-2
   907b8:	1884703a 	and	r2,r3,r2
   907bc:	1001703a 	wrctl	status,r2
  
  return context;
   907c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   907c4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   907c8:	e0bffc17 	ldw	r2,-16(fp)
   907cc:	1080020b 	ldhu	r2,8(r2)
   907d0:	10bfffcc 	andi	r2,r2,65535
   907d4:	1005003a 	cmpeq	r2,r2,zero
   907d8:	10000d1e 	bne	r2,zero,90810 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   907dc:	e0bffc17 	ldw	r2,-16(fp)
   907e0:	1080020b 	ldhu	r2,8(r2)
   907e4:	10bfffc4 	addi	r2,r2,-1
   907e8:	1007883a 	mov	r3,r2
   907ec:	e0bffc17 	ldw	r2,-16(fp)
   907f0:	10c0020d 	sth	r3,8(r2)
   907f4:	e0bffb17 	ldw	r2,-20(fp)
   907f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   907fc:	e0bff917 	ldw	r2,-28(fp)
   90800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   90804:	e0bffe17 	ldw	r2,-8(fp)
   90808:	10000005 	stb	zero,0(r2)
        return;
   9080c:	00005106 	br	90954 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   90810:	008002b4 	movhi	r2,10
   90814:	10a40d04 	addi	r2,r2,-28620
   90818:	10c00017 	ldw	r3,0(r2)
   9081c:	008002b4 	movhi	r2,10
   90820:	10a40d04 	addi	r2,r2,-28620
   90824:	10800017 	ldw	r2,0(r2)
   90828:	10800c03 	ldbu	r2,48(r2)
   9082c:	10800054 	ori	r2,r2,1
   90830:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   90834:	008002b4 	movhi	r2,10
   90838:	10a40d04 	addi	r2,r2,-28620
   9083c:	10800017 	ldw	r2,0(r2)
   90840:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   90844:	008002b4 	movhi	r2,10
   90848:	10a40d04 	addi	r2,r2,-28620
   9084c:	10c00017 	ldw	r3,0(r2)
   90850:	e0bffd0b 	ldhu	r2,-12(fp)
   90854:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   90858:	e13ffc17 	ldw	r4,-16(fp)
   9085c:	008bcdc0 	call	8bcdc <OS_EventTaskWait>
   90860:	e0bffb17 	ldw	r2,-20(fp)
   90864:	e0bff815 	stw	r2,-32(fp)
   90868:	e0bff817 	ldw	r2,-32(fp)
   9086c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   90870:	008c5880 	call	8c588 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90874:	0005303a 	rdctl	r2,status
   90878:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9087c:	e0fff717 	ldw	r3,-36(fp)
   90880:	00bfff84 	movi	r2,-2
   90884:	1884703a 	and	r2,r3,r2
   90888:	1001703a 	wrctl	status,r2
  
  return context;
   9088c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   90890:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   90894:	008002b4 	movhi	r2,10
   90898:	10a40d04 	addi	r2,r2,-28620
   9089c:	10800017 	ldw	r2,0(r2)
   908a0:	10800c43 	ldbu	r2,49(r2)
   908a4:	10803fcc 	andi	r2,r2,255
   908a8:	e0bfff15 	stw	r2,-4(fp)
   908ac:	e0ffff17 	ldw	r3,-4(fp)
   908b0:	1805003a 	cmpeq	r2,r3,zero
   908b4:	1000041e 	bne	r2,zero,908c8 <OSSemPend+0x1dc>
   908b8:	e0ffff17 	ldw	r3,-4(fp)
   908bc:	188000a0 	cmpeqi	r2,r3,2
   908c0:	1000041e 	bne	r2,zero,908d4 <OSSemPend+0x1e8>
   908c4:	00000706 	br	908e4 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   908c8:	e0bffe17 	ldw	r2,-8(fp)
   908cc:	10000005 	stb	zero,0(r2)
             break;
   908d0:	00000c06 	br	90904 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   908d4:	e0fffe17 	ldw	r3,-8(fp)
   908d8:	00800384 	movi	r2,14
   908dc:	18800005 	stb	r2,0(r3)
             break;
   908e0:	00000806 	br	90904 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   908e4:	008002b4 	movhi	r2,10
   908e8:	10a40d04 	addi	r2,r2,-28620
   908ec:	11000017 	ldw	r4,0(r2)
   908f0:	e17ffc17 	ldw	r5,-16(fp)
   908f4:	008bf400 	call	8bf40 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   908f8:	e0fffe17 	ldw	r3,-8(fp)
   908fc:	00800284 	movi	r2,10
   90900:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   90904:	008002b4 	movhi	r2,10
   90908:	10a40d04 	addi	r2,r2,-28620
   9090c:	10800017 	ldw	r2,0(r2)
   90910:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   90914:	008002b4 	movhi	r2,10
   90918:	10a40d04 	addi	r2,r2,-28620
   9091c:	10800017 	ldw	r2,0(r2)
   90920:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   90924:	008002b4 	movhi	r2,10
   90928:	10a40d04 	addi	r2,r2,-28620
   9092c:	10800017 	ldw	r2,0(r2)
   90930:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   90934:	008002b4 	movhi	r2,10
   90938:	10a40d04 	addi	r2,r2,-28620
   9093c:	10800017 	ldw	r2,0(r2)
   90940:	10000815 	stw	zero,32(r2)
   90944:	e0bffb17 	ldw	r2,-20(fp)
   90948:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9094c:	e0bff617 	ldw	r2,-40(fp)
   90950:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   90954:	e037883a 	mov	sp,fp
   90958:	dfc00117 	ldw	ra,4(sp)
   9095c:	df000017 	ldw	fp,0(sp)
   90960:	dec00204 	addi	sp,sp,8
   90964:	f800283a 	ret

00090968 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   90968:	defff504 	addi	sp,sp,-44
   9096c:	dfc00a15 	stw	ra,40(sp)
   90970:	df000915 	stw	fp,36(sp)
   90974:	df000904 	addi	fp,sp,36
   90978:	e13ffc15 	stw	r4,-16(fp)
   9097c:	e1bffe15 	stw	r6,-8(fp)
   90980:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   90984:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   90988:	e0bffe17 	ldw	r2,-8(fp)
   9098c:	1004c03a 	cmpne	r2,r2,zero
   90990:	1000021e 	bne	r2,zero,9099c <OSSemPendAbort+0x34>
        return (0);
   90994:	e03fff15 	stw	zero,-4(fp)
   90998:	00004c06 	br	90acc <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9099c:	e0bffc17 	ldw	r2,-16(fp)
   909a0:	1004c03a 	cmpne	r2,r2,zero
   909a4:	1000051e 	bne	r2,zero,909bc <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   909a8:	e0fffe17 	ldw	r3,-8(fp)
   909ac:	00800104 	movi	r2,4
   909b0:	18800005 	stb	r2,0(r3)
        return (0);
   909b4:	e03fff15 	stw	zero,-4(fp)
   909b8:	00004406 	br	90acc <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   909bc:	e0bffc17 	ldw	r2,-16(fp)
   909c0:	10800003 	ldbu	r2,0(r2)
   909c4:	10803fcc 	andi	r2,r2,255
   909c8:	108000e0 	cmpeqi	r2,r2,3
   909cc:	1000051e 	bne	r2,zero,909e4 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   909d0:	e0fffe17 	ldw	r3,-8(fp)
   909d4:	00800044 	movi	r2,1
   909d8:	18800005 	stb	r2,0(r3)
        return (0);
   909dc:	e03fff15 	stw	zero,-4(fp)
   909e0:	00003a06 	br	90acc <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   909e4:	0005303a 	rdctl	r2,status
   909e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   909ec:	e0fff917 	ldw	r3,-28(fp)
   909f0:	00bfff84 	movi	r2,-2
   909f4:	1884703a 	and	r2,r3,r2
   909f8:	1001703a 	wrctl	status,r2
  
  return context;
   909fc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   90a00:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   90a04:	e0bffc17 	ldw	r2,-16(fp)
   90a08:	10800283 	ldbu	r2,10(r2)
   90a0c:	10803fcc 	andi	r2,r2,255
   90a10:	1005003a 	cmpeq	r2,r2,zero
   90a14:	1000261e 	bne	r2,zero,90ab0 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
   90a18:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   90a1c:	e0bffd03 	ldbu	r2,-12(fp)
   90a20:	10800060 	cmpeqi	r2,r2,1
   90a24:	1000091e 	bne	r2,zero,90a4c <OSSemPendAbort+0xe4>
   90a28:	00000e06 	br	90a64 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   90a2c:	e13ffc17 	ldw	r4,-16(fp)
   90a30:	000b883a 	mov	r5,zero
   90a34:	01800044 	movi	r6,1
   90a38:	01c00084 	movi	r7,2
   90a3c:	008bb480 	call	8bb48 <OS_EventTaskRdy>
                     nbr_tasks++;
   90a40:	e0bffb03 	ldbu	r2,-20(fp)
   90a44:	10800044 	addi	r2,r2,1
   90a48:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   90a4c:	e0bffc17 	ldw	r2,-16(fp)
   90a50:	10800283 	ldbu	r2,10(r2)
   90a54:	10803fcc 	andi	r2,r2,255
   90a58:	1004c03a 	cmpne	r2,r2,zero
   90a5c:	103ff31e 	bne	r2,zero,90a2c <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   90a60:	00000806 	br	90a84 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   90a64:	e13ffc17 	ldw	r4,-16(fp)
   90a68:	000b883a 	mov	r5,zero
   90a6c:	01800044 	movi	r6,1
   90a70:	01c00084 	movi	r7,2
   90a74:	008bb480 	call	8bb48 <OS_EventTaskRdy>
                 nbr_tasks++;
   90a78:	e0bffb03 	ldbu	r2,-20(fp)
   90a7c:	10800044 	addi	r2,r2,1
   90a80:	e0bffb05 	stb	r2,-20(fp)
   90a84:	e0bffa17 	ldw	r2,-24(fp)
   90a88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90a8c:	e0bff817 	ldw	r2,-32(fp)
   90a90:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   90a94:	008c5880 	call	8c588 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   90a98:	e0fffe17 	ldw	r3,-8(fp)
   90a9c:	00800384 	movi	r2,14
   90aa0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   90aa4:	e0bffb03 	ldbu	r2,-20(fp)
   90aa8:	e0bfff15 	stw	r2,-4(fp)
   90aac:	00000706 	br	90acc <OSSemPendAbort+0x164>
   90ab0:	e0bffa17 	ldw	r2,-24(fp)
   90ab4:	e0bff715 	stw	r2,-36(fp)
   90ab8:	e0bff717 	ldw	r2,-36(fp)
   90abc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   90ac0:	e0bffe17 	ldw	r2,-8(fp)
   90ac4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   90ac8:	e03fff15 	stw	zero,-4(fp)
   90acc:	e0bfff17 	ldw	r2,-4(fp)
}
   90ad0:	e037883a 	mov	sp,fp
   90ad4:	dfc00117 	ldw	ra,4(sp)
   90ad8:	df000017 	ldw	fp,0(sp)
   90adc:	dec00204 	addi	sp,sp,8
   90ae0:	f800283a 	ret

00090ae4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   90ae4:	defff704 	addi	sp,sp,-36
   90ae8:	dfc00815 	stw	ra,32(sp)
   90aec:	df000715 	stw	fp,28(sp)
   90af0:	df000704 	addi	fp,sp,28
   90af4:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   90af8:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   90afc:	e0bffe17 	ldw	r2,-8(fp)
   90b00:	1004c03a 	cmpne	r2,r2,zero
   90b04:	1000031e 	bne	r2,zero,90b14 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
   90b08:	00800104 	movi	r2,4
   90b0c:	e0bfff15 	stw	r2,-4(fp)
   90b10:	00003806 	br	90bf4 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   90b14:	e0bffe17 	ldw	r2,-8(fp)
   90b18:	10800003 	ldbu	r2,0(r2)
   90b1c:	10803fcc 	andi	r2,r2,255
   90b20:	108000e0 	cmpeqi	r2,r2,3
   90b24:	1000031e 	bne	r2,zero,90b34 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
   90b28:	00800044 	movi	r2,1
   90b2c:	e0bfff15 	stw	r2,-4(fp)
   90b30:	00003006 	br	90bf4 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90b34:	0005303a 	rdctl	r2,status
   90b38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90b3c:	e0fffc17 	ldw	r3,-16(fp)
   90b40:	00bfff84 	movi	r2,-2
   90b44:	1884703a 	and	r2,r3,r2
   90b48:	1001703a 	wrctl	status,r2
  
  return context;
   90b4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   90b50:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   90b54:	e0bffe17 	ldw	r2,-8(fp)
   90b58:	10800283 	ldbu	r2,10(r2)
   90b5c:	10803fcc 	andi	r2,r2,255
   90b60:	1005003a 	cmpeq	r2,r2,zero
   90b64:	10000c1e 	bne	r2,zero,90b98 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   90b68:	e13ffe17 	ldw	r4,-8(fp)
   90b6c:	000b883a 	mov	r5,zero
   90b70:	01800044 	movi	r6,1
   90b74:	000f883a 	mov	r7,zero
   90b78:	008bb480 	call	8bb48 <OS_EventTaskRdy>
   90b7c:	e0bffd17 	ldw	r2,-12(fp)
   90b80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90b84:	e0bffb17 	ldw	r2,-20(fp)
   90b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   90b8c:	008c5880 	call	8c588 <OS_Sched>
        return (OS_ERR_NONE);
   90b90:	e03fff15 	stw	zero,-4(fp)
   90b94:	00001706 	br	90bf4 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   90b98:	e0bffe17 	ldw	r2,-8(fp)
   90b9c:	1080020b 	ldhu	r2,8(r2)
   90ba0:	10ffffcc 	andi	r3,r2,65535
   90ba4:	00bfffd4 	movui	r2,65535
   90ba8:	18800c26 	beq	r3,r2,90bdc <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   90bac:	e0bffe17 	ldw	r2,-8(fp)
   90bb0:	1080020b 	ldhu	r2,8(r2)
   90bb4:	10800044 	addi	r2,r2,1
   90bb8:	1007883a 	mov	r3,r2
   90bbc:	e0bffe17 	ldw	r2,-8(fp)
   90bc0:	10c0020d 	sth	r3,8(r2)
   90bc4:	e0bffd17 	ldw	r2,-12(fp)
   90bc8:	e0bffa15 	stw	r2,-24(fp)
   90bcc:	e0bffa17 	ldw	r2,-24(fp)
   90bd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   90bd4:	e03fff15 	stw	zero,-4(fp)
   90bd8:	00000606 	br	90bf4 <OSSemPost+0x110>
   90bdc:	e0bffd17 	ldw	r2,-12(fp)
   90be0:	e0bff915 	stw	r2,-28(fp)
   90be4:	e0bff917 	ldw	r2,-28(fp)
   90be8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   90bec:	00800c84 	movi	r2,50
   90bf0:	e0bfff15 	stw	r2,-4(fp)
   90bf4:	e0bfff17 	ldw	r2,-4(fp)
}
   90bf8:	e037883a 	mov	sp,fp
   90bfc:	dfc00117 	ldw	ra,4(sp)
   90c00:	df000017 	ldw	fp,0(sp)
   90c04:	dec00204 	addi	sp,sp,8
   90c08:	f800283a 	ret

00090c0c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   90c0c:	defff604 	addi	sp,sp,-40
   90c10:	df000915 	stw	fp,36(sp)
   90c14:	df000904 	addi	fp,sp,36
   90c18:	e13ffd15 	stw	r4,-12(fp)
   90c1c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   90c20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   90c24:	e0bffd17 	ldw	r2,-12(fp)
   90c28:	1004c03a 	cmpne	r2,r2,zero
   90c2c:	1000031e 	bne	r2,zero,90c3c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   90c30:	00800104 	movi	r2,4
   90c34:	e0bfff15 	stw	r2,-4(fp)
   90c38:	00003b06 	br	90d28 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   90c3c:	e0bffe17 	ldw	r2,-8(fp)
   90c40:	1004c03a 	cmpne	r2,r2,zero
   90c44:	1000031e 	bne	r2,zero,90c54 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   90c48:	00800244 	movi	r2,9
   90c4c:	e0bfff15 	stw	r2,-4(fp)
   90c50:	00003506 	br	90d28 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   90c54:	e0bffd17 	ldw	r2,-12(fp)
   90c58:	10800003 	ldbu	r2,0(r2)
   90c5c:	10803fcc 	andi	r2,r2,255
   90c60:	108000e0 	cmpeqi	r2,r2,3
   90c64:	1000031e 	bne	r2,zero,90c74 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   90c68:	00800044 	movi	r2,1
   90c6c:	e0bfff15 	stw	r2,-4(fp)
   90c70:	00002d06 	br	90d28 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90c74:	0005303a 	rdctl	r2,status
   90c78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90c7c:	e0fff817 	ldw	r3,-32(fp)
   90c80:	00bfff84 	movi	r2,-2
   90c84:	1884703a 	and	r2,r3,r2
   90c88:	1001703a 	wrctl	status,r2
  
  return context;
   90c8c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   90c90:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   90c94:	e0bffd17 	ldw	r2,-12(fp)
   90c98:	10c00283 	ldbu	r3,10(r2)
   90c9c:	e0bffe17 	ldw	r2,-8(fp)
   90ca0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   90ca4:	e0bffd17 	ldw	r2,-12(fp)
   90ca8:	108002c4 	addi	r2,r2,11
   90cac:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   90cb0:	e0bffe17 	ldw	r2,-8(fp)
   90cb4:	10800084 	addi	r2,r2,2
   90cb8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   90cbc:	e03ffa05 	stb	zero,-24(fp)
   90cc0:	00000d06 	br	90cf8 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
   90cc4:	e0bffc17 	ldw	r2,-16(fp)
   90cc8:	10c00003 	ldbu	r3,0(r2)
   90ccc:	e0bffb17 	ldw	r2,-20(fp)
   90cd0:	10c00005 	stb	r3,0(r2)
   90cd4:	e0bffb17 	ldw	r2,-20(fp)
   90cd8:	10800044 	addi	r2,r2,1
   90cdc:	e0bffb15 	stw	r2,-20(fp)
   90ce0:	e0bffc17 	ldw	r2,-16(fp)
   90ce4:	10800044 	addi	r2,r2,1
   90ce8:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   90cec:	e0bffa03 	ldbu	r2,-24(fp)
   90cf0:	10800044 	addi	r2,r2,1
   90cf4:	e0bffa05 	stb	r2,-24(fp)
   90cf8:	e0bffa03 	ldbu	r2,-24(fp)
   90cfc:	108000f0 	cmpltui	r2,r2,3
   90d00:	103ff01e 	bne	r2,zero,90cc4 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   90d04:	e0bffd17 	ldw	r2,-12(fp)
   90d08:	10c0020b 	ldhu	r3,8(r2)
   90d0c:	e0bffe17 	ldw	r2,-8(fp)
   90d10:	10c0000d 	sth	r3,0(r2)
   90d14:	e0bff917 	ldw	r2,-28(fp)
   90d18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90d1c:	e0bff717 	ldw	r2,-36(fp)
   90d20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   90d24:	e03fff15 	stw	zero,-4(fp)
   90d28:	e0bfff17 	ldw	r2,-4(fp)
}
   90d2c:	e037883a 	mov	sp,fp
   90d30:	df000017 	ldw	fp,0(sp)
   90d34:	dec00104 	addi	sp,sp,4
   90d38:	f800283a 	ret

00090d3c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   90d3c:	defff904 	addi	sp,sp,-28
   90d40:	df000615 	stw	fp,24(sp)
   90d44:	df000604 	addi	fp,sp,24
   90d48:	e13ffd15 	stw	r4,-12(fp)
   90d4c:	e1bfff15 	stw	r6,-4(fp)
   90d50:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   90d54:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   90d58:	e0bfff17 	ldw	r2,-4(fp)
   90d5c:	1005003a 	cmpeq	r2,r2,zero
   90d60:	1000331e 	bne	r2,zero,90e30 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   90d64:	e0bffd17 	ldw	r2,-12(fp)
   90d68:	1004c03a 	cmpne	r2,r2,zero
   90d6c:	1000041e 	bne	r2,zero,90d80 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   90d70:	e0ffff17 	ldw	r3,-4(fp)
   90d74:	00800104 	movi	r2,4
   90d78:	18800005 	stb	r2,0(r3)
        return;
   90d7c:	00002c06 	br	90e30 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   90d80:	e0bffd17 	ldw	r2,-12(fp)
   90d84:	10800003 	ldbu	r2,0(r2)
   90d88:	10803fcc 	andi	r2,r2,255
   90d8c:	108000e0 	cmpeqi	r2,r2,3
   90d90:	1000041e 	bne	r2,zero,90da4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   90d94:	e0ffff17 	ldw	r3,-4(fp)
   90d98:	00800044 	movi	r2,1
   90d9c:	18800005 	stb	r2,0(r3)
        return;
   90da0:	00002306 	br	90e30 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90da4:	0005303a 	rdctl	r2,status
   90da8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90dac:	e0fffb17 	ldw	r3,-20(fp)
   90db0:	00bfff84 	movi	r2,-2
   90db4:	1884703a 	and	r2,r3,r2
   90db8:	1001703a 	wrctl	status,r2
  
  return context;
   90dbc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   90dc0:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
   90dc4:	e0bfff17 	ldw	r2,-4(fp)
   90dc8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   90dcc:	e0bffd17 	ldw	r2,-12(fp)
   90dd0:	1080020b 	ldhu	r2,8(r2)
   90dd4:	10bfffcc 	andi	r2,r2,65535
   90dd8:	1005003a 	cmpeq	r2,r2,zero
   90ddc:	1000041e 	bne	r2,zero,90df0 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   90de0:	e0fffd17 	ldw	r3,-12(fp)
   90de4:	e0bffe0b 	ldhu	r2,-8(fp)
   90de8:	1880020d 	sth	r2,8(r3)
   90dec:	00000c06 	br	90e20 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   90df0:	e0bffd17 	ldw	r2,-12(fp)
   90df4:	10800283 	ldbu	r2,10(r2)
   90df8:	10803fcc 	andi	r2,r2,255
   90dfc:	1004c03a 	cmpne	r2,r2,zero
   90e00:	1000041e 	bne	r2,zero,90e14 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   90e04:	e0fffd17 	ldw	r3,-12(fp)
   90e08:	e0bffe0b 	ldhu	r2,-8(fp)
   90e0c:	1880020d 	sth	r2,8(r3)
   90e10:	00000306 	br	90e20 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   90e14:	e0ffff17 	ldw	r3,-4(fp)
   90e18:	00801244 	movi	r2,73
   90e1c:	18800005 	stb	r2,0(r3)
   90e20:	e0bffc17 	ldw	r2,-16(fp)
   90e24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90e28:	e0bffa17 	ldw	r2,-24(fp)
   90e2c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   90e30:	e037883a 	mov	sp,fp
   90e34:	df000017 	ldw	fp,0(sp)
   90e38:	dec00104 	addi	sp,sp,4
   90e3c:	f800283a 	ret

00090e40 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   90e40:	defff004 	addi	sp,sp,-64
   90e44:	dfc00f15 	stw	ra,60(sp)
   90e48:	df000e15 	stw	fp,56(sp)
   90e4c:	df000e04 	addi	fp,sp,56
   90e50:	e13ffd05 	stb	r4,-12(fp)
   90e54:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   90e58:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   90e5c:	e0bffd03 	ldbu	r2,-12(fp)
   90e60:	10800530 	cmpltui	r2,r2,20
   90e64:	1000061e 	bne	r2,zero,90e80 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
   90e68:	e0bffd03 	ldbu	r2,-12(fp)
   90e6c:	10803fe0 	cmpeqi	r2,r2,255
   90e70:	1000031e 	bne	r2,zero,90e80 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
   90e74:	00800a84 	movi	r2,42
   90e78:	e0bfff15 	stw	r2,-4(fp)
   90e7c:	00014706 	br	9139c <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   90e80:	e0bffe03 	ldbu	r2,-8(fp)
   90e84:	10800530 	cmpltui	r2,r2,20
   90e88:	1000031e 	bne	r2,zero,90e98 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   90e8c:	00800a84 	movi	r2,42
   90e90:	e0bfff15 	stw	r2,-4(fp)
   90e94:	00014106 	br	9139c <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90e98:	0005303a 	rdctl	r2,status
   90e9c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90ea0:	e0fff617 	ldw	r3,-40(fp)
   90ea4:	00bfff84 	movi	r2,-2
   90ea8:	1884703a 	and	r2,r3,r2
   90eac:	1001703a 	wrctl	status,r2
  
  return context;
   90eb0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   90eb4:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   90eb8:	e0bffe03 	ldbu	r2,-8(fp)
   90ebc:	00c002b4 	movhi	r3,10
   90ec0:	18f89304 	addi	r3,r3,-7604
   90ec4:	1085883a 	add	r2,r2,r2
   90ec8:	1085883a 	add	r2,r2,r2
   90ecc:	10c5883a 	add	r2,r2,r3
   90ed0:	10800017 	ldw	r2,0(r2)
   90ed4:	1005003a 	cmpeq	r2,r2,zero
   90ed8:	1000071e 	bne	r2,zero,90ef8 <OSTaskChangePrio+0xb8>
   90edc:	e0bff717 	ldw	r2,-36(fp)
   90ee0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90ee4:	e0bff517 	ldw	r2,-44(fp)
   90ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   90eec:	00800a04 	movi	r2,40
   90ef0:	e0bfff15 	stw	r2,-4(fp)
   90ef4:	00012906 	br	9139c <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   90ef8:	e0bffd03 	ldbu	r2,-12(fp)
   90efc:	10803fd8 	cmpnei	r2,r2,255
   90f00:	1000051e 	bne	r2,zero,90f18 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   90f04:	008002b4 	movhi	r2,10
   90f08:	10a40d04 	addi	r2,r2,-28620
   90f0c:	10800017 	ldw	r2,0(r2)
   90f10:	10800c83 	ldbu	r2,50(r2)
   90f14:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   90f18:	e0bffd03 	ldbu	r2,-12(fp)
   90f1c:	00c002b4 	movhi	r3,10
   90f20:	18f89304 	addi	r3,r3,-7604
   90f24:	1085883a 	add	r2,r2,r2
   90f28:	1085883a 	add	r2,r2,r2
   90f2c:	10c5883a 	add	r2,r2,r3
   90f30:	10800017 	ldw	r2,0(r2)
   90f34:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   90f38:	e0bffa17 	ldw	r2,-24(fp)
   90f3c:	1004c03a 	cmpne	r2,r2,zero
   90f40:	1000071e 	bne	r2,zero,90f60 <OSTaskChangePrio+0x120>
   90f44:	e0bff717 	ldw	r2,-36(fp)
   90f48:	e0bff415 	stw	r2,-48(fp)
   90f4c:	e0bff417 	ldw	r2,-48(fp)
   90f50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   90f54:	00800a44 	movi	r2,41
   90f58:	e0bfff15 	stw	r2,-4(fp)
   90f5c:	00010f06 	br	9139c <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   90f60:	e0bffa17 	ldw	r2,-24(fp)
   90f64:	10800058 	cmpnei	r2,r2,1
   90f68:	1000071e 	bne	r2,zero,90f88 <OSTaskChangePrio+0x148>
   90f6c:	e0bff717 	ldw	r2,-36(fp)
   90f70:	e0bff315 	stw	r2,-52(fp)
   90f74:	e0bff317 	ldw	r2,-52(fp)
   90f78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   90f7c:	008010c4 	movi	r2,67
   90f80:	e0bfff15 	stw	r2,-4(fp)
   90f84:	00010506 	br	9139c <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   90f88:	e0bffe03 	ldbu	r2,-8(fp)
   90f8c:	1004d0fa 	srli	r2,r2,3
   90f90:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   90f94:	e0bffe03 	ldbu	r2,-8(fp)
   90f98:	108001cc 	andi	r2,r2,7
   90f9c:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
   90fa0:	e0fff983 	ldbu	r3,-26(fp)
   90fa4:	00800044 	movi	r2,1
   90fa8:	10c4983a 	sll	r2,r2,r3
   90fac:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
   90fb0:	e0fff943 	ldbu	r3,-27(fp)
   90fb4:	00800044 	movi	r2,1
   90fb8:	10c4983a 	sll	r2,r2,r3
   90fbc:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   90fc0:	e0bffd03 	ldbu	r2,-12(fp)
   90fc4:	00c002b4 	movhi	r3,10
   90fc8:	18f89304 	addi	r3,r3,-7604
   90fcc:	1085883a 	add	r2,r2,r2
   90fd0:	1085883a 	add	r2,r2,r2
   90fd4:	10c5883a 	add	r2,r2,r3
   90fd8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   90fdc:	e0bffe03 	ldbu	r2,-8(fp)
   90fe0:	00c002b4 	movhi	r3,10
   90fe4:	18f89304 	addi	r3,r3,-7604
   90fe8:	1085883a 	add	r2,r2,r2
   90fec:	1085883a 	add	r2,r2,r2
   90ff0:	10c7883a 	add	r3,r2,r3
   90ff4:	e0bffa17 	ldw	r2,-24(fp)
   90ff8:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
   90ffc:	e0bffa17 	ldw	r2,-24(fp)
   91000:	10800d03 	ldbu	r2,52(r2)
   91004:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
   91008:	e0bffa17 	ldw	r2,-24(fp)
   9100c:	10800d83 	ldbu	r2,54(r2)
   91010:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   91014:	e0bffa17 	ldw	r2,-24(fp)
   91018:	10800d43 	ldbu	r2,53(r2)
   9101c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   91020:	e0fff903 	ldbu	r3,-28(fp)
   91024:	008002b4 	movhi	r2,10
   91028:	10a40a44 	addi	r2,r2,-28631
   9102c:	10c5883a 	add	r2,r2,r3
   91030:	10c00003 	ldbu	r3,0(r2)
   91034:	e0bff803 	ldbu	r2,-32(fp)
   91038:	1884703a 	and	r2,r3,r2
   9103c:	10803fcc 	andi	r2,r2,255
   91040:	1005003a 	cmpeq	r2,r2,zero
   91044:	1000381e 	bne	r2,zero,91128 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
   91048:	e13ff903 	ldbu	r4,-28(fp)
   9104c:	e0fff903 	ldbu	r3,-28(fp)
   91050:	008002b4 	movhi	r2,10
   91054:	10a40a44 	addi	r2,r2,-28631
   91058:	10c5883a 	add	r2,r2,r3
   9105c:	10800003 	ldbu	r2,0(r2)
   91060:	1007883a 	mov	r3,r2
   91064:	e0bff803 	ldbu	r2,-32(fp)
   91068:	0084303a 	nor	r2,zero,r2
   9106c:	1884703a 	and	r2,r3,r2
   91070:	1007883a 	mov	r3,r2
   91074:	008002b4 	movhi	r2,10
   91078:	10a40a44 	addi	r2,r2,-28631
   9107c:	1105883a 	add	r2,r2,r4
   91080:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   91084:	e0fff903 	ldbu	r3,-28(fp)
   91088:	008002b4 	movhi	r2,10
   9108c:	10a40a44 	addi	r2,r2,-28631
   91090:	10c5883a 	add	r2,r2,r3
   91094:	10800003 	ldbu	r2,0(r2)
   91098:	10803fcc 	andi	r2,r2,255
   9109c:	1004c03a 	cmpne	r2,r2,zero
   910a0:	10000b1e 	bne	r2,zero,910d0 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
   910a4:	e0bff843 	ldbu	r2,-31(fp)
   910a8:	0084303a 	nor	r2,zero,r2
   910ac:	1007883a 	mov	r3,r2
   910b0:	008002b4 	movhi	r2,10
   910b4:	10a40a04 	addi	r2,r2,-28632
   910b8:	10800003 	ldbu	r2,0(r2)
   910bc:	1884703a 	and	r2,r3,r2
   910c0:	1007883a 	mov	r3,r2
   910c4:	008002b4 	movhi	r2,10
   910c8:	10a40a04 	addi	r2,r2,-28632
   910cc:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   910d0:	008002b4 	movhi	r2,10
   910d4:	10a40a04 	addi	r2,r2,-28632
   910d8:	10c00003 	ldbu	r3,0(r2)
   910dc:	e0bff8c3 	ldbu	r2,-29(fp)
   910e0:	1884b03a 	or	r2,r3,r2
   910e4:	1007883a 	mov	r3,r2
   910e8:	008002b4 	movhi	r2,10
   910ec:	10a40a04 	addi	r2,r2,-28632
   910f0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   910f4:	e13ff983 	ldbu	r4,-26(fp)
   910f8:	e0fff983 	ldbu	r3,-26(fp)
   910fc:	008002b4 	movhi	r2,10
   91100:	10a40a44 	addi	r2,r2,-28631
   91104:	10c5883a 	add	r2,r2,r3
   91108:	10c00003 	ldbu	r3,0(r2)
   9110c:	e0bff883 	ldbu	r2,-30(fp)
   91110:	1884b03a 	or	r2,r3,r2
   91114:	1007883a 	mov	r3,r2
   91118:	008002b4 	movhi	r2,10
   9111c:	10a40a44 	addi	r2,r2,-28631
   91120:	1105883a 	add	r2,r2,r4
   91124:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   91128:	e0bffa17 	ldw	r2,-24(fp)
   9112c:	10800717 	ldw	r2,28(r2)
   91130:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
   91134:	e0bffc17 	ldw	r2,-16(fp)
   91138:	1005003a 	cmpeq	r2,r2,zero
   9113c:	1000341e 	bne	r2,zero,91210 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   91140:	e13ff903 	ldbu	r4,-28(fp)
   91144:	e0fff903 	ldbu	r3,-28(fp)
   91148:	e0bffc17 	ldw	r2,-16(fp)
   9114c:	1885883a 	add	r2,r3,r2
   91150:	10800204 	addi	r2,r2,8
   91154:	108000c3 	ldbu	r2,3(r2)
   91158:	1007883a 	mov	r3,r2
   9115c:	e0bff803 	ldbu	r2,-32(fp)
   91160:	0084303a 	nor	r2,zero,r2
   91164:	1884703a 	and	r2,r3,r2
   91168:	1007883a 	mov	r3,r2
   9116c:	e0bffc17 	ldw	r2,-16(fp)
   91170:	2085883a 	add	r2,r4,r2
   91174:	10800204 	addi	r2,r2,8
   91178:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   9117c:	e0fff903 	ldbu	r3,-28(fp)
   91180:	e0bffc17 	ldw	r2,-16(fp)
   91184:	1885883a 	add	r2,r3,r2
   91188:	10800204 	addi	r2,r2,8
   9118c:	108000c3 	ldbu	r2,3(r2)
   91190:	10803fcc 	andi	r2,r2,255
   91194:	1004c03a 	cmpne	r2,r2,zero
   91198:	1000091e 	bne	r2,zero,911c0 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
   9119c:	e0bffc17 	ldw	r2,-16(fp)
   911a0:	10800283 	ldbu	r2,10(r2)
   911a4:	1007883a 	mov	r3,r2
   911a8:	e0bff843 	ldbu	r2,-31(fp)
   911ac:	0084303a 	nor	r2,zero,r2
   911b0:	1884703a 	and	r2,r3,r2
   911b4:	1007883a 	mov	r3,r2
   911b8:	e0bffc17 	ldw	r2,-16(fp)
   911bc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   911c0:	e0bffc17 	ldw	r2,-16(fp)
   911c4:	10c00283 	ldbu	r3,10(r2)
   911c8:	e0bff8c3 	ldbu	r2,-29(fp)
   911cc:	1884b03a 	or	r2,r3,r2
   911d0:	1007883a 	mov	r3,r2
   911d4:	e0bffc17 	ldw	r2,-16(fp)
   911d8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   911dc:	e13ff983 	ldbu	r4,-26(fp)
   911e0:	e0fff983 	ldbu	r3,-26(fp)
   911e4:	e0bffc17 	ldw	r2,-16(fp)
   911e8:	1885883a 	add	r2,r3,r2
   911ec:	10800204 	addi	r2,r2,8
   911f0:	10c000c3 	ldbu	r3,3(r2)
   911f4:	e0bff883 	ldbu	r2,-30(fp)
   911f8:	1884b03a 	or	r2,r3,r2
   911fc:	1007883a 	mov	r3,r2
   91200:	e0bffc17 	ldw	r2,-16(fp)
   91204:	2085883a 	add	r2,r4,r2
   91208:	10800204 	addi	r2,r2,8
   9120c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   91210:	e0bffa17 	ldw	r2,-24(fp)
   91214:	10800817 	ldw	r2,32(r2)
   91218:	1005003a 	cmpeq	r2,r2,zero
   9121c:	1000441e 	bne	r2,zero,91330 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   91220:	e0bffa17 	ldw	r2,-24(fp)
   91224:	10800817 	ldw	r2,32(r2)
   91228:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
   9122c:	e0bffb17 	ldw	r2,-20(fp)
   91230:	10800017 	ldw	r2,0(r2)
   91234:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
   91238:	00003a06 	br	91324 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   9123c:	e13ff903 	ldbu	r4,-28(fp)
   91240:	e0fff903 	ldbu	r3,-28(fp)
   91244:	e0bffc17 	ldw	r2,-16(fp)
   91248:	1885883a 	add	r2,r3,r2
   9124c:	10800204 	addi	r2,r2,8
   91250:	108000c3 	ldbu	r2,3(r2)
   91254:	1007883a 	mov	r3,r2
   91258:	e0bff803 	ldbu	r2,-32(fp)
   9125c:	0084303a 	nor	r2,zero,r2
   91260:	1884703a 	and	r2,r3,r2
   91264:	1007883a 	mov	r3,r2
   91268:	e0bffc17 	ldw	r2,-16(fp)
   9126c:	2085883a 	add	r2,r4,r2
   91270:	10800204 	addi	r2,r2,8
   91274:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   91278:	e0fff903 	ldbu	r3,-28(fp)
   9127c:	e0bffc17 	ldw	r2,-16(fp)
   91280:	1885883a 	add	r2,r3,r2
   91284:	10800204 	addi	r2,r2,8
   91288:	108000c3 	ldbu	r2,3(r2)
   9128c:	10803fcc 	andi	r2,r2,255
   91290:	1004c03a 	cmpne	r2,r2,zero
   91294:	1000091e 	bne	r2,zero,912bc <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
   91298:	e0bffc17 	ldw	r2,-16(fp)
   9129c:	10800283 	ldbu	r2,10(r2)
   912a0:	1007883a 	mov	r3,r2
   912a4:	e0bff843 	ldbu	r2,-31(fp)
   912a8:	0084303a 	nor	r2,zero,r2
   912ac:	1884703a 	and	r2,r3,r2
   912b0:	1007883a 	mov	r3,r2
   912b4:	e0bffc17 	ldw	r2,-16(fp)
   912b8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   912bc:	e0bffc17 	ldw	r2,-16(fp)
   912c0:	10c00283 	ldbu	r3,10(r2)
   912c4:	e0bff8c3 	ldbu	r2,-29(fp)
   912c8:	1884b03a 	or	r2,r3,r2
   912cc:	1007883a 	mov	r3,r2
   912d0:	e0bffc17 	ldw	r2,-16(fp)
   912d4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   912d8:	e13ff983 	ldbu	r4,-26(fp)
   912dc:	e0fff983 	ldbu	r3,-26(fp)
   912e0:	e0bffc17 	ldw	r2,-16(fp)
   912e4:	1885883a 	add	r2,r3,r2
   912e8:	10800204 	addi	r2,r2,8
   912ec:	10c000c3 	ldbu	r3,3(r2)
   912f0:	e0bff883 	ldbu	r2,-30(fp)
   912f4:	1884b03a 	or	r2,r3,r2
   912f8:	1007883a 	mov	r3,r2
   912fc:	e0bffc17 	ldw	r2,-16(fp)
   91300:	2085883a 	add	r2,r4,r2
   91304:	10800204 	addi	r2,r2,8
   91308:	10c000c5 	stb	r3,3(r2)
            pevents++;
   9130c:	e0bffb17 	ldw	r2,-20(fp)
   91310:	10800104 	addi	r2,r2,4
   91314:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
   91318:	e0bffb17 	ldw	r2,-20(fp)
   9131c:	10800017 	ldw	r2,0(r2)
   91320:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   91324:	e0bffc17 	ldw	r2,-16(fp)
   91328:	1004c03a 	cmpne	r2,r2,zero
   9132c:	103fc31e 	bne	r2,zero,9123c <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   91330:	e0fffa17 	ldw	r3,-24(fp)
   91334:	e0bffe03 	ldbu	r2,-8(fp)
   91338:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
   9133c:	e0fffa17 	ldw	r3,-24(fp)
   91340:	e0bff983 	ldbu	r2,-26(fp)
   91344:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
   91348:	e0fffa17 	ldw	r3,-24(fp)
   9134c:	e0bff943 	ldbu	r2,-27(fp)
   91350:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
   91354:	e0fffa17 	ldw	r3,-24(fp)
   91358:	e0bff8c3 	ldbu	r2,-29(fp)
   9135c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
   91360:	e0fffa17 	ldw	r3,-24(fp)
   91364:	e0bff883 	ldbu	r2,-30(fp)
   91368:	18800d45 	stb	r2,53(r3)
   9136c:	e0bff717 	ldw	r2,-36(fp)
   91370:	e0bff215 	stw	r2,-56(fp)
   91374:	e0bff217 	ldw	r2,-56(fp)
   91378:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   9137c:	008002b4 	movhi	r2,10
   91380:	10a3fe44 	addi	r2,r2,-28679
   91384:	10800003 	ldbu	r2,0(r2)
   91388:	10803fcc 	andi	r2,r2,255
   9138c:	10800058 	cmpnei	r2,r2,1
   91390:	1000011e 	bne	r2,zero,91398 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
   91394:	008c5880 	call	8c588 <OS_Sched>
    }
    return (OS_ERR_NONE);
   91398:	e03fff15 	stw	zero,-4(fp)
   9139c:	e0bfff17 	ldw	r2,-4(fp)
}
   913a0:	e037883a 	mov	sp,fp
   913a4:	dfc00117 	ldw	ra,4(sp)
   913a8:	df000017 	ldw	fp,0(sp)
   913ac:	dec00204 	addi	sp,sp,8
   913b0:	f800283a 	ret

000913b4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   913b4:	deffed04 	addi	sp,sp,-76
   913b8:	dfc01215 	stw	ra,72(sp)
   913bc:	df001115 	stw	fp,68(sp)
   913c0:	df001104 	addi	fp,sp,68
   913c4:	e13ffb15 	stw	r4,-20(fp)
   913c8:	e17ffc15 	stw	r5,-16(fp)
   913cc:	e1bffd15 	stw	r6,-12(fp)
   913d0:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   913d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   913d8:	e0bffe03 	ldbu	r2,-8(fp)
   913dc:	10800570 	cmpltui	r2,r2,21
   913e0:	1000031e 	bne	r2,zero,913f0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   913e4:	00800a84 	movi	r2,42
   913e8:	e0bfff15 	stw	r2,-4(fp)
   913ec:	00006006 	br	91570 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   913f0:	0005303a 	rdctl	r2,status
   913f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   913f8:	e0fff717 	ldw	r3,-36(fp)
   913fc:	00bfff84 	movi	r2,-2
   91400:	1884703a 	and	r2,r3,r2
   91404:	1001703a 	wrctl	status,r2
  
  return context;
   91408:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9140c:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   91410:	008002b4 	movhi	r2,10
   91414:	10a40c04 	addi	r2,r2,-28624
   91418:	10800003 	ldbu	r2,0(r2)
   9141c:	10803fcc 	andi	r2,r2,255
   91420:	1005003a 	cmpeq	r2,r2,zero
   91424:	1000071e 	bne	r2,zero,91444 <OSTaskCreate+0x90>
   91428:	e0bff817 	ldw	r2,-32(fp)
   9142c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91430:	e0bff617 	ldw	r2,-40(fp)
   91434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   91438:	00800f04 	movi	r2,60
   9143c:	e0bfff15 	stw	r2,-4(fp)
   91440:	00004b06 	br	91570 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   91444:	e0bffe03 	ldbu	r2,-8(fp)
   91448:	00c002b4 	movhi	r3,10
   9144c:	18f89304 	addi	r3,r3,-7604
   91450:	1085883a 	add	r2,r2,r2
   91454:	1085883a 	add	r2,r2,r2
   91458:	10c5883a 	add	r2,r2,r3
   9145c:	10800017 	ldw	r2,0(r2)
   91460:	1004c03a 	cmpne	r2,r2,zero
   91464:	10003c1e 	bne	r2,zero,91558 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   91468:	e0bffe03 	ldbu	r2,-8(fp)
   9146c:	00c002b4 	movhi	r3,10
   91470:	18f89304 	addi	r3,r3,-7604
   91474:	1085883a 	add	r2,r2,r2
   91478:	1085883a 	add	r2,r2,r2
   9147c:	10c7883a 	add	r3,r2,r3
   91480:	00800044 	movi	r2,1
   91484:	18800015 	stw	r2,0(r3)
   91488:	e0bff817 	ldw	r2,-32(fp)
   9148c:	e0bff515 	stw	r2,-44(fp)
   91490:	e0bff517 	ldw	r2,-44(fp)
   91494:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   91498:	e13ffb17 	ldw	r4,-20(fp)
   9149c:	e17ffc17 	ldw	r5,-16(fp)
   914a0:	e1bffd17 	ldw	r6,-12(fp)
   914a4:	000f883a 	mov	r7,zero
   914a8:	0094a580 	call	94a58 <OSTaskStkInit>
   914ac:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   914b0:	e13ffe03 	ldbu	r4,-8(fp)
   914b4:	d8000015 	stw	zero,0(sp)
   914b8:	d8000115 	stw	zero,4(sp)
   914bc:	d8000215 	stw	zero,8(sp)
   914c0:	e17ffa17 	ldw	r5,-24(fp)
   914c4:	000d883a 	mov	r6,zero
   914c8:	000f883a 	mov	r7,zero
   914cc:	008c9900 	call	8c990 <OS_TCBInit>
   914d0:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
   914d4:	e0bff903 	ldbu	r2,-28(fp)
   914d8:	1004c03a 	cmpne	r2,r2,zero
   914dc:	1000081e 	bne	r2,zero,91500 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   914e0:	008002b4 	movhi	r2,10
   914e4:	10a3fe44 	addi	r2,r2,-28679
   914e8:	10800003 	ldbu	r2,0(r2)
   914ec:	10803fcc 	andi	r2,r2,255
   914f0:	10800058 	cmpnei	r2,r2,1
   914f4:	1000151e 	bne	r2,zero,9154c <OSTaskCreate+0x198>
                OS_Sched();
   914f8:	008c5880 	call	8c588 <OS_Sched>
   914fc:	00001306 	br	9154c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91500:	0005303a 	rdctl	r2,status
   91504:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91508:	e0fff417 	ldw	r3,-48(fp)
   9150c:	00bfff84 	movi	r2,-2
   91510:	1884703a 	and	r2,r3,r2
   91514:	1001703a 	wrctl	status,r2
  
  return context;
   91518:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   9151c:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   91520:	e0bffe03 	ldbu	r2,-8(fp)
   91524:	00c002b4 	movhi	r3,10
   91528:	18f89304 	addi	r3,r3,-7604
   9152c:	1085883a 	add	r2,r2,r2
   91530:	1085883a 	add	r2,r2,r2
   91534:	10c5883a 	add	r2,r2,r3
   91538:	10000015 	stw	zero,0(r2)
   9153c:	e0bff817 	ldw	r2,-32(fp)
   91540:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91544:	e0bff317 	ldw	r2,-52(fp)
   91548:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   9154c:	e0bff903 	ldbu	r2,-28(fp)
   91550:	e0bfff15 	stw	r2,-4(fp)
   91554:	00000606 	br	91570 <OSTaskCreate+0x1bc>
   91558:	e0bff817 	ldw	r2,-32(fp)
   9155c:	e0bff215 	stw	r2,-56(fp)
   91560:	e0bff217 	ldw	r2,-56(fp)
   91564:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   91568:	00800a04 	movi	r2,40
   9156c:	e0bfff15 	stw	r2,-4(fp)
   91570:	e0bfff17 	ldw	r2,-4(fp)
}
   91574:	e037883a 	mov	sp,fp
   91578:	dfc00117 	ldw	ra,4(sp)
   9157c:	df000017 	ldw	fp,0(sp)
   91580:	dec00204 	addi	sp,sp,8
   91584:	f800283a 	ret

00091588 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   91588:	deffeb04 	addi	sp,sp,-84
   9158c:	dfc01415 	stw	ra,80(sp)
   91590:	df001315 	stw	fp,76(sp)
   91594:	df001304 	addi	fp,sp,76
   91598:	e13ff915 	stw	r4,-28(fp)
   9159c:	e17ffa15 	stw	r5,-24(fp)
   915a0:	e1bffb15 	stw	r6,-20(fp)
   915a4:	e0800217 	ldw	r2,8(fp)
   915a8:	e0c00617 	ldw	r3,24(fp)
   915ac:	e1fffc05 	stb	r7,-16(fp)
   915b0:	e0bffd0d 	sth	r2,-12(fp)
   915b4:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   915b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   915bc:	e0bffc03 	ldbu	r2,-16(fp)
   915c0:	10800570 	cmpltui	r2,r2,21
   915c4:	1000031e 	bne	r2,zero,915d4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   915c8:	00800a84 	movi	r2,42
   915cc:	e0bfff15 	stw	r2,-4(fp)
   915d0:	00006706 	br	91770 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   915d4:	0005303a 	rdctl	r2,status
   915d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   915dc:	e0fff517 	ldw	r3,-44(fp)
   915e0:	00bfff84 	movi	r2,-2
   915e4:	1884703a 	and	r2,r3,r2
   915e8:	1001703a 	wrctl	status,r2
  
  return context;
   915ec:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   915f0:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   915f4:	008002b4 	movhi	r2,10
   915f8:	10a40c04 	addi	r2,r2,-28624
   915fc:	10800003 	ldbu	r2,0(r2)
   91600:	10803fcc 	andi	r2,r2,255
   91604:	1005003a 	cmpeq	r2,r2,zero
   91608:	1000071e 	bne	r2,zero,91628 <OSTaskCreateExt+0xa0>
   9160c:	e0bff617 	ldw	r2,-40(fp)
   91610:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91614:	e0bff417 	ldw	r2,-48(fp)
   91618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   9161c:	00800f04 	movi	r2,60
   91620:	e0bfff15 	stw	r2,-4(fp)
   91624:	00005206 	br	91770 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   91628:	e0bffc03 	ldbu	r2,-16(fp)
   9162c:	00c002b4 	movhi	r3,10
   91630:	18f89304 	addi	r3,r3,-7604
   91634:	1085883a 	add	r2,r2,r2
   91638:	1085883a 	add	r2,r2,r2
   9163c:	10c5883a 	add	r2,r2,r3
   91640:	10800017 	ldw	r2,0(r2)
   91644:	1004c03a 	cmpne	r2,r2,zero
   91648:	1000431e 	bne	r2,zero,91758 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   9164c:	e0bffc03 	ldbu	r2,-16(fp)
   91650:	00c002b4 	movhi	r3,10
   91654:	18f89304 	addi	r3,r3,-7604
   91658:	1085883a 	add	r2,r2,r2
   9165c:	1085883a 	add	r2,r2,r2
   91660:	10c7883a 	add	r3,r2,r3
   91664:	00800044 	movi	r2,1
   91668:	18800015 	stw	r2,0(r3)
   9166c:	e0bff617 	ldw	r2,-40(fp)
   91670:	e0bff315 	stw	r2,-52(fp)
   91674:	e0bff317 	ldw	r2,-52(fp)
   91678:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   9167c:	e1bffe0b 	ldhu	r6,-8(fp)
   91680:	e1000317 	ldw	r4,12(fp)
   91684:	e1400417 	ldw	r5,16(fp)
   91688:	00928040 	call	92804 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   9168c:	e1fffe0b 	ldhu	r7,-8(fp)
   91690:	e13ff917 	ldw	r4,-28(fp)
   91694:	e17ffa17 	ldw	r5,-24(fp)
   91698:	e1bffb17 	ldw	r6,-20(fp)
   9169c:	0094a580 	call	94a58 <OSTaskStkInit>
   916a0:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   916a4:	e13ffc03 	ldbu	r4,-16(fp)
   916a8:	e1fffd0b 	ldhu	r7,-12(fp)
   916ac:	e0fffe0b 	ldhu	r3,-8(fp)
   916b0:	e0800417 	ldw	r2,16(fp)
   916b4:	d8800015 	stw	r2,0(sp)
   916b8:	e0800517 	ldw	r2,20(fp)
   916bc:	d8800115 	stw	r2,4(sp)
   916c0:	d8c00215 	stw	r3,8(sp)
   916c4:	e17ff817 	ldw	r5,-32(fp)
   916c8:	e1800317 	ldw	r6,12(fp)
   916cc:	008c9900 	call	8c990 <OS_TCBInit>
   916d0:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
   916d4:	e0bff703 	ldbu	r2,-36(fp)
   916d8:	1004c03a 	cmpne	r2,r2,zero
   916dc:	1000081e 	bne	r2,zero,91700 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   916e0:	008002b4 	movhi	r2,10
   916e4:	10a3fe44 	addi	r2,r2,-28679
   916e8:	10800003 	ldbu	r2,0(r2)
   916ec:	10803fcc 	andi	r2,r2,255
   916f0:	10800058 	cmpnei	r2,r2,1
   916f4:	1000151e 	bne	r2,zero,9174c <OSTaskCreateExt+0x1c4>
                OS_Sched();
   916f8:	008c5880 	call	8c588 <OS_Sched>
   916fc:	00001306 	br	9174c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91700:	0005303a 	rdctl	r2,status
   91704:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91708:	e0fff217 	ldw	r3,-56(fp)
   9170c:	00bfff84 	movi	r2,-2
   91710:	1884703a 	and	r2,r3,r2
   91714:	1001703a 	wrctl	status,r2
  
  return context;
   91718:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   9171c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   91720:	e0bffc03 	ldbu	r2,-16(fp)
   91724:	00c002b4 	movhi	r3,10
   91728:	18f89304 	addi	r3,r3,-7604
   9172c:	1085883a 	add	r2,r2,r2
   91730:	1085883a 	add	r2,r2,r2
   91734:	10c5883a 	add	r2,r2,r3
   91738:	10000015 	stw	zero,0(r2)
   9173c:	e0bff617 	ldw	r2,-40(fp)
   91740:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91744:	e0bff117 	ldw	r2,-60(fp)
   91748:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   9174c:	e0bff703 	ldbu	r2,-36(fp)
   91750:	e0bfff15 	stw	r2,-4(fp)
   91754:	00000606 	br	91770 <OSTaskCreateExt+0x1e8>
   91758:	e0bff617 	ldw	r2,-40(fp)
   9175c:	e0bff015 	stw	r2,-64(fp)
   91760:	e0bff017 	ldw	r2,-64(fp)
   91764:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   91768:	00800a04 	movi	r2,40
   9176c:	e0bfff15 	stw	r2,-4(fp)
   91770:	e0bfff17 	ldw	r2,-4(fp)
}
   91774:	e037883a 	mov	sp,fp
   91778:	dfc00117 	ldw	ra,4(sp)
   9177c:	df000017 	ldw	fp,0(sp)
   91780:	dec00204 	addi	sp,sp,8
   91784:	f800283a 	ret

00091788 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   91788:	defff304 	addi	sp,sp,-52
   9178c:	dfc00c15 	stw	ra,48(sp)
   91790:	df000b15 	stw	fp,44(sp)
   91794:	df000b04 	addi	fp,sp,44
   91798:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   9179c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   917a0:	008002b4 	movhi	r2,10
   917a4:	10a40c04 	addi	r2,r2,-28624
   917a8:	10800003 	ldbu	r2,0(r2)
   917ac:	10803fcc 	andi	r2,r2,255
   917b0:	1005003a 	cmpeq	r2,r2,zero
   917b4:	1000031e 	bne	r2,zero,917c4 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
   917b8:	00801004 	movi	r2,64
   917bc:	e0bfff15 	stw	r2,-4(fp)
   917c0:	0000ee06 	br	91b7c <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   917c4:	e0bffe03 	ldbu	r2,-8(fp)
   917c8:	10800518 	cmpnei	r2,r2,20
   917cc:	1000031e 	bne	r2,zero,917dc <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
   917d0:	00800f84 	movi	r2,62
   917d4:	e0bfff15 	stw	r2,-4(fp)
   917d8:	0000e806 	br	91b7c <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   917dc:	e0bffe03 	ldbu	r2,-8(fp)
   917e0:	10800530 	cmpltui	r2,r2,20
   917e4:	1000061e 	bne	r2,zero,91800 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
   917e8:	e0bffe03 	ldbu	r2,-8(fp)
   917ec:	10803fe0 	cmpeqi	r2,r2,255
   917f0:	1000031e 	bne	r2,zero,91800 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
   917f4:	00800a84 	movi	r2,42
   917f8:	e0bfff15 	stw	r2,-4(fp)
   917fc:	0000df06 	br	91b7c <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91800:	0005303a 	rdctl	r2,status
   91804:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91808:	e0fffa17 	ldw	r3,-24(fp)
   9180c:	00bfff84 	movi	r2,-2
   91810:	1884703a 	and	r2,r3,r2
   91814:	1001703a 	wrctl	status,r2
  
  return context;
   91818:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   9181c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   91820:	e0bffe03 	ldbu	r2,-8(fp)
   91824:	10803fd8 	cmpnei	r2,r2,255
   91828:	1000051e 	bne	r2,zero,91840 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   9182c:	008002b4 	movhi	r2,10
   91830:	10a40d04 	addi	r2,r2,-28620
   91834:	10800017 	ldw	r2,0(r2)
   91838:	10800c83 	ldbu	r2,50(r2)
   9183c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   91840:	e0bffe03 	ldbu	r2,-8(fp)
   91844:	00c002b4 	movhi	r3,10
   91848:	18f89304 	addi	r3,r3,-7604
   9184c:	1085883a 	add	r2,r2,r2
   91850:	1085883a 	add	r2,r2,r2
   91854:	10c5883a 	add	r2,r2,r3
   91858:	10800017 	ldw	r2,0(r2)
   9185c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   91860:	e0bffc17 	ldw	r2,-16(fp)
   91864:	1004c03a 	cmpne	r2,r2,zero
   91868:	1000071e 	bne	r2,zero,91888 <OSTaskDel+0x100>
   9186c:	e0bffb17 	ldw	r2,-20(fp)
   91870:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91874:	e0bff917 	ldw	r2,-28(fp)
   91878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9187c:	008010c4 	movi	r2,67
   91880:	e0bfff15 	stw	r2,-4(fp)
   91884:	0000bd06 	br	91b7c <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   91888:	e0bffc17 	ldw	r2,-16(fp)
   9188c:	10800058 	cmpnei	r2,r2,1
   91890:	1000071e 	bne	r2,zero,918b0 <OSTaskDel+0x128>
   91894:	e0bffb17 	ldw	r2,-20(fp)
   91898:	e0bff815 	stw	r2,-32(fp)
   9189c:	e0bff817 	ldw	r2,-32(fp)
   918a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   918a4:	00800f44 	movi	r2,61
   918a8:	e0bfff15 	stw	r2,-4(fp)
   918ac:	0000b306 	br	91b7c <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   918b0:	e0bffc17 	ldw	r2,-16(fp)
   918b4:	10800d03 	ldbu	r2,52(r2)
   918b8:	11003fcc 	andi	r4,r2,255
   918bc:	e0bffc17 	ldw	r2,-16(fp)
   918c0:	10800d03 	ldbu	r2,52(r2)
   918c4:	10c03fcc 	andi	r3,r2,255
   918c8:	008002b4 	movhi	r2,10
   918cc:	10a40a44 	addi	r2,r2,-28631
   918d0:	10c5883a 	add	r2,r2,r3
   918d4:	10800003 	ldbu	r2,0(r2)
   918d8:	1007883a 	mov	r3,r2
   918dc:	e0bffc17 	ldw	r2,-16(fp)
   918e0:	10800d43 	ldbu	r2,53(r2)
   918e4:	0084303a 	nor	r2,zero,r2
   918e8:	1884703a 	and	r2,r3,r2
   918ec:	1007883a 	mov	r3,r2
   918f0:	008002b4 	movhi	r2,10
   918f4:	10a40a44 	addi	r2,r2,-28631
   918f8:	1105883a 	add	r2,r2,r4
   918fc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   91900:	e0bffc17 	ldw	r2,-16(fp)
   91904:	10800d03 	ldbu	r2,52(r2)
   91908:	10c03fcc 	andi	r3,r2,255
   9190c:	008002b4 	movhi	r2,10
   91910:	10a40a44 	addi	r2,r2,-28631
   91914:	10c5883a 	add	r2,r2,r3
   91918:	10800003 	ldbu	r2,0(r2)
   9191c:	10803fcc 	andi	r2,r2,255
   91920:	1004c03a 	cmpne	r2,r2,zero
   91924:	10000c1e 	bne	r2,zero,91958 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   91928:	e0bffc17 	ldw	r2,-16(fp)
   9192c:	10800d83 	ldbu	r2,54(r2)
   91930:	0084303a 	nor	r2,zero,r2
   91934:	1007883a 	mov	r3,r2
   91938:	008002b4 	movhi	r2,10
   9193c:	10a40a04 	addi	r2,r2,-28632
   91940:	10800003 	ldbu	r2,0(r2)
   91944:	1884703a 	and	r2,r3,r2
   91948:	1007883a 	mov	r3,r2
   9194c:	008002b4 	movhi	r2,10
   91950:	10a40a04 	addi	r2,r2,-28632
   91954:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   91958:	e0bffc17 	ldw	r2,-16(fp)
   9195c:	10800717 	ldw	r2,28(r2)
   91960:	1005003a 	cmpeq	r2,r2,zero
   91964:	1000041e 	bne	r2,zero,91978 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   91968:	e0bffc17 	ldw	r2,-16(fp)
   9196c:	11400717 	ldw	r5,28(r2)
   91970:	e13ffc17 	ldw	r4,-16(fp)
   91974:	008bf400 	call	8bf40 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   91978:	e0bffc17 	ldw	r2,-16(fp)
   9197c:	10800817 	ldw	r2,32(r2)
   91980:	1005003a 	cmpeq	r2,r2,zero
   91984:	1000041e 	bne	r2,zero,91998 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   91988:	e0bffc17 	ldw	r2,-16(fp)
   9198c:	11400817 	ldw	r5,32(r2)
   91990:	e13ffc17 	ldw	r4,-16(fp)
   91994:	008bff80 	call	8bff8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   91998:	e0bffc17 	ldw	r2,-16(fp)
   9199c:	10800a17 	ldw	r2,40(r2)
   919a0:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   919a4:	e0bffd17 	ldw	r2,-12(fp)
   919a8:	1005003a 	cmpeq	r2,r2,zero
   919ac:	1000021e 	bne	r2,zero,919b8 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   919b0:	e13ffd17 	ldw	r4,-12(fp)
   919b4:	008e68c0 	call	8e68c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   919b8:	e0bffc17 	ldw	r2,-16(fp)
   919bc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   919c0:	e0bffc17 	ldw	r2,-16(fp)
   919c4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   919c8:	e0bffc17 	ldw	r2,-16(fp)
   919cc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   919d0:	008002b4 	movhi	r2,10
   919d4:	10a3fe04 	addi	r2,r2,-28680
   919d8:	10800003 	ldbu	r2,0(r2)
   919dc:	10803fcc 	andi	r2,r2,255
   919e0:	10803fe0 	cmpeqi	r2,r2,255
   919e4:	1000081e 	bne	r2,zero,91a08 <OSTaskDel+0x280>
        OSLockNesting++;
   919e8:	008002b4 	movhi	r2,10
   919ec:	10a3fe04 	addi	r2,r2,-28680
   919f0:	10800003 	ldbu	r2,0(r2)
   919f4:	10800044 	addi	r2,r2,1
   919f8:	1007883a 	mov	r3,r2
   919fc:	008002b4 	movhi	r2,10
   91a00:	10a3fe04 	addi	r2,r2,-28680
   91a04:	10c00005 	stb	r3,0(r2)
   91a08:	e0bffb17 	ldw	r2,-20(fp)
   91a0c:	e0bff715 	stw	r2,-36(fp)
   91a10:	e0bff717 	ldw	r2,-36(fp)
   91a14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   91a18:	008bb2c0 	call	8bb2c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91a1c:	0005303a 	rdctl	r2,status
   91a20:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91a24:	e0fff617 	ldw	r3,-40(fp)
   91a28:	00bfff84 	movi	r2,-2
   91a2c:	1884703a 	and	r2,r3,r2
   91a30:	1001703a 	wrctl	status,r2
  
  return context;
   91a34:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   91a38:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   91a3c:	008002b4 	movhi	r2,10
   91a40:	10a3fe04 	addi	r2,r2,-28680
   91a44:	10800003 	ldbu	r2,0(r2)
   91a48:	10803fcc 	andi	r2,r2,255
   91a4c:	1005003a 	cmpeq	r2,r2,zero
   91a50:	1000081e 	bne	r2,zero,91a74 <OSTaskDel+0x2ec>
        OSLockNesting--;
   91a54:	008002b4 	movhi	r2,10
   91a58:	10a3fe04 	addi	r2,r2,-28680
   91a5c:	10800003 	ldbu	r2,0(r2)
   91a60:	10bfffc4 	addi	r2,r2,-1
   91a64:	1007883a 	mov	r3,r2
   91a68:	008002b4 	movhi	r2,10
   91a6c:	10a3fe04 	addi	r2,r2,-28680
   91a70:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   91a74:	e13ffc17 	ldw	r4,-16(fp)
   91a78:	0094d880 	call	94d88 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   91a7c:	008002b4 	movhi	r2,10
   91a80:	10a40644 	addi	r2,r2,-28647
   91a84:	10800003 	ldbu	r2,0(r2)
   91a88:	10bfffc4 	addi	r2,r2,-1
   91a8c:	1007883a 	mov	r3,r2
   91a90:	008002b4 	movhi	r2,10
   91a94:	10a40644 	addi	r2,r2,-28647
   91a98:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   91a9c:	e0bffe03 	ldbu	r2,-8(fp)
   91aa0:	00c002b4 	movhi	r3,10
   91aa4:	18f89304 	addi	r3,r3,-7604
   91aa8:	1085883a 	add	r2,r2,r2
   91aac:	1085883a 	add	r2,r2,r2
   91ab0:	10c5883a 	add	r2,r2,r3
   91ab4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   91ab8:	e0bffc17 	ldw	r2,-16(fp)
   91abc:	10800617 	ldw	r2,24(r2)
   91ac0:	1004c03a 	cmpne	r2,r2,zero
   91ac4:	1000091e 	bne	r2,zero,91aec <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   91ac8:	e0bffc17 	ldw	r2,-16(fp)
   91acc:	10800517 	ldw	r2,20(r2)
   91ad0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   91ad4:	e0bffc17 	ldw	r2,-16(fp)
   91ad8:	10c00517 	ldw	r3,20(r2)
   91adc:	008002b4 	movhi	r2,10
   91ae0:	10a40104 	addi	r2,r2,-28668
   91ae4:	10c00015 	stw	r3,0(r2)
   91ae8:	00000a06 	br	91b14 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   91aec:	e0bffc17 	ldw	r2,-16(fp)
   91af0:	10c00617 	ldw	r3,24(r2)
   91af4:	e0bffc17 	ldw	r2,-16(fp)
   91af8:	10800517 	ldw	r2,20(r2)
   91afc:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   91b00:	e0bffc17 	ldw	r2,-16(fp)
   91b04:	10c00517 	ldw	r3,20(r2)
   91b08:	e0bffc17 	ldw	r2,-16(fp)
   91b0c:	10800617 	ldw	r2,24(r2)
   91b10:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   91b14:	008002b4 	movhi	r2,10
   91b18:	10a40504 	addi	r2,r2,-28652
   91b1c:	10c00017 	ldw	r3,0(r2)
   91b20:	e0bffc17 	ldw	r2,-16(fp)
   91b24:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   91b28:	00c002b4 	movhi	r3,10
   91b2c:	18e40504 	addi	r3,r3,-28652
   91b30:	e0bffc17 	ldw	r2,-16(fp)
   91b34:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   91b38:	e0fffc17 	ldw	r3,-16(fp)
   91b3c:	00800fc4 	movi	r2,63
   91b40:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   91b44:	e0bffc17 	ldw	r2,-16(fp)
   91b48:	10001345 	stb	zero,77(r2)
   91b4c:	e0bffb17 	ldw	r2,-20(fp)
   91b50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91b54:	e0bff517 	ldw	r2,-44(fp)
   91b58:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   91b5c:	008002b4 	movhi	r2,10
   91b60:	10a3fe44 	addi	r2,r2,-28679
   91b64:	10800003 	ldbu	r2,0(r2)
   91b68:	10803fcc 	andi	r2,r2,255
   91b6c:	10800058 	cmpnei	r2,r2,1
   91b70:	1000011e 	bne	r2,zero,91b78 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
   91b74:	008c5880 	call	8c588 <OS_Sched>
    }
    return (OS_ERR_NONE);
   91b78:	e03fff15 	stw	zero,-4(fp)
   91b7c:	e0bfff17 	ldw	r2,-4(fp)
}
   91b80:	e037883a 	mov	sp,fp
   91b84:	dfc00117 	ldw	ra,4(sp)
   91b88:	df000017 	ldw	fp,0(sp)
   91b8c:	dec00204 	addi	sp,sp,8
   91b90:	f800283a 	ret

00091b94 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   91b94:	defff404 	addi	sp,sp,-48
   91b98:	df000b15 	stw	fp,44(sp)
   91b9c:	df000b04 	addi	fp,sp,44
   91ba0:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   91ba4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   91ba8:	e0bffe03 	ldbu	r2,-8(fp)
   91bac:	10800518 	cmpnei	r2,r2,20
   91bb0:	1000031e 	bne	r2,zero,91bc0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   91bb4:	00800f84 	movi	r2,62
   91bb8:	e0bfff15 	stw	r2,-4(fp)
   91bbc:	00004c06 	br	91cf0 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   91bc0:	e0bffe03 	ldbu	r2,-8(fp)
   91bc4:	10800530 	cmpltui	r2,r2,20
   91bc8:	1000061e 	bne	r2,zero,91be4 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
   91bcc:	e0bffe03 	ldbu	r2,-8(fp)
   91bd0:	10803fe0 	cmpeqi	r2,r2,255
   91bd4:	1000031e 	bne	r2,zero,91be4 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
   91bd8:	00800a84 	movi	r2,42
   91bdc:	e0bfff15 	stw	r2,-4(fp)
   91be0:	00004306 	br	91cf0 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   91be4:	e0bffe03 	ldbu	r2,-8(fp)
   91be8:	10803fd8 	cmpnei	r2,r2,255
   91bec:	1000141e 	bne	r2,zero,91c40 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91bf0:	0005303a 	rdctl	r2,status
   91bf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91bf8:	e0fffa17 	ldw	r3,-24(fp)
   91bfc:	00bfff84 	movi	r2,-2
   91c00:	1884703a 	and	r2,r3,r2
   91c04:	1001703a 	wrctl	status,r2
  
  return context;
   91c08:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   91c0c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   91c10:	008002b4 	movhi	r2,10
   91c14:	10a40d04 	addi	r2,r2,-28620
   91c18:	10800017 	ldw	r2,0(r2)
   91c1c:	10800dc3 	ldbu	r2,55(r2)
   91c20:	e0bffd05 	stb	r2,-12(fp)
   91c24:	e0bffb17 	ldw	r2,-20(fp)
   91c28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91c2c:	e0bff917 	ldw	r2,-28(fp)
   91c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   91c34:	e0bffd03 	ldbu	r2,-12(fp)
   91c38:	e0bfff15 	stw	r2,-4(fp)
   91c3c:	00002c06 	br	91cf0 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91c40:	0005303a 	rdctl	r2,status
   91c44:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91c48:	e0fff817 	ldw	r3,-32(fp)
   91c4c:	00bfff84 	movi	r2,-2
   91c50:	1884703a 	and	r2,r3,r2
   91c54:	1001703a 	wrctl	status,r2
  
  return context;
   91c58:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   91c5c:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
   91c60:	e0bffe03 	ldbu	r2,-8(fp)
   91c64:	00c002b4 	movhi	r3,10
   91c68:	18f89304 	addi	r3,r3,-7604
   91c6c:	1085883a 	add	r2,r2,r2
   91c70:	1085883a 	add	r2,r2,r2
   91c74:	10c5883a 	add	r2,r2,r3
   91c78:	10800017 	ldw	r2,0(r2)
   91c7c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   91c80:	e0bffc17 	ldw	r2,-16(fp)
   91c84:	1004c03a 	cmpne	r2,r2,zero
   91c88:	1000071e 	bne	r2,zero,91ca8 <OSTaskDelReq+0x114>
   91c8c:	e0bffb17 	ldw	r2,-20(fp)
   91c90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91c94:	e0bff717 	ldw	r2,-36(fp)
   91c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   91c9c:	008010c4 	movi	r2,67
   91ca0:	e0bfff15 	stw	r2,-4(fp)
   91ca4:	00001206 	br	91cf0 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   91ca8:	e0bffc17 	ldw	r2,-16(fp)
   91cac:	10800058 	cmpnei	r2,r2,1
   91cb0:	1000071e 	bne	r2,zero,91cd0 <OSTaskDelReq+0x13c>
   91cb4:	e0bffb17 	ldw	r2,-20(fp)
   91cb8:	e0bff615 	stw	r2,-40(fp)
   91cbc:	e0bff617 	ldw	r2,-40(fp)
   91cc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   91cc4:	00800f44 	movi	r2,61
   91cc8:	e0bfff15 	stw	r2,-4(fp)
   91ccc:	00000806 	br	91cf0 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   91cd0:	e0fffc17 	ldw	r3,-16(fp)
   91cd4:	00800fc4 	movi	r2,63
   91cd8:	18800dc5 	stb	r2,55(r3)
   91cdc:	e0bffb17 	ldw	r2,-20(fp)
   91ce0:	e0bff515 	stw	r2,-44(fp)
   91ce4:	e0bff517 	ldw	r2,-44(fp)
   91ce8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   91cec:	e03fff15 	stw	zero,-4(fp)
   91cf0:	e0bfff17 	ldw	r2,-4(fp)
}
   91cf4:	e037883a 	mov	sp,fp
   91cf8:	df000017 	ldw	fp,0(sp)
   91cfc:	dec00104 	addi	sp,sp,4
   91d00:	f800283a 	ret

00091d04 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   91d04:	defff304 	addi	sp,sp,-52
   91d08:	dfc00c15 	stw	ra,48(sp)
   91d0c:	df000b15 	stw	fp,44(sp)
   91d10:	df000b04 	addi	fp,sp,44
   91d14:	e17ffd15 	stw	r5,-12(fp)
   91d18:	e1bffe15 	stw	r6,-8(fp)
   91d1c:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   91d20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   91d24:	e0bffe17 	ldw	r2,-8(fp)
   91d28:	1004c03a 	cmpne	r2,r2,zero
   91d2c:	1000021e 	bne	r2,zero,91d38 <OSTaskNameGet+0x34>
        return (0);
   91d30:	e03fff15 	stw	zero,-4(fp)
   91d34:	00005b06 	br	91ea4 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   91d38:	e0bffc03 	ldbu	r2,-16(fp)
   91d3c:	10800570 	cmpltui	r2,r2,21
   91d40:	1000081e 	bne	r2,zero,91d64 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   91d44:	e0bffc03 	ldbu	r2,-16(fp)
   91d48:	10803fe0 	cmpeqi	r2,r2,255
   91d4c:	1000051e 	bne	r2,zero,91d64 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   91d50:	e0fffe17 	ldw	r3,-8(fp)
   91d54:	00800a84 	movi	r2,42
   91d58:	18800005 	stb	r2,0(r3)
            return (0);
   91d5c:	e03fff15 	stw	zero,-4(fp)
   91d60:	00005006 	br	91ea4 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   91d64:	e0bffd17 	ldw	r2,-12(fp)
   91d68:	1004c03a 	cmpne	r2,r2,zero
   91d6c:	1000051e 	bne	r2,zero,91d84 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   91d70:	e0fffe17 	ldw	r3,-8(fp)
   91d74:	00800304 	movi	r2,12
   91d78:	18800005 	stb	r2,0(r3)
        return (0);
   91d7c:	e03fff15 	stw	zero,-4(fp)
   91d80:	00004806 	br	91ea4 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   91d84:	008002b4 	movhi	r2,10
   91d88:	10a40c04 	addi	r2,r2,-28624
   91d8c:	10800003 	ldbu	r2,0(r2)
   91d90:	10803fcc 	andi	r2,r2,255
   91d94:	1005003a 	cmpeq	r2,r2,zero
   91d98:	1000051e 	bne	r2,zero,91db0 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   91d9c:	e0fffe17 	ldw	r3,-8(fp)
   91da0:	00800444 	movi	r2,17
   91da4:	18800005 	stb	r2,0(r3)
        return (0);
   91da8:	e03fff15 	stw	zero,-4(fp)
   91dac:	00003d06 	br	91ea4 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91db0:	0005303a 	rdctl	r2,status
   91db4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91db8:	e0fff817 	ldw	r3,-32(fp)
   91dbc:	00bfff84 	movi	r2,-2
   91dc0:	1884703a 	and	r2,r3,r2
   91dc4:	1001703a 	wrctl	status,r2
  
  return context;
   91dc8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   91dcc:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   91dd0:	e0bffc03 	ldbu	r2,-16(fp)
   91dd4:	10803fd8 	cmpnei	r2,r2,255
   91dd8:	1000051e 	bne	r2,zero,91df0 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
   91ddc:	008002b4 	movhi	r2,10
   91de0:	10a40d04 	addi	r2,r2,-28620
   91de4:	10800017 	ldw	r2,0(r2)
   91de8:	10800c83 	ldbu	r2,50(r2)
   91dec:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   91df0:	e0bffc03 	ldbu	r2,-16(fp)
   91df4:	00c002b4 	movhi	r3,10
   91df8:	18f89304 	addi	r3,r3,-7604
   91dfc:	1085883a 	add	r2,r2,r2
   91e00:	1085883a 	add	r2,r2,r2
   91e04:	10c5883a 	add	r2,r2,r3
   91e08:	10800017 	ldw	r2,0(r2)
   91e0c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   91e10:	e0bffb17 	ldw	r2,-20(fp)
   91e14:	1004c03a 	cmpne	r2,r2,zero
   91e18:	1000091e 	bne	r2,zero,91e40 <OSTaskNameGet+0x13c>
   91e1c:	e0bff917 	ldw	r2,-28(fp)
   91e20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91e24:	e0bff717 	ldw	r2,-36(fp)
   91e28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   91e2c:	e0fffe17 	ldw	r3,-8(fp)
   91e30:	008010c4 	movi	r2,67
   91e34:	18800005 	stb	r2,0(r3)
        return (0);
   91e38:	e03fff15 	stw	zero,-4(fp)
   91e3c:	00001906 	br	91ea4 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   91e40:	e0bffb17 	ldw	r2,-20(fp)
   91e44:	10800058 	cmpnei	r2,r2,1
   91e48:	1000091e 	bne	r2,zero,91e70 <OSTaskNameGet+0x16c>
   91e4c:	e0bff917 	ldw	r2,-28(fp)
   91e50:	e0bff615 	stw	r2,-40(fp)
   91e54:	e0bff617 	ldw	r2,-40(fp)
   91e58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   91e5c:	e0fffe17 	ldw	r3,-8(fp)
   91e60:	008010c4 	movi	r2,67
   91e64:	18800005 	stb	r2,0(r3)
        return (0);
   91e68:	e03fff15 	stw	zero,-4(fp)
   91e6c:	00000d06 	br	91ea4 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   91e70:	e0bffb17 	ldw	r2,-20(fp)
   91e74:	11401304 	addi	r5,r2,76
   91e78:	e13ffd17 	ldw	r4,-12(fp)
   91e7c:	008c6cc0 	call	8c6cc <OS_StrCopy>
   91e80:	e0bffa05 	stb	r2,-24(fp)
   91e84:	e0bff917 	ldw	r2,-28(fp)
   91e88:	e0bff515 	stw	r2,-44(fp)
   91e8c:	e0bff517 	ldw	r2,-44(fp)
   91e90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   91e94:	e0bffe17 	ldw	r2,-8(fp)
   91e98:	10000005 	stb	zero,0(r2)
    return (len);
   91e9c:	e0bffa03 	ldbu	r2,-24(fp)
   91ea0:	e0bfff15 	stw	r2,-4(fp)
   91ea4:	e0bfff17 	ldw	r2,-4(fp)
}
   91ea8:	e037883a 	mov	sp,fp
   91eac:	dfc00117 	ldw	ra,4(sp)
   91eb0:	df000017 	ldw	fp,0(sp)
   91eb4:	dec00204 	addi	sp,sp,8
   91eb8:	f800283a 	ret

00091ebc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   91ebc:	defff304 	addi	sp,sp,-52
   91ec0:	dfc00c15 	stw	ra,48(sp)
   91ec4:	df000b15 	stw	fp,44(sp)
   91ec8:	df000b04 	addi	fp,sp,44
   91ecc:	e17ffe15 	stw	r5,-8(fp)
   91ed0:	e1bfff15 	stw	r6,-4(fp)
   91ed4:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   91ed8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   91edc:	e0bfff17 	ldw	r2,-4(fp)
   91ee0:	1005003a 	cmpeq	r2,r2,zero
   91ee4:	1000611e 	bne	r2,zero,9206c <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   91ee8:	e0bffd03 	ldbu	r2,-12(fp)
   91eec:	10800570 	cmpltui	r2,r2,21
   91ef0:	1000071e 	bne	r2,zero,91f10 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   91ef4:	e0bffd03 	ldbu	r2,-12(fp)
   91ef8:	10803fe0 	cmpeqi	r2,r2,255
   91efc:	1000041e 	bne	r2,zero,91f10 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   91f00:	e0ffff17 	ldw	r3,-4(fp)
   91f04:	00800a84 	movi	r2,42
   91f08:	18800005 	stb	r2,0(r3)
            return;
   91f0c:	00005706 	br	9206c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   91f10:	e0bffe17 	ldw	r2,-8(fp)
   91f14:	1004c03a 	cmpne	r2,r2,zero
   91f18:	1000041e 	bne	r2,zero,91f2c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   91f1c:	e0ffff17 	ldw	r3,-4(fp)
   91f20:	00800304 	movi	r2,12
   91f24:	18800005 	stb	r2,0(r3)
        return;
   91f28:	00005006 	br	9206c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   91f2c:	008002b4 	movhi	r2,10
   91f30:	10a40c04 	addi	r2,r2,-28624
   91f34:	10800003 	ldbu	r2,0(r2)
   91f38:	10803fcc 	andi	r2,r2,255
   91f3c:	1005003a 	cmpeq	r2,r2,zero
   91f40:	1000041e 	bne	r2,zero,91f54 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
   91f44:	e0ffff17 	ldw	r3,-4(fp)
   91f48:	00800484 	movi	r2,18
   91f4c:	18800005 	stb	r2,0(r3)
        return;
   91f50:	00004606 	br	9206c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91f54:	0005303a 	rdctl	r2,status
   91f58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91f5c:	e0fff917 	ldw	r3,-28(fp)
   91f60:	00bfff84 	movi	r2,-2
   91f64:	1884703a 	and	r2,r3,r2
   91f68:	1001703a 	wrctl	status,r2
  
  return context;
   91f6c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   91f70:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   91f74:	e0bffd03 	ldbu	r2,-12(fp)
   91f78:	10803fd8 	cmpnei	r2,r2,255
   91f7c:	1000051e 	bne	r2,zero,91f94 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
   91f80:	008002b4 	movhi	r2,10
   91f84:	10a40d04 	addi	r2,r2,-28620
   91f88:	10800017 	ldw	r2,0(r2)
   91f8c:	10800c83 	ldbu	r2,50(r2)
   91f90:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   91f94:	e0bffd03 	ldbu	r2,-12(fp)
   91f98:	00c002b4 	movhi	r3,10
   91f9c:	18f89304 	addi	r3,r3,-7604
   91fa0:	1085883a 	add	r2,r2,r2
   91fa4:	1085883a 	add	r2,r2,r2
   91fa8:	10c5883a 	add	r2,r2,r3
   91fac:	10800017 	ldw	r2,0(r2)
   91fb0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   91fb4:	e0bffb17 	ldw	r2,-20(fp)
   91fb8:	1004c03a 	cmpne	r2,r2,zero
   91fbc:	1000081e 	bne	r2,zero,91fe0 <OSTaskNameSet+0x124>
   91fc0:	e0bffa17 	ldw	r2,-24(fp)
   91fc4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91fc8:	e0bff817 	ldw	r2,-32(fp)
   91fcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   91fd0:	e0ffff17 	ldw	r3,-4(fp)
   91fd4:	008010c4 	movi	r2,67
   91fd8:	18800005 	stb	r2,0(r3)
        return;
   91fdc:	00002306 	br	9206c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   91fe0:	e0bffb17 	ldw	r2,-20(fp)
   91fe4:	10800058 	cmpnei	r2,r2,1
   91fe8:	1000081e 	bne	r2,zero,9200c <OSTaskNameSet+0x150>
   91fec:	e0bffa17 	ldw	r2,-24(fp)
   91ff0:	e0bff715 	stw	r2,-36(fp)
   91ff4:	e0bff717 	ldw	r2,-36(fp)
   91ff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   91ffc:	e0ffff17 	ldw	r3,-4(fp)
   92000:	008010c4 	movi	r2,67
   92004:	18800005 	stb	r2,0(r3)
        return;
   92008:	00001806 	br	9206c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   9200c:	e13ffe17 	ldw	r4,-8(fp)
   92010:	008c74c0 	call	8c74c <OS_StrLen>
   92014:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   92018:	e0bffc03 	ldbu	r2,-16(fp)
   9201c:	10800830 	cmpltui	r2,r2,32
   92020:	1000081e 	bne	r2,zero,92044 <OSTaskNameSet+0x188>
   92024:	e0bffa17 	ldw	r2,-24(fp)
   92028:	e0bff615 	stw	r2,-40(fp)
   9202c:	e0bff617 	ldw	r2,-40(fp)
   92030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   92034:	e0ffff17 	ldw	r3,-4(fp)
   92038:	00801044 	movi	r2,65
   9203c:	18800005 	stb	r2,0(r3)
        return;
   92040:	00000a06 	br	9206c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   92044:	e0bffb17 	ldw	r2,-20(fp)
   92048:	11001304 	addi	r4,r2,76
   9204c:	e17ffe17 	ldw	r5,-8(fp)
   92050:	008c6cc0 	call	8c6cc <OS_StrCopy>
   92054:	e0bffa17 	ldw	r2,-24(fp)
   92058:	e0bff515 	stw	r2,-44(fp)
   9205c:	e0bff517 	ldw	r2,-44(fp)
   92060:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   92064:	e0bfff17 	ldw	r2,-4(fp)
   92068:	10000005 	stb	zero,0(r2)
}
   9206c:	e037883a 	mov	sp,fp
   92070:	dfc00117 	ldw	ra,4(sp)
   92074:	df000017 	ldw	fp,0(sp)
   92078:	dec00204 	addi	sp,sp,8
   9207c:	f800283a 	ret

00092080 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   92080:	defff304 	addi	sp,sp,-52
   92084:	dfc00c15 	stw	ra,48(sp)
   92088:	df000b15 	stw	fp,44(sp)
   9208c:	df000b04 	addi	fp,sp,44
   92090:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   92094:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   92098:	e0bffe03 	ldbu	r2,-8(fp)
   9209c:	10800530 	cmpltui	r2,r2,20
   920a0:	1000031e 	bne	r2,zero,920b0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   920a4:	00800a84 	movi	r2,42
   920a8:	e0bfff15 	stw	r2,-4(fp)
   920ac:	00007406 	br	92280 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   920b0:	0005303a 	rdctl	r2,status
   920b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   920b8:	e0fffb17 	ldw	r3,-20(fp)
   920bc:	00bfff84 	movi	r2,-2
   920c0:	1884703a 	and	r2,r3,r2
   920c4:	1001703a 	wrctl	status,r2
  
  return context;
   920c8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   920cc:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
   920d0:	e0bffe03 	ldbu	r2,-8(fp)
   920d4:	00c002b4 	movhi	r3,10
   920d8:	18f89304 	addi	r3,r3,-7604
   920dc:	1085883a 	add	r2,r2,r2
   920e0:	1085883a 	add	r2,r2,r2
   920e4:	10c5883a 	add	r2,r2,r3
   920e8:	10800017 	ldw	r2,0(r2)
   920ec:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   920f0:	e0bffd17 	ldw	r2,-12(fp)
   920f4:	1004c03a 	cmpne	r2,r2,zero
   920f8:	1000071e 	bne	r2,zero,92118 <OSTaskResume+0x98>
   920fc:	e0bffc17 	ldw	r2,-16(fp)
   92100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92104:	e0bffa17 	ldw	r2,-24(fp)
   92108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   9210c:	00801184 	movi	r2,70
   92110:	e0bfff15 	stw	r2,-4(fp)
   92114:	00005a06 	br	92280 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   92118:	e0bffd17 	ldw	r2,-12(fp)
   9211c:	10800058 	cmpnei	r2,r2,1
   92120:	1000071e 	bne	r2,zero,92140 <OSTaskResume+0xc0>
   92124:	e0bffc17 	ldw	r2,-16(fp)
   92128:	e0bff915 	stw	r2,-28(fp)
   9212c:	e0bff917 	ldw	r2,-28(fp)
   92130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   92134:	008010c4 	movi	r2,67
   92138:	e0bfff15 	stw	r2,-4(fp)
   9213c:	00005006 	br	92280 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   92140:	e0bffd17 	ldw	r2,-12(fp)
   92144:	10800c03 	ldbu	r2,48(r2)
   92148:	10803fcc 	andi	r2,r2,255
   9214c:	1080020c 	andi	r2,r2,8
   92150:	1005003a 	cmpeq	r2,r2,zero
   92154:	1000441e 	bne	r2,zero,92268 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   92158:	e0bffd17 	ldw	r2,-12(fp)
   9215c:	10c00c03 	ldbu	r3,48(r2)
   92160:	00bffdc4 	movi	r2,-9
   92164:	1884703a 	and	r2,r3,r2
   92168:	1007883a 	mov	r3,r2
   9216c:	e0bffd17 	ldw	r2,-12(fp)
   92170:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   92174:	e0bffd17 	ldw	r2,-12(fp)
   92178:	10800c03 	ldbu	r2,48(r2)
   9217c:	10803fcc 	andi	r2,r2,255
   92180:	1004c03a 	cmpne	r2,r2,zero
   92184:	1000321e 	bne	r2,zero,92250 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
   92188:	e0bffd17 	ldw	r2,-12(fp)
   9218c:	10800b8b 	ldhu	r2,46(r2)
   92190:	10bfffcc 	andi	r2,r2,65535
   92194:	1004c03a 	cmpne	r2,r2,zero
   92198:	1000281e 	bne	r2,zero,9223c <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   9219c:	e0bffd17 	ldw	r2,-12(fp)
   921a0:	10c00d83 	ldbu	r3,54(r2)
   921a4:	008002b4 	movhi	r2,10
   921a8:	10a40a04 	addi	r2,r2,-28632
   921ac:	10800003 	ldbu	r2,0(r2)
   921b0:	1884b03a 	or	r2,r3,r2
   921b4:	1007883a 	mov	r3,r2
   921b8:	008002b4 	movhi	r2,10
   921bc:	10a40a04 	addi	r2,r2,-28632
   921c0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   921c4:	e0bffd17 	ldw	r2,-12(fp)
   921c8:	10800d03 	ldbu	r2,52(r2)
   921cc:	11003fcc 	andi	r4,r2,255
   921d0:	e0bffd17 	ldw	r2,-12(fp)
   921d4:	10800d03 	ldbu	r2,52(r2)
   921d8:	10c03fcc 	andi	r3,r2,255
   921dc:	008002b4 	movhi	r2,10
   921e0:	10a40a44 	addi	r2,r2,-28631
   921e4:	10c5883a 	add	r2,r2,r3
   921e8:	10c00003 	ldbu	r3,0(r2)
   921ec:	e0bffd17 	ldw	r2,-12(fp)
   921f0:	10800d43 	ldbu	r2,53(r2)
   921f4:	1884b03a 	or	r2,r3,r2
   921f8:	1007883a 	mov	r3,r2
   921fc:	008002b4 	movhi	r2,10
   92200:	10a40a44 	addi	r2,r2,-28631
   92204:	1105883a 	add	r2,r2,r4
   92208:	10c00005 	stb	r3,0(r2)
   9220c:	e0bffc17 	ldw	r2,-16(fp)
   92210:	e0bff815 	stw	r2,-32(fp)
   92214:	e0bff817 	ldw	r2,-32(fp)
   92218:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   9221c:	008002b4 	movhi	r2,10
   92220:	10a3fe44 	addi	r2,r2,-28679
   92224:	10800003 	ldbu	r2,0(r2)
   92228:	10803fcc 	andi	r2,r2,255
   9222c:	10800058 	cmpnei	r2,r2,1
   92230:	10000b1e 	bne	r2,zero,92260 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
   92234:	008c5880 	call	8c588 <OS_Sched>
   92238:	00000906 	br	92260 <OSTaskResume+0x1e0>
   9223c:	e0bffc17 	ldw	r2,-16(fp)
   92240:	e0bff715 	stw	r2,-36(fp)
   92244:	e0bff717 	ldw	r2,-36(fp)
   92248:	1001703a 	wrctl	status,r2
   9224c:	00000406 	br	92260 <OSTaskResume+0x1e0>
   92250:	e0bffc17 	ldw	r2,-16(fp)
   92254:	e0bff615 	stw	r2,-40(fp)
   92258:	e0bff617 	ldw	r2,-40(fp)
   9225c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   92260:	e03fff15 	stw	zero,-4(fp)
   92264:	00000606 	br	92280 <OSTaskResume+0x200>
   92268:	e0bffc17 	ldw	r2,-16(fp)
   9226c:	e0bff515 	stw	r2,-44(fp)
   92270:	e0bff517 	ldw	r2,-44(fp)
   92274:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   92278:	00801104 	movi	r2,68
   9227c:	e0bfff15 	stw	r2,-4(fp)
   92280:	e0bfff17 	ldw	r2,-4(fp)
}
   92284:	e037883a 	mov	sp,fp
   92288:	dfc00117 	ldw	ra,4(sp)
   9228c:	df000017 	ldw	fp,0(sp)
   92290:	dec00204 	addi	sp,sp,8
   92294:	f800283a 	ret

00092298 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   92298:	defff204 	addi	sp,sp,-56
   9229c:	df000d15 	stw	fp,52(sp)
   922a0:	df000d04 	addi	fp,sp,52
   922a4:	e17ffe15 	stw	r5,-8(fp)
   922a8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   922ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   922b0:	e0bffd03 	ldbu	r2,-12(fp)
   922b4:	10800570 	cmpltui	r2,r2,21
   922b8:	1000061e 	bne	r2,zero,922d4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   922bc:	e0bffd03 	ldbu	r2,-12(fp)
   922c0:	10803fe0 	cmpeqi	r2,r2,255
   922c4:	1000031e 	bne	r2,zero,922d4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   922c8:	00800a84 	movi	r2,42
   922cc:	e0bfff15 	stw	r2,-4(fp)
   922d0:	00006b06 	br	92480 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   922d4:	e0bffe17 	ldw	r2,-8(fp)
   922d8:	1004c03a 	cmpne	r2,r2,zero
   922dc:	1000031e 	bne	r2,zero,922ec <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
   922e0:	00800244 	movi	r2,9
   922e4:	e0bfff15 	stw	r2,-4(fp)
   922e8:	00006506 	br	92480 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   922ec:	e0bffe17 	ldw	r2,-8(fp)
   922f0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   922f4:	e0bffe17 	ldw	r2,-8(fp)
   922f8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   922fc:	0005303a 	rdctl	r2,status
   92300:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92304:	e0fff717 	ldw	r3,-36(fp)
   92308:	00bfff84 	movi	r2,-2
   9230c:	1884703a 	and	r2,r3,r2
   92310:	1001703a 	wrctl	status,r2
  
  return context;
   92314:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   92318:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   9231c:	e0bffd03 	ldbu	r2,-12(fp)
   92320:	10803fd8 	cmpnei	r2,r2,255
   92324:	1000051e 	bne	r2,zero,9233c <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
   92328:	008002b4 	movhi	r2,10
   9232c:	10a40d04 	addi	r2,r2,-28620
   92330:	10800017 	ldw	r2,0(r2)
   92334:	10800c83 	ldbu	r2,50(r2)
   92338:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9233c:	e0bffd03 	ldbu	r2,-12(fp)
   92340:	00c002b4 	movhi	r3,10
   92344:	18f89304 	addi	r3,r3,-7604
   92348:	1085883a 	add	r2,r2,r2
   9234c:	1085883a 	add	r2,r2,r2
   92350:	10c5883a 	add	r2,r2,r3
   92354:	10800017 	ldw	r2,0(r2)
   92358:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   9235c:	e0bffc17 	ldw	r2,-16(fp)
   92360:	1004c03a 	cmpne	r2,r2,zero
   92364:	1000071e 	bne	r2,zero,92384 <OSTaskStkChk+0xec>
   92368:	e0bff817 	ldw	r2,-32(fp)
   9236c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92370:	e0bff617 	ldw	r2,-40(fp)
   92374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   92378:	008010c4 	movi	r2,67
   9237c:	e0bfff15 	stw	r2,-4(fp)
   92380:	00003f06 	br	92480 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   92384:	e0bffc17 	ldw	r2,-16(fp)
   92388:	10800058 	cmpnei	r2,r2,1
   9238c:	1000071e 	bne	r2,zero,923ac <OSTaskStkChk+0x114>
   92390:	e0bff817 	ldw	r2,-32(fp)
   92394:	e0bff515 	stw	r2,-44(fp)
   92398:	e0bff517 	ldw	r2,-44(fp)
   9239c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   923a0:	008010c4 	movi	r2,67
   923a4:	e0bfff15 	stw	r2,-4(fp)
   923a8:	00003506 	br	92480 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   923ac:	e0bffc17 	ldw	r2,-16(fp)
   923b0:	1080040b 	ldhu	r2,16(r2)
   923b4:	10bfffcc 	andi	r2,r2,65535
   923b8:	1080004c 	andi	r2,r2,1
   923bc:	1004c03a 	cmpne	r2,r2,zero
   923c0:	1000071e 	bne	r2,zero,923e0 <OSTaskStkChk+0x148>
   923c4:	e0bff817 	ldw	r2,-32(fp)
   923c8:	e0bff415 	stw	r2,-48(fp)
   923cc:	e0bff417 	ldw	r2,-48(fp)
   923d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   923d4:	00801144 	movi	r2,69
   923d8:	e0bfff15 	stw	r2,-4(fp)
   923dc:	00002806 	br	92480 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
   923e0:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
   923e4:	e0bffc17 	ldw	r2,-16(fp)
   923e8:	10800317 	ldw	r2,12(r2)
   923ec:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
   923f0:	e0bffc17 	ldw	r2,-16(fp)
   923f4:	10800217 	ldw	r2,8(r2)
   923f8:	e0bffb15 	stw	r2,-20(fp)
   923fc:	e0bff817 	ldw	r2,-32(fp)
   92400:	e0bff315 	stw	r2,-52(fp)
   92404:	e0bff317 	ldw	r2,-52(fp)
   92408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   9240c:	00000306 	br	9241c <OSTaskStkChk+0x184>
        nfree++;
   92410:	e0bffa17 	ldw	r2,-24(fp)
   92414:	10800044 	addi	r2,r2,1
   92418:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   9241c:	e0bffb17 	ldw	r2,-20(fp)
   92420:	10800017 	ldw	r2,0(r2)
   92424:	1005003a 	cmpeq	r2,r2,zero
   92428:	1007883a 	mov	r3,r2
   9242c:	e0bffb17 	ldw	r2,-20(fp)
   92430:	10800104 	addi	r2,r2,4
   92434:	e0bffb15 	stw	r2,-20(fp)
   92438:	18803fcc 	andi	r2,r3,255
   9243c:	1004c03a 	cmpne	r2,r2,zero
   92440:	103ff31e 	bne	r2,zero,92410 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   92444:	e0bffa17 	ldw	r2,-24(fp)
   92448:	1085883a 	add	r2,r2,r2
   9244c:	1085883a 	add	r2,r2,r2
   92450:	1007883a 	mov	r3,r2
   92454:	e0bffe17 	ldw	r2,-8(fp)
   92458:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   9245c:	e0fff917 	ldw	r3,-28(fp)
   92460:	e0bffa17 	ldw	r2,-24(fp)
   92464:	1885c83a 	sub	r2,r3,r2
   92468:	1085883a 	add	r2,r2,r2
   9246c:	1085883a 	add	r2,r2,r2
   92470:	1007883a 	mov	r3,r2
   92474:	e0bffe17 	ldw	r2,-8(fp)
   92478:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   9247c:	e03fff15 	stw	zero,-4(fp)
   92480:	e0bfff17 	ldw	r2,-4(fp)
}
   92484:	e037883a 	mov	sp,fp
   92488:	df000017 	ldw	fp,0(sp)
   9248c:	dec00104 	addi	sp,sp,4
   92490:	f800283a 	ret

00092494 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   92494:	defff404 	addi	sp,sp,-48
   92498:	dfc00b15 	stw	ra,44(sp)
   9249c:	df000a15 	stw	fp,40(sp)
   924a0:	df000a04 	addi	fp,sp,40
   924a4:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   924a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   924ac:	e0bffe03 	ldbu	r2,-8(fp)
   924b0:	10800518 	cmpnei	r2,r2,20
   924b4:	1000031e 	bne	r2,zero,924c4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   924b8:	008011c4 	movi	r2,71
   924bc:	e0bfff15 	stw	r2,-4(fp)
   924c0:	00007906 	br	926a8 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   924c4:	e0bffe03 	ldbu	r2,-8(fp)
   924c8:	10800530 	cmpltui	r2,r2,20
   924cc:	1000061e 	bne	r2,zero,924e8 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
   924d0:	e0bffe03 	ldbu	r2,-8(fp)
   924d4:	10803fe0 	cmpeqi	r2,r2,255
   924d8:	1000031e 	bne	r2,zero,924e8 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
   924dc:	00800a84 	movi	r2,42
   924e0:	e0bfff15 	stw	r2,-4(fp)
   924e4:	00007006 	br	926a8 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   924e8:	0005303a 	rdctl	r2,status
   924ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   924f0:	e0fff917 	ldw	r3,-28(fp)
   924f4:	00bfff84 	movi	r2,-2
   924f8:	1884703a 	and	r2,r3,r2
   924fc:	1001703a 	wrctl	status,r2
  
  return context;
   92500:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   92504:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   92508:	e0bffe03 	ldbu	r2,-8(fp)
   9250c:	10803fd8 	cmpnei	r2,r2,255
   92510:	1000081e 	bne	r2,zero,92534 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
   92514:	008002b4 	movhi	r2,10
   92518:	10a40d04 	addi	r2,r2,-28620
   9251c:	10800017 	ldw	r2,0(r2)
   92520:	10800c83 	ldbu	r2,50(r2)
   92524:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
   92528:	00800044 	movi	r2,1
   9252c:	e0bffd05 	stb	r2,-12(fp)
   92530:	00000b06 	br	92560 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   92534:	008002b4 	movhi	r2,10
   92538:	10a40d04 	addi	r2,r2,-28620
   9253c:	10800017 	ldw	r2,0(r2)
   92540:	10800c83 	ldbu	r2,50(r2)
   92544:	10c03fcc 	andi	r3,r2,255
   92548:	e0bffe03 	ldbu	r2,-8(fp)
   9254c:	1880031e 	bne	r3,r2,9255c <OSTaskSuspend+0xc8>
        self = OS_TRUE;
   92550:	00800044 	movi	r2,1
   92554:	e0bffd05 	stb	r2,-12(fp)
   92558:	00000106 	br	92560 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   9255c:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   92560:	e0bffe03 	ldbu	r2,-8(fp)
   92564:	00c002b4 	movhi	r3,10
   92568:	18f89304 	addi	r3,r3,-7604
   9256c:	1085883a 	add	r2,r2,r2
   92570:	1085883a 	add	r2,r2,r2
   92574:	10c5883a 	add	r2,r2,r3
   92578:	10800017 	ldw	r2,0(r2)
   9257c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   92580:	e0bffc17 	ldw	r2,-16(fp)
   92584:	1004c03a 	cmpne	r2,r2,zero
   92588:	1000071e 	bne	r2,zero,925a8 <OSTaskSuspend+0x114>
   9258c:	e0bffa17 	ldw	r2,-24(fp)
   92590:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92594:	e0bff817 	ldw	r2,-32(fp)
   92598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   9259c:	00801204 	movi	r2,72
   925a0:	e0bfff15 	stw	r2,-4(fp)
   925a4:	00004006 	br	926a8 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   925a8:	e0bffc17 	ldw	r2,-16(fp)
   925ac:	10800058 	cmpnei	r2,r2,1
   925b0:	1000071e 	bne	r2,zero,925d0 <OSTaskSuspend+0x13c>
   925b4:	e0bffa17 	ldw	r2,-24(fp)
   925b8:	e0bff715 	stw	r2,-36(fp)
   925bc:	e0bff717 	ldw	r2,-36(fp)
   925c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   925c4:	008010c4 	movi	r2,67
   925c8:	e0bfff15 	stw	r2,-4(fp)
   925cc:	00003606 	br	926a8 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
   925d0:	e0bffc17 	ldw	r2,-16(fp)
   925d4:	10800d03 	ldbu	r2,52(r2)
   925d8:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   925dc:	e13ffb03 	ldbu	r4,-20(fp)
   925e0:	e0fffb03 	ldbu	r3,-20(fp)
   925e4:	008002b4 	movhi	r2,10
   925e8:	10a40a44 	addi	r2,r2,-28631
   925ec:	10c5883a 	add	r2,r2,r3
   925f0:	10800003 	ldbu	r2,0(r2)
   925f4:	1007883a 	mov	r3,r2
   925f8:	e0bffc17 	ldw	r2,-16(fp)
   925fc:	10800d43 	ldbu	r2,53(r2)
   92600:	0084303a 	nor	r2,zero,r2
   92604:	1884703a 	and	r2,r3,r2
   92608:	1007883a 	mov	r3,r2
   9260c:	008002b4 	movhi	r2,10
   92610:	10a40a44 	addi	r2,r2,-28631
   92614:	1105883a 	add	r2,r2,r4
   92618:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   9261c:	e0fffb03 	ldbu	r3,-20(fp)
   92620:	008002b4 	movhi	r2,10
   92624:	10a40a44 	addi	r2,r2,-28631
   92628:	10c5883a 	add	r2,r2,r3
   9262c:	10800003 	ldbu	r2,0(r2)
   92630:	10803fcc 	andi	r2,r2,255
   92634:	1004c03a 	cmpne	r2,r2,zero
   92638:	10000c1e 	bne	r2,zero,9266c <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   9263c:	e0bffc17 	ldw	r2,-16(fp)
   92640:	10800d83 	ldbu	r2,54(r2)
   92644:	0084303a 	nor	r2,zero,r2
   92648:	1007883a 	mov	r3,r2
   9264c:	008002b4 	movhi	r2,10
   92650:	10a40a04 	addi	r2,r2,-28632
   92654:	10800003 	ldbu	r2,0(r2)
   92658:	1884703a 	and	r2,r3,r2
   9265c:	1007883a 	mov	r3,r2
   92660:	008002b4 	movhi	r2,10
   92664:	10a40a04 	addi	r2,r2,-28632
   92668:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   9266c:	e0bffc17 	ldw	r2,-16(fp)
   92670:	10800c03 	ldbu	r2,48(r2)
   92674:	10800214 	ori	r2,r2,8
   92678:	1007883a 	mov	r3,r2
   9267c:	e0bffc17 	ldw	r2,-16(fp)
   92680:	10c00c05 	stb	r3,48(r2)
   92684:	e0bffa17 	ldw	r2,-24(fp)
   92688:	e0bff615 	stw	r2,-40(fp)
   9268c:	e0bff617 	ldw	r2,-40(fp)
   92690:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   92694:	e0bffd03 	ldbu	r2,-12(fp)
   92698:	10800058 	cmpnei	r2,r2,1
   9269c:	1000011e 	bne	r2,zero,926a4 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
   926a0:	008c5880 	call	8c588 <OS_Sched>
    }
    return (OS_ERR_NONE);
   926a4:	e03fff15 	stw	zero,-4(fp)
   926a8:	e0bfff17 	ldw	r2,-4(fp)
}
   926ac:	e037883a 	mov	sp,fp
   926b0:	dfc00117 	ldw	ra,4(sp)
   926b4:	df000017 	ldw	fp,0(sp)
   926b8:	dec00204 	addi	sp,sp,8
   926bc:	f800283a 	ret

000926c0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   926c0:	defff504 	addi	sp,sp,-44
   926c4:	dfc00a15 	stw	ra,40(sp)
   926c8:	df000915 	stw	fp,36(sp)
   926cc:	df000904 	addi	fp,sp,36
   926d0:	e17ffe15 	stw	r5,-8(fp)
   926d4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   926d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   926dc:	e0bffd03 	ldbu	r2,-12(fp)
   926e0:	10800570 	cmpltui	r2,r2,21
   926e4:	1000061e 	bne	r2,zero,92700 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   926e8:	e0bffd03 	ldbu	r2,-12(fp)
   926ec:	10803fe0 	cmpeqi	r2,r2,255
   926f0:	1000031e 	bne	r2,zero,92700 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   926f4:	00800a84 	movi	r2,42
   926f8:	e0bfff15 	stw	r2,-4(fp)
   926fc:	00003b06 	br	927ec <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   92700:	e0bffe17 	ldw	r2,-8(fp)
   92704:	1004c03a 	cmpne	r2,r2,zero
   92708:	1000031e 	bne	r2,zero,92718 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
   9270c:	00800244 	movi	r2,9
   92710:	e0bfff15 	stw	r2,-4(fp)
   92714:	00003506 	br	927ec <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92718:	0005303a 	rdctl	r2,status
   9271c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92720:	e0fffa17 	ldw	r3,-24(fp)
   92724:	00bfff84 	movi	r2,-2
   92728:	1884703a 	and	r2,r3,r2
   9272c:	1001703a 	wrctl	status,r2
  
  return context;
   92730:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92734:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   92738:	e0bffd03 	ldbu	r2,-12(fp)
   9273c:	10803fd8 	cmpnei	r2,r2,255
   92740:	1000051e 	bne	r2,zero,92758 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
   92744:	008002b4 	movhi	r2,10
   92748:	10a40d04 	addi	r2,r2,-28620
   9274c:	10800017 	ldw	r2,0(r2)
   92750:	10800c83 	ldbu	r2,50(r2)
   92754:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   92758:	e0bffd03 	ldbu	r2,-12(fp)
   9275c:	00c002b4 	movhi	r3,10
   92760:	18f89304 	addi	r3,r3,-7604
   92764:	1085883a 	add	r2,r2,r2
   92768:	1085883a 	add	r2,r2,r2
   9276c:	10c5883a 	add	r2,r2,r3
   92770:	10800017 	ldw	r2,0(r2)
   92774:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   92778:	e0bffc17 	ldw	r2,-16(fp)
   9277c:	1004c03a 	cmpne	r2,r2,zero
   92780:	1000071e 	bne	r2,zero,927a0 <OSTaskQuery+0xe0>
   92784:	e0bffb17 	ldw	r2,-20(fp)
   92788:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9278c:	e0bff917 	ldw	r2,-28(fp)
   92790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   92794:	00800a44 	movi	r2,41
   92798:	e0bfff15 	stw	r2,-4(fp)
   9279c:	00001306 	br	927ec <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   927a0:	e0bffc17 	ldw	r2,-16(fp)
   927a4:	10800058 	cmpnei	r2,r2,1
   927a8:	1000071e 	bne	r2,zero,927c8 <OSTaskQuery+0x108>
   927ac:	e0bffb17 	ldw	r2,-20(fp)
   927b0:	e0bff815 	stw	r2,-32(fp)
   927b4:	e0bff817 	ldw	r2,-32(fp)
   927b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   927bc:	008010c4 	movi	r2,67
   927c0:	e0bfff15 	stw	r2,-4(fp)
   927c4:	00000906 	br	927ec <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   927c8:	e13ffe17 	ldw	r4,-8(fp)
   927cc:	e17ffc17 	ldw	r5,-16(fp)
   927d0:	01801b04 	movi	r6,108
   927d4:	008c51c0 	call	8c51c <OS_MemCopy>
   927d8:	e0bffb17 	ldw	r2,-20(fp)
   927dc:	e0bff715 	stw	r2,-36(fp)
   927e0:	e0bff717 	ldw	r2,-36(fp)
   927e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   927e8:	e03fff15 	stw	zero,-4(fp)
   927ec:	e0bfff17 	ldw	r2,-4(fp)
}
   927f0:	e037883a 	mov	sp,fp
   927f4:	dfc00117 	ldw	ra,4(sp)
   927f8:	df000017 	ldw	fp,0(sp)
   927fc:	dec00204 	addi	sp,sp,8
   92800:	f800283a 	ret

00092804 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   92804:	defffc04 	addi	sp,sp,-16
   92808:	df000315 	stw	fp,12(sp)
   9280c:	df000304 	addi	fp,sp,12
   92810:	e13ffd15 	stw	r4,-12(fp)
   92814:	e17ffe15 	stw	r5,-8(fp)
   92818:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   9281c:	e0bfff0b 	ldhu	r2,-4(fp)
   92820:	1080004c 	andi	r2,r2,1
   92824:	10803fcc 	andi	r2,r2,255
   92828:	1005003a 	cmpeq	r2,r2,zero
   9282c:	1000101e 	bne	r2,zero,92870 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   92830:	e0bfff0b 	ldhu	r2,-4(fp)
   92834:	1080008c 	andi	r2,r2,2
   92838:	1005003a 	cmpeq	r2,r2,zero
   9283c:	10000c1e 	bne	r2,zero,92870 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   92840:	00000806 	br	92864 <OS_TaskStkClr+0x60>
                size--;
   92844:	e0bffe17 	ldw	r2,-8(fp)
   92848:	10bfffc4 	addi	r2,r2,-1
   9284c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   92850:	e0bffd17 	ldw	r2,-12(fp)
   92854:	10000015 	stw	zero,0(r2)
   92858:	e0bffd17 	ldw	r2,-12(fp)
   9285c:	10800104 	addi	r2,r2,4
   92860:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   92864:	e0bffe17 	ldw	r2,-8(fp)
   92868:	1004c03a 	cmpne	r2,r2,zero
   9286c:	103ff51e 	bne	r2,zero,92844 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   92870:	e037883a 	mov	sp,fp
   92874:	df000017 	ldw	fp,0(sp)
   92878:	dec00104 	addi	sp,sp,4
   9287c:	f800283a 	ret

00092880 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   92880:	defff904 	addi	sp,sp,-28
   92884:	dfc00615 	stw	ra,24(sp)
   92888:	df000515 	stw	fp,20(sp)
   9288c:	df000504 	addi	fp,sp,20
   92890:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92894:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   92898:	008002b4 	movhi	r2,10
   9289c:	10a40c04 	addi	r2,r2,-28624
   928a0:	10800003 	ldbu	r2,0(r2)
   928a4:	10803fcc 	andi	r2,r2,255
   928a8:	1004c03a 	cmpne	r2,r2,zero
   928ac:	1000421e 	bne	r2,zero,929b8 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   928b0:	e0bfff0b 	ldhu	r2,-4(fp)
   928b4:	1005003a 	cmpeq	r2,r2,zero
   928b8:	10003f1e 	bne	r2,zero,929b8 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   928bc:	0005303a 	rdctl	r2,status
   928c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   928c4:	e0fffc17 	ldw	r3,-16(fp)
   928c8:	00bfff84 	movi	r2,-2
   928cc:	1884703a 	and	r2,r3,r2
   928d0:	1001703a 	wrctl	status,r2
  
  return context;
   928d4:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
   928d8:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   928dc:	008002b4 	movhi	r2,10
   928e0:	10a40d04 	addi	r2,r2,-28620
   928e4:	10800017 	ldw	r2,0(r2)
   928e8:	10800d03 	ldbu	r2,52(r2)
   928ec:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   928f0:	e13ffe03 	ldbu	r4,-8(fp)
   928f4:	e0fffe03 	ldbu	r3,-8(fp)
   928f8:	008002b4 	movhi	r2,10
   928fc:	10a40a44 	addi	r2,r2,-28631
   92900:	10c5883a 	add	r2,r2,r3
   92904:	10800003 	ldbu	r2,0(r2)
   92908:	1007883a 	mov	r3,r2
   9290c:	008002b4 	movhi	r2,10
   92910:	10a40d04 	addi	r2,r2,-28620
   92914:	10800017 	ldw	r2,0(r2)
   92918:	10800d43 	ldbu	r2,53(r2)
   9291c:	0084303a 	nor	r2,zero,r2
   92920:	1884703a 	and	r2,r3,r2
   92924:	1007883a 	mov	r3,r2
   92928:	008002b4 	movhi	r2,10
   9292c:	10a40a44 	addi	r2,r2,-28631
   92930:	1105883a 	add	r2,r2,r4
   92934:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
   92938:	e0fffe03 	ldbu	r3,-8(fp)
   9293c:	008002b4 	movhi	r2,10
   92940:	10a40a44 	addi	r2,r2,-28631
   92944:	10c5883a 	add	r2,r2,r3
   92948:	10800003 	ldbu	r2,0(r2)
   9294c:	10803fcc 	andi	r2,r2,255
   92950:	1004c03a 	cmpne	r2,r2,zero
   92954:	10000e1e 	bne	r2,zero,92990 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   92958:	008002b4 	movhi	r2,10
   9295c:	10a40d04 	addi	r2,r2,-28620
   92960:	10800017 	ldw	r2,0(r2)
   92964:	10800d83 	ldbu	r2,54(r2)
   92968:	0084303a 	nor	r2,zero,r2
   9296c:	1007883a 	mov	r3,r2
   92970:	008002b4 	movhi	r2,10
   92974:	10a40a04 	addi	r2,r2,-28632
   92978:	10800003 	ldbu	r2,0(r2)
   9297c:	1884703a 	and	r2,r3,r2
   92980:	1007883a 	mov	r3,r2
   92984:	008002b4 	movhi	r2,10
   92988:	10a40a04 	addi	r2,r2,-28632
   9298c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   92990:	008002b4 	movhi	r2,10
   92994:	10a40d04 	addi	r2,r2,-28620
   92998:	10c00017 	ldw	r3,0(r2)
   9299c:	e0bfff0b 	ldhu	r2,-4(fp)
   929a0:	18800b8d 	sth	r2,46(r3)
   929a4:	e0bffd17 	ldw	r2,-12(fp)
   929a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   929ac:	e0bffb17 	ldw	r2,-20(fp)
   929b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   929b4:	008c5880 	call	8c588 <OS_Sched>
    }
}
   929b8:	e037883a 	mov	sp,fp
   929bc:	dfc00117 	ldw	ra,4(sp)
   929c0:	df000017 	ldw	fp,0(sp)
   929c4:	dec00204 	addi	sp,sp,8
   929c8:	f800283a 	ret

000929cc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   929cc:	defff604 	addi	sp,sp,-40
   929d0:	dfc00915 	stw	ra,36(sp)
   929d4:	df000815 	stw	fp,32(sp)
   929d8:	dc000715 	stw	r16,28(sp)
   929dc:	df000704 	addi	fp,sp,28
   929e0:	e13ffb05 	stb	r4,-20(fp)
   929e4:	e17ffc05 	stb	r5,-16(fp)
   929e8:	e1bffd05 	stb	r6,-12(fp)
   929ec:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   929f0:	008002b4 	movhi	r2,10
   929f4:	10a40c04 	addi	r2,r2,-28624
   929f8:	10800003 	ldbu	r2,0(r2)
   929fc:	10803fcc 	andi	r2,r2,255
   92a00:	1005003a 	cmpeq	r2,r2,zero
   92a04:	1000031e 	bne	r2,zero,92a14 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   92a08:	00801544 	movi	r2,85
   92a0c:	e0bfff15 	stw	r2,-4(fp)
   92a10:	00004b06 	br	92b40 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   92a14:	e0bffb03 	ldbu	r2,-20(fp)
   92a18:	1004c03a 	cmpne	r2,r2,zero
   92a1c:	10000c1e 	bne	r2,zero,92a50 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
   92a20:	e0bffc03 	ldbu	r2,-16(fp)
   92a24:	1004c03a 	cmpne	r2,r2,zero
   92a28:	1000091e 	bne	r2,zero,92a50 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
   92a2c:	e0bffd03 	ldbu	r2,-12(fp)
   92a30:	1004c03a 	cmpne	r2,r2,zero
   92a34:	1000061e 	bne	r2,zero,92a50 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
   92a38:	e0bffe0b 	ldhu	r2,-8(fp)
   92a3c:	1004c03a 	cmpne	r2,r2,zero
   92a40:	1000031e 	bne	r2,zero,92a50 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
   92a44:	00801504 	movi	r2,84
   92a48:	e0bfff15 	stw	r2,-4(fp)
   92a4c:	00003c06 	br	92b40 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
   92a50:	e0bffc03 	ldbu	r2,-16(fp)
   92a54:	10800f30 	cmpltui	r2,r2,60
   92a58:	1000031e 	bne	r2,zero,92a68 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   92a5c:	00801444 	movi	r2,81
   92a60:	e0bfff15 	stw	r2,-4(fp)
   92a64:	00003606 	br	92b40 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
   92a68:	e0bffd03 	ldbu	r2,-12(fp)
   92a6c:	10800f30 	cmpltui	r2,r2,60
   92a70:	1000031e 	bne	r2,zero,92a80 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   92a74:	00801484 	movi	r2,82
   92a78:	e0bfff15 	stw	r2,-4(fp)
   92a7c:	00003006 	br	92b40 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
   92a80:	e0bffe0b 	ldhu	r2,-8(fp)
   92a84:	1080fa30 	cmpltui	r2,r2,1000
   92a88:	1000031e 	bne	r2,zero,92a98 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
   92a8c:	008014c4 	movi	r2,83
   92a90:	e0bfff15 	stw	r2,-4(fp)
   92a94:	00002a06 	br	92b40 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   92a98:	e13ffb03 	ldbu	r4,-20(fp)
   92a9c:	01438404 	movi	r5,3600
   92aa0:	008964c0 	call	8964c <__mulsi3>
   92aa4:	1021883a 	mov	r16,r2
   92aa8:	e13ffc03 	ldbu	r4,-16(fp)
   92aac:	01400f04 	movi	r5,60
   92ab0:	008964c0 	call	8964c <__mulsi3>
   92ab4:	8087883a 	add	r3,r16,r2
   92ab8:	e0bffd03 	ldbu	r2,-12(fp)
   92abc:	1889883a 	add	r4,r3,r2
   92ac0:	0140fa04 	movi	r5,1000
   92ac4:	008964c0 	call	8964c <__mulsi3>
   92ac8:	1021883a 	mov	r16,r2
   92acc:	e13ffe0b 	ldhu	r4,-8(fp)
   92ad0:	0140fa04 	movi	r5,1000
   92ad4:	008964c0 	call	8964c <__mulsi3>
   92ad8:	1009883a 	mov	r4,r2
   92adc:	0140fa04 	movi	r5,1000
   92ae0:	008963c0 	call	8963c <__udivsi3>
   92ae4:	8085883a 	add	r2,r16,r2
   92ae8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   92aec:	e0bffa17 	ldw	r2,-24(fp)
   92af0:	1004d43a 	srli	r2,r2,16
   92af4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   92af8:	e0bffa17 	ldw	r2,-24(fp)
   92afc:	10bfffcc 	andi	r2,r2,65535
   92b00:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   92b04:	e0bffa17 	ldw	r2,-24(fp)
   92b08:	113fffcc 	andi	r4,r2,65535
   92b0c:	00928800 	call	92880 <OSTimeDly>
    while (loops > 0) {
   92b10:	00000706 	br	92b30 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
   92b14:	01200014 	movui	r4,32768
   92b18:	00928800 	call	92880 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   92b1c:	01200014 	movui	r4,32768
   92b20:	00928800 	call	92880 <OSTimeDly>
        loops--;
   92b24:	e0bff90b 	ldhu	r2,-28(fp)
   92b28:	10bfffc4 	addi	r2,r2,-1
   92b2c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   92b30:	e0bff90b 	ldhu	r2,-28(fp)
   92b34:	1004c03a 	cmpne	r2,r2,zero
   92b38:	103ff61e 	bne	r2,zero,92b14 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   92b3c:	e03fff15 	stw	zero,-4(fp)
   92b40:	e0bfff17 	ldw	r2,-4(fp)
}
   92b44:	e037883a 	mov	sp,fp
   92b48:	dfc00217 	ldw	ra,8(sp)
   92b4c:	df000117 	ldw	fp,4(sp)
   92b50:	dc000017 	ldw	r16,0(sp)
   92b54:	dec00304 	addi	sp,sp,12
   92b58:	f800283a 	ret

00092b5c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   92b5c:	defff404 	addi	sp,sp,-48
   92b60:	dfc00b15 	stw	ra,44(sp)
   92b64:	df000a15 	stw	fp,40(sp)
   92b68:	df000a04 	addi	fp,sp,40
   92b6c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92b70:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   92b74:	e0bffe03 	ldbu	r2,-8(fp)
   92b78:	10800530 	cmpltui	r2,r2,20
   92b7c:	1000031e 	bne	r2,zero,92b8c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   92b80:	00800a84 	movi	r2,42
   92b84:	e0bfff15 	stw	r2,-4(fp)
   92b88:	00007206 	br	92d54 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92b8c:	0005303a 	rdctl	r2,status
   92b90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92b94:	e0fffb17 	ldw	r3,-20(fp)
   92b98:	00bfff84 	movi	r2,-2
   92b9c:	1884703a 	and	r2,r3,r2
   92ba0:	1001703a 	wrctl	status,r2
  
  return context;
   92ba4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   92ba8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   92bac:	e0bffe03 	ldbu	r2,-8(fp)
   92bb0:	00c002b4 	movhi	r3,10
   92bb4:	18f89304 	addi	r3,r3,-7604
   92bb8:	1085883a 	add	r2,r2,r2
   92bbc:	1085883a 	add	r2,r2,r2
   92bc0:	10c5883a 	add	r2,r2,r3
   92bc4:	10800017 	ldw	r2,0(r2)
   92bc8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
   92bcc:	e0bffd17 	ldw	r2,-12(fp)
   92bd0:	1004c03a 	cmpne	r2,r2,zero
   92bd4:	1000071e 	bne	r2,zero,92bf4 <OSTimeDlyResume+0x98>
   92bd8:	e0bffc17 	ldw	r2,-16(fp)
   92bdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92be0:	e0bffa17 	ldw	r2,-24(fp)
   92be4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   92be8:	008010c4 	movi	r2,67
   92bec:	e0bfff15 	stw	r2,-4(fp)
   92bf0:	00005806 	br	92d54 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   92bf4:	e0bffd17 	ldw	r2,-12(fp)
   92bf8:	10800058 	cmpnei	r2,r2,1
   92bfc:	1000071e 	bne	r2,zero,92c1c <OSTimeDlyResume+0xc0>
   92c00:	e0bffc17 	ldw	r2,-16(fp)
   92c04:	e0bff915 	stw	r2,-28(fp)
   92c08:	e0bff917 	ldw	r2,-28(fp)
   92c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   92c10:	008010c4 	movi	r2,67
   92c14:	e0bfff15 	stw	r2,-4(fp)
   92c18:	00004e06 	br	92d54 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   92c1c:	e0bffd17 	ldw	r2,-12(fp)
   92c20:	10800b8b 	ldhu	r2,46(r2)
   92c24:	10bfffcc 	andi	r2,r2,65535
   92c28:	1004c03a 	cmpne	r2,r2,zero
   92c2c:	1000071e 	bne	r2,zero,92c4c <OSTimeDlyResume+0xf0>
   92c30:	e0bffc17 	ldw	r2,-16(fp)
   92c34:	e0bff815 	stw	r2,-32(fp)
   92c38:	e0bff817 	ldw	r2,-32(fp)
   92c3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   92c40:	00801404 	movi	r2,80
   92c44:	e0bfff15 	stw	r2,-4(fp)
   92c48:	00004206 	br	92d54 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   92c4c:	e0bffd17 	ldw	r2,-12(fp)
   92c50:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   92c54:	e0bffd17 	ldw	r2,-12(fp)
   92c58:	10800c03 	ldbu	r2,48(r2)
   92c5c:	10803fcc 	andi	r2,r2,255
   92c60:	10800dcc 	andi	r2,r2,55
   92c64:	1005003a 	cmpeq	r2,r2,zero
   92c68:	10000b1e 	bne	r2,zero,92c98 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   92c6c:	e0bffd17 	ldw	r2,-12(fp)
   92c70:	10c00c03 	ldbu	r3,48(r2)
   92c74:	00bff204 	movi	r2,-56
   92c78:	1884703a 	and	r2,r3,r2
   92c7c:	1007883a 	mov	r3,r2
   92c80:	e0bffd17 	ldw	r2,-12(fp)
   92c84:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   92c88:	e0fffd17 	ldw	r3,-12(fp)
   92c8c:	00800044 	movi	r2,1
   92c90:	18800c45 	stb	r2,49(r3)
   92c94:	00000206 	br	92ca0 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   92c98:	e0bffd17 	ldw	r2,-12(fp)
   92c9c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   92ca0:	e0bffd17 	ldw	r2,-12(fp)
   92ca4:	10800c03 	ldbu	r2,48(r2)
   92ca8:	10803fcc 	andi	r2,r2,255
   92cac:	1080020c 	andi	r2,r2,8
   92cb0:	1004c03a 	cmpne	r2,r2,zero
   92cb4:	1000221e 	bne	r2,zero,92d40 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   92cb8:	e0bffd17 	ldw	r2,-12(fp)
   92cbc:	10c00d83 	ldbu	r3,54(r2)
   92cc0:	008002b4 	movhi	r2,10
   92cc4:	10a40a04 	addi	r2,r2,-28632
   92cc8:	10800003 	ldbu	r2,0(r2)
   92ccc:	1884b03a 	or	r2,r3,r2
   92cd0:	1007883a 	mov	r3,r2
   92cd4:	008002b4 	movhi	r2,10
   92cd8:	10a40a04 	addi	r2,r2,-28632
   92cdc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   92ce0:	e0bffd17 	ldw	r2,-12(fp)
   92ce4:	10800d03 	ldbu	r2,52(r2)
   92ce8:	11003fcc 	andi	r4,r2,255
   92cec:	e0bffd17 	ldw	r2,-12(fp)
   92cf0:	10800d03 	ldbu	r2,52(r2)
   92cf4:	10c03fcc 	andi	r3,r2,255
   92cf8:	008002b4 	movhi	r2,10
   92cfc:	10a40a44 	addi	r2,r2,-28631
   92d00:	10c5883a 	add	r2,r2,r3
   92d04:	10c00003 	ldbu	r3,0(r2)
   92d08:	e0bffd17 	ldw	r2,-12(fp)
   92d0c:	10800d43 	ldbu	r2,53(r2)
   92d10:	1884b03a 	or	r2,r3,r2
   92d14:	1007883a 	mov	r3,r2
   92d18:	008002b4 	movhi	r2,10
   92d1c:	10a40a44 	addi	r2,r2,-28631
   92d20:	1105883a 	add	r2,r2,r4
   92d24:	10c00005 	stb	r3,0(r2)
   92d28:	e0bffc17 	ldw	r2,-16(fp)
   92d2c:	e0bff715 	stw	r2,-36(fp)
   92d30:	e0bff717 	ldw	r2,-36(fp)
   92d34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   92d38:	008c5880 	call	8c588 <OS_Sched>
   92d3c:	00000406 	br	92d50 <OSTimeDlyResume+0x1f4>
   92d40:	e0bffc17 	ldw	r2,-16(fp)
   92d44:	e0bff615 	stw	r2,-40(fp)
   92d48:	e0bff617 	ldw	r2,-40(fp)
   92d4c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   92d50:	e03fff15 	stw	zero,-4(fp)
   92d54:	e0bfff17 	ldw	r2,-4(fp)
}
   92d58:	e037883a 	mov	sp,fp
   92d5c:	dfc00117 	ldw	ra,4(sp)
   92d60:	df000017 	ldw	fp,0(sp)
   92d64:	dec00204 	addi	sp,sp,8
   92d68:	f800283a 	ret

00092d6c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   92d6c:	defffb04 	addi	sp,sp,-20
   92d70:	df000415 	stw	fp,16(sp)
   92d74:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92d78:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92d7c:	0005303a 	rdctl	r2,status
   92d80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92d84:	e0fffd17 	ldw	r3,-12(fp)
   92d88:	00bfff84 	movi	r2,-2
   92d8c:	1884703a 	and	r2,r3,r2
   92d90:	1001703a 	wrctl	status,r2
  
  return context;
   92d94:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   92d98:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
   92d9c:	008002b4 	movhi	r2,10
   92da0:	10a40e04 	addi	r2,r2,-28616
   92da4:	10800017 	ldw	r2,0(r2)
   92da8:	e0bfff15 	stw	r2,-4(fp)
   92dac:	e0bffe17 	ldw	r2,-8(fp)
   92db0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92db4:	e0bffc17 	ldw	r2,-16(fp)
   92db8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   92dbc:	e0bfff17 	ldw	r2,-4(fp)
}
   92dc0:	e037883a 	mov	sp,fp
   92dc4:	df000017 	ldw	fp,0(sp)
   92dc8:	dec00104 	addi	sp,sp,4
   92dcc:	f800283a 	ret

00092dd0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   92dd0:	defffb04 	addi	sp,sp,-20
   92dd4:	df000415 	stw	fp,16(sp)
   92dd8:	df000404 	addi	fp,sp,16
   92ddc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92de0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92de4:	0005303a 	rdctl	r2,status
   92de8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92dec:	e0fffd17 	ldw	r3,-12(fp)
   92df0:	00bfff84 	movi	r2,-2
   92df4:	1884703a 	and	r2,r3,r2
   92df8:	1001703a 	wrctl	status,r2
  
  return context;
   92dfc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   92e00:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
   92e04:	00c002b4 	movhi	r3,10
   92e08:	18e40e04 	addi	r3,r3,-28616
   92e0c:	e0bfff17 	ldw	r2,-4(fp)
   92e10:	18800015 	stw	r2,0(r3)
   92e14:	e0bffe17 	ldw	r2,-8(fp)
   92e18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92e1c:	e0bffc17 	ldw	r2,-16(fp)
   92e20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   92e24:	e037883a 	mov	sp,fp
   92e28:	df000017 	ldw	fp,0(sp)
   92e2c:	dec00104 	addi	sp,sp,4
   92e30:	f800283a 	ret

00092e34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   92e34:	defffd04 	addi	sp,sp,-12
   92e38:	dfc00215 	stw	ra,8(sp)
   92e3c:	df000115 	stw	fp,4(sp)
   92e40:	df000104 	addi	fp,sp,4
   92e44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   92e48:	00949680 	call	94968 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   92e4c:	00800044 	movi	r2,1
   92e50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   92e54:	e037883a 	mov	sp,fp
   92e58:	dfc00117 	ldw	ra,4(sp)
   92e5c:	df000017 	ldw	fp,0(sp)
   92e60:	dec00204 	addi	sp,sp,8
   92e64:	f800283a 	ret

00092e68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   92e68:	defffe04 	addi	sp,sp,-8
   92e6c:	dfc00115 	stw	ra,4(sp)
   92e70:	df000015 	stw	fp,0(sp)
   92e74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   92e78:	01000474 	movhi	r4,17
   92e7c:	21240004 	addi	r4,r4,-28672
   92e80:	000b883a 	mov	r5,zero
   92e84:	000d883a 	mov	r6,zero
   92e88:	01c0fa04 	movi	r7,1000
   92e8c:	0093cc80 	call	93cc8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   92e90:	01000274 	movhi	r4,9
   92e94:	2118f604 	addi	r4,r4,25560
   92e98:	000b883a 	mov	r5,zero
   92e9c:	01800044 	movi	r6,1
   92ea0:	00930440 	call	93044 <altera_avalon_jtag_uart_init>
   92ea4:	01000274 	movhi	r4,9
   92ea8:	2118ec04 	addi	r4,r4,25520
   92eac:	0092ec40 	call	92ec4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   92eb0:	e037883a 	mov	sp,fp
   92eb4:	dfc00117 	ldw	ra,4(sp)
   92eb8:	df000017 	ldw	fp,0(sp)
   92ebc:	dec00204 	addi	sp,sp,8
   92ec0:	f800283a 	ret

00092ec4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   92ec4:	defffd04 	addi	sp,sp,-12
   92ec8:	dfc00215 	stw	ra,8(sp)
   92ecc:	df000115 	stw	fp,4(sp)
   92ed0:	df000104 	addi	fp,sp,4
   92ed4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   92ed8:	e13fff17 	ldw	r4,-4(fp)
   92edc:	01400274 	movhi	r5,9
   92ee0:	295d0f04 	addi	r5,r5,29756
   92ee4:	0093ec80 	call	93ec8 <alt_dev_llist_insert>
}
   92ee8:	e037883a 	mov	sp,fp
   92eec:	dfc00117 	ldw	ra,4(sp)
   92ef0:	df000017 	ldw	fp,0(sp)
   92ef4:	dec00204 	addi	sp,sp,8
   92ef8:	f800283a 	ret

00092efc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   92efc:	defffa04 	addi	sp,sp,-24
   92f00:	dfc00515 	stw	ra,20(sp)
   92f04:	df000415 	stw	fp,16(sp)
   92f08:	df000404 	addi	fp,sp,16
   92f0c:	e13ffd15 	stw	r4,-12(fp)
   92f10:	e17ffe15 	stw	r5,-8(fp)
   92f14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   92f18:	e0bffd17 	ldw	r2,-12(fp)
   92f1c:	10800017 	ldw	r2,0(r2)
   92f20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   92f24:	e0bffc17 	ldw	r2,-16(fp)
   92f28:	11000a04 	addi	r4,r2,40
   92f2c:	e0bffd17 	ldw	r2,-12(fp)
   92f30:	11c00217 	ldw	r7,8(r2)
   92f34:	e17ffe17 	ldw	r5,-8(fp)
   92f38:	e1bfff17 	ldw	r6,-4(fp)
   92f3c:	00936bc0 	call	936bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   92f40:	e037883a 	mov	sp,fp
   92f44:	dfc00117 	ldw	ra,4(sp)
   92f48:	df000017 	ldw	fp,0(sp)
   92f4c:	dec00204 	addi	sp,sp,8
   92f50:	f800283a 	ret

00092f54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   92f54:	defffa04 	addi	sp,sp,-24
   92f58:	dfc00515 	stw	ra,20(sp)
   92f5c:	df000415 	stw	fp,16(sp)
   92f60:	df000404 	addi	fp,sp,16
   92f64:	e13ffd15 	stw	r4,-12(fp)
   92f68:	e17ffe15 	stw	r5,-8(fp)
   92f6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   92f70:	e0bffd17 	ldw	r2,-12(fp)
   92f74:	10800017 	ldw	r2,0(r2)
   92f78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   92f7c:	e0bffc17 	ldw	r2,-16(fp)
   92f80:	11000a04 	addi	r4,r2,40
   92f84:	e0bffd17 	ldw	r2,-12(fp)
   92f88:	11c00217 	ldw	r7,8(r2)
   92f8c:	e17ffe17 	ldw	r5,-8(fp)
   92f90:	e1bfff17 	ldw	r6,-4(fp)
   92f94:	009397c0 	call	9397c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   92f98:	e037883a 	mov	sp,fp
   92f9c:	dfc00117 	ldw	ra,4(sp)
   92fa0:	df000017 	ldw	fp,0(sp)
   92fa4:	dec00204 	addi	sp,sp,8
   92fa8:	f800283a 	ret

00092fac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   92fac:	defffc04 	addi	sp,sp,-16
   92fb0:	dfc00315 	stw	ra,12(sp)
   92fb4:	df000215 	stw	fp,8(sp)
   92fb8:	df000204 	addi	fp,sp,8
   92fbc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   92fc0:	e0bfff17 	ldw	r2,-4(fp)
   92fc4:	10800017 	ldw	r2,0(r2)
   92fc8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   92fcc:	e0bffe17 	ldw	r2,-8(fp)
   92fd0:	11000a04 	addi	r4,r2,40
   92fd4:	e0bfff17 	ldw	r2,-4(fp)
   92fd8:	11400217 	ldw	r5,8(r2)
   92fdc:	00935540 	call	93554 <altera_avalon_jtag_uart_close>
}
   92fe0:	e037883a 	mov	sp,fp
   92fe4:	dfc00117 	ldw	ra,4(sp)
   92fe8:	df000017 	ldw	fp,0(sp)
   92fec:	dec00204 	addi	sp,sp,8
   92ff0:	f800283a 	ret

00092ff4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   92ff4:	defffa04 	addi	sp,sp,-24
   92ff8:	dfc00515 	stw	ra,20(sp)
   92ffc:	df000415 	stw	fp,16(sp)
   93000:	df000404 	addi	fp,sp,16
   93004:	e13ffd15 	stw	r4,-12(fp)
   93008:	e17ffe15 	stw	r5,-8(fp)
   9300c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   93010:	e0bffd17 	ldw	r2,-12(fp)
   93014:	10800017 	ldw	r2,0(r2)
   93018:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   9301c:	e0bffc17 	ldw	r2,-16(fp)
   93020:	11000a04 	addi	r4,r2,40
   93024:	e17ffe17 	ldw	r5,-8(fp)
   93028:	e1bfff17 	ldw	r6,-4(fp)
   9302c:	00935c80 	call	935c8 <altera_avalon_jtag_uart_ioctl>
}
   93030:	e037883a 	mov	sp,fp
   93034:	dfc00117 	ldw	ra,4(sp)
   93038:	df000017 	ldw	fp,0(sp)
   9303c:	dec00204 	addi	sp,sp,8
   93040:	f800283a 	ret

00093044 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   93044:	defff404 	addi	sp,sp,-48
   93048:	dfc00b15 	stw	ra,44(sp)
   9304c:	df000a15 	stw	fp,40(sp)
   93050:	df000a04 	addi	fp,sp,40
   93054:	e13ffd15 	stw	r4,-12(fp)
   93058:	e17ffe15 	stw	r5,-8(fp)
   9305c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   93060:	e0bffd17 	ldw	r2,-12(fp)
   93064:	10800c04 	addi	r2,r2,48
   93068:	e0bffb15 	stw	r2,-20(fp)
   9306c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   93070:	e13ffc0b 	ldhu	r4,-16(fp)
   93074:	e17ffc84 	addi	r5,fp,-14
   93078:	008d1300 	call	8d130 <OSFlagCreate>
   9307c:	1007883a 	mov	r3,r2
   93080:	e0bffb17 	ldw	r2,-20(fp)
   93084:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   93088:	e0bffd17 	ldw	r2,-12(fp)
   9308c:	10800a04 	addi	r2,r2,40
   93090:	e0bff915 	stw	r2,-28(fp)
   93094:	00800044 	movi	r2,1
   93098:	e0bffa0d 	sth	r2,-24(fp)
   9309c:	e13ffa0b 	ldhu	r4,-24(fp)
   930a0:	00903380 	call	90338 <OSSemCreate>
   930a4:	1007883a 	mov	r3,r2
   930a8:	e0bff917 	ldw	r2,-28(fp)
   930ac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   930b0:	e0bffd17 	ldw	r2,-12(fp)
   930b4:	10800b04 	addi	r2,r2,44
   930b8:	e0bff715 	stw	r2,-36(fp)
   930bc:	00800044 	movi	r2,1
   930c0:	e0bff80d 	sth	r2,-32(fp)
   930c4:	e13ff80b 	ldhu	r4,-32(fp)
   930c8:	00903380 	call	90338 <OSSemCreate>
   930cc:	1007883a 	mov	r3,r2
   930d0:	e0bff717 	ldw	r2,-36(fp)
   930d4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   930d8:	e0fffd17 	ldw	r3,-12(fp)
   930dc:	00800044 	movi	r2,1
   930e0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   930e4:	e0bffd17 	ldw	r2,-12(fp)
   930e8:	10800017 	ldw	r2,0(r2)
   930ec:	11000104 	addi	r4,r2,4
   930f0:	e0bffd17 	ldw	r2,-12(fp)
   930f4:	10800817 	ldw	r2,32(r2)
   930f8:	1007883a 	mov	r3,r2
   930fc:	2005883a 	mov	r2,r4
   93100:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   93104:	e13ffe17 	ldw	r4,-8(fp)
   93108:	e17fff17 	ldw	r5,-4(fp)
   9310c:	d8000015 	stw	zero,0(sp)
   93110:	01800274 	movhi	r6,9
   93114:	318c5f04 	addi	r6,r6,12668
   93118:	e1fffd17 	ldw	r7,-12(fp)
   9311c:	00940c00 	call	940c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   93120:	e0bffd17 	ldw	r2,-12(fp)
   93124:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   93128:	e0bffd17 	ldw	r2,-12(fp)
   9312c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   93130:	008002b4 	movhi	r2,10
   93134:	10a41304 	addi	r2,r2,-28596
   93138:	10800017 	ldw	r2,0(r2)
   9313c:	100b883a 	mov	r5,r2
   93140:	01800274 	movhi	r6,9
   93144:	318d1004 	addi	r6,r6,13376
   93148:	e1fffd17 	ldw	r7,-12(fp)
   9314c:	0093d580 	call	93d58 <alt_alarm_start>
   93150:	1004403a 	cmpge	r2,r2,zero
   93154:	1000041e 	bne	r2,zero,93168 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   93158:	e0fffd17 	ldw	r3,-12(fp)
   9315c:	00a00034 	movhi	r2,32768
   93160:	10bfffc4 	addi	r2,r2,-1
   93164:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   93168:	e037883a 	mov	sp,fp
   9316c:	dfc00117 	ldw	ra,4(sp)
   93170:	df000017 	ldw	fp,0(sp)
   93174:	dec00204 	addi	sp,sp,8
   93178:	f800283a 	ret

0009317c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   9317c:	defff204 	addi	sp,sp,-56
   93180:	dfc00d15 	stw	ra,52(sp)
   93184:	df000c15 	stw	fp,48(sp)
   93188:	df000c04 	addi	fp,sp,48
   9318c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   93190:	e0bfff17 	ldw	r2,-4(fp)
   93194:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   93198:	e0bffd17 	ldw	r2,-12(fp)
   9319c:	10800017 	ldw	r2,0(r2)
   931a0:	e0bffc15 	stw	r2,-16(fp)
   931a4:	00000006 	br	931a8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   931a8:	e0bffc17 	ldw	r2,-16(fp)
   931ac:	10800104 	addi	r2,r2,4
   931b0:	10800037 	ldwio	r2,0(r2)
   931b4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   931b8:	e0bffb17 	ldw	r2,-20(fp)
   931bc:	1080c00c 	andi	r2,r2,768
   931c0:	1005003a 	cmpeq	r2,r2,zero
   931c4:	1000991e 	bne	r2,zero,9342c <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   931c8:	e0bffb17 	ldw	r2,-20(fp)
   931cc:	1080400c 	andi	r2,r2,256
   931d0:	1005003a 	cmpeq	r2,r2,zero
   931d4:	1000481e 	bne	r2,zero,932f8 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   931d8:	00800074 	movhi	r2,1
   931dc:	e0bffa15 	stw	r2,-24(fp)
   931e0:	00000006 	br	931e4 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   931e4:	e0bffd17 	ldw	r2,-12(fp)
   931e8:	10800d17 	ldw	r2,52(r2)
   931ec:	10800044 	addi	r2,r2,1
   931f0:	1081ffcc 	andi	r2,r2,2047
   931f4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   931f8:	e0bffd17 	ldw	r2,-12(fp)
   931fc:	10c00e17 	ldw	r3,56(r2)
   93200:	e0bff917 	ldw	r2,-28(fp)
   93204:	18802826 	beq	r3,r2,932a8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   93208:	e0bffc17 	ldw	r2,-16(fp)
   9320c:	10800037 	ldwio	r2,0(r2)
   93210:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   93214:	e0bffa17 	ldw	r2,-24(fp)
   93218:	10a0000c 	andi	r2,r2,32768
   9321c:	1005003a 	cmpeq	r2,r2,zero
   93220:	1000211e 	bne	r2,zero,932a8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   93224:	e0bffd17 	ldw	r2,-12(fp)
   93228:	10c00d17 	ldw	r3,52(r2)
   9322c:	e0bffa17 	ldw	r2,-24(fp)
   93230:	1009883a 	mov	r4,r2
   93234:	e0bffd17 	ldw	r2,-12(fp)
   93238:	1885883a 	add	r2,r3,r2
   9323c:	10801104 	addi	r2,r2,68
   93240:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   93244:	e0bffd17 	ldw	r2,-12(fp)
   93248:	10800d17 	ldw	r2,52(r2)
   9324c:	10800044 	addi	r2,r2,1
   93250:	10c1ffcc 	andi	r3,r2,2047
   93254:	e0bffd17 	ldw	r2,-12(fp)
   93258:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   9325c:	e0bffd17 	ldw	r2,-12(fp)
   93260:	10800c17 	ldw	r2,48(r2)
   93264:	e0bff615 	stw	r2,-40(fp)
   93268:	00800044 	movi	r2,1
   9326c:	e0bff70d 	sth	r2,-36(fp)
   93270:	00800044 	movi	r2,1
   93274:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   93278:	008002b4 	movhi	r2,10
   9327c:	10a3fe44 	addi	r2,r2,-28679
   93280:	10800003 	ldbu	r2,0(r2)
   93284:	10803fcc 	andi	r2,r2,255
   93288:	1005003a 	cmpeq	r2,r2,zero
   9328c:	103fd51e 	bne	r2,zero,931e4 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
   93290:	e17ff70b 	ldhu	r5,-36(fp)
   93294:	e1bff783 	ldbu	r6,-34(fp)
   93298:	e1fffe04 	addi	r7,fp,-8
   9329c:	e13ff617 	ldw	r4,-40(fp)
   932a0:	008de580 	call	8de58 <OSFlagPost>
    return err;
   932a4:	003fcf06 	br	931e4 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   932a8:	e0bffa17 	ldw	r2,-24(fp)
   932ac:	10bfffec 	andhi	r2,r2,65535
   932b0:	1005003a 	cmpeq	r2,r2,zero
   932b4:	1000101e 	bne	r2,zero,932f8 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   932b8:	e0bffd17 	ldw	r2,-12(fp)
   932bc:	10c00817 	ldw	r3,32(r2)
   932c0:	00bfff84 	movi	r2,-2
   932c4:	1886703a 	and	r3,r3,r2
   932c8:	e0bffd17 	ldw	r2,-12(fp)
   932cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   932d0:	e0bffc17 	ldw	r2,-16(fp)
   932d4:	11000104 	addi	r4,r2,4
   932d8:	e0bffd17 	ldw	r2,-12(fp)
   932dc:	10800817 	ldw	r2,32(r2)
   932e0:	1007883a 	mov	r3,r2
   932e4:	2005883a 	mov	r2,r4
   932e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   932ec:	e0bffc17 	ldw	r2,-16(fp)
   932f0:	10800104 	addi	r2,r2,4
   932f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   932f8:	e0bffb17 	ldw	r2,-20(fp)
   932fc:	1080800c 	andi	r2,r2,512
   93300:	1005003a 	cmpeq	r2,r2,zero
   93304:	103fa81e 	bne	r2,zero,931a8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   93308:	e0bffb17 	ldw	r2,-20(fp)
   9330c:	10bfffec 	andhi	r2,r2,65535
   93310:	1004d43a 	srli	r2,r2,16
   93314:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   93318:	00002706 	br	933b8 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   9331c:	e13ffc17 	ldw	r4,-16(fp)
   93320:	e0bffd17 	ldw	r2,-12(fp)
   93324:	10c01017 	ldw	r3,64(r2)
   93328:	e0bffd17 	ldw	r2,-12(fp)
   9332c:	1885883a 	add	r2,r3,r2
   93330:	10821104 	addi	r2,r2,2116
   93334:	10800003 	ldbu	r2,0(r2)
   93338:	10c03fcc 	andi	r3,r2,255
   9333c:	18c0201c 	xori	r3,r3,128
   93340:	18ffe004 	addi	r3,r3,-128
   93344:	2005883a 	mov	r2,r4
   93348:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9334c:	e0bffd17 	ldw	r2,-12(fp)
   93350:	10801017 	ldw	r2,64(r2)
   93354:	10800044 	addi	r2,r2,1
   93358:	10c1ffcc 	andi	r3,r2,2047
   9335c:	e0bffd17 	ldw	r2,-12(fp)
   93360:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   93364:	e0bffd17 	ldw	r2,-12(fp)
   93368:	10800c17 	ldw	r2,48(r2)
   9336c:	e0bff415 	stw	r2,-48(fp)
   93370:	00800084 	movi	r2,2
   93374:	e0bff50d 	sth	r2,-44(fp)
   93378:	00800044 	movi	r2,1
   9337c:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   93380:	008002b4 	movhi	r2,10
   93384:	10a3fe44 	addi	r2,r2,-28679
   93388:	10800003 	ldbu	r2,0(r2)
   9338c:	10803fcc 	andi	r2,r2,255
   93390:	1005003a 	cmpeq	r2,r2,zero
   93394:	1000051e 	bne	r2,zero,933ac <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
   93398:	e17ff50b 	ldhu	r5,-44(fp)
   9339c:	e1bff583 	ldbu	r6,-42(fp)
   933a0:	e1fffe44 	addi	r7,fp,-7
   933a4:	e13ff417 	ldw	r4,-48(fp)
   933a8:	008de580 	call	8de58 <OSFlagPost>

        space--;
   933ac:	e0bff817 	ldw	r2,-32(fp)
   933b0:	10bfffc4 	addi	r2,r2,-1
   933b4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   933b8:	e0bff817 	ldw	r2,-32(fp)
   933bc:	1005003a 	cmpeq	r2,r2,zero
   933c0:	1000051e 	bne	r2,zero,933d8 <altera_avalon_jtag_uart_irq+0x25c>
   933c4:	e0bffd17 	ldw	r2,-12(fp)
   933c8:	10c01017 	ldw	r3,64(r2)
   933cc:	e0bffd17 	ldw	r2,-12(fp)
   933d0:	10800f17 	ldw	r2,60(r2)
   933d4:	18bfd11e 	bne	r3,r2,9331c <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   933d8:	e0bff817 	ldw	r2,-32(fp)
   933dc:	1005003a 	cmpeq	r2,r2,zero
   933e0:	103f711e 	bne	r2,zero,931a8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   933e4:	e0bffd17 	ldw	r2,-12(fp)
   933e8:	10c00817 	ldw	r3,32(r2)
   933ec:	00bfff44 	movi	r2,-3
   933f0:	1886703a 	and	r3,r3,r2
   933f4:	e0bffd17 	ldw	r2,-12(fp)
   933f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   933fc:	e0bffd17 	ldw	r2,-12(fp)
   93400:	10800017 	ldw	r2,0(r2)
   93404:	11000104 	addi	r4,r2,4
   93408:	e0bffd17 	ldw	r2,-12(fp)
   9340c:	10800817 	ldw	r2,32(r2)
   93410:	1007883a 	mov	r3,r2
   93414:	2005883a 	mov	r2,r4
   93418:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9341c:	e0bffc17 	ldw	r2,-16(fp)
   93420:	10800104 	addi	r2,r2,4
   93424:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   93428:	003f5f06 	br	931a8 <altera_avalon_jtag_uart_irq+0x2c>
}
   9342c:	e037883a 	mov	sp,fp
   93430:	dfc00117 	ldw	ra,4(sp)
   93434:	df000017 	ldw	fp,0(sp)
   93438:	dec00204 	addi	sp,sp,8
   9343c:	f800283a 	ret

00093440 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   93440:	defff804 	addi	sp,sp,-32
   93444:	dfc00715 	stw	ra,28(sp)
   93448:	df000615 	stw	fp,24(sp)
   9344c:	df000604 	addi	fp,sp,24
   93450:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   93454:	e0bfff17 	ldw	r2,-4(fp)
   93458:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   9345c:	e0bffd17 	ldw	r2,-12(fp)
   93460:	10800017 	ldw	r2,0(r2)
   93464:	10800104 	addi	r2,r2,4
   93468:	10800037 	ldwio	r2,0(r2)
   9346c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   93470:	e0bffc17 	ldw	r2,-16(fp)
   93474:	1081000c 	andi	r2,r2,1024
   93478:	1005003a 	cmpeq	r2,r2,zero
   9347c:	10000c1e 	bne	r2,zero,934b0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   93480:	e0bffd17 	ldw	r2,-12(fp)
   93484:	10800017 	ldw	r2,0(r2)
   93488:	11000104 	addi	r4,r2,4
   9348c:	e0bffd17 	ldw	r2,-12(fp)
   93490:	10800817 	ldw	r2,32(r2)
   93494:	10810014 	ori	r2,r2,1024
   93498:	1007883a 	mov	r3,r2
   9349c:	2005883a 	mov	r2,r4
   934a0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   934a4:	e0bffd17 	ldw	r2,-12(fp)
   934a8:	10000915 	stw	zero,36(r2)
   934ac:	00002106 	br	93534 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   934b0:	e0bffd17 	ldw	r2,-12(fp)
   934b4:	10c00917 	ldw	r3,36(r2)
   934b8:	00a00034 	movhi	r2,32768
   934bc:	10bfff04 	addi	r2,r2,-4
   934c0:	10c01c36 	bltu	r2,r3,93534 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   934c4:	e0bffd17 	ldw	r2,-12(fp)
   934c8:	10800917 	ldw	r2,36(r2)
   934cc:	10c00044 	addi	r3,r2,1
   934d0:	e0bffd17 	ldw	r2,-12(fp)
   934d4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   934d8:	e0bffd17 	ldw	r2,-12(fp)
   934dc:	10c00917 	ldw	r3,36(r2)
   934e0:	e0bffd17 	ldw	r2,-12(fp)
   934e4:	10800117 	ldw	r2,4(r2)
   934e8:	18801236 	bltu	r3,r2,93534 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   934ec:	e0bffd17 	ldw	r2,-12(fp)
   934f0:	10800c17 	ldw	r2,48(r2)
   934f4:	e0bffa15 	stw	r2,-24(fp)
   934f8:	00800104 	movi	r2,4
   934fc:	e0bffb0d 	sth	r2,-20(fp)
   93500:	00800044 	movi	r2,1
   93504:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   93508:	008002b4 	movhi	r2,10
   9350c:	10a3fe44 	addi	r2,r2,-28679
   93510:	10800003 	ldbu	r2,0(r2)
   93514:	10803fcc 	andi	r2,r2,255
   93518:	1005003a 	cmpeq	r2,r2,zero
   9351c:	1000051e 	bne	r2,zero,93534 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   93520:	e17ffb0b 	ldhu	r5,-20(fp)
   93524:	e1bffb83 	ldbu	r6,-18(fp)
   93528:	e1fffe04 	addi	r7,fp,-8
   9352c:	e13ffa17 	ldw	r4,-24(fp)
   93530:	008de580 	call	8de58 <OSFlagPost>
   93534:	008002b4 	movhi	r2,10
   93538:	10a41304 	addi	r2,r2,-28596
   9353c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   93540:	e037883a 	mov	sp,fp
   93544:	dfc00117 	ldw	ra,4(sp)
   93548:	df000017 	ldw	fp,0(sp)
   9354c:	dec00204 	addi	sp,sp,8
   93550:	f800283a 	ret

00093554 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   93554:	defffc04 	addi	sp,sp,-16
   93558:	df000315 	stw	fp,12(sp)
   9355c:	df000304 	addi	fp,sp,12
   93560:	e13ffd15 	stw	r4,-12(fp)
   93564:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   93568:	00000706 	br	93588 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   9356c:	e0bffe17 	ldw	r2,-8(fp)
   93570:	1090000c 	andi	r2,r2,16384
   93574:	1005003a 	cmpeq	r2,r2,zero
   93578:	1000031e 	bne	r2,zero,93588 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   9357c:	00bffd44 	movi	r2,-11
   93580:	e0bfff15 	stw	r2,-4(fp)
   93584:	00000b06 	br	935b4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   93588:	e0bffd17 	ldw	r2,-12(fp)
   9358c:	10c01017 	ldw	r3,64(r2)
   93590:	e0bffd17 	ldw	r2,-12(fp)
   93594:	10800f17 	ldw	r2,60(r2)
   93598:	18800526 	beq	r3,r2,935b0 <altera_avalon_jtag_uart_close+0x5c>
   9359c:	e0bffd17 	ldw	r2,-12(fp)
   935a0:	10c00917 	ldw	r3,36(r2)
   935a4:	e0bffd17 	ldw	r2,-12(fp)
   935a8:	10800117 	ldw	r2,4(r2)
   935ac:	18bfef36 	bltu	r3,r2,9356c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   935b0:	e03fff15 	stw	zero,-4(fp)
   935b4:	e0bfff17 	ldw	r2,-4(fp)
}
   935b8:	e037883a 	mov	sp,fp
   935bc:	df000017 	ldw	fp,0(sp)
   935c0:	dec00104 	addi	sp,sp,4
   935c4:	f800283a 	ret

000935c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   935c8:	defff804 	addi	sp,sp,-32
   935cc:	df000715 	stw	fp,28(sp)
   935d0:	df000704 	addi	fp,sp,28
   935d4:	e13ffb15 	stw	r4,-20(fp)
   935d8:	e17ffc15 	stw	r5,-16(fp)
   935dc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   935e0:	00bff9c4 	movi	r2,-25
   935e4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   935e8:	e0bffc17 	ldw	r2,-16(fp)
   935ec:	e0bfff15 	stw	r2,-4(fp)
   935f0:	e0ffff17 	ldw	r3,-4(fp)
   935f4:	189a8060 	cmpeqi	r2,r3,27137
   935f8:	1000041e 	bne	r2,zero,9360c <altera_avalon_jtag_uart_ioctl+0x44>
   935fc:	e0ffff17 	ldw	r3,-4(fp)
   93600:	189a80a0 	cmpeqi	r2,r3,27138
   93604:	10001b1e 	bne	r2,zero,93674 <altera_avalon_jtag_uart_ioctl+0xac>
   93608:	00002706 	br	936a8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   9360c:	e0bffb17 	ldw	r2,-20(fp)
   93610:	10c00117 	ldw	r3,4(r2)
   93614:	00a00034 	movhi	r2,32768
   93618:	10bfffc4 	addi	r2,r2,-1
   9361c:	18802226 	beq	r3,r2,936a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   93620:	e0bffd17 	ldw	r2,-12(fp)
   93624:	10800017 	ldw	r2,0(r2)
   93628:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   9362c:	e0bff917 	ldw	r2,-28(fp)
   93630:	10800090 	cmplti	r2,r2,2
   93634:	1000071e 	bne	r2,zero,93654 <altera_avalon_jtag_uart_ioctl+0x8c>
   93638:	e0fff917 	ldw	r3,-28(fp)
   9363c:	00a00034 	movhi	r2,32768
   93640:	10bfffc4 	addi	r2,r2,-1
   93644:	18800326 	beq	r3,r2,93654 <altera_avalon_jtag_uart_ioctl+0x8c>
   93648:	e0bff917 	ldw	r2,-28(fp)
   9364c:	e0bffe15 	stw	r2,-8(fp)
   93650:	00000306 	br	93660 <altera_avalon_jtag_uart_ioctl+0x98>
   93654:	00e00034 	movhi	r3,32768
   93658:	18ffff84 	addi	r3,r3,-2
   9365c:	e0fffe15 	stw	r3,-8(fp)
   93660:	e0bffb17 	ldw	r2,-20(fp)
   93664:	e0fffe17 	ldw	r3,-8(fp)
   93668:	10c00115 	stw	r3,4(r2)
      rc = 0;
   9366c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   93670:	00000d06 	br	936a8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   93674:	e0bffb17 	ldw	r2,-20(fp)
   93678:	10c00117 	ldw	r3,4(r2)
   9367c:	00a00034 	movhi	r2,32768
   93680:	10bfffc4 	addi	r2,r2,-1
   93684:	18800826 	beq	r3,r2,936a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   93688:	e13ffd17 	ldw	r4,-12(fp)
   9368c:	e0bffb17 	ldw	r2,-20(fp)
   93690:	10c00917 	ldw	r3,36(r2)
   93694:	e0bffb17 	ldw	r2,-20(fp)
   93698:	10800117 	ldw	r2,4(r2)
   9369c:	1885803a 	cmpltu	r2,r3,r2
   936a0:	20800015 	stw	r2,0(r4)
      rc = 0;
   936a4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   936a8:	e0bffa17 	ldw	r2,-24(fp)
}
   936ac:	e037883a 	mov	sp,fp
   936b0:	df000017 	ldw	fp,0(sp)
   936b4:	dec00104 	addi	sp,sp,4
   936b8:	f800283a 	ret

000936bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   936bc:	deffeb04 	addi	sp,sp,-84
   936c0:	dfc01415 	stw	ra,80(sp)
   936c4:	df001315 	stw	fp,76(sp)
   936c8:	df001304 	addi	fp,sp,76
   936cc:	e13ffb15 	stw	r4,-20(fp)
   936d0:	e17ffc15 	stw	r5,-16(fp)
   936d4:	e1bffd15 	stw	r6,-12(fp)
   936d8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   936dc:	e0bffc17 	ldw	r2,-16(fp)
   936e0:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   936e4:	e0bffb17 	ldw	r2,-20(fp)
   936e8:	10800a17 	ldw	r2,40(r2)
   936ec:	e0bff315 	stw	r2,-52(fp)
   936f0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   936f4:	e17ff40b 	ldhu	r5,-48(fp)
   936f8:	e1bffa44 	addi	r6,fp,-23
   936fc:	e13ff317 	ldw	r4,-52(fp)
   93700:	00906ec0 	call	906ec <OSSemPend>

  while (space > 0)
   93704:	00006406 	br	93898 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   93708:	e0bffb17 	ldw	r2,-20(fp)
   9370c:	10800d17 	ldw	r2,52(r2)
   93710:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   93714:	e0bffb17 	ldw	r2,-20(fp)
   93718:	10800e17 	ldw	r2,56(r2)
   9371c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
   93720:	e0fff617 	ldw	r3,-40(fp)
   93724:	e0bff517 	ldw	r2,-44(fp)
   93728:	18800536 	bltu	r3,r2,93740 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
   9372c:	e0bff617 	ldw	r2,-40(fp)
   93730:	e0fff517 	ldw	r3,-44(fp)
   93734:	10c5c83a 	sub	r2,r2,r3
   93738:	e0bff715 	stw	r2,-36(fp)
   9373c:	00000406 	br	93750 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   93740:	00820004 	movi	r2,2048
   93744:	e0fff517 	ldw	r3,-44(fp)
   93748:	10c5c83a 	sub	r2,r2,r3
   9374c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   93750:	e0bff717 	ldw	r2,-36(fp)
   93754:	1005003a 	cmpeq	r2,r2,zero
   93758:	10001f1e 	bne	r2,zero,937d8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   9375c:	e0fffd17 	ldw	r3,-12(fp)
   93760:	e0bff717 	ldw	r2,-36(fp)
   93764:	1880022e 	bgeu	r3,r2,93770 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
   93768:	e0bffd17 	ldw	r2,-12(fp)
   9376c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   93770:	e0bffb17 	ldw	r2,-20(fp)
   93774:	10c01104 	addi	r3,r2,68
   93778:	e0bff517 	ldw	r2,-44(fp)
   9377c:	1887883a 	add	r3,r3,r2
   93780:	e0bff917 	ldw	r2,-28(fp)
   93784:	1009883a 	mov	r4,r2
   93788:	180b883a 	mov	r5,r3
   9378c:	e1bff717 	ldw	r6,-36(fp)
   93790:	00856e00 	call	856e0 <memcpy>
      ptr   += n;
   93794:	e0fff717 	ldw	r3,-36(fp)
   93798:	e0bff917 	ldw	r2,-28(fp)
   9379c:	10c5883a 	add	r2,r2,r3
   937a0:	e0bff915 	stw	r2,-28(fp)
      space -= n;
   937a4:	e0fffd17 	ldw	r3,-12(fp)
   937a8:	e0bff717 	ldw	r2,-36(fp)
   937ac:	1885c83a 	sub	r2,r3,r2
   937b0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   937b4:	e0fff517 	ldw	r3,-44(fp)
   937b8:	e0bff717 	ldw	r2,-36(fp)
   937bc:	1885883a 	add	r2,r3,r2
   937c0:	10c1ffcc 	andi	r3,r2,2047
   937c4:	e0bffb17 	ldw	r2,-20(fp)
   937c8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   937cc:	e0bffd17 	ldw	r2,-12(fp)
   937d0:	10800048 	cmpgei	r2,r2,1
   937d4:	103fcc1e 	bne	r2,zero,93708 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   937d8:	e0fff917 	ldw	r3,-28(fp)
   937dc:	e0bffc17 	ldw	r2,-16(fp)
   937e0:	1880301e 	bne	r3,r2,938a4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   937e4:	e0bffe17 	ldw	r2,-8(fp)
   937e8:	1090000c 	andi	r2,r2,16384
   937ec:	1004c03a 	cmpne	r2,r2,zero
   937f0:	10002c1e 	bne	r2,zero,938a4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   937f4:	008002b4 	movhi	r2,10
   937f8:	10a3fe44 	addi	r2,r2,-28679
   937fc:	10800003 	ldbu	r2,0(r2)
   93800:	10803fcc 	andi	r2,r2,255
   93804:	10800058 	cmpnei	r2,r2,1
   93808:	1000161e 	bne	r2,zero,93864 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   9380c:	e0bffb17 	ldw	r2,-20(fp)
   93810:	10800c17 	ldw	r2,48(r2)
   93814:	e0bff015 	stw	r2,-64(fp)
   93818:	00800144 	movi	r2,5
   9381c:	e0bff10d 	sth	r2,-60(fp)
   93820:	00bfe0c4 	movi	r2,-125
   93824:	e0bff185 	stb	r2,-58(fp)
   93828:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   9382c:	008002b4 	movhi	r2,10
   93830:	10a3fe44 	addi	r2,r2,-28679
   93834:	10800003 	ldbu	r2,0(r2)
   93838:	10803fcc 	andi	r2,r2,255
   9383c:	1005003a 	cmpeq	r2,r2,zero
   93840:	1000111e 	bne	r2,zero,93888 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   93844:	e17ff10b 	ldhu	r5,-60(fp)
   93848:	e1bff183 	ldbu	r6,-58(fp)
   9384c:	e1fff20b 	ldhu	r7,-56(fp)
   93850:	e0bffa04 	addi	r2,fp,-24
   93854:	d8800015 	stw	r2,0(sp)
   93858:	e13ff017 	ldw	r4,-64(fp)
   9385c:	008d7ac0 	call	8d7ac <OSFlagPend>
    return err;
   93860:	00000906 	br	93888 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   93864:	e0bffb17 	ldw	r2,-20(fp)
   93868:	10c00d17 	ldw	r3,52(r2)
   9386c:	e0bff617 	ldw	r2,-40(fp)
   93870:	1880051e 	bne	r3,r2,93888 <altera_avalon_jtag_uart_read+0x1cc>
   93874:	e0bffb17 	ldw	r2,-20(fp)
   93878:	10c00917 	ldw	r3,36(r2)
   9387c:	e0bffb17 	ldw	r2,-20(fp)
   93880:	10800117 	ldw	r2,4(r2)
   93884:	18bff736 	bltu	r3,r2,93864 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   93888:	e0bffb17 	ldw	r2,-20(fp)
   9388c:	10c00d17 	ldw	r3,52(r2)
   93890:	e0bff617 	ldw	r2,-40(fp)
   93894:	18800326 	beq	r3,r2,938a4 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   93898:	e0bffd17 	ldw	r2,-12(fp)
   9389c:	10800048 	cmpgei	r2,r2,1
   938a0:	103f991e 	bne	r2,zero,93708 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   938a4:	e0bffb17 	ldw	r2,-20(fp)
   938a8:	11000a17 	ldw	r4,40(r2)
   938ac:	0090ae40 	call	90ae4 <OSSemPost>

  if (ptr != buffer)
   938b0:	e0fff917 	ldw	r3,-28(fp)
   938b4:	e0bffc17 	ldw	r2,-16(fp)
   938b8:	18801926 	beq	r3,r2,93920 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   938bc:	0005303a 	rdctl	r2,status
   938c0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   938c4:	e0ffef17 	ldw	r3,-68(fp)
   938c8:	00bfff84 	movi	r2,-2
   938cc:	1884703a 	and	r2,r3,r2
   938d0:	1001703a 	wrctl	status,r2
  
  return context;
   938d4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   938d8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   938dc:	e0bffb17 	ldw	r2,-20(fp)
   938e0:	10800817 	ldw	r2,32(r2)
   938e4:	10c00054 	ori	r3,r2,1
   938e8:	e0bffb17 	ldw	r2,-20(fp)
   938ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   938f0:	e0bffb17 	ldw	r2,-20(fp)
   938f4:	10800017 	ldw	r2,0(r2)
   938f8:	11000104 	addi	r4,r2,4
   938fc:	e0bffb17 	ldw	r2,-20(fp)
   93900:	10800817 	ldw	r2,32(r2)
   93904:	1007883a 	mov	r3,r2
   93908:	2005883a 	mov	r2,r4
   9390c:	10c00035 	stwio	r3,0(r2)
   93910:	e0bff817 	ldw	r2,-32(fp)
   93914:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93918:	e0bfee17 	ldw	r2,-72(fp)
   9391c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   93920:	e0fff917 	ldw	r3,-28(fp)
   93924:	e0bffc17 	ldw	r2,-16(fp)
   93928:	18800526 	beq	r3,r2,93940 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
   9392c:	e0fff917 	ldw	r3,-28(fp)
   93930:	e0bffc17 	ldw	r2,-16(fp)
   93934:	1887c83a 	sub	r3,r3,r2
   93938:	e0ffff15 	stw	r3,-4(fp)
   9393c:	00000906 	br	93964 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   93940:	e0bffe17 	ldw	r2,-8(fp)
   93944:	1090000c 	andi	r2,r2,16384
   93948:	1005003a 	cmpeq	r2,r2,zero
   9394c:	1000031e 	bne	r2,zero,9395c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   93950:	00bffd44 	movi	r2,-11
   93954:	e0bfff15 	stw	r2,-4(fp)
   93958:	00000206 	br	93964 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   9395c:	00bffec4 	movi	r2,-5
   93960:	e0bfff15 	stw	r2,-4(fp)
   93964:	e0bfff17 	ldw	r2,-4(fp)
}
   93968:	e037883a 	mov	sp,fp
   9396c:	dfc00117 	ldw	ra,4(sp)
   93970:	df000017 	ldw	fp,0(sp)
   93974:	dec00204 	addi	sp,sp,8
   93978:	f800283a 	ret

0009397c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   9397c:	deffeb04 	addi	sp,sp,-84
   93980:	dfc01415 	stw	ra,80(sp)
   93984:	df001315 	stw	fp,76(sp)
   93988:	df001304 	addi	fp,sp,76
   9398c:	e13ffb15 	stw	r4,-20(fp)
   93990:	e17ffc15 	stw	r5,-16(fp)
   93994:	e1bffd15 	stw	r6,-12(fp)
   93998:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   9399c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   939a0:	e0bffc17 	ldw	r2,-16(fp)
   939a4:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   939a8:	e0bffb17 	ldw	r2,-20(fp)
   939ac:	10800b17 	ldw	r2,44(r2)
   939b0:	e0bff315 	stw	r2,-52(fp)
   939b4:	e03ff40d 	sth	zero,-48(fp)
   939b8:	e17ff40b 	ldhu	r5,-48(fp)
   939bc:	e1bffa04 	addi	r6,fp,-24
   939c0:	e13ff317 	ldw	r4,-52(fp)
   939c4:	00906ec0 	call	906ec <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   939c8:	00003a06 	br	93ab4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   939cc:	e0bffb17 	ldw	r2,-20(fp)
   939d0:	10800f17 	ldw	r2,60(r2)
   939d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   939d8:	e0bffb17 	ldw	r2,-20(fp)
   939dc:	10801017 	ldw	r2,64(r2)
   939e0:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
   939e4:	e0fff917 	ldw	r3,-28(fp)
   939e8:	e0bff817 	ldw	r2,-32(fp)
   939ec:	1880062e 	bgeu	r3,r2,93a08 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
   939f0:	e0fff817 	ldw	r3,-32(fp)
   939f4:	e0bff917 	ldw	r2,-28(fp)
   939f8:	1885c83a 	sub	r2,r3,r2
   939fc:	10bfffc4 	addi	r2,r2,-1
   93a00:	e0bff715 	stw	r2,-36(fp)
   93a04:	00000c06 	br	93a38 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
   93a08:	e0bff817 	ldw	r2,-32(fp)
   93a0c:	1005003a 	cmpeq	r2,r2,zero
   93a10:	1000051e 	bne	r2,zero,93a28 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   93a14:	00820004 	movi	r2,2048
   93a18:	e0fff917 	ldw	r3,-28(fp)
   93a1c:	10c5c83a 	sub	r2,r2,r3
   93a20:	e0bff715 	stw	r2,-36(fp)
   93a24:	00000406 	br	93a38 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   93a28:	0081ffc4 	movi	r2,2047
   93a2c:	e0fff917 	ldw	r3,-28(fp)
   93a30:	10c5c83a 	sub	r2,r2,r3
   93a34:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   93a38:	e0bff717 	ldw	r2,-36(fp)
   93a3c:	1005003a 	cmpeq	r2,r2,zero
   93a40:	10001f1e 	bne	r2,zero,93ac0 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
   93a44:	e0fffd17 	ldw	r3,-12(fp)
   93a48:	e0bff717 	ldw	r2,-36(fp)
   93a4c:	1880022e 	bgeu	r3,r2,93a58 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   93a50:	e0bffd17 	ldw	r2,-12(fp)
   93a54:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   93a58:	e0bffb17 	ldw	r2,-20(fp)
   93a5c:	10c21104 	addi	r3,r2,2116
   93a60:	e0bff917 	ldw	r2,-28(fp)
   93a64:	1885883a 	add	r2,r3,r2
   93a68:	e0fffc17 	ldw	r3,-16(fp)
   93a6c:	1009883a 	mov	r4,r2
   93a70:	180b883a 	mov	r5,r3
   93a74:	e1bff717 	ldw	r6,-36(fp)
   93a78:	00856e00 	call	856e0 <memcpy>
      ptr   += n;
   93a7c:	e0fff717 	ldw	r3,-36(fp)
   93a80:	e0bffc17 	ldw	r2,-16(fp)
   93a84:	10c5883a 	add	r2,r2,r3
   93a88:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   93a8c:	e0fffd17 	ldw	r3,-12(fp)
   93a90:	e0bff717 	ldw	r2,-36(fp)
   93a94:	1885c83a 	sub	r2,r3,r2
   93a98:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   93a9c:	e0fff917 	ldw	r3,-28(fp)
   93aa0:	e0bff717 	ldw	r2,-36(fp)
   93aa4:	1885883a 	add	r2,r3,r2
   93aa8:	10c1ffcc 	andi	r3,r2,2047
   93aac:	e0bffb17 	ldw	r2,-20(fp)
   93ab0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   93ab4:	e0bffd17 	ldw	r2,-12(fp)
   93ab8:	10800048 	cmpgei	r2,r2,1
   93abc:	103fc31e 	bne	r2,zero,939cc <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93ac0:	0005303a 	rdctl	r2,status
   93ac4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93ac8:	e0fff217 	ldw	r3,-56(fp)
   93acc:	00bfff84 	movi	r2,-2
   93ad0:	1884703a 	and	r2,r3,r2
   93ad4:	1001703a 	wrctl	status,r2
  
  return context;
   93ad8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   93adc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   93ae0:	e0bffb17 	ldw	r2,-20(fp)
   93ae4:	10800817 	ldw	r2,32(r2)
   93ae8:	10c00094 	ori	r3,r2,2
   93aec:	e0bffb17 	ldw	r2,-20(fp)
   93af0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   93af4:	e0bffb17 	ldw	r2,-20(fp)
   93af8:	10800017 	ldw	r2,0(r2)
   93afc:	11000104 	addi	r4,r2,4
   93b00:	e0bffb17 	ldw	r2,-20(fp)
   93b04:	10800817 	ldw	r2,32(r2)
   93b08:	1007883a 	mov	r3,r2
   93b0c:	2005883a 	mov	r2,r4
   93b10:	10c00035 	stwio	r3,0(r2)
   93b14:	e0bff617 	ldw	r2,-40(fp)
   93b18:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93b1c:	e0bff117 	ldw	r2,-60(fp)
   93b20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   93b24:	e0bffd17 	ldw	r2,-12(fp)
   93b28:	10800050 	cmplti	r2,r2,1
   93b2c:	10002d1e 	bne	r2,zero,93be4 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
   93b30:	e0bffe17 	ldw	r2,-8(fp)
   93b34:	1090000c 	andi	r2,r2,16384
   93b38:	1004c03a 	cmpne	r2,r2,zero
   93b3c:	10002c1e 	bne	r2,zero,93bf0 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   93b40:	008002b4 	movhi	r2,10
   93b44:	10a3fe44 	addi	r2,r2,-28679
   93b48:	10800003 	ldbu	r2,0(r2)
   93b4c:	10803fcc 	andi	r2,r2,255
   93b50:	10800058 	cmpnei	r2,r2,1
   93b54:	1000161e 	bne	r2,zero,93bb0 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
   93b58:	e0bffb17 	ldw	r2,-20(fp)
   93b5c:	10800c17 	ldw	r2,48(r2)
   93b60:	e0bfee15 	stw	r2,-72(fp)
   93b64:	00800184 	movi	r2,6
   93b68:	e0bfef0d 	sth	r2,-68(fp)
   93b6c:	00bfe0c4 	movi	r2,-125
   93b70:	e0bfef85 	stb	r2,-66(fp)
   93b74:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   93b78:	008002b4 	movhi	r2,10
   93b7c:	10a3fe44 	addi	r2,r2,-28679
   93b80:	10800003 	ldbu	r2,0(r2)
   93b84:	10803fcc 	andi	r2,r2,255
   93b88:	1005003a 	cmpeq	r2,r2,zero
   93b8c:	1000111e 	bne	r2,zero,93bd4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   93b90:	e17fef0b 	ldhu	r5,-68(fp)
   93b94:	e1bfef83 	ldbu	r6,-66(fp)
   93b98:	e1fff00b 	ldhu	r7,-64(fp)
   93b9c:	e0bffa44 	addi	r2,fp,-23
   93ba0:	d8800015 	stw	r2,0(sp)
   93ba4:	e13fee17 	ldw	r4,-72(fp)
   93ba8:	008d7ac0 	call	8d7ac <OSFlagPend>
    return err;
   93bac:	00000906 	br	93bd4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   93bb0:	e0bffb17 	ldw	r2,-20(fp)
   93bb4:	10c01017 	ldw	r3,64(r2)
   93bb8:	e0bff817 	ldw	r2,-32(fp)
   93bbc:	1880051e 	bne	r3,r2,93bd4 <altera_avalon_jtag_uart_write+0x258>
   93bc0:	e0bffb17 	ldw	r2,-20(fp)
   93bc4:	10c00917 	ldw	r3,36(r2)
   93bc8:	e0bffb17 	ldw	r2,-20(fp)
   93bcc:	10800117 	ldw	r2,4(r2)
   93bd0:	18bff736 	bltu	r3,r2,93bb0 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   93bd4:	e0bffb17 	ldw	r2,-20(fp)
   93bd8:	10c01017 	ldw	r3,64(r2)
   93bdc:	e0bff817 	ldw	r2,-32(fp)
   93be0:	18800326 	beq	r3,r2,93bf0 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
   93be4:	e0bffd17 	ldw	r2,-12(fp)
   93be8:	10800048 	cmpgei	r2,r2,1
   93bec:	103fb11e 	bne	r2,zero,93ab4 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   93bf0:	e0bffb17 	ldw	r2,-20(fp)
   93bf4:	11000b17 	ldw	r4,44(r2)
   93bf8:	0090ae40 	call	90ae4 <OSSemPost>

  if (ptr != start)
   93bfc:	e0fffc17 	ldw	r3,-16(fp)
   93c00:	e0bff517 	ldw	r2,-44(fp)
   93c04:	18800526 	beq	r3,r2,93c1c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
   93c08:	e0fffc17 	ldw	r3,-16(fp)
   93c0c:	e0bff517 	ldw	r2,-44(fp)
   93c10:	1887c83a 	sub	r3,r3,r2
   93c14:	e0ffff15 	stw	r3,-4(fp)
   93c18:	00000906 	br	93c40 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
   93c1c:	e0bffe17 	ldw	r2,-8(fp)
   93c20:	1090000c 	andi	r2,r2,16384
   93c24:	1005003a 	cmpeq	r2,r2,zero
   93c28:	1000031e 	bne	r2,zero,93c38 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   93c2c:	00bffd44 	movi	r2,-11
   93c30:	e0bfff15 	stw	r2,-4(fp)
   93c34:	00000206 	br	93c40 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
   93c38:	00bffec4 	movi	r2,-5
   93c3c:	e0bfff15 	stw	r2,-4(fp)
   93c40:	e0bfff17 	ldw	r2,-4(fp)
}
   93c44:	e037883a 	mov	sp,fp
   93c48:	dfc00117 	ldw	ra,4(sp)
   93c4c:	df000017 	ldw	fp,0(sp)
   93c50:	dec00204 	addi	sp,sp,8
   93c54:	f800283a 	ret

00093c58 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   93c58:	defffa04 	addi	sp,sp,-24
   93c5c:	dfc00515 	stw	ra,20(sp)
   93c60:	df000415 	stw	fp,16(sp)
   93c64:	df000404 	addi	fp,sp,16
   93c68:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   93c6c:	e0bfff17 	ldw	r2,-4(fp)
   93c70:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   93c74:	e0bfff17 	ldw	r2,-4(fp)
   93c78:	10800104 	addi	r2,r2,4
   93c7c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93c80:	0005303a 	rdctl	r2,status
   93c84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93c88:	e0fffd17 	ldw	r3,-12(fp)
   93c8c:	00bfff84 	movi	r2,-2
   93c90:	1884703a 	and	r2,r3,r2
   93c94:	1001703a 	wrctl	status,r2
  
  return context;
   93c98:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   93c9c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   93ca0:	00948580 	call	94858 <alt_tick>
   93ca4:	e0bffe17 	ldw	r2,-8(fp)
   93ca8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93cac:	e0bffc17 	ldw	r2,-16(fp)
   93cb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   93cb4:	e037883a 	mov	sp,fp
   93cb8:	dfc00117 	ldw	ra,4(sp)
   93cbc:	df000017 	ldw	fp,0(sp)
   93cc0:	dec00204 	addi	sp,sp,8
   93cc4:	f800283a 	ret

00093cc8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   93cc8:	defff804 	addi	sp,sp,-32
   93ccc:	dfc00715 	stw	ra,28(sp)
   93cd0:	df000615 	stw	fp,24(sp)
   93cd4:	df000604 	addi	fp,sp,24
   93cd8:	e13ffc15 	stw	r4,-16(fp)
   93cdc:	e17ffd15 	stw	r5,-12(fp)
   93ce0:	e1bffe15 	stw	r6,-8(fp)
   93ce4:	e1ffff15 	stw	r7,-4(fp)
   93ce8:	e0bfff17 	ldw	r2,-4(fp)
   93cec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   93cf0:	008002b4 	movhi	r2,10
   93cf4:	10a41304 	addi	r2,r2,-28596
   93cf8:	10800017 	ldw	r2,0(r2)
   93cfc:	1004c03a 	cmpne	r2,r2,zero
   93d00:	1000041e 	bne	r2,zero,93d14 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   93d04:	00c002b4 	movhi	r3,10
   93d08:	18e41304 	addi	r3,r3,-28596
   93d0c:	e0bffb17 	ldw	r2,-20(fp)
   93d10:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   93d14:	e0bffc17 	ldw	r2,-16(fp)
   93d18:	10800104 	addi	r2,r2,4
   93d1c:	1007883a 	mov	r3,r2
   93d20:	008001c4 	movi	r2,7
   93d24:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   93d28:	d8000015 	stw	zero,0(sp)
   93d2c:	e13ffd17 	ldw	r4,-12(fp)
   93d30:	e17ffe17 	ldw	r5,-8(fp)
   93d34:	01800274 	movhi	r6,9
   93d38:	318f1604 	addi	r6,r6,15448
   93d3c:	e1fffc17 	ldw	r7,-16(fp)
   93d40:	00940c00 	call	940c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   93d44:	e037883a 	mov	sp,fp
   93d48:	dfc00117 	ldw	ra,4(sp)
   93d4c:	df000017 	ldw	fp,0(sp)
   93d50:	dec00204 	addi	sp,sp,8
   93d54:	f800283a 	ret

00093d58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   93d58:	defff404 	addi	sp,sp,-48
   93d5c:	df000b15 	stw	fp,44(sp)
   93d60:	df000b04 	addi	fp,sp,44
   93d64:	e13ffb15 	stw	r4,-20(fp)
   93d68:	e17ffc15 	stw	r5,-16(fp)
   93d6c:	e1bffd15 	stw	r6,-12(fp)
   93d70:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   93d74:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   93d78:	008002b4 	movhi	r2,10
   93d7c:	10a41304 	addi	r2,r2,-28596
   93d80:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   93d84:	1005003a 	cmpeq	r2,r2,zero
   93d88:	1000411e 	bne	r2,zero,93e90 <alt_alarm_start+0x138>
  {
    if (alarm)
   93d8c:	e0bffb17 	ldw	r2,-20(fp)
   93d90:	1005003a 	cmpeq	r2,r2,zero
   93d94:	10003b1e 	bne	r2,zero,93e84 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   93d98:	e0fffb17 	ldw	r3,-20(fp)
   93d9c:	e0bffd17 	ldw	r2,-12(fp)
   93da0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   93da4:	e0fffb17 	ldw	r3,-20(fp)
   93da8:	e0bffe17 	ldw	r2,-8(fp)
   93dac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93db0:	0005303a 	rdctl	r2,status
   93db4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93db8:	e0fff817 	ldw	r3,-32(fp)
   93dbc:	00bfff84 	movi	r2,-2
   93dc0:	1884703a 	and	r2,r3,r2
   93dc4:	1001703a 	wrctl	status,r2
  
  return context;
   93dc8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   93dcc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   93dd0:	008002b4 	movhi	r2,10
   93dd4:	10a41404 	addi	r2,r2,-28592
   93dd8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   93ddc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   93de0:	e0fffc17 	ldw	r3,-16(fp)
   93de4:	e0bff917 	ldw	r2,-28(fp)
   93de8:	1885883a 	add	r2,r3,r2
   93dec:	10c00044 	addi	r3,r2,1
   93df0:	e0bffb17 	ldw	r2,-20(fp)
   93df4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   93df8:	e0bffb17 	ldw	r2,-20(fp)
   93dfc:	10c00217 	ldw	r3,8(r2)
   93e00:	e0bff917 	ldw	r2,-28(fp)
   93e04:	1880042e 	bgeu	r3,r2,93e18 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   93e08:	e0fffb17 	ldw	r3,-20(fp)
   93e0c:	00800044 	movi	r2,1
   93e10:	18800405 	stb	r2,16(r3)
   93e14:	00000206 	br	93e20 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   93e18:	e0bffb17 	ldw	r2,-20(fp)
   93e1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   93e20:	e0fffb17 	ldw	r3,-20(fp)
   93e24:	00800274 	movhi	r2,9
   93e28:	109d3404 	addi	r2,r2,29904
   93e2c:	e0bff615 	stw	r2,-40(fp)
   93e30:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   93e34:	e0fff717 	ldw	r3,-36(fp)
   93e38:	e0bff617 	ldw	r2,-40(fp)
   93e3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   93e40:	e0bff617 	ldw	r2,-40(fp)
   93e44:	10c00017 	ldw	r3,0(r2)
   93e48:	e0bff717 	ldw	r2,-36(fp)
   93e4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   93e50:	e0bff617 	ldw	r2,-40(fp)
   93e54:	10c00017 	ldw	r3,0(r2)
   93e58:	e0bff717 	ldw	r2,-36(fp)
   93e5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   93e60:	e0fff617 	ldw	r3,-40(fp)
   93e64:	e0bff717 	ldw	r2,-36(fp)
   93e68:	18800015 	stw	r2,0(r3)
   93e6c:	e0bffa17 	ldw	r2,-24(fp)
   93e70:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93e74:	e0bff517 	ldw	r2,-44(fp)
   93e78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   93e7c:	e03fff15 	stw	zero,-4(fp)
   93e80:	00000506 	br	93e98 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   93e84:	00bffa84 	movi	r2,-22
   93e88:	e0bfff15 	stw	r2,-4(fp)
   93e8c:	00000206 	br	93e98 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   93e90:	00bfde84 	movi	r2,-134
   93e94:	e0bfff15 	stw	r2,-4(fp)
   93e98:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   93e9c:	e037883a 	mov	sp,fp
   93ea0:	df000017 	ldw	fp,0(sp)
   93ea4:	dec00104 	addi	sp,sp,4
   93ea8:	f800283a 	ret

00093eac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   93eac:	deffff04 	addi	sp,sp,-4
   93eb0:	df000015 	stw	fp,0(sp)
   93eb4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   93eb8:	e037883a 	mov	sp,fp
   93ebc:	df000017 	ldw	fp,0(sp)
   93ec0:	dec00104 	addi	sp,sp,4
   93ec4:	f800283a 	ret

00093ec8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   93ec8:	defff904 	addi	sp,sp,-28
   93ecc:	dfc00615 	stw	ra,24(sp)
   93ed0:	df000515 	stw	fp,20(sp)
   93ed4:	df000504 	addi	fp,sp,20
   93ed8:	e13ffd15 	stw	r4,-12(fp)
   93edc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   93ee0:	e0bffd17 	ldw	r2,-12(fp)
   93ee4:	1005003a 	cmpeq	r2,r2,zero
   93ee8:	1000041e 	bne	r2,zero,93efc <alt_dev_llist_insert+0x34>
   93eec:	e0bffd17 	ldw	r2,-12(fp)
   93ef0:	10800217 	ldw	r2,8(r2)
   93ef4:	1004c03a 	cmpne	r2,r2,zero
   93ef8:	1000071e 	bne	r2,zero,93f18 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   93efc:	0093f7c0 	call	93f7c <alt_get_errno>
   93f00:	1007883a 	mov	r3,r2
   93f04:	00800584 	movi	r2,22
   93f08:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   93f0c:	00bffa84 	movi	r2,-22
   93f10:	e0bfff15 	stw	r2,-4(fp)
   93f14:	00001306 	br	93f64 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   93f18:	e0fffd17 	ldw	r3,-12(fp)
   93f1c:	e0bffe17 	ldw	r2,-8(fp)
   93f20:	e0bffb15 	stw	r2,-20(fp)
   93f24:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   93f28:	e0fffc17 	ldw	r3,-16(fp)
   93f2c:	e0bffb17 	ldw	r2,-20(fp)
   93f30:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   93f34:	e0bffb17 	ldw	r2,-20(fp)
   93f38:	10c00017 	ldw	r3,0(r2)
   93f3c:	e0bffc17 	ldw	r2,-16(fp)
   93f40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   93f44:	e0bffb17 	ldw	r2,-20(fp)
   93f48:	10c00017 	ldw	r3,0(r2)
   93f4c:	e0bffc17 	ldw	r2,-16(fp)
   93f50:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   93f54:	e0fffb17 	ldw	r3,-20(fp)
   93f58:	e0bffc17 	ldw	r2,-16(fp)
   93f5c:	18800015 	stw	r2,0(r3)

  return 0;  
   93f60:	e03fff15 	stw	zero,-4(fp)
   93f64:	e0bfff17 	ldw	r2,-4(fp)
}
   93f68:	e037883a 	mov	sp,fp
   93f6c:	dfc00117 	ldw	ra,4(sp)
   93f70:	df000017 	ldw	fp,0(sp)
   93f74:	dec00204 	addi	sp,sp,8
   93f78:	f800283a 	ret

00093f7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   93f7c:	defffd04 	addi	sp,sp,-12
   93f80:	dfc00215 	stw	ra,8(sp)
   93f84:	df000115 	stw	fp,4(sp)
   93f88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   93f8c:	00800274 	movhi	r2,9
   93f90:	109d1204 	addi	r2,r2,29768
   93f94:	10800017 	ldw	r2,0(r2)
   93f98:	1005003a 	cmpeq	r2,r2,zero
   93f9c:	1000061e 	bne	r2,zero,93fb8 <alt_get_errno+0x3c>
   93fa0:	00800274 	movhi	r2,9
   93fa4:	109d1204 	addi	r2,r2,29768
   93fa8:	10800017 	ldw	r2,0(r2)
   93fac:	103ee83a 	callr	r2
   93fb0:	e0bfff15 	stw	r2,-4(fp)
   93fb4:	00000306 	br	93fc4 <alt_get_errno+0x48>
   93fb8:	008002b4 	movhi	r2,10
   93fbc:	10a3f504 	addi	r2,r2,-28716
   93fc0:	e0bfff15 	stw	r2,-4(fp)
   93fc4:	e0bfff17 	ldw	r2,-4(fp)
}
   93fc8:	e037883a 	mov	sp,fp
   93fcc:	dfc00117 	ldw	ra,4(sp)
   93fd0:	df000017 	ldw	fp,0(sp)
   93fd4:	dec00204 	addi	sp,sp,8
   93fd8:	f800283a 	ret

00093fdc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   93fdc:	defffd04 	addi	sp,sp,-12
   93fe0:	dfc00215 	stw	ra,8(sp)
   93fe4:	df000115 	stw	fp,4(sp)
   93fe8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   93fec:	00bfff04 	movi	r2,-4
   93ff0:	00c00274 	movhi	r3,9
   93ff4:	18d55004 	addi	r3,r3,21824
   93ff8:	1885883a 	add	r2,r3,r2
   93ffc:	e0bfff15 	stw	r2,-4(fp)
   94000:	00000606 	br	9401c <_do_ctors+0x40>
        (*ctor) (); 
   94004:	e0bfff17 	ldw	r2,-4(fp)
   94008:	10800017 	ldw	r2,0(r2)
   9400c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   94010:	e0bfff17 	ldw	r2,-4(fp)
   94014:	10bfff04 	addi	r2,r2,-4
   94018:	e0bfff15 	stw	r2,-4(fp)
   9401c:	e0ffff17 	ldw	r3,-4(fp)
   94020:	00800274 	movhi	r2,9
   94024:	10954f04 	addi	r2,r2,21820
   94028:	18bff62e 	bgeu	r3,r2,94004 <_do_ctors+0x28>
        (*ctor) (); 
}
   9402c:	e037883a 	mov	sp,fp
   94030:	dfc00117 	ldw	ra,4(sp)
   94034:	df000017 	ldw	fp,0(sp)
   94038:	dec00204 	addi	sp,sp,8
   9403c:	f800283a 	ret

00094040 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   94040:	defffd04 	addi	sp,sp,-12
   94044:	dfc00215 	stw	ra,8(sp)
   94048:	df000115 	stw	fp,4(sp)
   9404c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   94050:	00bfff04 	movi	r2,-4
   94054:	00c00274 	movhi	r3,9
   94058:	18d55004 	addi	r3,r3,21824
   9405c:	1885883a 	add	r2,r3,r2
   94060:	e0bfff15 	stw	r2,-4(fp)
   94064:	00000606 	br	94080 <_do_dtors+0x40>
        (*dtor) (); 
   94068:	e0bfff17 	ldw	r2,-4(fp)
   9406c:	10800017 	ldw	r2,0(r2)
   94070:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   94074:	e0bfff17 	ldw	r2,-4(fp)
   94078:	10bfff04 	addi	r2,r2,-4
   9407c:	e0bfff15 	stw	r2,-4(fp)
   94080:	e0ffff17 	ldw	r3,-4(fp)
   94084:	00800274 	movhi	r2,9
   94088:	10955004 	addi	r2,r2,21824
   9408c:	18bff62e 	bgeu	r3,r2,94068 <_do_dtors+0x28>
        (*dtor) (); 
}
   94090:	e037883a 	mov	sp,fp
   94094:	dfc00117 	ldw	ra,4(sp)
   94098:	df000017 	ldw	fp,0(sp)
   9409c:	dec00204 	addi	sp,sp,8
   940a0:	f800283a 	ret

000940a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   940a4:	deffff04 	addi	sp,sp,-4
   940a8:	df000015 	stw	fp,0(sp)
   940ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   940b0:	e037883a 	mov	sp,fp
   940b4:	df000017 	ldw	fp,0(sp)
   940b8:	dec00104 	addi	sp,sp,4
   940bc:	f800283a 	ret

000940c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   940c0:	defff904 	addi	sp,sp,-28
   940c4:	dfc00615 	stw	ra,24(sp)
   940c8:	df000515 	stw	fp,20(sp)
   940cc:	df000504 	addi	fp,sp,20
   940d0:	e13ffc15 	stw	r4,-16(fp)
   940d4:	e17ffd15 	stw	r5,-12(fp)
   940d8:	e1bffe15 	stw	r6,-8(fp)
   940dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   940e0:	e0800217 	ldw	r2,8(fp)
   940e4:	d8800015 	stw	r2,0(sp)
   940e8:	e13ffc17 	ldw	r4,-16(fp)
   940ec:	e17ffd17 	ldw	r5,-12(fp)
   940f0:	e1bffe17 	ldw	r6,-8(fp)
   940f4:	e1ffff17 	ldw	r7,-4(fp)
   940f8:	00942940 	call	94294 <alt_iic_isr_register>
}  
   940fc:	e037883a 	mov	sp,fp
   94100:	dfc00117 	ldw	ra,4(sp)
   94104:	df000017 	ldw	fp,0(sp)
   94108:	dec00204 	addi	sp,sp,8
   9410c:	f800283a 	ret

00094110 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   94110:	defff904 	addi	sp,sp,-28
   94114:	df000615 	stw	fp,24(sp)
   94118:	df000604 	addi	fp,sp,24
   9411c:	e13ffe15 	stw	r4,-8(fp)
   94120:	e17fff15 	stw	r5,-4(fp)
   94124:	e0bfff17 	ldw	r2,-4(fp)
   94128:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9412c:	0005303a 	rdctl	r2,status
   94130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94134:	e0fffb17 	ldw	r3,-20(fp)
   94138:	00bfff84 	movi	r2,-2
   9413c:	1884703a 	and	r2,r3,r2
   94140:	1001703a 	wrctl	status,r2
  
  return context;
   94144:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   94148:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   9414c:	e0fffc17 	ldw	r3,-16(fp)
   94150:	00800044 	movi	r2,1
   94154:	10c4983a 	sll	r2,r2,r3
   94158:	1007883a 	mov	r3,r2
   9415c:	008002b4 	movhi	r2,10
   94160:	10a41204 	addi	r2,r2,-28600
   94164:	10800017 	ldw	r2,0(r2)
   94168:	1886b03a 	or	r3,r3,r2
   9416c:	008002b4 	movhi	r2,10
   94170:	10a41204 	addi	r2,r2,-28600
   94174:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   94178:	008002b4 	movhi	r2,10
   9417c:	10a41204 	addi	r2,r2,-28600
   94180:	10800017 	ldw	r2,0(r2)
   94184:	100170fa 	wrctl	ienable,r2
   94188:	e0bffd17 	ldw	r2,-12(fp)
   9418c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94190:	e0bffa17 	ldw	r2,-24(fp)
   94194:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   94198:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   9419c:	e037883a 	mov	sp,fp
   941a0:	df000017 	ldw	fp,0(sp)
   941a4:	dec00104 	addi	sp,sp,4
   941a8:	f800283a 	ret

000941ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   941ac:	defff904 	addi	sp,sp,-28
   941b0:	df000615 	stw	fp,24(sp)
   941b4:	df000604 	addi	fp,sp,24
   941b8:	e13ffe15 	stw	r4,-8(fp)
   941bc:	e17fff15 	stw	r5,-4(fp)
   941c0:	e0bfff17 	ldw	r2,-4(fp)
   941c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   941c8:	0005303a 	rdctl	r2,status
   941cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   941d0:	e0fffb17 	ldw	r3,-20(fp)
   941d4:	00bfff84 	movi	r2,-2
   941d8:	1884703a 	and	r2,r3,r2
   941dc:	1001703a 	wrctl	status,r2
  
  return context;
   941e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   941e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   941e8:	e0fffc17 	ldw	r3,-16(fp)
   941ec:	00800044 	movi	r2,1
   941f0:	10c4983a 	sll	r2,r2,r3
   941f4:	0084303a 	nor	r2,zero,r2
   941f8:	1007883a 	mov	r3,r2
   941fc:	008002b4 	movhi	r2,10
   94200:	10a41204 	addi	r2,r2,-28600
   94204:	10800017 	ldw	r2,0(r2)
   94208:	1886703a 	and	r3,r3,r2
   9420c:	008002b4 	movhi	r2,10
   94210:	10a41204 	addi	r2,r2,-28600
   94214:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   94218:	008002b4 	movhi	r2,10
   9421c:	10a41204 	addi	r2,r2,-28600
   94220:	10800017 	ldw	r2,0(r2)
   94224:	100170fa 	wrctl	ienable,r2
   94228:	e0bffd17 	ldw	r2,-12(fp)
   9422c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94230:	e0bffa17 	ldw	r2,-24(fp)
   94234:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   94238:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   9423c:	e037883a 	mov	sp,fp
   94240:	df000017 	ldw	fp,0(sp)
   94244:	dec00104 	addi	sp,sp,4
   94248:	f800283a 	ret

0009424c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   9424c:	defffc04 	addi	sp,sp,-16
   94250:	df000315 	stw	fp,12(sp)
   94254:	df000304 	addi	fp,sp,12
   94258:	e13ffe15 	stw	r4,-8(fp)
   9425c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   94260:	000530fa 	rdctl	r2,ienable
   94264:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   94268:	e0ffff17 	ldw	r3,-4(fp)
   9426c:	00800044 	movi	r2,1
   94270:	10c4983a 	sll	r2,r2,r3
   94274:	1007883a 	mov	r3,r2
   94278:	e0bffd17 	ldw	r2,-12(fp)
   9427c:	1884703a 	and	r2,r3,r2
   94280:	1004c03a 	cmpne	r2,r2,zero
}
   94284:	e037883a 	mov	sp,fp
   94288:	df000017 	ldw	fp,0(sp)
   9428c:	dec00104 	addi	sp,sp,4
   94290:	f800283a 	ret

00094294 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   94294:	defff404 	addi	sp,sp,-48
   94298:	dfc00b15 	stw	ra,44(sp)
   9429c:	df000a15 	stw	fp,40(sp)
   942a0:	df000a04 	addi	fp,sp,40
   942a4:	e13ffb15 	stw	r4,-20(fp)
   942a8:	e17ffc15 	stw	r5,-16(fp)
   942ac:	e1bffd15 	stw	r6,-12(fp)
   942b0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   942b4:	00bffa84 	movi	r2,-22
   942b8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   942bc:	e0bffc17 	ldw	r2,-16(fp)
   942c0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   942c4:	e0bff917 	ldw	r2,-28(fp)
   942c8:	10800808 	cmpgei	r2,r2,32
   942cc:	1000291e 	bne	r2,zero,94374 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   942d0:	0005303a 	rdctl	r2,status
   942d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   942d8:	e0fff717 	ldw	r3,-36(fp)
   942dc:	00bfff84 	movi	r2,-2
   942e0:	1884703a 	and	r2,r3,r2
   942e4:	1001703a 	wrctl	status,r2
  
  return context;
   942e8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   942ec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   942f0:	e0bff917 	ldw	r2,-28(fp)
   942f4:	00c002b4 	movhi	r3,10
   942f8:	18f8a804 	addi	r3,r3,-7520
   942fc:	100490fa 	slli	r2,r2,3
   94300:	10c7883a 	add	r3,r2,r3
   94304:	e0bffd17 	ldw	r2,-12(fp)
   94308:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   9430c:	e0bff917 	ldw	r2,-28(fp)
   94310:	00c002b4 	movhi	r3,10
   94314:	18f8a804 	addi	r3,r3,-7520
   94318:	100490fa 	slli	r2,r2,3
   9431c:	10c5883a 	add	r2,r2,r3
   94320:	10c00104 	addi	r3,r2,4
   94324:	e0bffe17 	ldw	r2,-8(fp)
   94328:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   9432c:	e0bffd17 	ldw	r2,-12(fp)
   94330:	1005003a 	cmpeq	r2,r2,zero
   94334:	1000051e 	bne	r2,zero,9434c <alt_iic_isr_register+0xb8>
   94338:	e17ff917 	ldw	r5,-28(fp)
   9433c:	e13ffb17 	ldw	r4,-20(fp)
   94340:	00941100 	call	94110 <alt_ic_irq_enable>
   94344:	e0bfff15 	stw	r2,-4(fp)
   94348:	00000406 	br	9435c <alt_iic_isr_register+0xc8>
   9434c:	e17ff917 	ldw	r5,-28(fp)
   94350:	e13ffb17 	ldw	r4,-20(fp)
   94354:	00941ac0 	call	941ac <alt_ic_irq_disable>
   94358:	e0bfff15 	stw	r2,-4(fp)
   9435c:	e0bfff17 	ldw	r2,-4(fp)
   94360:	e0bffa15 	stw	r2,-24(fp)
   94364:	e0bff817 	ldw	r2,-32(fp)
   94368:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9436c:	e0bff617 	ldw	r2,-40(fp)
   94370:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   94374:	e0bffa17 	ldw	r2,-24(fp)
}
   94378:	e037883a 	mov	sp,fp
   9437c:	dfc00117 	ldw	ra,4(sp)
   94380:	df000017 	ldw	fp,0(sp)
   94384:	dec00204 	addi	sp,sp,8
   94388:	f800283a 	ret

0009438c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   9438c:	defff804 	addi	sp,sp,-32
   94390:	dfc00715 	stw	ra,28(sp)
   94394:	df000615 	stw	fp,24(sp)
   94398:	dc000515 	stw	r16,20(sp)
   9439c:	df000504 	addi	fp,sp,20
   943a0:	e13ffc15 	stw	r4,-16(fp)
   943a4:	e17ffd15 	stw	r5,-12(fp)
   943a8:	e1bffe15 	stw	r6,-8(fp)
   943ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   943b0:	e13ffd17 	ldw	r4,-12(fp)
   943b4:	e17ffe17 	ldw	r5,-8(fp)
   943b8:	e1bfff17 	ldw	r6,-4(fp)
   943bc:	00945d40 	call	945d4 <open>
   943c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   943c4:	e0bffb17 	ldw	r2,-20(fp)
   943c8:	1004803a 	cmplt	r2,r2,zero
   943cc:	10001f1e 	bne	r2,zero,9444c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   943d0:	e13ffb17 	ldw	r4,-20(fp)
   943d4:	04000274 	movhi	r16,9
   943d8:	84188c04 	addi	r16,r16,25136
   943dc:	01400304 	movi	r5,12
   943e0:	008964c0 	call	8964c <__mulsi3>
   943e4:	1405883a 	add	r2,r2,r16
   943e8:	10c00017 	ldw	r3,0(r2)
   943ec:	e0bffc17 	ldw	r2,-16(fp)
   943f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   943f4:	e13ffb17 	ldw	r4,-20(fp)
   943f8:	04000274 	movhi	r16,9
   943fc:	84188c04 	addi	r16,r16,25136
   94400:	01400304 	movi	r5,12
   94404:	008964c0 	call	8964c <__mulsi3>
   94408:	1405883a 	add	r2,r2,r16
   9440c:	10800104 	addi	r2,r2,4
   94410:	10c00017 	ldw	r3,0(r2)
   94414:	e0bffc17 	ldw	r2,-16(fp)
   94418:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   9441c:	e13ffb17 	ldw	r4,-20(fp)
   94420:	04000274 	movhi	r16,9
   94424:	84188c04 	addi	r16,r16,25136
   94428:	01400304 	movi	r5,12
   9442c:	008964c0 	call	8964c <__mulsi3>
   94430:	1405883a 	add	r2,r2,r16
   94434:	10800204 	addi	r2,r2,8
   94438:	10c00017 	ldw	r3,0(r2)
   9443c:	e0bffc17 	ldw	r2,-16(fp)
   94440:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   94444:	e13ffb17 	ldw	r4,-20(fp)
   94448:	008a5b00 	call	8a5b0 <alt_release_fd>
  }
} 
   9444c:	e037883a 	mov	sp,fp
   94450:	dfc00217 	ldw	ra,8(sp)
   94454:	df000117 	ldw	fp,4(sp)
   94458:	dc000017 	ldw	r16,0(sp)
   9445c:	dec00304 	addi	sp,sp,12
   94460:	f800283a 	ret

00094464 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   94464:	defffb04 	addi	sp,sp,-20
   94468:	dfc00415 	stw	ra,16(sp)
   9446c:	df000315 	stw	fp,12(sp)
   94470:	df000304 	addi	fp,sp,12
   94474:	e13ffd15 	stw	r4,-12(fp)
   94478:	e17ffe15 	stw	r5,-8(fp)
   9447c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   94480:	01000274 	movhi	r4,9
   94484:	21188f04 	addi	r4,r4,25148
   94488:	e17ffd17 	ldw	r5,-12(fp)
   9448c:	01800044 	movi	r6,1
   94490:	01c07fc4 	movi	r7,511
   94494:	009438c0 	call	9438c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   94498:	01000274 	movhi	r4,9
   9449c:	21188c04 	addi	r4,r4,25136
   944a0:	e17ffe17 	ldw	r5,-8(fp)
   944a4:	000d883a 	mov	r6,zero
   944a8:	01c07fc4 	movi	r7,511
   944ac:	009438c0 	call	9438c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   944b0:	01000274 	movhi	r4,9
   944b4:	21189204 	addi	r4,r4,25160
   944b8:	e17fff17 	ldw	r5,-4(fp)
   944bc:	01800044 	movi	r6,1
   944c0:	01c07fc4 	movi	r7,511
   944c4:	009438c0 	call	9438c <alt_open_fd>
}  
   944c8:	e037883a 	mov	sp,fp
   944cc:	dfc00117 	ldw	ra,4(sp)
   944d0:	df000017 	ldw	fp,0(sp)
   944d4:	dec00204 	addi	sp,sp,8
   944d8:	f800283a 	ret

000944dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   944dc:	defffa04 	addi	sp,sp,-24
   944e0:	dfc00515 	stw	ra,20(sp)
   944e4:	df000415 	stw	fp,16(sp)
   944e8:	dc000315 	stw	r16,12(sp)
   944ec:	df000304 	addi	fp,sp,12
   944f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   944f4:	e0bffe17 	ldw	r2,-8(fp)
   944f8:	10800217 	ldw	r2,8(r2)
   944fc:	10d00034 	orhi	r3,r2,16384
   94500:	e0bffe17 	ldw	r2,-8(fp)
   94504:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   94508:	e03ffd15 	stw	zero,-12(fp)
   9450c:	00002306 	br	9459c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   94510:	e13ffd17 	ldw	r4,-12(fp)
   94514:	04000274 	movhi	r16,9
   94518:	84188c04 	addi	r16,r16,25136
   9451c:	01400304 	movi	r5,12
   94520:	008964c0 	call	8964c <__mulsi3>
   94524:	1405883a 	add	r2,r2,r16
   94528:	10c00017 	ldw	r3,0(r2)
   9452c:	e0bffe17 	ldw	r2,-8(fp)
   94530:	10800017 	ldw	r2,0(r2)
   94534:	1880161e 	bne	r3,r2,94590 <alt_file_locked+0xb4>
   94538:	e13ffd17 	ldw	r4,-12(fp)
   9453c:	04000274 	movhi	r16,9
   94540:	84188c04 	addi	r16,r16,25136
   94544:	01400304 	movi	r5,12
   94548:	008964c0 	call	8964c <__mulsi3>
   9454c:	1405883a 	add	r2,r2,r16
   94550:	10800204 	addi	r2,r2,8
   94554:	10800017 	ldw	r2,0(r2)
   94558:	1004403a 	cmpge	r2,r2,zero
   9455c:	10000c1e 	bne	r2,zero,94590 <alt_file_locked+0xb4>
   94560:	e13ffd17 	ldw	r4,-12(fp)
   94564:	01400304 	movi	r5,12
   94568:	008964c0 	call	8964c <__mulsi3>
   9456c:	1007883a 	mov	r3,r2
   94570:	00800274 	movhi	r2,9
   94574:	10988c04 	addi	r2,r2,25136
   94578:	1887883a 	add	r3,r3,r2
   9457c:	e0bffe17 	ldw	r2,-8(fp)
   94580:	18800326 	beq	r3,r2,94590 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   94584:	00bffcc4 	movi	r2,-13
   94588:	e0bfff15 	stw	r2,-4(fp)
   9458c:	00000a06 	br	945b8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   94590:	e0bffd17 	ldw	r2,-12(fp)
   94594:	10800044 	addi	r2,r2,1
   94598:	e0bffd15 	stw	r2,-12(fp)
   9459c:	00800274 	movhi	r2,9
   945a0:	109d1104 	addi	r2,r2,29764
   945a4:	10800017 	ldw	r2,0(r2)
   945a8:	1007883a 	mov	r3,r2
   945ac:	e0bffd17 	ldw	r2,-12(fp)
   945b0:	18bfd72e 	bgeu	r3,r2,94510 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   945b4:	e03fff15 	stw	zero,-4(fp)
   945b8:	e0bfff17 	ldw	r2,-4(fp)
}
   945bc:	e037883a 	mov	sp,fp
   945c0:	dfc00217 	ldw	ra,8(sp)
   945c4:	df000117 	ldw	fp,4(sp)
   945c8:	dc000017 	ldw	r16,0(sp)
   945cc:	dec00304 	addi	sp,sp,12
   945d0:	f800283a 	ret

000945d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   945d4:	defff404 	addi	sp,sp,-48
   945d8:	dfc00b15 	stw	ra,44(sp)
   945dc:	df000a15 	stw	fp,40(sp)
   945e0:	df000a04 	addi	fp,sp,40
   945e4:	e13ffb15 	stw	r4,-20(fp)
   945e8:	e17ffc15 	stw	r5,-16(fp)
   945ec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   945f0:	00bfffc4 	movi	r2,-1
   945f4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   945f8:	00bffb44 	movi	r2,-19
   945fc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   94600:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   94604:	e13ffb17 	ldw	r4,-20(fp)
   94608:	01400274 	movhi	r5,9
   9460c:	295d0f04 	addi	r5,r5,29756
   94610:	0094e700 	call	94e70 <alt_find_dev>
   94614:	e0bffa15 	stw	r2,-24(fp)
   94618:	e0bffa17 	ldw	r2,-24(fp)
   9461c:	1004c03a 	cmpne	r2,r2,zero
   94620:	1000051e 	bne	r2,zero,94638 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   94624:	e13ffb17 	ldw	r4,-20(fp)
   94628:	0094f040 	call	94f04 <alt_find_file>
   9462c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   94630:	00800044 	movi	r2,1
   94634:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   94638:	e0bffa17 	ldw	r2,-24(fp)
   9463c:	1005003a 	cmpeq	r2,r2,zero
   94640:	1000311e 	bne	r2,zero,94708 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   94644:	e13ffa17 	ldw	r4,-24(fp)
   94648:	00950240 	call	95024 <alt_get_fd>
   9464c:	e0bff815 	stw	r2,-32(fp)
   94650:	e0bff817 	ldw	r2,-32(fp)
   94654:	1004403a 	cmpge	r2,r2,zero
   94658:	1000031e 	bne	r2,zero,94668 <open+0x94>
    {
      status = index;
   9465c:	e0bff817 	ldw	r2,-32(fp)
   94660:	e0bff715 	stw	r2,-36(fp)
   94664:	00002a06 	br	94710 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   94668:	e13ff817 	ldw	r4,-32(fp)
   9466c:	01400304 	movi	r5,12
   94670:	008964c0 	call	8964c <__mulsi3>
   94674:	1007883a 	mov	r3,r2
   94678:	00800274 	movhi	r2,9
   9467c:	10988c04 	addi	r2,r2,25136
   94680:	1885883a 	add	r2,r3,r2
   94684:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   94688:	e0fffc17 	ldw	r3,-16(fp)
   9468c:	00900034 	movhi	r2,16384
   94690:	10bfffc4 	addi	r2,r2,-1
   94694:	1886703a 	and	r3,r3,r2
   94698:	e0bff917 	ldw	r2,-28(fp)
   9469c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   946a0:	e0bff617 	ldw	r2,-40(fp)
   946a4:	1004c03a 	cmpne	r2,r2,zero
   946a8:	1000061e 	bne	r2,zero,946c4 <open+0xf0>
   946ac:	e13ff917 	ldw	r4,-28(fp)
   946b0:	00944dc0 	call	944dc <alt_file_locked>
   946b4:	e0bff715 	stw	r2,-36(fp)
   946b8:	e0bff717 	ldw	r2,-36(fp)
   946bc:	1004803a 	cmplt	r2,r2,zero
   946c0:	1000131e 	bne	r2,zero,94710 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   946c4:	e0bffa17 	ldw	r2,-24(fp)
   946c8:	10800317 	ldw	r2,12(r2)
   946cc:	1005003a 	cmpeq	r2,r2,zero
   946d0:	1000091e 	bne	r2,zero,946f8 <open+0x124>
   946d4:	e0bffa17 	ldw	r2,-24(fp)
   946d8:	10800317 	ldw	r2,12(r2)
   946dc:	e13ff917 	ldw	r4,-28(fp)
   946e0:	e17ffb17 	ldw	r5,-20(fp)
   946e4:	e1bffc17 	ldw	r6,-16(fp)
   946e8:	e1fffd17 	ldw	r7,-12(fp)
   946ec:	103ee83a 	callr	r2
   946f0:	e0bfff15 	stw	r2,-4(fp)
   946f4:	00000106 	br	946fc <open+0x128>
   946f8:	e03fff15 	stw	zero,-4(fp)
   946fc:	e0bfff17 	ldw	r2,-4(fp)
   94700:	e0bff715 	stw	r2,-36(fp)
   94704:	00000206 	br	94710 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   94708:	00bffb44 	movi	r2,-19
   9470c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   94710:	e0bff717 	ldw	r2,-36(fp)
   94714:	1004403a 	cmpge	r2,r2,zero
   94718:	1000091e 	bne	r2,zero,94740 <open+0x16c>
  {
    alt_release_fd (index);  
   9471c:	e13ff817 	ldw	r4,-32(fp)
   94720:	008a5b00 	call	8a5b0 <alt_release_fd>
    ALT_ERRNO = -status;
   94724:	00947600 	call	94760 <alt_get_errno>
   94728:	e0fff717 	ldw	r3,-36(fp)
   9472c:	00c7c83a 	sub	r3,zero,r3
   94730:	10c00015 	stw	r3,0(r2)
    return -1;
   94734:	00bfffc4 	movi	r2,-1
   94738:	e0bffe15 	stw	r2,-8(fp)
   9473c:	00000206 	br	94748 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   94740:	e0bff817 	ldw	r2,-32(fp)
   94744:	e0bffe15 	stw	r2,-8(fp)
   94748:	e0bffe17 	ldw	r2,-8(fp)
}
   9474c:	e037883a 	mov	sp,fp
   94750:	dfc00117 	ldw	ra,4(sp)
   94754:	df000017 	ldw	fp,0(sp)
   94758:	dec00204 	addi	sp,sp,8
   9475c:	f800283a 	ret

00094760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   94760:	defffd04 	addi	sp,sp,-12
   94764:	dfc00215 	stw	ra,8(sp)
   94768:	df000115 	stw	fp,4(sp)
   9476c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   94770:	00800274 	movhi	r2,9
   94774:	109d1204 	addi	r2,r2,29768
   94778:	10800017 	ldw	r2,0(r2)
   9477c:	1005003a 	cmpeq	r2,r2,zero
   94780:	1000061e 	bne	r2,zero,9479c <alt_get_errno+0x3c>
   94784:	00800274 	movhi	r2,9
   94788:	109d1204 	addi	r2,r2,29768
   9478c:	10800017 	ldw	r2,0(r2)
   94790:	103ee83a 	callr	r2
   94794:	e0bfff15 	stw	r2,-4(fp)
   94798:	00000306 	br	947a8 <alt_get_errno+0x48>
   9479c:	008002b4 	movhi	r2,10
   947a0:	10a3f504 	addi	r2,r2,-28716
   947a4:	e0bfff15 	stw	r2,-4(fp)
   947a8:	e0bfff17 	ldw	r2,-4(fp)
}
   947ac:	e037883a 	mov	sp,fp
   947b0:	dfc00117 	ldw	ra,4(sp)
   947b4:	df000017 	ldw	fp,0(sp)
   947b8:	dec00204 	addi	sp,sp,8
   947bc:	f800283a 	ret

000947c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   947c0:	defffa04 	addi	sp,sp,-24
   947c4:	df000515 	stw	fp,20(sp)
   947c8:	df000504 	addi	fp,sp,20
   947cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   947d0:	0005303a 	rdctl	r2,status
   947d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   947d8:	e0fffd17 	ldw	r3,-12(fp)
   947dc:	00bfff84 	movi	r2,-2
   947e0:	1884703a 	and	r2,r3,r2
   947e4:	1001703a 	wrctl	status,r2
  
  return context;
   947e8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   947ec:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   947f0:	e0bfff17 	ldw	r2,-4(fp)
   947f4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   947f8:	e0bffc17 	ldw	r2,-16(fp)
   947fc:	10c00017 	ldw	r3,0(r2)
   94800:	e0bffc17 	ldw	r2,-16(fp)
   94804:	10800117 	ldw	r2,4(r2)
   94808:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   9480c:	e0bffc17 	ldw	r2,-16(fp)
   94810:	10c00117 	ldw	r3,4(r2)
   94814:	e0bffc17 	ldw	r2,-16(fp)
   94818:	10800017 	ldw	r2,0(r2)
   9481c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   94820:	e0fffc17 	ldw	r3,-16(fp)
   94824:	e0bffc17 	ldw	r2,-16(fp)
   94828:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   9482c:	e0fffc17 	ldw	r3,-16(fp)
   94830:	e0bffc17 	ldw	r2,-16(fp)
   94834:	18800015 	stw	r2,0(r3)
   94838:	e0bffe17 	ldw	r2,-8(fp)
   9483c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94840:	e0bffb17 	ldw	r2,-20(fp)
   94844:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   94848:	e037883a 	mov	sp,fp
   9484c:	df000017 	ldw	fp,0(sp)
   94850:	dec00104 	addi	sp,sp,4
   94854:	f800283a 	ret

00094858 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   94858:	defffb04 	addi	sp,sp,-20
   9485c:	dfc00415 	stw	ra,16(sp)
   94860:	df000315 	stw	fp,12(sp)
   94864:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   94868:	d0a02d17 	ldw	r2,-32588(gp)
   9486c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   94870:	d0a70d17 	ldw	r2,-25548(gp)
   94874:	10800044 	addi	r2,r2,1
   94878:	d0a70d15 	stw	r2,-25548(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9487c:	00003106 	br	94944 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   94880:	e0bffe17 	ldw	r2,-8(fp)
   94884:	10800017 	ldw	r2,0(r2)
   94888:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   9488c:	e0bffe17 	ldw	r2,-8(fp)
   94890:	10800403 	ldbu	r2,16(r2)
   94894:	10803fcc 	andi	r2,r2,255
   94898:	1005003a 	cmpeq	r2,r2,zero
   9489c:	1000051e 	bne	r2,zero,948b4 <alt_tick+0x5c>
   948a0:	d0a70d17 	ldw	r2,-25548(gp)
   948a4:	1004c03a 	cmpne	r2,r2,zero
   948a8:	1000021e 	bne	r2,zero,948b4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   948ac:	e0bffe17 	ldw	r2,-8(fp)
   948b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   948b4:	e0bffe17 	ldw	r2,-8(fp)
   948b8:	10c00217 	ldw	r3,8(r2)
   948bc:	d0a70d17 	ldw	r2,-25548(gp)
   948c0:	10c01e36 	bltu	r2,r3,9493c <alt_tick+0xe4>
   948c4:	e0bffe17 	ldw	r2,-8(fp)
   948c8:	10800403 	ldbu	r2,16(r2)
   948cc:	10803fcc 	andi	r2,r2,255
   948d0:	1004c03a 	cmpne	r2,r2,zero
   948d4:	1000191e 	bne	r2,zero,9493c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   948d8:	e0bffe17 	ldw	r2,-8(fp)
   948dc:	10c00317 	ldw	r3,12(r2)
   948e0:	e0bffe17 	ldw	r2,-8(fp)
   948e4:	11000517 	ldw	r4,20(r2)
   948e8:	183ee83a 	callr	r3
   948ec:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   948f0:	e0bffd17 	ldw	r2,-12(fp)
   948f4:	1004c03a 	cmpne	r2,r2,zero
   948f8:	1000031e 	bne	r2,zero,94908 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   948fc:	e13ffe17 	ldw	r4,-8(fp)
   94900:	00947c00 	call	947c0 <alt_alarm_stop>
   94904:	00000d06 	br	9493c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   94908:	e0bffe17 	ldw	r2,-8(fp)
   9490c:	10c00217 	ldw	r3,8(r2)
   94910:	e0bffd17 	ldw	r2,-12(fp)
   94914:	1887883a 	add	r3,r3,r2
   94918:	e0bffe17 	ldw	r2,-8(fp)
   9491c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   94920:	e0bffe17 	ldw	r2,-8(fp)
   94924:	10c00217 	ldw	r3,8(r2)
   94928:	d0a70d17 	ldw	r2,-25548(gp)
   9492c:	1880032e 	bgeu	r3,r2,9493c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   94930:	e0fffe17 	ldw	r3,-8(fp)
   94934:	00800044 	movi	r2,1
   94938:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   9493c:	e0bfff17 	ldw	r2,-4(fp)
   94940:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   94944:	d0e02d04 	addi	r3,gp,-32588
   94948:	e0bffe17 	ldw	r2,-8(fp)
   9494c:	10ffcc1e 	bne	r2,r3,94880 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   94950:	008b8cc0 	call	8b8cc <OSTimeTick>
}
   94954:	e037883a 	mov	sp,fp
   94958:	dfc00117 	ldw	ra,4(sp)
   9495c:	df000017 	ldw	fp,0(sp)
   94960:	dec00204 	addi	sp,sp,8
   94964:	f800283a 	ret

00094968 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   94968:	deffff04 	addi	sp,sp,-4
   9496c:	df000015 	stw	fp,0(sp)
   94970:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   94974:	000170fa 	wrctl	ienable,zero
}
   94978:	e037883a 	mov	sp,fp
   9497c:	df000017 	ldw	fp,0(sp)
   94980:	dec00104 	addi	sp,sp,4
   94984:	f800283a 	ret

00094988 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   94988:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   9498c:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   94990:	d1270617 	ldw	r4,-25576(gp)

      stw ra,  0(sp)
   94994:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   94998:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   9499c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   949a0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   949a4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   949a8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   949ac:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   949b0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   949b4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   949b8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   949bc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   949c0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   949c4:	0094da80 	call	94da8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   949c8:	d1270117 	ldw	r4,-25596(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   949cc:	d166f907 	ldb	r5,-25628(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   949d0:	d1270615 	stw	r4,-25576(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   949d4:	d166f945 	stb	r5,-25627(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   949d8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   949dc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   949e0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   949e4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   949e8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   949ec:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   949f0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   949f4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   949f8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   949fc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   94a00:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   94a04:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   94a08:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   94a0c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   94a10:	f800283a 	ret

00094a14 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   94a14:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   94a18:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   94a1c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   94a20:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   94a24:	0094da80 	call	94da8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   94a28:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   94a2c:	d4a6f745 	stb	r18,-25635(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   94a30:	003fe506 	br	949c8 <OSCtxSw+0x40>

00094a34 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   94a34:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   94a38:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   94a3c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   94a40:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   94a44:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   94a48:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   94a4c:	dec00204 	addi	sp,sp,8

      callr r2
   94a50:	103ee83a 	callr	r2

      nop
   94a54:	0001883a 	nop

00094a58 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   94a58:	defff704 	addi	sp,sp,-36
   94a5c:	dfc00815 	stw	ra,32(sp)
   94a60:	df000715 	stw	fp,28(sp)
   94a64:	df000704 	addi	fp,sp,28
   94a68:	e13ffc15 	stw	r4,-16(fp)
   94a6c:	e17ffd15 	stw	r5,-12(fp)
   94a70:	e1bffe15 	stw	r6,-8(fp)
   94a74:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   94a78:	e0bffe17 	ldw	r2,-8(fp)
   94a7c:	1007883a 	mov	r3,r2
   94a80:	00bfff04 	movi	r2,-4
   94a84:	1884703a 	and	r2,r3,r2
   94a88:	10bf0004 	addi	r2,r2,-1024
   94a8c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   94a90:	e0bff917 	ldw	r2,-28(fp)
   94a94:	10000015 	stw	zero,0(r2)
   94a98:	e0bff917 	ldw	r2,-28(fp)
   94a9c:	10c0bb04 	addi	r3,r2,748
   94aa0:	e0bff917 	ldw	r2,-28(fp)
   94aa4:	10c00115 	stw	r3,4(r2)
   94aa8:	e0bff917 	ldw	r2,-28(fp)
   94aac:	1080bb04 	addi	r2,r2,748
   94ab0:	10c01704 	addi	r3,r2,92
   94ab4:	e0bff917 	ldw	r2,-28(fp)
   94ab8:	10c00215 	stw	r3,8(r2)
   94abc:	e0bff917 	ldw	r2,-28(fp)
   94ac0:	1080bb04 	addi	r2,r2,748
   94ac4:	10c02e04 	addi	r3,r2,184
   94ac8:	e0bff917 	ldw	r2,-28(fp)
   94acc:	10c00315 	stw	r3,12(r2)
   94ad0:	e0bff917 	ldw	r2,-28(fp)
   94ad4:	10000415 	stw	zero,16(r2)
   94ad8:	e0bff917 	ldw	r2,-28(fp)
   94adc:	10800504 	addi	r2,r2,20
   94ae0:	1009883a 	mov	r4,r2
   94ae4:	01800644 	movi	r6,25
   94ae8:	000b883a 	mov	r5,zero
   94aec:	00858600 	call	85860 <memset>
   94af0:	e0bff917 	ldw	r2,-28(fp)
   94af4:	10000c15 	stw	zero,48(r2)
   94af8:	e0fff917 	ldw	r3,-28(fp)
   94afc:	00800274 	movhi	r2,9
   94b00:	10967c04 	addi	r2,r2,23024
   94b04:	18800d15 	stw	r2,52(r3)
   94b08:	e0bff917 	ldw	r2,-28(fp)
   94b0c:	10000e15 	stw	zero,56(r2)
   94b10:	e0bff917 	ldw	r2,-28(fp)
   94b14:	10000f15 	stw	zero,60(r2)
   94b18:	e0bff917 	ldw	r2,-28(fp)
   94b1c:	10001015 	stw	zero,64(r2)
   94b20:	e0bff917 	ldw	r2,-28(fp)
   94b24:	10001115 	stw	zero,68(r2)
   94b28:	e0bff917 	ldw	r2,-28(fp)
   94b2c:	10001215 	stw	zero,72(r2)
   94b30:	e0bff917 	ldw	r2,-28(fp)
   94b34:	10001315 	stw	zero,76(r2)
   94b38:	e0bff917 	ldw	r2,-28(fp)
   94b3c:	10001415 	stw	zero,80(r2)
   94b40:	e0bff917 	ldw	r2,-28(fp)
   94b44:	10001515 	stw	zero,84(r2)
   94b48:	e0bff917 	ldw	r2,-28(fp)
   94b4c:	10001615 	stw	zero,88(r2)
   94b50:	e0bff917 	ldw	r2,-28(fp)
   94b54:	10001715 	stw	zero,92(r2)
   94b58:	e0bff917 	ldw	r2,-28(fp)
   94b5c:	10001805 	stb	zero,96(r2)
   94b60:	e0bff917 	ldw	r2,-28(fp)
   94b64:	10801f04 	addi	r2,r2,124
   94b68:	10000015 	stw	zero,0(r2)
   94b6c:	10000115 	stw	zero,4(r2)
   94b70:	10000215 	stw	zero,8(r2)
   94b74:	10000315 	stw	zero,12(r2)
   94b78:	10000415 	stw	zero,16(r2)
   94b7c:	10000515 	stw	zero,20(r2)
   94b80:	10000615 	stw	zero,24(r2)
   94b84:	10000715 	stw	zero,28(r2)
   94b88:	10000815 	stw	zero,32(r2)
   94b8c:	e0bff917 	ldw	r2,-28(fp)
   94b90:	10002815 	stw	zero,160(r2)
   94b94:	e0fff917 	ldw	r3,-28(fp)
   94b98:	00800044 	movi	r2,1
   94b9c:	18802915 	stw	r2,164(r3)
   94ba0:	18002a15 	stw	zero,168(r3)
   94ba4:	e0fff917 	ldw	r3,-28(fp)
   94ba8:	008cc384 	movi	r2,13070
   94bac:	18802b0d 	sth	r2,172(r3)
   94bb0:	e0fff917 	ldw	r3,-28(fp)
   94bb4:	00aaf344 	movi	r2,-21555
   94bb8:	18802b8d 	sth	r2,174(r3)
   94bbc:	e0fff917 	ldw	r3,-28(fp)
   94bc0:	00848d04 	movi	r2,4660
   94bc4:	18802c0d 	sth	r2,176(r3)
   94bc8:	e0fff917 	ldw	r3,-28(fp)
   94bcc:	00b99b44 	movi	r2,-6547
   94bd0:	18802c8d 	sth	r2,178(r3)
   94bd4:	e0fff917 	ldw	r3,-28(fp)
   94bd8:	00b7bb04 	movi	r2,-8468
   94bdc:	18802d0d 	sth	r2,180(r3)
   94be0:	e0fff917 	ldw	r3,-28(fp)
   94be4:	00800144 	movi	r2,5
   94be8:	18802d8d 	sth	r2,182(r3)
   94bec:	e0fff917 	ldw	r3,-28(fp)
   94bf0:	008002c4 	movi	r2,11
   94bf4:	18802e0d 	sth	r2,184(r3)
   94bf8:	e0bff917 	ldw	r2,-28(fp)
   94bfc:	10002f15 	stw	zero,188(r2)
   94c00:	e0bff917 	ldw	r2,-28(fp)
   94c04:	10003015 	stw	zero,192(r2)
   94c08:	e0bff917 	ldw	r2,-28(fp)
   94c0c:	10003115 	stw	zero,196(r2)
   94c10:	e0bff917 	ldw	r2,-28(fp)
   94c14:	10003215 	stw	zero,200(r2)
   94c18:	e0bff917 	ldw	r2,-28(fp)
   94c1c:	10003315 	stw	zero,204(r2)
   94c20:	e0bff917 	ldw	r2,-28(fp)
   94c24:	10003415 	stw	zero,208(r2)
   94c28:	e0bff917 	ldw	r2,-28(fp)
   94c2c:	10003e15 	stw	zero,248(r2)
   94c30:	e0bff917 	ldw	r2,-28(fp)
   94c34:	10003f15 	stw	zero,252(r2)
   94c38:	e0bff917 	ldw	r2,-28(fp)
   94c3c:	10004015 	stw	zero,256(r2)
   94c40:	e0bff917 	ldw	r2,-28(fp)
   94c44:	10004115 	stw	zero,260(r2)
   94c48:	e0bff917 	ldw	r2,-28(fp)
   94c4c:	10004215 	stw	zero,264(r2)
   94c50:	e0bff917 	ldw	r2,-28(fp)
   94c54:	10004315 	stw	zero,268(r2)
   94c58:	e0bff917 	ldw	r2,-28(fp)
   94c5c:	10004415 	stw	zero,272(r2)
   94c60:	e0bff917 	ldw	r2,-28(fp)
   94c64:	10004515 	stw	zero,276(r2)
   94c68:	e0bff917 	ldw	r2,-28(fp)
   94c6c:	10004615 	stw	zero,280(r2)
   94c70:	e0bff917 	ldw	r2,-28(fp)
   94c74:	10004715 	stw	zero,284(r2)
   94c78:	e0bff917 	ldw	r2,-28(fp)
   94c7c:	10003505 	stb	zero,212(r2)
   94c80:	e0bff917 	ldw	r2,-28(fp)
   94c84:	10003705 	stb	zero,220(r2)
   94c88:	e0bff917 	ldw	r2,-28(fp)
   94c8c:	10003d15 	stw	zero,244(r2)
   94c90:	e0bff917 	ldw	r2,-28(fp)
   94c94:	10005215 	stw	zero,328(r2)
   94c98:	e0bff917 	ldw	r2,-28(fp)
   94c9c:	10005315 	stw	zero,332(r2)
   94ca0:	e0bff917 	ldw	r2,-28(fp)
   94ca4:	10005415 	stw	zero,336(r2)
   94ca8:	e0bff917 	ldw	r2,-28(fp)
   94cac:	10005515 	stw	zero,340(r2)
   94cb0:	e0bff917 	ldw	r2,-28(fp)
   94cb4:	1000b515 	stw	zero,724(r2)
   94cb8:	e0bff917 	ldw	r2,-28(fp)
   94cbc:	10007515 	stw	zero,468(r2)
   94cc0:	e0bff917 	ldw	r2,-28(fp)
   94cc4:	1000b715 	stw	zero,732(r2)
   94cc8:	e0bff917 	ldw	r2,-28(fp)
   94ccc:	1000b815 	stw	zero,736(r2)
   94cd0:	e0bff917 	ldw	r2,-28(fp)
   94cd4:	1000b915 	stw	zero,740(r2)
   94cd8:	e0bff917 	ldw	r2,-28(fp)
   94cdc:	1000ba15 	stw	zero,744(r2)
   94ce0:	e0bff917 	ldw	r2,-28(fp)
   94ce4:	1080bb04 	addi	r2,r2,748
   94ce8:	1009883a 	mov	r4,r2
   94cec:	01804504 	movi	r6,276
   94cf0:	000b883a 	mov	r5,zero
   94cf4:	00858600 	call	85860 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   94cf8:	e0bff917 	ldw	r2,-28(fp)
   94cfc:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   94d00:	e0bffb17 	ldw	r2,-20(fp)
   94d04:	10bff304 	addi	r2,r2,-52
   94d08:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   94d0c:	e0bffa17 	ldw	r2,-24(fp)
   94d10:	10c00c04 	addi	r3,r2,48
   94d14:	e0bffc17 	ldw	r2,-16(fp)
   94d18:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   94d1c:	e0bffa17 	ldw	r2,-24(fp)
   94d20:	10c00b04 	addi	r3,r2,44
   94d24:	e0bffd17 	ldw	r2,-12(fp)
   94d28:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   94d2c:	e0bffa17 	ldw	r2,-24(fp)
   94d30:	10c00a04 	addi	r3,r2,40
   94d34:	e0bff917 	ldw	r2,-28(fp)
   94d38:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   94d3c:	00800274 	movhi	r2,9
   94d40:	10928d04 	addi	r2,r2,18996
   94d44:	10c00104 	addi	r3,r2,4
   94d48:	e0bffa17 	ldw	r2,-24(fp)
   94d4c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   94d50:	e0bffa17 	ldw	r2,-24(fp)
}
   94d54:	e037883a 	mov	sp,fp
   94d58:	dfc00117 	ldw	ra,4(sp)
   94d5c:	df000017 	ldw	fp,0(sp)
   94d60:	dec00204 	addi	sp,sp,8
   94d64:	f800283a 	ret

00094d68 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   94d68:	defffe04 	addi	sp,sp,-8
   94d6c:	df000115 	stw	fp,4(sp)
   94d70:	df000104 	addi	fp,sp,4
   94d74:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   94d78:	e037883a 	mov	sp,fp
   94d7c:	df000017 	ldw	fp,0(sp)
   94d80:	dec00104 	addi	sp,sp,4
   94d84:	f800283a 	ret

00094d88 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   94d88:	defffe04 	addi	sp,sp,-8
   94d8c:	df000115 	stw	fp,4(sp)
   94d90:	df000104 	addi	fp,sp,4
   94d94:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   94d98:	e037883a 	mov	sp,fp
   94d9c:	df000017 	ldw	fp,0(sp)
   94da0:	dec00104 	addi	sp,sp,4
   94da4:	f800283a 	ret

00094da8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   94da8:	deffff04 	addi	sp,sp,-4
   94dac:	df000015 	stw	fp,0(sp)
   94db0:	d839883a 	mov	fp,sp
}
   94db4:	e037883a 	mov	sp,fp
   94db8:	df000017 	ldw	fp,0(sp)
   94dbc:	dec00104 	addi	sp,sp,4
   94dc0:	f800283a 	ret

00094dc4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   94dc4:	deffff04 	addi	sp,sp,-4
   94dc8:	df000015 	stw	fp,0(sp)
   94dcc:	d839883a 	mov	fp,sp
}
   94dd0:	e037883a 	mov	sp,fp
   94dd4:	df000017 	ldw	fp,0(sp)
   94dd8:	dec00104 	addi	sp,sp,4
   94ddc:	f800283a 	ret

00094de0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   94de0:	deffff04 	addi	sp,sp,-4
   94de4:	df000015 	stw	fp,0(sp)
   94de8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   94dec:	e037883a 	mov	sp,fp
   94df0:	df000017 	ldw	fp,0(sp)
   94df4:	dec00104 	addi	sp,sp,4
   94df8:	f800283a 	ret

00094dfc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   94dfc:	deffff04 	addi	sp,sp,-4
   94e00:	df000015 	stw	fp,0(sp)
   94e04:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   94e08:	e037883a 	mov	sp,fp
   94e0c:	df000017 	ldw	fp,0(sp)
   94e10:	dec00104 	addi	sp,sp,4
   94e14:	f800283a 	ret

00094e18 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   94e18:	deffff04 	addi	sp,sp,-4
   94e1c:	df000015 	stw	fp,0(sp)
   94e20:	d839883a 	mov	fp,sp
}
   94e24:	e037883a 	mov	sp,fp
   94e28:	df000017 	ldw	fp,0(sp)
   94e2c:	dec00104 	addi	sp,sp,4
   94e30:	f800283a 	ret

00094e34 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   94e34:	deffff04 	addi	sp,sp,-4
   94e38:	df000015 	stw	fp,0(sp)
   94e3c:	d839883a 	mov	fp,sp
}
   94e40:	e037883a 	mov	sp,fp
   94e44:	df000017 	ldw	fp,0(sp)
   94e48:	dec00104 	addi	sp,sp,4
   94e4c:	f800283a 	ret

00094e50 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   94e50:	defffe04 	addi	sp,sp,-8
   94e54:	df000115 	stw	fp,4(sp)
   94e58:	df000104 	addi	fp,sp,4
   94e5c:	e13fff15 	stw	r4,-4(fp)
}
   94e60:	e037883a 	mov	sp,fp
   94e64:	df000017 	ldw	fp,0(sp)
   94e68:	dec00104 	addi	sp,sp,4
   94e6c:	f800283a 	ret

00094e70 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   94e70:	defff904 	addi	sp,sp,-28
   94e74:	dfc00615 	stw	ra,24(sp)
   94e78:	df000515 	stw	fp,20(sp)
   94e7c:	df000504 	addi	fp,sp,20
   94e80:	e13ffd15 	stw	r4,-12(fp)
   94e84:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   94e88:	e0bffe17 	ldw	r2,-8(fp)
   94e8c:	10800017 	ldw	r2,0(r2)
   94e90:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   94e94:	e13ffd17 	ldw	r4,-12(fp)
   94e98:	00803fc0 	call	803fc <strlen>
   94e9c:	10800044 	addi	r2,r2,1
   94ea0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   94ea4:	00000d06 	br	94edc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   94ea8:	e0bffc17 	ldw	r2,-16(fp)
   94eac:	11000217 	ldw	r4,8(r2)
   94eb0:	e1bffb17 	ldw	r6,-20(fp)
   94eb4:	e17ffd17 	ldw	r5,-12(fp)
   94eb8:	00951740 	call	95174 <memcmp>
   94ebc:	1004c03a 	cmpne	r2,r2,zero
   94ec0:	1000031e 	bne	r2,zero,94ed0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   94ec4:	e0bffc17 	ldw	r2,-16(fp)
   94ec8:	e0bfff15 	stw	r2,-4(fp)
   94ecc:	00000706 	br	94eec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   94ed0:	e0bffc17 	ldw	r2,-16(fp)
   94ed4:	10800017 	ldw	r2,0(r2)
   94ed8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   94edc:	e0fffe17 	ldw	r3,-8(fp)
   94ee0:	e0bffc17 	ldw	r2,-16(fp)
   94ee4:	10fff01e 	bne	r2,r3,94ea8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   94ee8:	e03fff15 	stw	zero,-4(fp)
   94eec:	e0bfff17 	ldw	r2,-4(fp)
}
   94ef0:	e037883a 	mov	sp,fp
   94ef4:	dfc00117 	ldw	ra,4(sp)
   94ef8:	df000017 	ldw	fp,0(sp)
   94efc:	dec00204 	addi	sp,sp,8
   94f00:	f800283a 	ret

00094f04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   94f04:	defffa04 	addi	sp,sp,-24
   94f08:	dfc00515 	stw	ra,20(sp)
   94f0c:	df000415 	stw	fp,16(sp)
   94f10:	df000404 	addi	fp,sp,16
   94f14:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   94f18:	00800274 	movhi	r2,9
   94f1c:	109d0d04 	addi	r2,r2,29748
   94f20:	10800017 	ldw	r2,0(r2)
   94f24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   94f28:	00003306 	br	94ff8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   94f2c:	e0bffd17 	ldw	r2,-12(fp)
   94f30:	11000217 	ldw	r4,8(r2)
   94f34:	00803fc0 	call	803fc <strlen>
   94f38:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   94f3c:	e0bffd17 	ldw	r2,-12(fp)
   94f40:	10c00217 	ldw	r3,8(r2)
   94f44:	e0bffc17 	ldw	r2,-16(fp)
   94f48:	1885883a 	add	r2,r3,r2
   94f4c:	10bfffc4 	addi	r2,r2,-1
   94f50:	10800003 	ldbu	r2,0(r2)
   94f54:	10803fcc 	andi	r2,r2,255
   94f58:	1080201c 	xori	r2,r2,128
   94f5c:	10bfe004 	addi	r2,r2,-128
   94f60:	10800bd8 	cmpnei	r2,r2,47
   94f64:	1000031e 	bne	r2,zero,94f74 <alt_find_file+0x70>
    {
      len -= 1;
   94f68:	e0bffc17 	ldw	r2,-16(fp)
   94f6c:	10bfffc4 	addi	r2,r2,-1
   94f70:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   94f74:	e0bffc17 	ldw	r2,-16(fp)
   94f78:	1007883a 	mov	r3,r2
   94f7c:	e0bffe17 	ldw	r2,-8(fp)
   94f80:	1885883a 	add	r2,r3,r2
   94f84:	10800003 	ldbu	r2,0(r2)
   94f88:	10803fcc 	andi	r2,r2,255
   94f8c:	1080201c 	xori	r2,r2,128
   94f90:	10bfe004 	addi	r2,r2,-128
   94f94:	10800be0 	cmpeqi	r2,r2,47
   94f98:	10000a1e 	bne	r2,zero,94fc4 <alt_find_file+0xc0>
   94f9c:	e0bffc17 	ldw	r2,-16(fp)
   94fa0:	1007883a 	mov	r3,r2
   94fa4:	e0bffe17 	ldw	r2,-8(fp)
   94fa8:	1885883a 	add	r2,r3,r2
   94fac:	10800003 	ldbu	r2,0(r2)
   94fb0:	10803fcc 	andi	r2,r2,255
   94fb4:	1080201c 	xori	r2,r2,128
   94fb8:	10bfe004 	addi	r2,r2,-128
   94fbc:	1004c03a 	cmpne	r2,r2,zero
   94fc0:	10000a1e 	bne	r2,zero,94fec <alt_find_file+0xe8>
   94fc4:	e0bffd17 	ldw	r2,-12(fp)
   94fc8:	11000217 	ldw	r4,8(r2)
   94fcc:	e1bffc17 	ldw	r6,-16(fp)
   94fd0:	e17ffe17 	ldw	r5,-8(fp)
   94fd4:	00951740 	call	95174 <memcmp>
   94fd8:	1004c03a 	cmpne	r2,r2,zero
   94fdc:	1000031e 	bne	r2,zero,94fec <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   94fe0:	e0bffd17 	ldw	r2,-12(fp)
   94fe4:	e0bfff15 	stw	r2,-4(fp)
   94fe8:	00000806 	br	9500c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   94fec:	e0bffd17 	ldw	r2,-12(fp)
   94ff0:	10800017 	ldw	r2,0(r2)
   94ff4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   94ff8:	00c00274 	movhi	r3,9
   94ffc:	18dd0d04 	addi	r3,r3,29748
   95000:	e0bffd17 	ldw	r2,-12(fp)
   95004:	10ffc91e 	bne	r2,r3,94f2c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   95008:	e03fff15 	stw	zero,-4(fp)
   9500c:	e0bfff17 	ldw	r2,-4(fp)
}
   95010:	e037883a 	mov	sp,fp
   95014:	dfc00117 	ldw	ra,4(sp)
   95018:	df000017 	ldw	fp,0(sp)
   9501c:	dec00204 	addi	sp,sp,8
   95020:	f800283a 	ret

00095024 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   95024:	defff704 	addi	sp,sp,-36
   95028:	dfc00815 	stw	ra,32(sp)
   9502c:	df000715 	stw	fp,28(sp)
   95030:	dc000615 	stw	r16,24(sp)
   95034:	df000604 	addi	fp,sp,24
   95038:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   9503c:	00bffa04 	movi	r2,-24
   95040:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   95044:	008002b4 	movhi	r2,10
   95048:	10a3f604 	addi	r2,r2,-28712
   9504c:	10800017 	ldw	r2,0(r2)
   95050:	e0bffa15 	stw	r2,-24(fp)
   95054:	e03ffb0d 	sth	zero,-20(fp)
   95058:	e17ffb0b 	ldhu	r5,-20(fp)
   9505c:	e1bffe04 	addi	r6,fp,-8
   95060:	e13ffa17 	ldw	r4,-24(fp)
   95064:	00906ec0 	call	906ec <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   95068:	e03ffd15 	stw	zero,-12(fp)
   9506c:	00002006 	br	950f0 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
   95070:	e13ffd17 	ldw	r4,-12(fp)
   95074:	04000274 	movhi	r16,9
   95078:	84188c04 	addi	r16,r16,25136
   9507c:	01400304 	movi	r5,12
   95080:	008964c0 	call	8964c <__mulsi3>
   95084:	1405883a 	add	r2,r2,r16
   95088:	10800017 	ldw	r2,0(r2)
   9508c:	1004c03a 	cmpne	r2,r2,zero
   95090:	1000141e 	bne	r2,zero,950e4 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
   95094:	e13ffd17 	ldw	r4,-12(fp)
   95098:	04000274 	movhi	r16,9
   9509c:	84188c04 	addi	r16,r16,25136
   950a0:	01400304 	movi	r5,12
   950a4:	008964c0 	call	8964c <__mulsi3>
   950a8:	1407883a 	add	r3,r2,r16
   950ac:	e0bfff17 	ldw	r2,-4(fp)
   950b0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   950b4:	00800274 	movhi	r2,9
   950b8:	109d1104 	addi	r2,r2,29764
   950bc:	10c00017 	ldw	r3,0(r2)
   950c0:	e0bffd17 	ldw	r2,-12(fp)
   950c4:	1880040e 	bge	r3,r2,950d8 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
   950c8:	00c00274 	movhi	r3,9
   950cc:	18dd1104 	addi	r3,r3,29764
   950d0:	e0bffd17 	ldw	r2,-12(fp)
   950d4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   950d8:	e0bffd17 	ldw	r2,-12(fp)
   950dc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   950e0:	00000606 	br	950fc <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   950e4:	e0bffd17 	ldw	r2,-12(fp)
   950e8:	10800044 	addi	r2,r2,1
   950ec:	e0bffd15 	stw	r2,-12(fp)
   950f0:	e0bffd17 	ldw	r2,-12(fp)
   950f4:	10800810 	cmplti	r2,r2,32
   950f8:	103fdd1e 	bne	r2,zero,95070 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   950fc:	008002b4 	movhi	r2,10
   95100:	10a3f604 	addi	r2,r2,-28712
   95104:	11000017 	ldw	r4,0(r2)
   95108:	0090ae40 	call	90ae4 <OSSemPost>

  return rc;
   9510c:	e0bffc17 	ldw	r2,-16(fp)
}
   95110:	e037883a 	mov	sp,fp
   95114:	dfc00217 	ldw	ra,8(sp)
   95118:	df000117 	ldw	fp,4(sp)
   9511c:	dc000017 	ldw	r16,0(sp)
   95120:	dec00304 	addi	sp,sp,12
   95124:	f800283a 	ret

00095128 <atexit>:
   95128:	200b883a 	mov	r5,r4
   9512c:	000d883a 	mov	r6,zero
   95130:	0009883a 	mov	r4,zero
   95134:	000f883a 	mov	r7,zero
   95138:	00951e81 	jmpi	951e8 <__register_exitproc>

0009513c <exit>:
   9513c:	defffe04 	addi	sp,sp,-8
   95140:	000b883a 	mov	r5,zero
   95144:	dc000015 	stw	r16,0(sp)
   95148:	dfc00115 	stw	ra,4(sp)
   9514c:	2021883a 	mov	r16,r4
   95150:	00953200 	call	95320 <__call_exitprocs>
   95154:	00800274 	movhi	r2,9
   95158:	109d0804 	addi	r2,r2,29728
   9515c:	11000017 	ldw	r4,0(r2)
   95160:	20800f17 	ldw	r2,60(r4)
   95164:	10000126 	beq	r2,zero,9516c <exit+0x30>
   95168:	103ee83a 	callr	r2
   9516c:	8009883a 	mov	r4,r16
   95170:	00955100 	call	95510 <_exit>

00095174 <memcmp>:
   95174:	00c000c4 	movi	r3,3
   95178:	1980032e 	bgeu	r3,r6,95188 <memcmp+0x14>
   9517c:	2144b03a 	or	r2,r4,r5
   95180:	10c4703a 	and	r2,r2,r3
   95184:	10000f26 	beq	r2,zero,951c4 <memcmp+0x50>
   95188:	31ffffc4 	addi	r7,r6,-1
   9518c:	3000061e 	bne	r6,zero,951a8 <memcmp+0x34>
   95190:	00000a06 	br	951bc <memcmp+0x48>
   95194:	39ffffc4 	addi	r7,r7,-1
   95198:	00bfffc4 	movi	r2,-1
   9519c:	21000044 	addi	r4,r4,1
   951a0:	29400044 	addi	r5,r5,1
   951a4:	38800526 	beq	r7,r2,951bc <memcmp+0x48>
   951a8:	20c00003 	ldbu	r3,0(r4)
   951ac:	28800003 	ldbu	r2,0(r5)
   951b0:	18bff826 	beq	r3,r2,95194 <memcmp+0x20>
   951b4:	1885c83a 	sub	r2,r3,r2
   951b8:	f800283a 	ret
   951bc:	0005883a 	mov	r2,zero
   951c0:	f800283a 	ret
   951c4:	180f883a 	mov	r7,r3
   951c8:	20c00017 	ldw	r3,0(r4)
   951cc:	28800017 	ldw	r2,0(r5)
   951d0:	18bfed1e 	bne	r3,r2,95188 <memcmp+0x14>
   951d4:	31bfff04 	addi	r6,r6,-4
   951d8:	21000104 	addi	r4,r4,4
   951dc:	29400104 	addi	r5,r5,4
   951e0:	39bff936 	bltu	r7,r6,951c8 <memcmp+0x54>
   951e4:	003fe806 	br	95188 <memcmp+0x14>

000951e8 <__register_exitproc>:
   951e8:	defffa04 	addi	sp,sp,-24
   951ec:	00800274 	movhi	r2,9
   951f0:	109d0804 	addi	r2,r2,29728
   951f4:	dc000015 	stw	r16,0(sp)
   951f8:	14000017 	ldw	r16,0(r2)
   951fc:	dd000415 	stw	r20,16(sp)
   95200:	2829883a 	mov	r20,r5
   95204:	81405217 	ldw	r5,328(r16)
   95208:	dcc00315 	stw	r19,12(sp)
   9520c:	dc800215 	stw	r18,8(sp)
   95210:	dc400115 	stw	r17,4(sp)
   95214:	dfc00515 	stw	ra,20(sp)
   95218:	2023883a 	mov	r17,r4
   9521c:	3027883a 	mov	r19,r6
   95220:	3825883a 	mov	r18,r7
   95224:	28002526 	beq	r5,zero,952bc <__register_exitproc+0xd4>
   95228:	29000117 	ldw	r4,4(r5)
   9522c:	008007c4 	movi	r2,31
   95230:	11002716 	blt	r2,r4,952d0 <__register_exitproc+0xe8>
   95234:	8800101e 	bne	r17,zero,95278 <__register_exitproc+0x90>
   95238:	2105883a 	add	r2,r4,r4
   9523c:	1085883a 	add	r2,r2,r2
   95240:	20c00044 	addi	r3,r4,1
   95244:	1145883a 	add	r2,r2,r5
   95248:	0009883a 	mov	r4,zero
   9524c:	15000215 	stw	r20,8(r2)
   95250:	28c00115 	stw	r3,4(r5)
   95254:	2005883a 	mov	r2,r4
   95258:	dfc00517 	ldw	ra,20(sp)
   9525c:	dd000417 	ldw	r20,16(sp)
   95260:	dcc00317 	ldw	r19,12(sp)
   95264:	dc800217 	ldw	r18,8(sp)
   95268:	dc400117 	ldw	r17,4(sp)
   9526c:	dc000017 	ldw	r16,0(sp)
   95270:	dec00604 	addi	sp,sp,24
   95274:	f800283a 	ret
   95278:	29802204 	addi	r6,r5,136
   9527c:	00800044 	movi	r2,1
   95280:	110e983a 	sll	r7,r2,r4
   95284:	30c04017 	ldw	r3,256(r6)
   95288:	2105883a 	add	r2,r4,r4
   9528c:	1085883a 	add	r2,r2,r2
   95290:	1185883a 	add	r2,r2,r6
   95294:	19c6b03a 	or	r3,r3,r7
   95298:	14802015 	stw	r18,128(r2)
   9529c:	14c00015 	stw	r19,0(r2)
   952a0:	00800084 	movi	r2,2
   952a4:	30c04015 	stw	r3,256(r6)
   952a8:	88bfe31e 	bne	r17,r2,95238 <__register_exitproc+0x50>
   952ac:	30804117 	ldw	r2,260(r6)
   952b0:	11c4b03a 	or	r2,r2,r7
   952b4:	30804115 	stw	r2,260(r6)
   952b8:	003fdf06 	br	95238 <__register_exitproc+0x50>
   952bc:	008002b4 	movhi	r2,10
   952c0:	10b8e804 	addi	r2,r2,-7264
   952c4:	100b883a 	mov	r5,r2
   952c8:	80805215 	stw	r2,328(r16)
   952cc:	003fd606 	br	95228 <__register_exitproc+0x40>
   952d0:	00800034 	movhi	r2,0
   952d4:	10800004 	addi	r2,r2,0
   952d8:	1000021e 	bne	r2,zero,952e4 <__register_exitproc+0xfc>
   952dc:	013fffc4 	movi	r4,-1
   952e0:	003fdc06 	br	95254 <__register_exitproc+0x6c>
   952e4:	01006404 	movi	r4,400
   952e8:	103ee83a 	callr	r2
   952ec:	1007883a 	mov	r3,r2
   952f0:	103ffa26 	beq	r2,zero,952dc <__register_exitproc+0xf4>
   952f4:	80805217 	ldw	r2,328(r16)
   952f8:	180b883a 	mov	r5,r3
   952fc:	18000115 	stw	zero,4(r3)
   95300:	18800015 	stw	r2,0(r3)
   95304:	80c05215 	stw	r3,328(r16)
   95308:	18006215 	stw	zero,392(r3)
   9530c:	18006315 	stw	zero,396(r3)
   95310:	0009883a 	mov	r4,zero
   95314:	883fc826 	beq	r17,zero,95238 <__register_exitproc+0x50>
   95318:	003fd706 	br	95278 <__register_exitproc+0x90>

0009531c <register_fini>:
   9531c:	f800283a 	ret

00095320 <__call_exitprocs>:
   95320:	00800274 	movhi	r2,9
   95324:	109d0804 	addi	r2,r2,29728
   95328:	10800017 	ldw	r2,0(r2)
   9532c:	defff304 	addi	sp,sp,-52
   95330:	df000b15 	stw	fp,44(sp)
   95334:	d8800115 	stw	r2,4(sp)
   95338:	00800034 	movhi	r2,0
   9533c:	10800004 	addi	r2,r2,0
   95340:	1005003a 	cmpeq	r2,r2,zero
   95344:	d8800215 	stw	r2,8(sp)
   95348:	d8800117 	ldw	r2,4(sp)
   9534c:	dd400815 	stw	r21,32(sp)
   95350:	dd000715 	stw	r20,28(sp)
   95354:	10805204 	addi	r2,r2,328
   95358:	dfc00c15 	stw	ra,48(sp)
   9535c:	ddc00a15 	stw	r23,40(sp)
   95360:	dd800915 	stw	r22,36(sp)
   95364:	dcc00615 	stw	r19,24(sp)
   95368:	dc800515 	stw	r18,20(sp)
   9536c:	dc400415 	stw	r17,16(sp)
   95370:	dc000315 	stw	r16,12(sp)
   95374:	282b883a 	mov	r21,r5
   95378:	2039883a 	mov	fp,r4
   9537c:	d8800015 	stw	r2,0(sp)
   95380:	2829003a 	cmpeq	r20,r5,zero
   95384:	d8800117 	ldw	r2,4(sp)
   95388:	14405217 	ldw	r17,328(r2)
   9538c:	88001026 	beq	r17,zero,953d0 <__call_exitprocs+0xb0>
   95390:	ddc00017 	ldw	r23,0(sp)
   95394:	88800117 	ldw	r2,4(r17)
   95398:	8c802204 	addi	r18,r17,136
   9539c:	143fffc4 	addi	r16,r2,-1
   953a0:	80000916 	blt	r16,zero,953c8 <__call_exitprocs+0xa8>
   953a4:	05bfffc4 	movi	r22,-1
   953a8:	a000151e 	bne	r20,zero,95400 <__call_exitprocs+0xe0>
   953ac:	8409883a 	add	r4,r16,r16
   953b0:	2105883a 	add	r2,r4,r4
   953b4:	1485883a 	add	r2,r2,r18
   953b8:	10c02017 	ldw	r3,128(r2)
   953bc:	a8c01126 	beq	r21,r3,95404 <__call_exitprocs+0xe4>
   953c0:	843fffc4 	addi	r16,r16,-1
   953c4:	85bff81e 	bne	r16,r22,953a8 <__call_exitprocs+0x88>
   953c8:	d8800217 	ldw	r2,8(sp)
   953cc:	10003126 	beq	r2,zero,95494 <__call_exitprocs+0x174>
   953d0:	dfc00c17 	ldw	ra,48(sp)
   953d4:	df000b17 	ldw	fp,44(sp)
   953d8:	ddc00a17 	ldw	r23,40(sp)
   953dc:	dd800917 	ldw	r22,36(sp)
   953e0:	dd400817 	ldw	r21,32(sp)
   953e4:	dd000717 	ldw	r20,28(sp)
   953e8:	dcc00617 	ldw	r19,24(sp)
   953ec:	dc800517 	ldw	r18,20(sp)
   953f0:	dc400417 	ldw	r17,16(sp)
   953f4:	dc000317 	ldw	r16,12(sp)
   953f8:	dec00d04 	addi	sp,sp,52
   953fc:	f800283a 	ret
   95400:	8409883a 	add	r4,r16,r16
   95404:	88c00117 	ldw	r3,4(r17)
   95408:	2105883a 	add	r2,r4,r4
   9540c:	1445883a 	add	r2,r2,r17
   95410:	18ffffc4 	addi	r3,r3,-1
   95414:	11800217 	ldw	r6,8(r2)
   95418:	1c001526 	beq	r3,r16,95470 <__call_exitprocs+0x150>
   9541c:	10000215 	stw	zero,8(r2)
   95420:	303fe726 	beq	r6,zero,953c0 <__call_exitprocs+0xa0>
   95424:	00c00044 	movi	r3,1
   95428:	1c06983a 	sll	r3,r3,r16
   9542c:	90804017 	ldw	r2,256(r18)
   95430:	8cc00117 	ldw	r19,4(r17)
   95434:	1884703a 	and	r2,r3,r2
   95438:	10001426 	beq	r2,zero,9548c <__call_exitprocs+0x16c>
   9543c:	90804117 	ldw	r2,260(r18)
   95440:	1884703a 	and	r2,r3,r2
   95444:	10000c1e 	bne	r2,zero,95478 <__call_exitprocs+0x158>
   95448:	2105883a 	add	r2,r4,r4
   9544c:	1485883a 	add	r2,r2,r18
   95450:	11400017 	ldw	r5,0(r2)
   95454:	e009883a 	mov	r4,fp
   95458:	303ee83a 	callr	r6
   9545c:	88800117 	ldw	r2,4(r17)
   95460:	98bfc81e 	bne	r19,r2,95384 <__call_exitprocs+0x64>
   95464:	b8800017 	ldw	r2,0(r23)
   95468:	147fd526 	beq	r2,r17,953c0 <__call_exitprocs+0xa0>
   9546c:	003fc506 	br	95384 <__call_exitprocs+0x64>
   95470:	8c000115 	stw	r16,4(r17)
   95474:	003fea06 	br	95420 <__call_exitprocs+0x100>
   95478:	2105883a 	add	r2,r4,r4
   9547c:	1485883a 	add	r2,r2,r18
   95480:	11000017 	ldw	r4,0(r2)
   95484:	303ee83a 	callr	r6
   95488:	003ff406 	br	9545c <__call_exitprocs+0x13c>
   9548c:	303ee83a 	callr	r6
   95490:	003ff206 	br	9545c <__call_exitprocs+0x13c>
   95494:	88800117 	ldw	r2,4(r17)
   95498:	1000081e 	bne	r2,zero,954bc <__call_exitprocs+0x19c>
   9549c:	89000017 	ldw	r4,0(r17)
   954a0:	20000726 	beq	r4,zero,954c0 <__call_exitprocs+0x1a0>
   954a4:	b9000015 	stw	r4,0(r23)
   954a8:	8809883a 	mov	r4,r17
   954ac:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   954b0:	bc400017 	ldw	r17,0(r23)
   954b4:	883fb71e 	bne	r17,zero,95394 <__call_exitprocs+0x74>
   954b8:	003fc506 	br	953d0 <__call_exitprocs+0xb0>
   954bc:	89000017 	ldw	r4,0(r17)
   954c0:	882f883a 	mov	r23,r17
   954c4:	2023883a 	mov	r17,r4
   954c8:	883fb21e 	bne	r17,zero,95394 <__call_exitprocs+0x74>
   954cc:	003fc006 	br	953d0 <__call_exitprocs+0xb0>

000954d0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   954d0:	defffd04 	addi	sp,sp,-12
   954d4:	df000215 	stw	fp,8(sp)
   954d8:	df000204 	addi	fp,sp,8
   954dc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   954e0:	e0bfff17 	ldw	r2,-4(fp)
   954e4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   954e8:	e0bffe17 	ldw	r2,-8(fp)
   954ec:	1005003a 	cmpeq	r2,r2,zero
   954f0:	1000021e 	bne	r2,zero,954fc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   954f4:	002af070 	cmpltui	zero,zero,43969
   954f8:	00000106 	br	95500 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   954fc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   95500:	e037883a 	mov	sp,fp
   95504:	df000017 	ldw	fp,0(sp)
   95508:	dec00104 	addi	sp,sp,4
   9550c:	f800283a 	ret

00095510 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   95510:	defffd04 	addi	sp,sp,-12
   95514:	dfc00215 	stw	ra,8(sp)
   95518:	df000115 	stw	fp,4(sp)
   9551c:	df000104 	addi	fp,sp,4
   95520:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   95524:	008002b4 	movhi	r2,10
   95528:	10a3fe44 	addi	r2,r2,-28679
   9552c:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   95530:	e13fff17 	ldw	r4,-4(fp)
   95534:	00954d00 	call	954d0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   95538:	003fff06 	br	95538 <_exit+0x28>
   9553c:	0009531c 	xori	zero,zero,9548
